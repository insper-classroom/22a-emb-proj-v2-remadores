
RTOS-BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000095cc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004095cc  004095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  004095d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000031c  204009b8  00409f8c  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400cd4  0040a2a8  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402cd8  0040c2ac  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00023acb  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004895  00000000  00000000  0004450a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a829  00000000  00000000  00048d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001020  00000000  00000000  000535c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001228  00000000  00000000  000545e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002318a  00000000  00000000  00055810  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012fcc  00000000  00000000  0007899a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094cd0  00000000  00000000  0008b966  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003a1c  00000000  00000000  00120638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2c 40 20 d1 0d 40 00 cf 0d 40 00 cf 0d 40 00     .,@ ..@...@...@.
  400010:	cf 0d 40 00 cf 0d 40 00 cf 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a9 11 40 00 cf 0d 40 00 00 00 00 00 49 12 40 00     ..@...@.....I.@.
  40003c:	b1 12 40 00 cf 0d 40 00 cf 0d 40 00 cf 0d 40 00     ..@...@...@...@.
  40004c:	cf 0d 40 00 cf 0d 40 00 cf 0d 40 00 cf 0d 40 00     ..@...@...@...@.
  40005c:	cf 0d 40 00 cf 0d 40 00 00 00 00 00 0d 0a 40 00     ..@...@.......@.
  40006c:	21 0a 40 00 35 0a 40 00 cf 0d 40 00 cf 0d 40 00     !.@.5.@...@...@.
  40007c:	cf 0d 40 00 49 0a 40 00 5d 0a 40 00 cf 0d 40 00     ..@.I.@.].@...@.
  40008c:	cf 0d 40 00 cf 0d 40 00 cf 0d 40 00 cf 0d 40 00     ..@...@...@...@.
  40009c:	cf 0d 40 00 6d 34 40 00 cf 0d 40 00 cf 0d 40 00     ..@.m4@...@...@.
  4000ac:	cf 0d 40 00 cf 0d 40 00 8d 07 40 00 cf 0d 40 00     ..@...@...@...@.
  4000bc:	cf 0d 40 00 cf 0d 40 00 cf 0d 40 00 cf 0d 40 00     ..@...@...@...@.
  4000cc:	cf 0d 40 00 00 00 00 00 cf 0d 40 00 00 00 00 00     ..@.......@.....
  4000dc:	cf 0d 40 00 a1 07 40 00 cf 0d 40 00 cf 0d 40 00     ..@...@...@...@.
  4000ec:	cf 0d 40 00 cf 0d 40 00 cf 0d 40 00 cf 0d 40 00     ..@...@...@...@.
  4000fc:	cf 0d 40 00 cf 0d 40 00 cf 0d 40 00 cf 0d 40 00     ..@...@...@...@.
  40010c:	cf 0d 40 00 cf 0d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 cf 0d 40 00 cf 0d 40 00 cf 0d 40 00     ......@...@...@.
  40012c:	cf 0d 40 00 cf 0d 40 00 00 00 00 00 cf 0d 40 00     ..@...@.......@.
  40013c:	cf 0d 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	004095d4 	.word	0x004095d4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004095d4 	.word	0x004095d4
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	004095d4 	.word	0x004095d4
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400fa5 	.word	0x00400fa5
  4001f8:	00400b0d 	.word	0x00400b0d
  4001fc:	00400b61 	.word	0x00400b61
  400200:	00400b71 	.word	0x00400b71
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400b81 	.word	0x00400b81
  400210:	00400a71 	.word	0x00400a71
  400214:	00400aa9 	.word	0x00400aa9
  400218:	00400e99 	.word	0x00400e99

0040021c <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  40021c:	2a00      	cmp	r2, #0
  40021e:	d054      	beq.n	4002ca <usart_serial_write_packet+0xae>
{
  400220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400224:	4692      	mov	sl, r2
  400226:	4606      	mov	r6, r0
  400228:	460f      	mov	r7, r1
  40022a:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40022c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4002e8 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  400230:	4d27      	ldr	r5, [pc, #156]	; (4002d0 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400232:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4002ec <usart_serial_write_packet+0xd0>
  400236:	e006      	b.n	400246 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400238:	4621      	mov	r1, r4
  40023a:	4640      	mov	r0, r8
  40023c:	47a8      	blx	r5
  40023e:	2800      	cmp	r0, #0
  400240:	d1fa      	bne.n	400238 <usart_serial_write_packet+0x1c>
	while (len) {
  400242:	45ba      	cmp	sl, r7
  400244:	d03e      	beq.n	4002c4 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  400246:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  40024a:	4546      	cmp	r6, r8
  40024c:	d0f4      	beq.n	400238 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40024e:	454e      	cmp	r6, r9
  400250:	d016      	beq.n	400280 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400252:	4b20      	ldr	r3, [pc, #128]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400254:	429e      	cmp	r6, r3
  400256:	d019      	beq.n	40028c <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400258:	4b1f      	ldr	r3, [pc, #124]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40025a:	429e      	cmp	r6, r3
  40025c:	d01c      	beq.n	400298 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40025e:	4b1f      	ldr	r3, [pc, #124]	; (4002dc <usart_serial_write_packet+0xc0>)
  400260:	429e      	cmp	r6, r3
  400262:	d01f      	beq.n	4002a4 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400264:	4b1e      	ldr	r3, [pc, #120]	; (4002e0 <usart_serial_write_packet+0xc4>)
  400266:	429e      	cmp	r6, r3
  400268:	d024      	beq.n	4002b4 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40026a:	4b1e      	ldr	r3, [pc, #120]	; (4002e4 <usart_serial_write_packet+0xc8>)
  40026c:	429e      	cmp	r6, r3
  40026e:	d1e8      	bne.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400270:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4002f0 <usart_serial_write_packet+0xd4>
  400274:	4621      	mov	r1, r4
  400276:	481b      	ldr	r0, [pc, #108]	; (4002e4 <usart_serial_write_packet+0xc8>)
  400278:	47d8      	blx	fp
  40027a:	2800      	cmp	r0, #0
  40027c:	d1fa      	bne.n	400274 <usart_serial_write_packet+0x58>
  40027e:	e7e0      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400280:	4621      	mov	r1, r4
  400282:	4648      	mov	r0, r9
  400284:	47a8      	blx	r5
  400286:	2800      	cmp	r0, #0
  400288:	d1fa      	bne.n	400280 <usart_serial_write_packet+0x64>
  40028a:	e7da      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40028c:	4621      	mov	r1, r4
  40028e:	4811      	ldr	r0, [pc, #68]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400290:	47a8      	blx	r5
  400292:	2800      	cmp	r0, #0
  400294:	d1fa      	bne.n	40028c <usart_serial_write_packet+0x70>
  400296:	e7d4      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400298:	4621      	mov	r1, r4
  40029a:	480f      	ldr	r0, [pc, #60]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40029c:	47a8      	blx	r5
  40029e:	2800      	cmp	r0, #0
  4002a0:	d1fa      	bne.n	400298 <usart_serial_write_packet+0x7c>
  4002a2:	e7ce      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002a4:	f8df b048 	ldr.w	fp, [pc, #72]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002a8:	4621      	mov	r1, r4
  4002aa:	480c      	ldr	r0, [pc, #48]	; (4002dc <usart_serial_write_packet+0xc0>)
  4002ac:	47d8      	blx	fp
  4002ae:	2800      	cmp	r0, #0
  4002b0:	d1fa      	bne.n	4002a8 <usart_serial_write_packet+0x8c>
  4002b2:	e7c6      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002b4:	f8df b038 	ldr.w	fp, [pc, #56]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002b8:	4621      	mov	r1, r4
  4002ba:	4809      	ldr	r0, [pc, #36]	; (4002e0 <usart_serial_write_packet+0xc4>)
  4002bc:	47d8      	blx	fp
  4002be:	2800      	cmp	r0, #0
  4002c0:	d1fa      	bne.n	4002b8 <usart_serial_write_packet+0x9c>
  4002c2:	e7be      	b.n	400242 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  4002c4:	2000      	movs	r0, #0
  4002c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002ca:	2000      	movs	r0, #0
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop
  4002d0:	00400c8f 	.word	0x00400c8f
  4002d4:	400e1a00 	.word	0x400e1a00
  4002d8:	400e1c00 	.word	0x400e1c00
  4002dc:	40024000 	.word	0x40024000
  4002e0:	40028000 	.word	0x40028000
  4002e4:	4002c000 	.word	0x4002c000
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	400e0a00 	.word	0x400e0a00
  4002f0:	00400da1 	.word	0x00400da1

004002f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4002f8:	b980      	cbnz	r0, 40031c <_read+0x28>
  4002fa:	460c      	mov	r4, r1
  4002fc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4002fe:	2a00      	cmp	r2, #0
  400300:	dd0f      	ble.n	400322 <_read+0x2e>
  400302:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400304:	4e08      	ldr	r6, [pc, #32]	; (400328 <_read+0x34>)
  400306:	4d09      	ldr	r5, [pc, #36]	; (40032c <_read+0x38>)
  400308:	6830      	ldr	r0, [r6, #0]
  40030a:	4621      	mov	r1, r4
  40030c:	682b      	ldr	r3, [r5, #0]
  40030e:	4798      	blx	r3
		ptr++;
  400310:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400312:	42bc      	cmp	r4, r7
  400314:	d1f8      	bne.n	400308 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400316:	4640      	mov	r0, r8
  400318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40031c:	f04f 38ff 	mov.w	r8, #4294967295
  400320:	e7f9      	b.n	400316 <_read+0x22>
	for (; len > 0; --len) {
  400322:	4680      	mov	r8, r0
  400324:	e7f7      	b.n	400316 <_read+0x22>
  400326:	bf00      	nop
  400328:	20400bd0 	.word	0x20400bd0
  40032c:	20400bc8 	.word	0x20400bc8

00400330 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400330:	3801      	subs	r0, #1
  400332:	2802      	cmp	r0, #2
  400334:	d815      	bhi.n	400362 <_write+0x32>
{
  400336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40033a:	460e      	mov	r6, r1
  40033c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40033e:	b19a      	cbz	r2, 400368 <_write+0x38>
  400340:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400342:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40037c <_write+0x4c>
  400346:	4f0c      	ldr	r7, [pc, #48]	; (400378 <_write+0x48>)
  400348:	f8d8 0000 	ldr.w	r0, [r8]
  40034c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400350:	683b      	ldr	r3, [r7, #0]
  400352:	4798      	blx	r3
  400354:	2800      	cmp	r0, #0
  400356:	db0a      	blt.n	40036e <_write+0x3e>
  400358:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40035a:	3c01      	subs	r4, #1
  40035c:	d1f4      	bne.n	400348 <_write+0x18>
  40035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400362:	f04f 30ff 	mov.w	r0, #4294967295
  400366:	4770      	bx	lr
	for (; len != 0; --len) {
  400368:	4610      	mov	r0, r2
  40036a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40036e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400376:	bf00      	nop
  400378:	20400bcc 	.word	0x20400bcc
  40037c:	20400bd0 	.word	0x20400bd0

00400380 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400382:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400386:	4b5c      	ldr	r3, [pc, #368]	; (4004f8 <board_init+0x178>)
  400388:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40038e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400392:	4b5a      	ldr	r3, [pc, #360]	; (4004fc <board_init+0x17c>)
  400394:	2200      	movs	r2, #0
  400396:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40039a:	695a      	ldr	r2, [r3, #20]
  40039c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4003a0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4003a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003a6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4003aa:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4003ae:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4003b2:	f007 0007 	and.w	r0, r7, #7
  4003b6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4003b8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4003bc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4003c0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4003c4:	f3bf 8f4f 	dsb	sy
  4003c8:	f04f 34ff 	mov.w	r4, #4294967295
  4003cc:	fa04 fc00 	lsl.w	ip, r4, r0
  4003d0:	fa06 f000 	lsl.w	r0, r6, r0
  4003d4:	fa04 f40e 	lsl.w	r4, r4, lr
  4003d8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4003dc:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4003de:	463a      	mov	r2, r7
  4003e0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4003e2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4003e6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4003ea:	3a01      	subs	r2, #1
  4003ec:	4423      	add	r3, r4
  4003ee:	f1b2 3fff 	cmp.w	r2, #4294967295
  4003f2:	d1f6      	bne.n	4003e2 <board_init+0x62>
        } while(sets--);
  4003f4:	3e01      	subs	r6, #1
  4003f6:	4460      	add	r0, ip
  4003f8:	f1b6 3fff 	cmp.w	r6, #4294967295
  4003fc:	d1ef      	bne.n	4003de <board_init+0x5e>
  4003fe:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400402:	4b3e      	ldr	r3, [pc, #248]	; (4004fc <board_init+0x17c>)
  400404:	695a      	ldr	r2, [r3, #20]
  400406:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40040a:	615a      	str	r2, [r3, #20]
  40040c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400410:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400414:	4a3a      	ldr	r2, [pc, #232]	; (400500 <board_init+0x180>)
  400416:	493b      	ldr	r1, [pc, #236]	; (400504 <board_init+0x184>)
  400418:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40041a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40041e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400424:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400428:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40042c:	f022 0201 	bic.w	r2, r2, #1
  400430:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400434:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400438:	f022 0201 	bic.w	r2, r2, #1
  40043c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400444:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400448:	200a      	movs	r0, #10
  40044a:	4c2f      	ldr	r4, [pc, #188]	; (400508 <board_init+0x188>)
  40044c:	47a0      	blx	r4
  40044e:	200b      	movs	r0, #11
  400450:	47a0      	blx	r4
  400452:	200c      	movs	r0, #12
  400454:	47a0      	blx	r4
  400456:	2010      	movs	r0, #16
  400458:	47a0      	blx	r4
  40045a:	2011      	movs	r0, #17
  40045c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40045e:	4b2b      	ldr	r3, [pc, #172]	; (40050c <board_init+0x18c>)
  400460:	f44f 7280 	mov.w	r2, #256	; 0x100
  400464:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40046a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40046c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400470:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400474:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400476:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40047a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40047c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400480:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400482:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400488:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40048a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40048e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400490:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400492:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400496:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400498:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40049c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4004a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4004a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004b8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004c0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004c4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004c6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4004c8:	4a11      	ldr	r2, [pc, #68]	; (400510 <board_init+0x190>)
  4004ca:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004ce:	f043 0310 	orr.w	r3, r3, #16
  4004d2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <board_init+0x194>)
  4004d8:	2210      	movs	r2, #16
  4004da:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004e0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004e2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4004e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004ea:	4311      	orrs	r1, r2
  4004ec:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4004ee:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004f0:	4311      	orrs	r1, r2
  4004f2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004f4:	605a      	str	r2, [r3, #4]
  4004f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004f8:	400e1850 	.word	0x400e1850
  4004fc:	e000ed00 	.word	0xe000ed00
  400500:	400e0c00 	.word	0x400e0c00
  400504:	5a00080c 	.word	0x5a00080c
  400508:	00400b91 	.word	0x00400b91
  40050c:	400e1200 	.word	0x400e1200
  400510:	40088000 	.word	0x40088000
  400514:	400e1000 	.word	0x400e1000

00400518 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400518:	b570      	push	{r4, r5, r6, lr}
  40051a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40051c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40051e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400520:	4013      	ands	r3, r2
  400522:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400524:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400526:	4e1c      	ldr	r6, [pc, #112]	; (400598 <afec_process_callback+0x80>)
  400528:	4d1c      	ldr	r5, [pc, #112]	; (40059c <afec_process_callback+0x84>)
  40052a:	42a8      	cmp	r0, r5
  40052c:	bf14      	ite	ne
  40052e:	2000      	movne	r0, #0
  400530:	2001      	moveq	r0, #1
  400532:	0105      	lsls	r5, r0, #4
  400534:	e00b      	b.n	40054e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400536:	2c0e      	cmp	r4, #14
  400538:	d81e      	bhi.n	400578 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40053a:	9a01      	ldr	r2, [sp, #4]
  40053c:	f104 010c 	add.w	r1, r4, #12
  400540:	2301      	movs	r3, #1
  400542:	408b      	lsls	r3, r1
  400544:	4213      	tst	r3, r2
  400546:	d110      	bne.n	40056a <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400548:	3401      	adds	r4, #1
  40054a:	2c10      	cmp	r4, #16
  40054c:	d022      	beq.n	400594 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40054e:	2c0b      	cmp	r4, #11
  400550:	d8f1      	bhi.n	400536 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400552:	9a01      	ldr	r2, [sp, #4]
  400554:	2301      	movs	r3, #1
  400556:	40a3      	lsls	r3, r4
  400558:	4213      	tst	r3, r2
  40055a:	d0f5      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40055c:	192b      	adds	r3, r5, r4
  40055e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400562:	2b00      	cmp	r3, #0
  400564:	d0f0      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400566:	4798      	blx	r3
  400568:	e7ee      	b.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40056a:	192b      	adds	r3, r5, r4
  40056c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400570:	2b00      	cmp	r3, #0
  400572:	d0e9      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400574:	4798      	blx	r3
  400576:	e7e7      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400578:	9a01      	ldr	r2, [sp, #4]
  40057a:	f104 010f 	add.w	r1, r4, #15
  40057e:	2301      	movs	r3, #1
  400580:	408b      	lsls	r3, r1
  400582:	4213      	tst	r3, r2
  400584:	d0e0      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400586:	192b      	adds	r3, r5, r4
  400588:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40058c:	2b00      	cmp	r3, #0
  40058e:	d0db      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400590:	4798      	blx	r3
  400592:	e7d9      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400594:	b002      	add	sp, #8
  400596:	bd70      	pop	{r4, r5, r6, pc}
  400598:	20400bd4 	.word	0x20400bd4
  40059c:	40064000 	.word	0x40064000

004005a0 <afec_ch_set_config>:
{
  4005a0:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4005a2:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4005a4:	2301      	movs	r3, #1
  4005a6:	408b      	lsls	r3, r1
  4005a8:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4005ac:	7815      	ldrb	r5, [r2, #0]
  4005ae:	2d00      	cmp	r5, #0
  4005b0:	bf08      	it	eq
  4005b2:	2300      	moveq	r3, #0
  4005b4:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4005b6:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4005b8:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4005ba:	004b      	lsls	r3, r1, #1
  4005bc:	2103      	movs	r1, #3
  4005be:	4099      	lsls	r1, r3
  4005c0:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4005c4:	7851      	ldrb	r1, [r2, #1]
  4005c6:	4099      	lsls	r1, r3
  4005c8:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4005ca:	6541      	str	r1, [r0, #84]	; 0x54
}
  4005cc:	bc30      	pop	{r4, r5}
  4005ce:	4770      	bx	lr

004005d0 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4005d0:	784b      	ldrb	r3, [r1, #1]
  4005d2:	780a      	ldrb	r2, [r1, #0]
  4005d4:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4005d6:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4005d8:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4005da:	884b      	ldrh	r3, [r1, #2]
  4005dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4005e0:	6743      	str	r3, [r0, #116]	; 0x74
  4005e2:	4770      	bx	lr

004005e4 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4005e4:	2200      	movs	r2, #0
  4005e6:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4005e8:	4b08      	ldr	r3, [pc, #32]	; (40060c <afec_get_config_defaults+0x28>)
  4005ea:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4005ec:	4b08      	ldr	r3, [pc, #32]	; (400610 <afec_get_config_defaults+0x2c>)
  4005ee:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4005f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4005f4:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4005f6:	2302      	movs	r3, #2
  4005f8:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4005fa:	2301      	movs	r3, #1
  4005fc:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4005fe:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400600:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400602:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400604:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400606:	7583      	strb	r3, [r0, #22]
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	11e1a300 	.word	0x11e1a300
  400610:	005b8d80 	.word	0x005b8d80

00400614 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400614:	2300      	movs	r3, #0
  400616:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400618:	2301      	movs	r3, #1
  40061a:	7043      	strb	r3, [r0, #1]
  40061c:	4770      	bx	lr

0040061e <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  40061e:	2300      	movs	r3, #0
  400620:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400622:	2320      	movs	r3, #32
  400624:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400626:	23ff      	movs	r3, #255	; 0xff
  400628:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  40062a:	f640 73ff 	movw	r3, #4095	; 0xfff
  40062e:	8083      	strh	r3, [r0, #4]
  400630:	4770      	bx	lr
	...

00400634 <afec_init>:
	return afec->AFEC_ISR;
  400634:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400636:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  40063a:	d001      	beq.n	400640 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40063c:	2019      	movs	r0, #25
  40063e:	4770      	bx	lr
{
  400640:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400642:	2301      	movs	r3, #1
  400644:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400646:	7ccb      	ldrb	r3, [r1, #19]
  400648:	2b00      	cmp	r3, #0
  40064a:	bf18      	it	ne
  40064c:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400650:	684b      	ldr	r3, [r1, #4]
  400652:	688c      	ldr	r4, [r1, #8]
  400654:	fbb3 f3f4 	udiv	r3, r3, r4
  400658:	3b01      	subs	r3, #1
  40065a:	021b      	lsls	r3, r3, #8
  40065c:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40065e:	68cc      	ldr	r4, [r1, #12]
  400660:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400664:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400666:	7c0c      	ldrb	r4, [r1, #16]
  400668:	0624      	lsls	r4, r4, #24
  40066a:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40066e:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400670:	7c4c      	ldrb	r4, [r1, #17]
  400672:	0724      	lsls	r4, r4, #28
  400674:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400678:	4323      	orrs	r3, r4
  40067a:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  40067c:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40067e:	7d0b      	ldrb	r3, [r1, #20]
  400680:	2b00      	cmp	r3, #0
  400682:	bf14      	ite	ne
  400684:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400688:	2300      	moveq	r3, #0
  40068a:	680a      	ldr	r2, [r1, #0]
  40068c:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40068e:	7d4a      	ldrb	r2, [r1, #21]
  400690:	2a00      	cmp	r2, #0
  400692:	bf14      	ite	ne
  400694:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400698:	2200      	moveq	r2, #0
			(config->resolution) |
  40069a:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40069c:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40069e:	7d8b      	ldrb	r3, [r1, #22]
  4006a0:	021b      	lsls	r3, r3, #8
  4006a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4006a6:	f043 030c 	orr.w	r3, r3, #12
  4006aa:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4006ae:	4b0f      	ldr	r3, [pc, #60]	; (4006ec <afec_init+0xb8>)
  4006b0:	4298      	cmp	r0, r3
  4006b2:	d006      	beq.n	4006c2 <afec_init+0x8e>
	if(afec == AFEC1) {
  4006b4:	4b0e      	ldr	r3, [pc, #56]	; (4006f0 <afec_init+0xbc>)
  4006b6:	4298      	cmp	r0, r3
  4006b8:	d00d      	beq.n	4006d6 <afec_init+0xa2>
	return STATUS_OK;
  4006ba:	2000      	movs	r0, #0
}
  4006bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006c0:	4770      	bx	lr
  4006c2:	4b0c      	ldr	r3, [pc, #48]	; (4006f4 <afec_init+0xc0>)
  4006c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4006c8:	2200      	movs	r2, #0
  4006ca:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006ce:	428b      	cmp	r3, r1
  4006d0:	d1fb      	bne.n	4006ca <afec_init+0x96>
	return STATUS_OK;
  4006d2:	2000      	movs	r0, #0
  4006d4:	e7f2      	b.n	4006bc <afec_init+0x88>
  4006d6:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <afec_init+0xc4>)
  4006d8:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  4006dc:	2200      	movs	r2, #0
  4006de:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006e2:	428b      	cmp	r3, r1
  4006e4:	d1fb      	bne.n	4006de <afec_init+0xaa>
	return STATUS_OK;
  4006e6:	2000      	movs	r0, #0
  4006e8:	e7e8      	b.n	4006bc <afec_init+0x88>
  4006ea:	bf00      	nop
  4006ec:	4003c000 	.word	0x4003c000
  4006f0:	40064000 	.word	0x40064000
  4006f4:	20400bd0 	.word	0x20400bd0
  4006f8:	20400c14 	.word	0x20400c14

004006fc <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4006fc:	4b0c      	ldr	r3, [pc, #48]	; (400730 <afec_enable_interrupt+0x34>)
  4006fe:	4299      	cmp	r1, r3
  400700:	d007      	beq.n	400712 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400702:	290b      	cmp	r1, #11
  400704:	d80b      	bhi.n	40071e <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400706:	d006      	beq.n	400716 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400708:	2301      	movs	r3, #1
  40070a:	fa03 f101 	lsl.w	r1, r3, r1
  40070e:	6241      	str	r1, [r0, #36]	; 0x24
  400710:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400712:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400714:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400716:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40071a:	6243      	str	r3, [r0, #36]	; 0x24
  40071c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40071e:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400720:	bf94      	ite	ls
  400722:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400724:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400726:	2301      	movs	r3, #1
  400728:	fa03 f101 	lsl.w	r1, r3, r1
  40072c:	6241      	str	r1, [r0, #36]	; 0x24
  40072e:	4770      	bx	lr
  400730:	47000fff 	.word	0x47000fff

00400734 <afec_set_callback>:
{
  400734:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400736:	4c11      	ldr	r4, [pc, #68]	; (40077c <afec_set_callback+0x48>)
  400738:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  40073a:	bf0c      	ite	eq
  40073c:	2410      	moveq	r4, #16
  40073e:	2400      	movne	r4, #0
  400740:	440c      	add	r4, r1
  400742:	4d0f      	ldr	r5, [pc, #60]	; (400780 <afec_set_callback+0x4c>)
  400744:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400748:	d10a      	bne.n	400760 <afec_set_callback+0x2c>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40074a:	4a0e      	ldr	r2, [pc, #56]	; (400784 <afec_set_callback+0x50>)
  40074c:	f44f 7480 	mov.w	r4, #256	; 0x100
  400750:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400754:	015b      	lsls	r3, r3, #5
  400756:	b2db      	uxtb	r3, r3
  400758:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40075c:	6054      	str	r4, [r2, #4]
  40075e:	e009      	b.n	400774 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400760:	4a08      	ldr	r2, [pc, #32]	; (400784 <afec_set_callback+0x50>)
  400762:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400766:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40076a:	015b      	lsls	r3, r3, #5
  40076c:	b2db      	uxtb	r3, r3
  40076e:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400772:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400774:	4b04      	ldr	r3, [pc, #16]	; (400788 <afec_set_callback+0x54>)
  400776:	4798      	blx	r3
  400778:	bd38      	pop	{r3, r4, r5, pc}
  40077a:	bf00      	nop
  40077c:	40064000 	.word	0x40064000
  400780:	20400bd4 	.word	0x20400bd4
  400784:	e000e100 	.word	0xe000e100
  400788:	004006fd 	.word	0x004006fd

0040078c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40078c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40078e:	4802      	ldr	r0, [pc, #8]	; (400798 <AFEC0_Handler+0xc>)
  400790:	4b02      	ldr	r3, [pc, #8]	; (40079c <AFEC0_Handler+0x10>)
  400792:	4798      	blx	r3
  400794:	bd08      	pop	{r3, pc}
  400796:	bf00      	nop
  400798:	4003c000 	.word	0x4003c000
  40079c:	00400519 	.word	0x00400519

004007a0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4007a0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4007a2:	4802      	ldr	r0, [pc, #8]	; (4007ac <AFEC1_Handler+0xc>)
  4007a4:	4b02      	ldr	r3, [pc, #8]	; (4007b0 <AFEC1_Handler+0x10>)
  4007a6:	4798      	blx	r3
  4007a8:	bd08      	pop	{r3, pc}
  4007aa:	bf00      	nop
  4007ac:	40064000 	.word	0x40064000
  4007b0:	00400519 	.word	0x00400519

004007b4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4007b4:	b500      	push	{lr}
  4007b6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4007b8:	4b13      	ldr	r3, [pc, #76]	; (400808 <afec_enable+0x54>)
  4007ba:	4298      	cmp	r0, r3
  4007bc:	bf0c      	ite	eq
  4007be:	2028      	moveq	r0, #40	; 0x28
  4007c0:	201d      	movne	r0, #29
  4007c2:	4b12      	ldr	r3, [pc, #72]	; (40080c <afec_enable+0x58>)
  4007c4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4007c6:	4b12      	ldr	r3, [pc, #72]	; (400810 <afec_enable+0x5c>)
  4007c8:	789b      	ldrb	r3, [r3, #2]
  4007ca:	2bff      	cmp	r3, #255	; 0xff
  4007cc:	d01a      	beq.n	400804 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4007ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4007d2:	fab3 f383 	clz	r3, r3
  4007d6:	095b      	lsrs	r3, r3, #5
  4007d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4007da:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4007dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4007e0:	2200      	movs	r2, #0
  4007e2:	4b0c      	ldr	r3, [pc, #48]	; (400814 <afec_enable+0x60>)
  4007e4:	701a      	strb	r2, [r3, #0]
	return flags;
  4007e6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4007e8:	4a09      	ldr	r2, [pc, #36]	; (400810 <afec_enable+0x5c>)
  4007ea:	7893      	ldrb	r3, [r2, #2]
  4007ec:	3301      	adds	r3, #1
  4007ee:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007f0:	b129      	cbz	r1, 4007fe <afec_enable+0x4a>
		cpu_irq_enable();
  4007f2:	2201      	movs	r2, #1
  4007f4:	4b07      	ldr	r3, [pc, #28]	; (400814 <afec_enable+0x60>)
  4007f6:	701a      	strb	r2, [r3, #0]
  4007f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007fc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4007fe:	b003      	add	sp, #12
  400800:	f85d fb04 	ldr.w	pc, [sp], #4
  400804:	e7fe      	b.n	400804 <afec_enable+0x50>
  400806:	bf00      	nop
  400808:	40064000 	.word	0x40064000
  40080c:	00400b91 	.word	0x00400b91
  400810:	20400bc0 	.word	0x20400bc0
  400814:	20400000 	.word	0x20400000

00400818 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400818:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40081c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400820:	d105      	bne.n	40082e <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400822:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400824:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400826:	bf14      	ite	ne
  400828:	2001      	movne	r0, #1
  40082a:	2000      	moveq	r0, #0
  40082c:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  40082e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400830:	e7f8      	b.n	400824 <pio_get+0xc>

00400832 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400832:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400834:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400838:	d03a      	beq.n	4008b0 <pio_set_peripheral+0x7e>
  40083a:	d813      	bhi.n	400864 <pio_set_peripheral+0x32>
  40083c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400840:	d025      	beq.n	40088e <pio_set_peripheral+0x5c>
  400842:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400846:	d10a      	bne.n	40085e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400848:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40084a:	4313      	orrs	r3, r2
  40084c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40084e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400850:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400852:	400b      	ands	r3, r1
  400854:	ea23 0302 	bic.w	r3, r3, r2
  400858:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40085a:	6042      	str	r2, [r0, #4]
  40085c:	4770      	bx	lr
	switch (ul_type) {
  40085e:	2900      	cmp	r1, #0
  400860:	d1fb      	bne.n	40085a <pio_set_peripheral+0x28>
  400862:	4770      	bx	lr
  400864:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400868:	d021      	beq.n	4008ae <pio_set_peripheral+0x7c>
  40086a:	d809      	bhi.n	400880 <pio_set_peripheral+0x4e>
  40086c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400870:	d1f3      	bne.n	40085a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400872:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400874:	4313      	orrs	r3, r2
  400876:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400878:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40087a:	4313      	orrs	r3, r2
  40087c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40087e:	e7ec      	b.n	40085a <pio_set_peripheral+0x28>
	switch (ul_type) {
  400880:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400884:	d013      	beq.n	4008ae <pio_set_peripheral+0x7c>
  400886:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40088a:	d010      	beq.n	4008ae <pio_set_peripheral+0x7c>
  40088c:	e7e5      	b.n	40085a <pio_set_peripheral+0x28>
{
  40088e:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400890:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400892:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400894:	43d3      	mvns	r3, r2
  400896:	4021      	ands	r1, r4
  400898:	461c      	mov	r4, r3
  40089a:	4019      	ands	r1, r3
  40089c:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40089e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008a0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4008a2:	400b      	ands	r3, r1
  4008a4:	4023      	ands	r3, r4
  4008a6:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4008a8:	6042      	str	r2, [r0, #4]
}
  4008aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008ae:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4008b4:	400b      	ands	r3, r1
  4008b6:	ea23 0302 	bic.w	r3, r3, r2
  4008ba:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008bc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008be:	4313      	orrs	r3, r2
  4008c0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008c2:	e7ca      	b.n	40085a <pio_set_peripheral+0x28>

004008c4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4008c4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4008c6:	f012 0f01 	tst.w	r2, #1
  4008ca:	d10d      	bne.n	4008e8 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4008cc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4008ce:	f012 0f0a 	tst.w	r2, #10
  4008d2:	d00b      	beq.n	4008ec <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4008d4:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4008d6:	f012 0f02 	tst.w	r2, #2
  4008da:	d109      	bne.n	4008f0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4008dc:	f012 0f08 	tst.w	r2, #8
  4008e0:	d008      	beq.n	4008f4 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4008e2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4008e6:	e005      	b.n	4008f4 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4008e8:	6641      	str	r1, [r0, #100]	; 0x64
  4008ea:	e7f0      	b.n	4008ce <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4008ec:	6241      	str	r1, [r0, #36]	; 0x24
  4008ee:	e7f2      	b.n	4008d6 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4008f0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4008f4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4008f6:	6001      	str	r1, [r0, #0]
  4008f8:	4770      	bx	lr

004008fa <pio_set_output>:
{
  4008fa:	b410      	push	{r4}
  4008fc:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4008fe:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400900:	b94c      	cbnz	r4, 400916 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400902:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400904:	b14b      	cbz	r3, 40091a <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400906:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400908:	b94a      	cbnz	r2, 40091e <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40090a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40090c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40090e:	6001      	str	r1, [r0, #0]
}
  400910:	f85d 4b04 	ldr.w	r4, [sp], #4
  400914:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400916:	6641      	str	r1, [r0, #100]	; 0x64
  400918:	e7f4      	b.n	400904 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40091a:	6541      	str	r1, [r0, #84]	; 0x54
  40091c:	e7f4      	b.n	400908 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40091e:	6301      	str	r1, [r0, #48]	; 0x30
  400920:	e7f4      	b.n	40090c <pio_set_output+0x12>
	...

00400924 <pio_configure>:
{
  400924:	b570      	push	{r4, r5, r6, lr}
  400926:	b082      	sub	sp, #8
  400928:	4605      	mov	r5, r0
  40092a:	4616      	mov	r6, r2
  40092c:	461c      	mov	r4, r3
	switch (ul_type) {
  40092e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400932:	d014      	beq.n	40095e <pio_configure+0x3a>
  400934:	d90a      	bls.n	40094c <pio_configure+0x28>
  400936:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40093a:	d024      	beq.n	400986 <pio_configure+0x62>
  40093c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400940:	d021      	beq.n	400986 <pio_configure+0x62>
  400942:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400946:	d017      	beq.n	400978 <pio_configure+0x54>
		return 0;
  400948:	2000      	movs	r0, #0
  40094a:	e01a      	b.n	400982 <pio_configure+0x5e>
	switch (ul_type) {
  40094c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400950:	d005      	beq.n	40095e <pio_configure+0x3a>
  400952:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400956:	d002      	beq.n	40095e <pio_configure+0x3a>
  400958:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40095c:	d1f4      	bne.n	400948 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40095e:	4632      	mov	r2, r6
  400960:	4628      	mov	r0, r5
  400962:	4b11      	ldr	r3, [pc, #68]	; (4009a8 <pio_configure+0x84>)
  400964:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400966:	f014 0f01 	tst.w	r4, #1
  40096a:	d102      	bne.n	400972 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40096c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40096e:	2001      	movs	r0, #1
  400970:	e007      	b.n	400982 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400972:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400974:	2001      	movs	r0, #1
  400976:	e004      	b.n	400982 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400978:	461a      	mov	r2, r3
  40097a:	4631      	mov	r1, r6
  40097c:	4b0b      	ldr	r3, [pc, #44]	; (4009ac <pio_configure+0x88>)
  40097e:	4798      	blx	r3
	return 1;
  400980:	2001      	movs	r0, #1
}
  400982:	b002      	add	sp, #8
  400984:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400986:	f004 0301 	and.w	r3, r4, #1
  40098a:	9300      	str	r3, [sp, #0]
  40098c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400990:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400994:	bf14      	ite	ne
  400996:	2200      	movne	r2, #0
  400998:	2201      	moveq	r2, #1
  40099a:	4631      	mov	r1, r6
  40099c:	4628      	mov	r0, r5
  40099e:	4c04      	ldr	r4, [pc, #16]	; (4009b0 <pio_configure+0x8c>)
  4009a0:	47a0      	blx	r4
	return 1;
  4009a2:	2001      	movs	r0, #1
		break;
  4009a4:	e7ed      	b.n	400982 <pio_configure+0x5e>
  4009a6:	bf00      	nop
  4009a8:	00400833 	.word	0x00400833
  4009ac:	004008c5 	.word	0x004008c5
  4009b0:	004008fb 	.word	0x004008fb

004009b4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4009b4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4009b6:	4770      	bx	lr

004009b8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4009b8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4009ba:	4770      	bx	lr

004009bc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009c0:	4604      	mov	r4, r0
  4009c2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009c4:	4b0e      	ldr	r3, [pc, #56]	; (400a00 <pio_handler_process+0x44>)
  4009c6:	4798      	blx	r3
  4009c8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4009ca:	4620      	mov	r0, r4
  4009cc:	4b0d      	ldr	r3, [pc, #52]	; (400a04 <pio_handler_process+0x48>)
  4009ce:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4009d0:	4005      	ands	r5, r0
  4009d2:	d013      	beq.n	4009fc <pio_handler_process+0x40>
  4009d4:	4c0c      	ldr	r4, [pc, #48]	; (400a08 <pio_handler_process+0x4c>)
  4009d6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4009da:	e003      	b.n	4009e4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4009dc:	42b4      	cmp	r4, r6
  4009de:	d00d      	beq.n	4009fc <pio_handler_process+0x40>
  4009e0:	3410      	adds	r4, #16
		while (status != 0) {
  4009e2:	b15d      	cbz	r5, 4009fc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4009e4:	6820      	ldr	r0, [r4, #0]
  4009e6:	4540      	cmp	r0, r8
  4009e8:	d1f8      	bne.n	4009dc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4009ea:	6861      	ldr	r1, [r4, #4]
  4009ec:	4229      	tst	r1, r5
  4009ee:	d0f5      	beq.n	4009dc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4009f0:	68e3      	ldr	r3, [r4, #12]
  4009f2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4009f4:	6863      	ldr	r3, [r4, #4]
  4009f6:	ea25 0503 	bic.w	r5, r5, r3
  4009fa:	e7ef      	b.n	4009dc <pio_handler_process+0x20>
  4009fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a00:	004009b5 	.word	0x004009b5
  400a04:	004009b9 	.word	0x004009b9
  400a08:	204009d4 	.word	0x204009d4

00400a0c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400a0e:	210a      	movs	r1, #10
  400a10:	4801      	ldr	r0, [pc, #4]	; (400a18 <PIOA_Handler+0xc>)
  400a12:	4b02      	ldr	r3, [pc, #8]	; (400a1c <PIOA_Handler+0x10>)
  400a14:	4798      	blx	r3
  400a16:	bd08      	pop	{r3, pc}
  400a18:	400e0e00 	.word	0x400e0e00
  400a1c:	004009bd 	.word	0x004009bd

00400a20 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400a20:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400a22:	210b      	movs	r1, #11
  400a24:	4801      	ldr	r0, [pc, #4]	; (400a2c <PIOB_Handler+0xc>)
  400a26:	4b02      	ldr	r3, [pc, #8]	; (400a30 <PIOB_Handler+0x10>)
  400a28:	4798      	blx	r3
  400a2a:	bd08      	pop	{r3, pc}
  400a2c:	400e1000 	.word	0x400e1000
  400a30:	004009bd 	.word	0x004009bd

00400a34 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400a34:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400a36:	210c      	movs	r1, #12
  400a38:	4801      	ldr	r0, [pc, #4]	; (400a40 <PIOC_Handler+0xc>)
  400a3a:	4b02      	ldr	r3, [pc, #8]	; (400a44 <PIOC_Handler+0x10>)
  400a3c:	4798      	blx	r3
  400a3e:	bd08      	pop	{r3, pc}
  400a40:	400e1200 	.word	0x400e1200
  400a44:	004009bd 	.word	0x004009bd

00400a48 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400a48:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400a4a:	2110      	movs	r1, #16
  400a4c:	4801      	ldr	r0, [pc, #4]	; (400a54 <PIOD_Handler+0xc>)
  400a4e:	4b02      	ldr	r3, [pc, #8]	; (400a58 <PIOD_Handler+0x10>)
  400a50:	4798      	blx	r3
  400a52:	bd08      	pop	{r3, pc}
  400a54:	400e1400 	.word	0x400e1400
  400a58:	004009bd 	.word	0x004009bd

00400a5c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400a5c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400a5e:	2111      	movs	r1, #17
  400a60:	4801      	ldr	r0, [pc, #4]	; (400a68 <PIOE_Handler+0xc>)
  400a62:	4b02      	ldr	r3, [pc, #8]	; (400a6c <PIOE_Handler+0x10>)
  400a64:	4798      	blx	r3
  400a66:	bd08      	pop	{r3, pc}
  400a68:	400e1600 	.word	0x400e1600
  400a6c:	004009bd 	.word	0x004009bd

00400a70 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400a70:	2803      	cmp	r0, #3
  400a72:	d011      	beq.n	400a98 <pmc_mck_set_division+0x28>
  400a74:	2804      	cmp	r0, #4
  400a76:	d012      	beq.n	400a9e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400a78:	2802      	cmp	r0, #2
  400a7a:	bf0c      	ite	eq
  400a7c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400a80:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400a82:	4a08      	ldr	r2, [pc, #32]	; (400aa4 <pmc_mck_set_division+0x34>)
  400a84:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400a8a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400a8c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a8e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a90:	f013 0f08 	tst.w	r3, #8
  400a94:	d0fb      	beq.n	400a8e <pmc_mck_set_division+0x1e>
}
  400a96:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400a98:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400a9c:	e7f1      	b.n	400a82 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400aa2:	e7ee      	b.n	400a82 <pmc_mck_set_division+0x12>
  400aa4:	400e0600 	.word	0x400e0600

00400aa8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400aa8:	4a17      	ldr	r2, [pc, #92]	; (400b08 <pmc_switch_mck_to_pllack+0x60>)
  400aaa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400ab0:	4318      	orrs	r0, r3
  400ab2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ab4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ab6:	f013 0f08 	tst.w	r3, #8
  400aba:	d10a      	bne.n	400ad2 <pmc_switch_mck_to_pllack+0x2a>
  400abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ac0:	4911      	ldr	r1, [pc, #68]	; (400b08 <pmc_switch_mck_to_pllack+0x60>)
  400ac2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ac4:	f012 0f08 	tst.w	r2, #8
  400ac8:	d103      	bne.n	400ad2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400aca:	3b01      	subs	r3, #1
  400acc:	d1f9      	bne.n	400ac2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400ace:	2001      	movs	r0, #1
  400ad0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ad2:	4a0d      	ldr	r2, [pc, #52]	; (400b08 <pmc_switch_mck_to_pllack+0x60>)
  400ad4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ad6:	f023 0303 	bic.w	r3, r3, #3
  400ada:	f043 0302 	orr.w	r3, r3, #2
  400ade:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ae0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ae2:	f013 0f08 	tst.w	r3, #8
  400ae6:	d10a      	bne.n	400afe <pmc_switch_mck_to_pllack+0x56>
  400ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400aec:	4906      	ldr	r1, [pc, #24]	; (400b08 <pmc_switch_mck_to_pllack+0x60>)
  400aee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400af0:	f012 0f08 	tst.w	r2, #8
  400af4:	d105      	bne.n	400b02 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400af6:	3b01      	subs	r3, #1
  400af8:	d1f9      	bne.n	400aee <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400afa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400afc:	4770      	bx	lr
	return 0;
  400afe:	2000      	movs	r0, #0
  400b00:	4770      	bx	lr
  400b02:	2000      	movs	r0, #0
  400b04:	4770      	bx	lr
  400b06:	bf00      	nop
  400b08:	400e0600 	.word	0x400e0600

00400b0c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400b0c:	b9a0      	cbnz	r0, 400b38 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b0e:	480e      	ldr	r0, [pc, #56]	; (400b48 <pmc_switch_mainck_to_xtal+0x3c>)
  400b10:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400b12:	0209      	lsls	r1, r1, #8
  400b14:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b16:	4a0d      	ldr	r2, [pc, #52]	; (400b4c <pmc_switch_mainck_to_xtal+0x40>)
  400b18:	401a      	ands	r2, r3
  400b1a:	4b0d      	ldr	r3, [pc, #52]	; (400b50 <pmc_switch_mainck_to_xtal+0x44>)
  400b1c:	4313      	orrs	r3, r2
  400b1e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b20:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400b22:	4602      	mov	r2, r0
  400b24:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b26:	f013 0f01 	tst.w	r3, #1
  400b2a:	d0fb      	beq.n	400b24 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b2c:	4a06      	ldr	r2, [pc, #24]	; (400b48 <pmc_switch_mainck_to_xtal+0x3c>)
  400b2e:	6a11      	ldr	r1, [r2, #32]
  400b30:	4b08      	ldr	r3, [pc, #32]	; (400b54 <pmc_switch_mainck_to_xtal+0x48>)
  400b32:	430b      	orrs	r3, r1
  400b34:	6213      	str	r3, [r2, #32]
  400b36:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b38:	4903      	ldr	r1, [pc, #12]	; (400b48 <pmc_switch_mainck_to_xtal+0x3c>)
  400b3a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b3c:	4a06      	ldr	r2, [pc, #24]	; (400b58 <pmc_switch_mainck_to_xtal+0x4c>)
  400b3e:	401a      	ands	r2, r3
  400b40:	4b06      	ldr	r3, [pc, #24]	; (400b5c <pmc_switch_mainck_to_xtal+0x50>)
  400b42:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b44:	620b      	str	r3, [r1, #32]
  400b46:	4770      	bx	lr
  400b48:	400e0600 	.word	0x400e0600
  400b4c:	ffc8fffc 	.word	0xffc8fffc
  400b50:	00370001 	.word	0x00370001
  400b54:	01370000 	.word	0x01370000
  400b58:	fec8fffc 	.word	0xfec8fffc
  400b5c:	01370002 	.word	0x01370002

00400b60 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b60:	4b02      	ldr	r3, [pc, #8]	; (400b6c <pmc_osc_is_ready_mainck+0xc>)
  400b62:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b64:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400b68:	4770      	bx	lr
  400b6a:	bf00      	nop
  400b6c:	400e0600 	.word	0x400e0600

00400b70 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b74:	4b01      	ldr	r3, [pc, #4]	; (400b7c <pmc_disable_pllack+0xc>)
  400b76:	629a      	str	r2, [r3, #40]	; 0x28
  400b78:	4770      	bx	lr
  400b7a:	bf00      	nop
  400b7c:	400e0600 	.word	0x400e0600

00400b80 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b80:	4b02      	ldr	r3, [pc, #8]	; (400b8c <pmc_is_locked_pllack+0xc>)
  400b82:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b84:	f000 0002 	and.w	r0, r0, #2
  400b88:	4770      	bx	lr
  400b8a:	bf00      	nop
  400b8c:	400e0600 	.word	0x400e0600

00400b90 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400b90:	283f      	cmp	r0, #63	; 0x3f
  400b92:	d81e      	bhi.n	400bd2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400b94:	281f      	cmp	r0, #31
  400b96:	d80c      	bhi.n	400bb2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400b98:	4b11      	ldr	r3, [pc, #68]	; (400be0 <pmc_enable_periph_clk+0x50>)
  400b9a:	699a      	ldr	r2, [r3, #24]
  400b9c:	2301      	movs	r3, #1
  400b9e:	4083      	lsls	r3, r0
  400ba0:	4393      	bics	r3, r2
  400ba2:	d018      	beq.n	400bd6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ba4:	2301      	movs	r3, #1
  400ba6:	fa03 f000 	lsl.w	r0, r3, r0
  400baa:	4b0d      	ldr	r3, [pc, #52]	; (400be0 <pmc_enable_periph_clk+0x50>)
  400bac:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400bae:	2000      	movs	r0, #0
  400bb0:	4770      	bx	lr
		ul_id -= 32;
  400bb2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400bb4:	4b0a      	ldr	r3, [pc, #40]	; (400be0 <pmc_enable_periph_clk+0x50>)
  400bb6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400bba:	2301      	movs	r3, #1
  400bbc:	4083      	lsls	r3, r0
  400bbe:	4393      	bics	r3, r2
  400bc0:	d00b      	beq.n	400bda <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400bc2:	2301      	movs	r3, #1
  400bc4:	fa03 f000 	lsl.w	r0, r3, r0
  400bc8:	4b05      	ldr	r3, [pc, #20]	; (400be0 <pmc_enable_periph_clk+0x50>)
  400bca:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400bce:	2000      	movs	r0, #0
  400bd0:	4770      	bx	lr
		return 1;
  400bd2:	2001      	movs	r0, #1
  400bd4:	4770      	bx	lr
	return 0;
  400bd6:	2000      	movs	r0, #0
  400bd8:	4770      	bx	lr
  400bda:	2000      	movs	r0, #0
}
  400bdc:	4770      	bx	lr
  400bde:	bf00      	nop
  400be0:	400e0600 	.word	0x400e0600

00400be4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400be4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400be6:	0189      	lsls	r1, r1, #6
  400be8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400bea:	2402      	movs	r4, #2
  400bec:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400bee:	f04f 31ff 	mov.w	r1, #4294967295
  400bf2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400bf4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400bf6:	605a      	str	r2, [r3, #4]
}
  400bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bfc:	4770      	bx	lr

00400bfe <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400bfe:	0189      	lsls	r1, r1, #6
  400c00:	2305      	movs	r3, #5
  400c02:	5043      	str	r3, [r0, r1]
  400c04:	4770      	bx	lr

00400c06 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400c06:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400c0a:	61ca      	str	r2, [r1, #28]
  400c0c:	4770      	bx	lr

00400c0e <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c0e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400c12:	624a      	str	r2, [r1, #36]	; 0x24
  400c14:	4770      	bx	lr

00400c16 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c16:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400c1a:	6a08      	ldr	r0, [r1, #32]
}
  400c1c:	4770      	bx	lr

00400c1e <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400c1e:	b4f0      	push	{r4, r5, r6, r7}
  400c20:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c22:	2402      	movs	r4, #2
  400c24:	9401      	str	r4, [sp, #4]
  400c26:	2408      	movs	r4, #8
  400c28:	9402      	str	r4, [sp, #8]
  400c2a:	2420      	movs	r4, #32
  400c2c:	9403      	str	r4, [sp, #12]
  400c2e:	2480      	movs	r4, #128	; 0x80
  400c30:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400c32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400c34:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c36:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400c38:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400c3c:	d814      	bhi.n	400c68 <tc_find_mck_divisor+0x4a>
  400c3e:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400c40:	42a0      	cmp	r0, r4
  400c42:	d217      	bcs.n	400c74 <tc_find_mck_divisor+0x56>
  400c44:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400c46:	af01      	add	r7, sp, #4
  400c48:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400c4c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400c50:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400c52:	4284      	cmp	r4, r0
  400c54:	d30a      	bcc.n	400c6c <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400c56:	4286      	cmp	r6, r0
  400c58:	d90d      	bls.n	400c76 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400c5a:	3501      	adds	r5, #1
	for (ul_index = 0;
  400c5c:	2d05      	cmp	r5, #5
  400c5e:	d1f3      	bne.n	400c48 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400c60:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400c62:	b006      	add	sp, #24
  400c64:	bcf0      	pop	{r4, r5, r6, r7}
  400c66:	4770      	bx	lr
			return 0;
  400c68:	2000      	movs	r0, #0
  400c6a:	e7fa      	b.n	400c62 <tc_find_mck_divisor+0x44>
  400c6c:	2000      	movs	r0, #0
  400c6e:	e7f8      	b.n	400c62 <tc_find_mck_divisor+0x44>
	return 1;
  400c70:	2001      	movs	r0, #1
  400c72:	e7f6      	b.n	400c62 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400c74:	2500      	movs	r5, #0
	if (p_uldiv) {
  400c76:	b12a      	cbz	r2, 400c84 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400c78:	a906      	add	r1, sp, #24
  400c7a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400c7e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400c82:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400c84:	2b00      	cmp	r3, #0
  400c86:	d0f3      	beq.n	400c70 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400c88:	601d      	str	r5, [r3, #0]
	return 1;
  400c8a:	2001      	movs	r0, #1
  400c8c:	e7e9      	b.n	400c62 <tc_find_mck_divisor+0x44>

00400c8e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400c8e:	6943      	ldr	r3, [r0, #20]
  400c90:	f013 0f02 	tst.w	r3, #2
  400c94:	d002      	beq.n	400c9c <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400c96:	61c1      	str	r1, [r0, #28]
	return 0;
  400c98:	2000      	movs	r0, #0
  400c9a:	4770      	bx	lr
		return 1;
  400c9c:	2001      	movs	r0, #1
}
  400c9e:	4770      	bx	lr

00400ca0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400ca0:	6943      	ldr	r3, [r0, #20]
  400ca2:	f013 0f01 	tst.w	r3, #1
  400ca6:	d003      	beq.n	400cb0 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400ca8:	6983      	ldr	r3, [r0, #24]
  400caa:	700b      	strb	r3, [r1, #0]
	return 0;
  400cac:	2000      	movs	r0, #0
  400cae:	4770      	bx	lr
		return 1;
  400cb0:	2001      	movs	r0, #1
}
  400cb2:	4770      	bx	lr

00400cb4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400cb4:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400cb6:	010b      	lsls	r3, r1, #4
  400cb8:	4293      	cmp	r3, r2
  400cba:	d914      	bls.n	400ce6 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400cbc:	00c9      	lsls	r1, r1, #3
  400cbe:	084b      	lsrs	r3, r1, #1
  400cc0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400cc4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400cc8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400cca:	1e5c      	subs	r4, r3, #1
  400ccc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cd0:	428c      	cmp	r4, r1
  400cd2:	d901      	bls.n	400cd8 <usart_set_async_baudrate+0x24>
		return 1;
  400cd4:	2001      	movs	r0, #1
  400cd6:	e017      	b.n	400d08 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400cd8:	6841      	ldr	r1, [r0, #4]
  400cda:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400cde:	6041      	str	r1, [r0, #4]
  400ce0:	e00c      	b.n	400cfc <usart_set_async_baudrate+0x48>
		return 1;
  400ce2:	2001      	movs	r0, #1
  400ce4:	e010      	b.n	400d08 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400ce6:	0859      	lsrs	r1, r3, #1
  400ce8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400cec:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400cf0:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400cf2:	1e5c      	subs	r4, r3, #1
  400cf4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400cf8:	428c      	cmp	r4, r1
  400cfa:	d8f2      	bhi.n	400ce2 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400cfc:	0412      	lsls	r2, r2, #16
  400cfe:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400d02:	431a      	orrs	r2, r3
  400d04:	6202      	str	r2, [r0, #32]

	return 0;
  400d06:	2000      	movs	r0, #0
}
  400d08:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d0c:	4770      	bx	lr
	...

00400d10 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400d10:	4b08      	ldr	r3, [pc, #32]	; (400d34 <usart_reset+0x24>)
  400d12:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400d16:	2300      	movs	r3, #0
  400d18:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400d1a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400d1c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400d1e:	2388      	movs	r3, #136	; 0x88
  400d20:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400d22:	2324      	movs	r3, #36	; 0x24
  400d24:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400d26:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d2a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400d2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400d30:	6003      	str	r3, [r0, #0]
  400d32:	4770      	bx	lr
  400d34:	55534100 	.word	0x55534100

00400d38 <usart_init_rs232>:
{
  400d38:	b570      	push	{r4, r5, r6, lr}
  400d3a:	4605      	mov	r5, r0
  400d3c:	460c      	mov	r4, r1
  400d3e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400d40:	4b0f      	ldr	r3, [pc, #60]	; (400d80 <usart_init_rs232+0x48>)
  400d42:	4798      	blx	r3
	ul_reg_val = 0;
  400d44:	2200      	movs	r2, #0
  400d46:	4b0f      	ldr	r3, [pc, #60]	; (400d84 <usart_init_rs232+0x4c>)
  400d48:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400d4a:	b1a4      	cbz	r4, 400d76 <usart_init_rs232+0x3e>
  400d4c:	4632      	mov	r2, r6
  400d4e:	6821      	ldr	r1, [r4, #0]
  400d50:	4628      	mov	r0, r5
  400d52:	4b0d      	ldr	r3, [pc, #52]	; (400d88 <usart_init_rs232+0x50>)
  400d54:	4798      	blx	r3
  400d56:	4602      	mov	r2, r0
  400d58:	b978      	cbnz	r0, 400d7a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d5a:	6863      	ldr	r3, [r4, #4]
  400d5c:	68a1      	ldr	r1, [r4, #8]
  400d5e:	430b      	orrs	r3, r1
  400d60:	6921      	ldr	r1, [r4, #16]
  400d62:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400d64:	68e1      	ldr	r1, [r4, #12]
  400d66:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400d68:	4906      	ldr	r1, [pc, #24]	; (400d84 <usart_init_rs232+0x4c>)
  400d6a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400d6c:	6869      	ldr	r1, [r5, #4]
  400d6e:	430b      	orrs	r3, r1
  400d70:	606b      	str	r3, [r5, #4]
}
  400d72:	4610      	mov	r0, r2
  400d74:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400d76:	2201      	movs	r2, #1
  400d78:	e7fb      	b.n	400d72 <usart_init_rs232+0x3a>
  400d7a:	2201      	movs	r2, #1
  400d7c:	e7f9      	b.n	400d72 <usart_init_rs232+0x3a>
  400d7e:	bf00      	nop
  400d80:	00400d11 	.word	0x00400d11
  400d84:	20400a44 	.word	0x20400a44
  400d88:	00400cb5 	.word	0x00400cb5

00400d8c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400d8c:	2340      	movs	r3, #64	; 0x40
  400d8e:	6003      	str	r3, [r0, #0]
  400d90:	4770      	bx	lr

00400d92 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400d92:	2310      	movs	r3, #16
  400d94:	6003      	str	r3, [r0, #0]
  400d96:	4770      	bx	lr

00400d98 <usart_is_tx_ready>:
	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
  400d98:	6940      	ldr	r0, [r0, #20]
}
  400d9a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400d9e:	4770      	bx	lr

00400da0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400da0:	6943      	ldr	r3, [r0, #20]
  400da2:	f013 0f02 	tst.w	r3, #2
  400da6:	d004      	beq.n	400db2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400da8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400dac:	61c1      	str	r1, [r0, #28]
	return 0;
  400dae:	2000      	movs	r0, #0
  400db0:	4770      	bx	lr
		return 1;
  400db2:	2001      	movs	r0, #1
}
  400db4:	4770      	bx	lr

00400db6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400db6:	6943      	ldr	r3, [r0, #20]
  400db8:	f013 0f01 	tst.w	r3, #1
  400dbc:	d005      	beq.n	400dca <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400dbe:	6983      	ldr	r3, [r0, #24]
  400dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400dc4:	600b      	str	r3, [r1, #0]
	return 0;
  400dc6:	2000      	movs	r0, #0
  400dc8:	4770      	bx	lr
		return 1;
  400dca:	2001      	movs	r0, #1
}
  400dcc:	4770      	bx	lr

00400dce <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400dce:	e7fe      	b.n	400dce <Dummy_Handler>

00400dd0 <Reset_Handler>:
{
  400dd0:	b500      	push	{lr}
  400dd2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400dd4:	4b25      	ldr	r3, [pc, #148]	; (400e6c <Reset_Handler+0x9c>)
  400dd6:	4a26      	ldr	r2, [pc, #152]	; (400e70 <Reset_Handler+0xa0>)
  400dd8:	429a      	cmp	r2, r3
  400dda:	d010      	beq.n	400dfe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400ddc:	4b25      	ldr	r3, [pc, #148]	; (400e74 <Reset_Handler+0xa4>)
  400dde:	4a23      	ldr	r2, [pc, #140]	; (400e6c <Reset_Handler+0x9c>)
  400de0:	429a      	cmp	r2, r3
  400de2:	d20c      	bcs.n	400dfe <Reset_Handler+0x2e>
  400de4:	3b01      	subs	r3, #1
  400de6:	1a9b      	subs	r3, r3, r2
  400de8:	f023 0303 	bic.w	r3, r3, #3
  400dec:	3304      	adds	r3, #4
  400dee:	4413      	add	r3, r2
  400df0:	491f      	ldr	r1, [pc, #124]	; (400e70 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400df2:	f851 0b04 	ldr.w	r0, [r1], #4
  400df6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400dfa:	429a      	cmp	r2, r3
  400dfc:	d1f9      	bne.n	400df2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400dfe:	4b1e      	ldr	r3, [pc, #120]	; (400e78 <Reset_Handler+0xa8>)
  400e00:	4a1e      	ldr	r2, [pc, #120]	; (400e7c <Reset_Handler+0xac>)
  400e02:	429a      	cmp	r2, r3
  400e04:	d20a      	bcs.n	400e1c <Reset_Handler+0x4c>
  400e06:	3b01      	subs	r3, #1
  400e08:	1a9b      	subs	r3, r3, r2
  400e0a:	f023 0303 	bic.w	r3, r3, #3
  400e0e:	3304      	adds	r3, #4
  400e10:	4413      	add	r3, r2
                *pDest++ = 0;
  400e12:	2100      	movs	r1, #0
  400e14:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400e18:	4293      	cmp	r3, r2
  400e1a:	d1fb      	bne.n	400e14 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400e1c:	4a18      	ldr	r2, [pc, #96]	; (400e80 <Reset_Handler+0xb0>)
  400e1e:	4b19      	ldr	r3, [pc, #100]	; (400e84 <Reset_Handler+0xb4>)
  400e20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400e24:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e26:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e2a:	fab3 f383 	clz	r3, r3
  400e2e:	095b      	lsrs	r3, r3, #5
  400e30:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400e32:	b672      	cpsid	i
  400e34:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e38:	2200      	movs	r2, #0
  400e3a:	4b13      	ldr	r3, [pc, #76]	; (400e88 <Reset_Handler+0xb8>)
  400e3c:	701a      	strb	r2, [r3, #0]
	return flags;
  400e3e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400e40:	4a12      	ldr	r2, [pc, #72]	; (400e8c <Reset_Handler+0xbc>)
  400e42:	6813      	ldr	r3, [r2, #0]
  400e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400e48:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400e4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e4e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400e52:	b129      	cbz	r1, 400e60 <Reset_Handler+0x90>
		cpu_irq_enable();
  400e54:	2201      	movs	r2, #1
  400e56:	4b0c      	ldr	r3, [pc, #48]	; (400e88 <Reset_Handler+0xb8>)
  400e58:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400e5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e5e:	b662      	cpsie	i
        __libc_init_array();
  400e60:	4b0b      	ldr	r3, [pc, #44]	; (400e90 <Reset_Handler+0xc0>)
  400e62:	4798      	blx	r3
        main();
  400e64:	4b0b      	ldr	r3, [pc, #44]	; (400e94 <Reset_Handler+0xc4>)
  400e66:	4798      	blx	r3
  400e68:	e7fe      	b.n	400e68 <Reset_Handler+0x98>
  400e6a:	bf00      	nop
  400e6c:	20400000 	.word	0x20400000
  400e70:	004095d4 	.word	0x004095d4
  400e74:	204009b8 	.word	0x204009b8
  400e78:	20400cd4 	.word	0x20400cd4
  400e7c:	204009b8 	.word	0x204009b8
  400e80:	e000ed00 	.word	0xe000ed00
  400e84:	00400000 	.word	0x00400000
  400e88:	20400000 	.word	0x20400000
  400e8c:	e000ed88 	.word	0xe000ed88
  400e90:	0040415d 	.word	0x0040415d
  400e94:	00403759 	.word	0x00403759

00400e98 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400e98:	4b3b      	ldr	r3, [pc, #236]	; (400f88 <SystemCoreClockUpdate+0xf0>)
  400e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e9c:	f003 0303 	and.w	r3, r3, #3
  400ea0:	2b01      	cmp	r3, #1
  400ea2:	d01d      	beq.n	400ee0 <SystemCoreClockUpdate+0x48>
  400ea4:	b183      	cbz	r3, 400ec8 <SystemCoreClockUpdate+0x30>
  400ea6:	2b02      	cmp	r3, #2
  400ea8:	d036      	beq.n	400f18 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400eaa:	4b37      	ldr	r3, [pc, #220]	; (400f88 <SystemCoreClockUpdate+0xf0>)
  400eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400eb2:	2b70      	cmp	r3, #112	; 0x70
  400eb4:	d05f      	beq.n	400f76 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400eb6:	4b34      	ldr	r3, [pc, #208]	; (400f88 <SystemCoreClockUpdate+0xf0>)
  400eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400eba:	4934      	ldr	r1, [pc, #208]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400ebc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400ec0:	680b      	ldr	r3, [r1, #0]
  400ec2:	40d3      	lsrs	r3, r2
  400ec4:	600b      	str	r3, [r1, #0]
  400ec6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400ec8:	4b31      	ldr	r3, [pc, #196]	; (400f90 <SystemCoreClockUpdate+0xf8>)
  400eca:	695b      	ldr	r3, [r3, #20]
  400ecc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400ed0:	bf14      	ite	ne
  400ed2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ed6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400eda:	4b2c      	ldr	r3, [pc, #176]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400edc:	601a      	str	r2, [r3, #0]
  400ede:	e7e4      	b.n	400eaa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ee0:	4b29      	ldr	r3, [pc, #164]	; (400f88 <SystemCoreClockUpdate+0xf0>)
  400ee2:	6a1b      	ldr	r3, [r3, #32]
  400ee4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ee8:	d003      	beq.n	400ef2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400eea:	4a2a      	ldr	r2, [pc, #168]	; (400f94 <SystemCoreClockUpdate+0xfc>)
  400eec:	4b27      	ldr	r3, [pc, #156]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400eee:	601a      	str	r2, [r3, #0]
  400ef0:	e7db      	b.n	400eaa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ef2:	4a29      	ldr	r2, [pc, #164]	; (400f98 <SystemCoreClockUpdate+0x100>)
  400ef4:	4b25      	ldr	r3, [pc, #148]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400ef6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400ef8:	4b23      	ldr	r3, [pc, #140]	; (400f88 <SystemCoreClockUpdate+0xf0>)
  400efa:	6a1b      	ldr	r3, [r3, #32]
  400efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f00:	2b10      	cmp	r3, #16
  400f02:	d005      	beq.n	400f10 <SystemCoreClockUpdate+0x78>
  400f04:	2b20      	cmp	r3, #32
  400f06:	d1d0      	bne.n	400eaa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400f08:	4a22      	ldr	r2, [pc, #136]	; (400f94 <SystemCoreClockUpdate+0xfc>)
  400f0a:	4b20      	ldr	r3, [pc, #128]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400f0c:	601a      	str	r2, [r3, #0]
          break;
  400f0e:	e7cc      	b.n	400eaa <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400f10:	4a22      	ldr	r2, [pc, #136]	; (400f9c <SystemCoreClockUpdate+0x104>)
  400f12:	4b1e      	ldr	r3, [pc, #120]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400f14:	601a      	str	r2, [r3, #0]
          break;
  400f16:	e7c8      	b.n	400eaa <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400f18:	4b1b      	ldr	r3, [pc, #108]	; (400f88 <SystemCoreClockUpdate+0xf0>)
  400f1a:	6a1b      	ldr	r3, [r3, #32]
  400f1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400f20:	d016      	beq.n	400f50 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400f22:	4a1c      	ldr	r2, [pc, #112]	; (400f94 <SystemCoreClockUpdate+0xfc>)
  400f24:	4b19      	ldr	r3, [pc, #100]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400f26:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400f28:	4b17      	ldr	r3, [pc, #92]	; (400f88 <SystemCoreClockUpdate+0xf0>)
  400f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f2c:	f003 0303 	and.w	r3, r3, #3
  400f30:	2b02      	cmp	r3, #2
  400f32:	d1ba      	bne.n	400eaa <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f34:	4a14      	ldr	r2, [pc, #80]	; (400f88 <SystemCoreClockUpdate+0xf0>)
  400f36:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f38:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400f3a:	4814      	ldr	r0, [pc, #80]	; (400f8c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400f3c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400f40:	6803      	ldr	r3, [r0, #0]
  400f42:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400f46:	b2d2      	uxtb	r2, r2
  400f48:	fbb3 f3f2 	udiv	r3, r3, r2
  400f4c:	6003      	str	r3, [r0, #0]
  400f4e:	e7ac      	b.n	400eaa <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f50:	4a11      	ldr	r2, [pc, #68]	; (400f98 <SystemCoreClockUpdate+0x100>)
  400f52:	4b0e      	ldr	r3, [pc, #56]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400f54:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400f56:	4b0c      	ldr	r3, [pc, #48]	; (400f88 <SystemCoreClockUpdate+0xf0>)
  400f58:	6a1b      	ldr	r3, [r3, #32]
  400f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f5e:	2b10      	cmp	r3, #16
  400f60:	d005      	beq.n	400f6e <SystemCoreClockUpdate+0xd6>
  400f62:	2b20      	cmp	r3, #32
  400f64:	d1e0      	bne.n	400f28 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400f66:	4a0b      	ldr	r2, [pc, #44]	; (400f94 <SystemCoreClockUpdate+0xfc>)
  400f68:	4b08      	ldr	r3, [pc, #32]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400f6a:	601a      	str	r2, [r3, #0]
          break;
  400f6c:	e7dc      	b.n	400f28 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400f6e:	4a0b      	ldr	r2, [pc, #44]	; (400f9c <SystemCoreClockUpdate+0x104>)
  400f70:	4b06      	ldr	r3, [pc, #24]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400f72:	601a      	str	r2, [r3, #0]
          break;
  400f74:	e7d8      	b.n	400f28 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400f76:	4a05      	ldr	r2, [pc, #20]	; (400f8c <SystemCoreClockUpdate+0xf4>)
  400f78:	6813      	ldr	r3, [r2, #0]
  400f7a:	4909      	ldr	r1, [pc, #36]	; (400fa0 <SystemCoreClockUpdate+0x108>)
  400f7c:	fba1 1303 	umull	r1, r3, r1, r3
  400f80:	085b      	lsrs	r3, r3, #1
  400f82:	6013      	str	r3, [r2, #0]
  400f84:	4770      	bx	lr
  400f86:	bf00      	nop
  400f88:	400e0600 	.word	0x400e0600
  400f8c:	20400004 	.word	0x20400004
  400f90:	400e1810 	.word	0x400e1810
  400f94:	00b71b00 	.word	0x00b71b00
  400f98:	003d0900 	.word	0x003d0900
  400f9c:	007a1200 	.word	0x007a1200
  400fa0:	aaaaaaab 	.word	0xaaaaaaab

00400fa4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400fa4:	4b16      	ldr	r3, [pc, #88]	; (401000 <system_init_flash+0x5c>)
  400fa6:	4298      	cmp	r0, r3
  400fa8:	d913      	bls.n	400fd2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400faa:	4b16      	ldr	r3, [pc, #88]	; (401004 <system_init_flash+0x60>)
  400fac:	4298      	cmp	r0, r3
  400fae:	d915      	bls.n	400fdc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400fb0:	4b15      	ldr	r3, [pc, #84]	; (401008 <system_init_flash+0x64>)
  400fb2:	4298      	cmp	r0, r3
  400fb4:	d916      	bls.n	400fe4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400fb6:	4b15      	ldr	r3, [pc, #84]	; (40100c <system_init_flash+0x68>)
  400fb8:	4298      	cmp	r0, r3
  400fba:	d917      	bls.n	400fec <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400fbc:	4b14      	ldr	r3, [pc, #80]	; (401010 <system_init_flash+0x6c>)
  400fbe:	4298      	cmp	r0, r3
  400fc0:	d918      	bls.n	400ff4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400fc2:	4b14      	ldr	r3, [pc, #80]	; (401014 <system_init_flash+0x70>)
  400fc4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400fc6:	bf94      	ite	ls
  400fc8:	4a13      	ldrls	r2, [pc, #76]	; (401018 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400fca:	4a14      	ldrhi	r2, [pc, #80]	; (40101c <system_init_flash+0x78>)
  400fcc:	4b14      	ldr	r3, [pc, #80]	; (401020 <system_init_flash+0x7c>)
  400fce:	601a      	str	r2, [r3, #0]
  400fd0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400fd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400fd6:	4b12      	ldr	r3, [pc, #72]	; (401020 <system_init_flash+0x7c>)
  400fd8:	601a      	str	r2, [r3, #0]
  400fda:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400fdc:	4a11      	ldr	r2, [pc, #68]	; (401024 <system_init_flash+0x80>)
  400fde:	4b10      	ldr	r3, [pc, #64]	; (401020 <system_init_flash+0x7c>)
  400fe0:	601a      	str	r2, [r3, #0]
  400fe2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400fe4:	4a10      	ldr	r2, [pc, #64]	; (401028 <system_init_flash+0x84>)
  400fe6:	4b0e      	ldr	r3, [pc, #56]	; (401020 <system_init_flash+0x7c>)
  400fe8:	601a      	str	r2, [r3, #0]
  400fea:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400fec:	4a0f      	ldr	r2, [pc, #60]	; (40102c <system_init_flash+0x88>)
  400fee:	4b0c      	ldr	r3, [pc, #48]	; (401020 <system_init_flash+0x7c>)
  400ff0:	601a      	str	r2, [r3, #0]
  400ff2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400ff4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400ff8:	4b09      	ldr	r3, [pc, #36]	; (401020 <system_init_flash+0x7c>)
  400ffa:	601a      	str	r2, [r3, #0]
  400ffc:	4770      	bx	lr
  400ffe:	bf00      	nop
  401000:	015ef3bf 	.word	0x015ef3bf
  401004:	02bde77f 	.word	0x02bde77f
  401008:	041cdb3f 	.word	0x041cdb3f
  40100c:	057bceff 	.word	0x057bceff
  401010:	06dac2bf 	.word	0x06dac2bf
  401014:	0839b67f 	.word	0x0839b67f
  401018:	04000500 	.word	0x04000500
  40101c:	04000600 	.word	0x04000600
  401020:	400e0c00 	.word	0x400e0c00
  401024:	04000100 	.word	0x04000100
  401028:	04000200 	.word	0x04000200
  40102c:	04000300 	.word	0x04000300

00401030 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401030:	4b0a      	ldr	r3, [pc, #40]	; (40105c <_sbrk+0x2c>)
  401032:	681b      	ldr	r3, [r3, #0]
  401034:	b153      	cbz	r3, 40104c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401036:	4b09      	ldr	r3, [pc, #36]	; (40105c <_sbrk+0x2c>)
  401038:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40103a:	181a      	adds	r2, r3, r0
  40103c:	4908      	ldr	r1, [pc, #32]	; (401060 <_sbrk+0x30>)
  40103e:	4291      	cmp	r1, r2
  401040:	db08      	blt.n	401054 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401042:	4610      	mov	r0, r2
  401044:	4a05      	ldr	r2, [pc, #20]	; (40105c <_sbrk+0x2c>)
  401046:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401048:	4618      	mov	r0, r3
  40104a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40104c:	4a05      	ldr	r2, [pc, #20]	; (401064 <_sbrk+0x34>)
  40104e:	4b03      	ldr	r3, [pc, #12]	; (40105c <_sbrk+0x2c>)
  401050:	601a      	str	r2, [r3, #0]
  401052:	e7f0      	b.n	401036 <_sbrk+0x6>
		return (caddr_t) -1;	
  401054:	f04f 30ff 	mov.w	r0, #4294967295
}
  401058:	4770      	bx	lr
  40105a:	bf00      	nop
  40105c:	20400a48 	.word	0x20400a48
  401060:	2045fffc 	.word	0x2045fffc
  401064:	20402ed8 	.word	0x20402ed8

00401068 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401068:	f04f 30ff 	mov.w	r0, #4294967295
  40106c:	4770      	bx	lr

0040106e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40106e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401072:	604b      	str	r3, [r1, #4]

	return 0;
}
  401074:	2000      	movs	r0, #0
  401076:	4770      	bx	lr

00401078 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401078:	2001      	movs	r0, #1
  40107a:	4770      	bx	lr

0040107c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40107c:	2000      	movs	r0, #0
  40107e:	4770      	bx	lr

00401080 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401080:	f100 0308 	add.w	r3, r0, #8
  401084:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401086:	f04f 32ff 	mov.w	r2, #4294967295
  40108a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40108c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40108e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401090:	2300      	movs	r3, #0
  401092:	6003      	str	r3, [r0, #0]
  401094:	4770      	bx	lr

00401096 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401096:	2300      	movs	r3, #0
  401098:	6103      	str	r3, [r0, #16]
  40109a:	4770      	bx	lr

0040109c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40109c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40109e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4010a0:	689a      	ldr	r2, [r3, #8]
  4010a2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4010a4:	689a      	ldr	r2, [r3, #8]
  4010a6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4010a8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4010aa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4010ac:	6803      	ldr	r3, [r0, #0]
  4010ae:	3301      	adds	r3, #1
  4010b0:	6003      	str	r3, [r0, #0]
  4010b2:	4770      	bx	lr

004010b4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4010b4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4010b6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4010b8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4010bc:	d002      	beq.n	4010c4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010be:	f100 0208 	add.w	r2, r0, #8
  4010c2:	e002      	b.n	4010ca <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4010c4:	6902      	ldr	r2, [r0, #16]
  4010c6:	e004      	b.n	4010d2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4010c8:	461a      	mov	r2, r3
  4010ca:	6853      	ldr	r3, [r2, #4]
  4010cc:	681c      	ldr	r4, [r3, #0]
  4010ce:	42a5      	cmp	r5, r4
  4010d0:	d2fa      	bcs.n	4010c8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4010d2:	6853      	ldr	r3, [r2, #4]
  4010d4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4010d6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4010d8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4010da:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4010dc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4010de:	6803      	ldr	r3, [r0, #0]
  4010e0:	3301      	adds	r3, #1
  4010e2:	6003      	str	r3, [r0, #0]
}
  4010e4:	bc30      	pop	{r4, r5}
  4010e6:	4770      	bx	lr

004010e8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4010e8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4010ea:	6842      	ldr	r2, [r0, #4]
  4010ec:	6881      	ldr	r1, [r0, #8]
  4010ee:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4010f0:	6882      	ldr	r2, [r0, #8]
  4010f2:	6841      	ldr	r1, [r0, #4]
  4010f4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4010f6:	685a      	ldr	r2, [r3, #4]
  4010f8:	4290      	cmp	r0, r2
  4010fa:	d005      	beq.n	401108 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4010fc:	2200      	movs	r2, #0
  4010fe:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401100:	6818      	ldr	r0, [r3, #0]
  401102:	3801      	subs	r0, #1
  401104:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401106:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401108:	6882      	ldr	r2, [r0, #8]
  40110a:	605a      	str	r2, [r3, #4]
  40110c:	e7f6      	b.n	4010fc <uxListRemove+0x14>
	...

00401110 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401110:	4b0d      	ldr	r3, [pc, #52]	; (401148 <prvTaskExitError+0x38>)
  401112:	681b      	ldr	r3, [r3, #0]
  401114:	f1b3 3fff 	cmp.w	r3, #4294967295
  401118:	d00a      	beq.n	401130 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40111a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40111e:	b672      	cpsid	i
  401120:	f383 8811 	msr	BASEPRI, r3
  401124:	f3bf 8f6f 	isb	sy
  401128:	f3bf 8f4f 	dsb	sy
  40112c:	b662      	cpsie	i
  40112e:	e7fe      	b.n	40112e <prvTaskExitError+0x1e>
  401130:	f04f 0380 	mov.w	r3, #128	; 0x80
  401134:	b672      	cpsid	i
  401136:	f383 8811 	msr	BASEPRI, r3
  40113a:	f3bf 8f6f 	isb	sy
  40113e:	f3bf 8f4f 	dsb	sy
  401142:	b662      	cpsie	i
  401144:	e7fe      	b.n	401144 <prvTaskExitError+0x34>
  401146:	bf00      	nop
  401148:	20400008 	.word	0x20400008

0040114c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40114c:	4806      	ldr	r0, [pc, #24]	; (401168 <prvPortStartFirstTask+0x1c>)
  40114e:	6800      	ldr	r0, [r0, #0]
  401150:	6800      	ldr	r0, [r0, #0]
  401152:	f380 8808 	msr	MSP, r0
  401156:	b662      	cpsie	i
  401158:	b661      	cpsie	f
  40115a:	f3bf 8f4f 	dsb	sy
  40115e:	f3bf 8f6f 	isb	sy
  401162:	df00      	svc	0
  401164:	bf00      	nop
  401166:	0000      	.short	0x0000
  401168:	e000ed08 	.word	0xe000ed08

0040116c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40116c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40117c <vPortEnableVFP+0x10>
  401170:	6801      	ldr	r1, [r0, #0]
  401172:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401176:	6001      	str	r1, [r0, #0]
  401178:	4770      	bx	lr
  40117a:	0000      	.short	0x0000
  40117c:	e000ed88 	.word	0xe000ed88

00401180 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401184:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401188:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40118c:	4b05      	ldr	r3, [pc, #20]	; (4011a4 <pxPortInitialiseStack+0x24>)
  40118e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401192:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401196:	f06f 0302 	mvn.w	r3, #2
  40119a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40119e:	3844      	subs	r0, #68	; 0x44
  4011a0:	4770      	bx	lr
  4011a2:	bf00      	nop
  4011a4:	00401111 	.word	0x00401111

004011a8 <SVC_Handler>:
	__asm volatile (
  4011a8:	4b06      	ldr	r3, [pc, #24]	; (4011c4 <pxCurrentTCBConst2>)
  4011aa:	6819      	ldr	r1, [r3, #0]
  4011ac:	6808      	ldr	r0, [r1, #0]
  4011ae:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011b2:	f380 8809 	msr	PSP, r0
  4011b6:	f3bf 8f6f 	isb	sy
  4011ba:	f04f 0000 	mov.w	r0, #0
  4011be:	f380 8811 	msr	BASEPRI, r0
  4011c2:	4770      	bx	lr

004011c4 <pxCurrentTCBConst2>:
  4011c4:	20400a54 	.word	0x20400a54
  4011c8:	4770      	bx	lr
  4011ca:	bf00      	nop

004011cc <vPortEnterCritical>:
  4011cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011d0:	b672      	cpsid	i
  4011d2:	f383 8811 	msr	BASEPRI, r3
  4011d6:	f3bf 8f6f 	isb	sy
  4011da:	f3bf 8f4f 	dsb	sy
  4011de:	b662      	cpsie	i
	uxCriticalNesting++;
  4011e0:	4a0b      	ldr	r2, [pc, #44]	; (401210 <vPortEnterCritical+0x44>)
  4011e2:	6813      	ldr	r3, [r2, #0]
  4011e4:	3301      	adds	r3, #1
  4011e6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4011e8:	2b01      	cmp	r3, #1
  4011ea:	d10f      	bne.n	40120c <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4011ec:	4b09      	ldr	r3, [pc, #36]	; (401214 <vPortEnterCritical+0x48>)
  4011ee:	681b      	ldr	r3, [r3, #0]
  4011f0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4011f4:	d00a      	beq.n	40120c <vPortEnterCritical+0x40>
  4011f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011fa:	b672      	cpsid	i
  4011fc:	f383 8811 	msr	BASEPRI, r3
  401200:	f3bf 8f6f 	isb	sy
  401204:	f3bf 8f4f 	dsb	sy
  401208:	b662      	cpsie	i
  40120a:	e7fe      	b.n	40120a <vPortEnterCritical+0x3e>
  40120c:	4770      	bx	lr
  40120e:	bf00      	nop
  401210:	20400008 	.word	0x20400008
  401214:	e000ed04 	.word	0xe000ed04

00401218 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401218:	4b0a      	ldr	r3, [pc, #40]	; (401244 <vPortExitCritical+0x2c>)
  40121a:	681b      	ldr	r3, [r3, #0]
  40121c:	b953      	cbnz	r3, 401234 <vPortExitCritical+0x1c>
  40121e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401222:	b672      	cpsid	i
  401224:	f383 8811 	msr	BASEPRI, r3
  401228:	f3bf 8f6f 	isb	sy
  40122c:	f3bf 8f4f 	dsb	sy
  401230:	b662      	cpsie	i
  401232:	e7fe      	b.n	401232 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401234:	3b01      	subs	r3, #1
  401236:	4a03      	ldr	r2, [pc, #12]	; (401244 <vPortExitCritical+0x2c>)
  401238:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40123a:	b90b      	cbnz	r3, 401240 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40123c:	f383 8811 	msr	BASEPRI, r3
  401240:	4770      	bx	lr
  401242:	bf00      	nop
  401244:	20400008 	.word	0x20400008

00401248 <PendSV_Handler>:
	__asm volatile
  401248:	f3ef 8009 	mrs	r0, PSP
  40124c:	f3bf 8f6f 	isb	sy
  401250:	4b15      	ldr	r3, [pc, #84]	; (4012a8 <pxCurrentTCBConst>)
  401252:	681a      	ldr	r2, [r3, #0]
  401254:	f01e 0f10 	tst.w	lr, #16
  401258:	bf08      	it	eq
  40125a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40125e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401262:	6010      	str	r0, [r2, #0]
  401264:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401268:	f04f 0080 	mov.w	r0, #128	; 0x80
  40126c:	b672      	cpsid	i
  40126e:	f380 8811 	msr	BASEPRI, r0
  401272:	f3bf 8f4f 	dsb	sy
  401276:	f3bf 8f6f 	isb	sy
  40127a:	b662      	cpsie	i
  40127c:	f001 f88e 	bl	40239c <vTaskSwitchContext>
  401280:	f04f 0000 	mov.w	r0, #0
  401284:	f380 8811 	msr	BASEPRI, r0
  401288:	bc08      	pop	{r3}
  40128a:	6819      	ldr	r1, [r3, #0]
  40128c:	6808      	ldr	r0, [r1, #0]
  40128e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401292:	f01e 0f10 	tst.w	lr, #16
  401296:	bf08      	it	eq
  401298:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40129c:	f380 8809 	msr	PSP, r0
  4012a0:	f3bf 8f6f 	isb	sy
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop

004012a8 <pxCurrentTCBConst>:
  4012a8:	20400a54 	.word	0x20400a54
  4012ac:	4770      	bx	lr
  4012ae:	bf00      	nop

004012b0 <SysTick_Handler>:
{
  4012b0:	b508      	push	{r3, lr}
	__asm volatile
  4012b2:	f3ef 8311 	mrs	r3, BASEPRI
  4012b6:	f04f 0280 	mov.w	r2, #128	; 0x80
  4012ba:	b672      	cpsid	i
  4012bc:	f382 8811 	msr	BASEPRI, r2
  4012c0:	f3bf 8f6f 	isb	sy
  4012c4:	f3bf 8f4f 	dsb	sy
  4012c8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4012ca:	4b05      	ldr	r3, [pc, #20]	; (4012e0 <SysTick_Handler+0x30>)
  4012cc:	4798      	blx	r3
  4012ce:	b118      	cbz	r0, 4012d8 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4012d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012d4:	4b03      	ldr	r3, [pc, #12]	; (4012e4 <SysTick_Handler+0x34>)
  4012d6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4012d8:	2300      	movs	r3, #0
  4012da:	f383 8811 	msr	BASEPRI, r3
  4012de:	bd08      	pop	{r3, pc}
  4012e0:	00402009 	.word	0x00402009
  4012e4:	e000ed04 	.word	0xe000ed04

004012e8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4012e8:	4a03      	ldr	r2, [pc, #12]	; (4012f8 <vPortSetupTimerInterrupt+0x10>)
  4012ea:	4b04      	ldr	r3, [pc, #16]	; (4012fc <vPortSetupTimerInterrupt+0x14>)
  4012ec:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4012ee:	2207      	movs	r2, #7
  4012f0:	3b04      	subs	r3, #4
  4012f2:	601a      	str	r2, [r3, #0]
  4012f4:	4770      	bx	lr
  4012f6:	bf00      	nop
  4012f8:	000927bf 	.word	0x000927bf
  4012fc:	e000e014 	.word	0xe000e014

00401300 <xPortStartScheduler>:
{
  401300:	b500      	push	{lr}
  401302:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401304:	4b25      	ldr	r3, [pc, #148]	; (40139c <xPortStartScheduler+0x9c>)
  401306:	781a      	ldrb	r2, [r3, #0]
  401308:	b2d2      	uxtb	r2, r2
  40130a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40130c:	22ff      	movs	r2, #255	; 0xff
  40130e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401310:	781b      	ldrb	r3, [r3, #0]
  401312:	b2db      	uxtb	r3, r3
  401314:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401318:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40131c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401320:	4a1f      	ldr	r2, [pc, #124]	; (4013a0 <xPortStartScheduler+0xa0>)
  401322:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401324:	2207      	movs	r2, #7
  401326:	4b1f      	ldr	r3, [pc, #124]	; (4013a4 <xPortStartScheduler+0xa4>)
  401328:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40132a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40132e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401332:	d010      	beq.n	401356 <xPortStartScheduler+0x56>
  401334:	2206      	movs	r2, #6
  401336:	e000      	b.n	40133a <xPortStartScheduler+0x3a>
  401338:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40133a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40133e:	005b      	lsls	r3, r3, #1
  401340:	b2db      	uxtb	r3, r3
  401342:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401346:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40134a:	1e51      	subs	r1, r2, #1
  40134c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401350:	d1f2      	bne.n	401338 <xPortStartScheduler+0x38>
  401352:	4b14      	ldr	r3, [pc, #80]	; (4013a4 <xPortStartScheduler+0xa4>)
  401354:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401356:	4a13      	ldr	r2, [pc, #76]	; (4013a4 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401358:	6813      	ldr	r3, [r2, #0]
  40135a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40135c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401360:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401362:	9b01      	ldr	r3, [sp, #4]
  401364:	b2db      	uxtb	r3, r3
  401366:	4a0d      	ldr	r2, [pc, #52]	; (40139c <xPortStartScheduler+0x9c>)
  401368:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40136a:	4b0f      	ldr	r3, [pc, #60]	; (4013a8 <xPortStartScheduler+0xa8>)
  40136c:	681a      	ldr	r2, [r3, #0]
  40136e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401372:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401374:	681a      	ldr	r2, [r3, #0]
  401376:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40137a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40137c:	4b0b      	ldr	r3, [pc, #44]	; (4013ac <xPortStartScheduler+0xac>)
  40137e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401380:	2200      	movs	r2, #0
  401382:	4b0b      	ldr	r3, [pc, #44]	; (4013b0 <xPortStartScheduler+0xb0>)
  401384:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401386:	4b0b      	ldr	r3, [pc, #44]	; (4013b4 <xPortStartScheduler+0xb4>)
  401388:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40138a:	4a0b      	ldr	r2, [pc, #44]	; (4013b8 <xPortStartScheduler+0xb8>)
  40138c:	6813      	ldr	r3, [r2, #0]
  40138e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401392:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401394:	4b09      	ldr	r3, [pc, #36]	; (4013bc <xPortStartScheduler+0xbc>)
  401396:	4798      	blx	r3
	prvTaskExitError();
  401398:	4b09      	ldr	r3, [pc, #36]	; (4013c0 <xPortStartScheduler+0xc0>)
  40139a:	4798      	blx	r3
  40139c:	e000e400 	.word	0xe000e400
  4013a0:	20400a4c 	.word	0x20400a4c
  4013a4:	20400a50 	.word	0x20400a50
  4013a8:	e000ed20 	.word	0xe000ed20
  4013ac:	004012e9 	.word	0x004012e9
  4013b0:	20400008 	.word	0x20400008
  4013b4:	0040116d 	.word	0x0040116d
  4013b8:	e000ef34 	.word	0xe000ef34
  4013bc:	0040114d 	.word	0x0040114d
  4013c0:	00401111 	.word	0x00401111

004013c4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4013c4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4013c8:	2b0f      	cmp	r3, #15
  4013ca:	d911      	bls.n	4013f0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4013cc:	4a12      	ldr	r2, [pc, #72]	; (401418 <vPortValidateInterruptPriority+0x54>)
  4013ce:	5c9b      	ldrb	r3, [r3, r2]
  4013d0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4013d2:	4a12      	ldr	r2, [pc, #72]	; (40141c <vPortValidateInterruptPriority+0x58>)
  4013d4:	7812      	ldrb	r2, [r2, #0]
  4013d6:	429a      	cmp	r2, r3
  4013d8:	d90a      	bls.n	4013f0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4013da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013de:	b672      	cpsid	i
  4013e0:	f383 8811 	msr	BASEPRI, r3
  4013e4:	f3bf 8f6f 	isb	sy
  4013e8:	f3bf 8f4f 	dsb	sy
  4013ec:	b662      	cpsie	i
  4013ee:	e7fe      	b.n	4013ee <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4013f0:	4b0b      	ldr	r3, [pc, #44]	; (401420 <vPortValidateInterruptPriority+0x5c>)
  4013f2:	681b      	ldr	r3, [r3, #0]
  4013f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4013f8:	4a0a      	ldr	r2, [pc, #40]	; (401424 <vPortValidateInterruptPriority+0x60>)
  4013fa:	6812      	ldr	r2, [r2, #0]
  4013fc:	4293      	cmp	r3, r2
  4013fe:	d90a      	bls.n	401416 <vPortValidateInterruptPriority+0x52>
  401400:	f04f 0380 	mov.w	r3, #128	; 0x80
  401404:	b672      	cpsid	i
  401406:	f383 8811 	msr	BASEPRI, r3
  40140a:	f3bf 8f6f 	isb	sy
  40140e:	f3bf 8f4f 	dsb	sy
  401412:	b662      	cpsie	i
  401414:	e7fe      	b.n	401414 <vPortValidateInterruptPriority+0x50>
  401416:	4770      	bx	lr
  401418:	e000e3f0 	.word	0xe000e3f0
  40141c:	20400a4c 	.word	0x20400a4c
  401420:	e000ed0c 	.word	0xe000ed0c
  401424:	20400a50 	.word	0x20400a50

00401428 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401428:	b510      	push	{r4, lr}
  40142a:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  40142c:	4b06      	ldr	r3, [pc, #24]	; (401448 <pvPortMalloc+0x20>)
  40142e:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401430:	4620      	mov	r0, r4
  401432:	4b06      	ldr	r3, [pc, #24]	; (40144c <pvPortMalloc+0x24>)
  401434:	4798      	blx	r3
  401436:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401438:	4b05      	ldr	r3, [pc, #20]	; (401450 <pvPortMalloc+0x28>)
  40143a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40143c:	b10c      	cbz	r4, 401442 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  40143e:	4620      	mov	r0, r4
  401440:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401442:	4b04      	ldr	r3, [pc, #16]	; (401454 <pvPortMalloc+0x2c>)
  401444:	4798      	blx	r3
	return pvReturn;
  401446:	e7fa      	b.n	40143e <pvPortMalloc+0x16>
  401448:	00401fed 	.word	0x00401fed
  40144c:	004041ad 	.word	0x004041ad
  401450:	00402155 	.word	0x00402155
  401454:	0040304b 	.word	0x0040304b

00401458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401458:	b148      	cbz	r0, 40146e <vPortFree+0x16>
{
  40145a:	b510      	push	{r4, lr}
  40145c:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  40145e:	4b04      	ldr	r3, [pc, #16]	; (401470 <vPortFree+0x18>)
  401460:	4798      	blx	r3
		{
			free( pv );
  401462:	4620      	mov	r0, r4
  401464:	4b03      	ldr	r3, [pc, #12]	; (401474 <vPortFree+0x1c>)
  401466:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401468:	4b03      	ldr	r3, [pc, #12]	; (401478 <vPortFree+0x20>)
  40146a:	4798      	blx	r3
  40146c:	bd10      	pop	{r4, pc}
  40146e:	4770      	bx	lr
  401470:	00401fed 	.word	0x00401fed
  401474:	004041bd 	.word	0x004041bd
  401478:	00402155 	.word	0x00402155

0040147c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40147c:	b538      	push	{r3, r4, r5, lr}
  40147e:	4604      	mov	r4, r0
  401480:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401482:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401484:	b95a      	cbnz	r2, 40149e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401486:	6803      	ldr	r3, [r0, #0]
  401488:	2b00      	cmp	r3, #0
  40148a:	d12e      	bne.n	4014ea <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40148c:	6840      	ldr	r0, [r0, #4]
  40148e:	4b1b      	ldr	r3, [pc, #108]	; (4014fc <prvCopyDataToQueue+0x80>)
  401490:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401492:	2300      	movs	r3, #0
  401494:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401496:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401498:	3301      	adds	r3, #1
  40149a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40149c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40149e:	b96d      	cbnz	r5, 4014bc <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4014a0:	6880      	ldr	r0, [r0, #8]
  4014a2:	4b17      	ldr	r3, [pc, #92]	; (401500 <prvCopyDataToQueue+0x84>)
  4014a4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4014a6:	68a3      	ldr	r3, [r4, #8]
  4014a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4014aa:	4413      	add	r3, r2
  4014ac:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4014ae:	6862      	ldr	r2, [r4, #4]
  4014b0:	4293      	cmp	r3, r2
  4014b2:	d31c      	bcc.n	4014ee <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4014b4:	6823      	ldr	r3, [r4, #0]
  4014b6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4014b8:	2000      	movs	r0, #0
  4014ba:	e7ec      	b.n	401496 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4014bc:	68c0      	ldr	r0, [r0, #12]
  4014be:	4b10      	ldr	r3, [pc, #64]	; (401500 <prvCopyDataToQueue+0x84>)
  4014c0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4014c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4014c4:	425b      	negs	r3, r3
  4014c6:	68e2      	ldr	r2, [r4, #12]
  4014c8:	441a      	add	r2, r3
  4014ca:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4014cc:	6821      	ldr	r1, [r4, #0]
  4014ce:	428a      	cmp	r2, r1
  4014d0:	d202      	bcs.n	4014d8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4014d2:	6862      	ldr	r2, [r4, #4]
  4014d4:	4413      	add	r3, r2
  4014d6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4014d8:	2d02      	cmp	r5, #2
  4014da:	d10a      	bne.n	4014f2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4014dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014de:	b153      	cbz	r3, 4014f6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4014e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4014e2:	3b01      	subs	r3, #1
  4014e4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4014e6:	2000      	movs	r0, #0
  4014e8:	e7d5      	b.n	401496 <prvCopyDataToQueue+0x1a>
  4014ea:	2000      	movs	r0, #0
  4014ec:	e7d3      	b.n	401496 <prvCopyDataToQueue+0x1a>
  4014ee:	2000      	movs	r0, #0
  4014f0:	e7d1      	b.n	401496 <prvCopyDataToQueue+0x1a>
  4014f2:	2000      	movs	r0, #0
  4014f4:	e7cf      	b.n	401496 <prvCopyDataToQueue+0x1a>
  4014f6:	2000      	movs	r0, #0
  4014f8:	e7cd      	b.n	401496 <prvCopyDataToQueue+0x1a>
  4014fa:	bf00      	nop
  4014fc:	0040279d 	.word	0x0040279d
  401500:	0040472d 	.word	0x0040472d

00401504 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401504:	b530      	push	{r4, r5, lr}
  401506:	b083      	sub	sp, #12
  401508:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40150a:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  40150c:	b174      	cbz	r4, 40152c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40150e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401512:	429a      	cmp	r2, r3
  401514:	d315      	bcc.n	401542 <prvNotifyQueueSetContainer+0x3e>
  401516:	f04f 0380 	mov.w	r3, #128	; 0x80
  40151a:	b672      	cpsid	i
  40151c:	f383 8811 	msr	BASEPRI, r3
  401520:	f3bf 8f6f 	isb	sy
  401524:	f3bf 8f4f 	dsb	sy
  401528:	b662      	cpsie	i
  40152a:	e7fe      	b.n	40152a <prvNotifyQueueSetContainer+0x26>
  40152c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401530:	b672      	cpsid	i
  401532:	f383 8811 	msr	BASEPRI, r3
  401536:	f3bf 8f6f 	isb	sy
  40153a:	f3bf 8f4f 	dsb	sy
  40153e:	b662      	cpsie	i
  401540:	e7fe      	b.n	401540 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401542:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401544:	4293      	cmp	r3, r2
  401546:	d803      	bhi.n	401550 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401548:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40154a:	4628      	mov	r0, r5
  40154c:	b003      	add	sp, #12
  40154e:	bd30      	pop	{r4, r5, pc}
  401550:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401552:	a901      	add	r1, sp, #4
  401554:	4620      	mov	r0, r4
  401556:	4b0b      	ldr	r3, [pc, #44]	; (401584 <prvNotifyQueueSetContainer+0x80>)
  401558:	4798      	blx	r3
  40155a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40155c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40155e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401562:	d10a      	bne.n	40157a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401564:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401566:	2b00      	cmp	r3, #0
  401568:	d0ef      	beq.n	40154a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40156a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40156e:	4b06      	ldr	r3, [pc, #24]	; (401588 <prvNotifyQueueSetContainer+0x84>)
  401570:	4798      	blx	r3
  401572:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401574:	bf18      	it	ne
  401576:	2501      	movne	r5, #1
  401578:	e7e7      	b.n	40154a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40157a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40157c:	3301      	adds	r3, #1
  40157e:	64a3      	str	r3, [r4, #72]	; 0x48
  401580:	e7e3      	b.n	40154a <prvNotifyQueueSetContainer+0x46>
  401582:	bf00      	nop
  401584:	0040147d 	.word	0x0040147d
  401588:	00402571 	.word	0x00402571

0040158c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40158c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40158e:	b172      	cbz	r2, 4015ae <prvCopyDataFromQueue+0x22>
{
  401590:	b510      	push	{r4, lr}
  401592:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401594:	68c4      	ldr	r4, [r0, #12]
  401596:	4414      	add	r4, r2
  401598:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40159a:	6840      	ldr	r0, [r0, #4]
  40159c:	4284      	cmp	r4, r0
  40159e:	d301      	bcc.n	4015a4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4015a0:	6818      	ldr	r0, [r3, #0]
  4015a2:	60d8      	str	r0, [r3, #12]
  4015a4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4015a6:	68d9      	ldr	r1, [r3, #12]
  4015a8:	4b01      	ldr	r3, [pc, #4]	; (4015b0 <prvCopyDataFromQueue+0x24>)
  4015aa:	4798      	blx	r3
  4015ac:	bd10      	pop	{r4, pc}
  4015ae:	4770      	bx	lr
  4015b0:	0040472d 	.word	0x0040472d

004015b4 <prvUnlockQueue>:
{
  4015b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4015b6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4015b8:	4b22      	ldr	r3, [pc, #136]	; (401644 <prvUnlockQueue+0x90>)
  4015ba:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4015bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015be:	2b00      	cmp	r3, #0
  4015c0:	dd1b      	ble.n	4015fa <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4015c2:	4d21      	ldr	r5, [pc, #132]	; (401648 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4015c4:	4f21      	ldr	r7, [pc, #132]	; (40164c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015c6:	4e22      	ldr	r6, [pc, #136]	; (401650 <prvUnlockQueue+0x9c>)
  4015c8:	e00b      	b.n	4015e2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4015ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015cc:	b1ab      	cbz	r3, 4015fa <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4015ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015d2:	47b0      	blx	r6
  4015d4:	b978      	cbnz	r0, 4015f6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4015d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015d8:	3b01      	subs	r3, #1
  4015da:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4015dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015de:	2b00      	cmp	r3, #0
  4015e0:	dd0b      	ble.n	4015fa <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4015e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4015e4:	2b00      	cmp	r3, #0
  4015e6:	d0f0      	beq.n	4015ca <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4015e8:	2100      	movs	r1, #0
  4015ea:	4620      	mov	r0, r4
  4015ec:	47a8      	blx	r5
  4015ee:	2801      	cmp	r0, #1
  4015f0:	d1f1      	bne.n	4015d6 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4015f2:	47b8      	blx	r7
  4015f4:	e7ef      	b.n	4015d6 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4015f6:	47b8      	blx	r7
  4015f8:	e7ed      	b.n	4015d6 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4015fa:	f04f 33ff 	mov.w	r3, #4294967295
  4015fe:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401600:	4b14      	ldr	r3, [pc, #80]	; (401654 <prvUnlockQueue+0xa0>)
  401602:	4798      	blx	r3
	taskENTER_CRITICAL();
  401604:	4b0f      	ldr	r3, [pc, #60]	; (401644 <prvUnlockQueue+0x90>)
  401606:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401608:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40160a:	2b00      	cmp	r3, #0
  40160c:	dd14      	ble.n	401638 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40160e:	6923      	ldr	r3, [r4, #16]
  401610:	b193      	cbz	r3, 401638 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401612:	f104 0610 	add.w	r6, r4, #16
  401616:	4d0e      	ldr	r5, [pc, #56]	; (401650 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401618:	4f0c      	ldr	r7, [pc, #48]	; (40164c <prvUnlockQueue+0x98>)
  40161a:	e007      	b.n	40162c <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  40161c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40161e:	3b01      	subs	r3, #1
  401620:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401622:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401624:	2b00      	cmp	r3, #0
  401626:	dd07      	ble.n	401638 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401628:	6923      	ldr	r3, [r4, #16]
  40162a:	b12b      	cbz	r3, 401638 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40162c:	4630      	mov	r0, r6
  40162e:	47a8      	blx	r5
  401630:	2800      	cmp	r0, #0
  401632:	d0f3      	beq.n	40161c <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401634:	47b8      	blx	r7
  401636:	e7f1      	b.n	40161c <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401638:	f04f 33ff 	mov.w	r3, #4294967295
  40163c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40163e:	4b05      	ldr	r3, [pc, #20]	; (401654 <prvUnlockQueue+0xa0>)
  401640:	4798      	blx	r3
  401642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401644:	004011cd 	.word	0x004011cd
  401648:	00401505 	.word	0x00401505
  40164c:	004026cd 	.word	0x004026cd
  401650:	00402571 	.word	0x00402571
  401654:	00401219 	.word	0x00401219

00401658 <xQueueGenericReset>:
{
  401658:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40165a:	b308      	cbz	r0, 4016a0 <xQueueGenericReset+0x48>
  40165c:	4604      	mov	r4, r0
  40165e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401660:	4b1d      	ldr	r3, [pc, #116]	; (4016d8 <xQueueGenericReset+0x80>)
  401662:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401664:	6822      	ldr	r2, [r4, #0]
  401666:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401668:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40166a:	fb03 f301 	mul.w	r3, r3, r1
  40166e:	18d0      	adds	r0, r2, r3
  401670:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401672:	2000      	movs	r0, #0
  401674:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401676:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401678:	1a5b      	subs	r3, r3, r1
  40167a:	4413      	add	r3, r2
  40167c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40167e:	f04f 33ff 	mov.w	r3, #4294967295
  401682:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401684:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401686:	b9fd      	cbnz	r5, 4016c8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401688:	6923      	ldr	r3, [r4, #16]
  40168a:	b12b      	cbz	r3, 401698 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40168c:	f104 0010 	add.w	r0, r4, #16
  401690:	4b12      	ldr	r3, [pc, #72]	; (4016dc <xQueueGenericReset+0x84>)
  401692:	4798      	blx	r3
  401694:	2801      	cmp	r0, #1
  401696:	d00e      	beq.n	4016b6 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401698:	4b11      	ldr	r3, [pc, #68]	; (4016e0 <xQueueGenericReset+0x88>)
  40169a:	4798      	blx	r3
}
  40169c:	2001      	movs	r0, #1
  40169e:	bd38      	pop	{r3, r4, r5, pc}
  4016a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016a4:	b672      	cpsid	i
  4016a6:	f383 8811 	msr	BASEPRI, r3
  4016aa:	f3bf 8f6f 	isb	sy
  4016ae:	f3bf 8f4f 	dsb	sy
  4016b2:	b662      	cpsie	i
  4016b4:	e7fe      	b.n	4016b4 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4016b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016ba:	4b0a      	ldr	r3, [pc, #40]	; (4016e4 <xQueueGenericReset+0x8c>)
  4016bc:	601a      	str	r2, [r3, #0]
  4016be:	f3bf 8f4f 	dsb	sy
  4016c2:	f3bf 8f6f 	isb	sy
  4016c6:	e7e7      	b.n	401698 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4016c8:	f104 0010 	add.w	r0, r4, #16
  4016cc:	4d06      	ldr	r5, [pc, #24]	; (4016e8 <xQueueGenericReset+0x90>)
  4016ce:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4016d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016d4:	47a8      	blx	r5
  4016d6:	e7df      	b.n	401698 <xQueueGenericReset+0x40>
  4016d8:	004011cd 	.word	0x004011cd
  4016dc:	00402571 	.word	0x00402571
  4016e0:	00401219 	.word	0x00401219
  4016e4:	e000ed04 	.word	0xe000ed04
  4016e8:	00401081 	.word	0x00401081

004016ec <xQueueGenericCreate>:
{
  4016ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4016ee:	b950      	cbnz	r0, 401706 <xQueueGenericCreate+0x1a>
  4016f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016f4:	b672      	cpsid	i
  4016f6:	f383 8811 	msr	BASEPRI, r3
  4016fa:	f3bf 8f6f 	isb	sy
  4016fe:	f3bf 8f4f 	dsb	sy
  401702:	b662      	cpsie	i
  401704:	e7fe      	b.n	401704 <xQueueGenericCreate+0x18>
  401706:	4606      	mov	r6, r0
  401708:	4617      	mov	r7, r2
  40170a:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  40170c:	b189      	cbz	r1, 401732 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40170e:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401712:	3059      	adds	r0, #89	; 0x59
  401714:	4b12      	ldr	r3, [pc, #72]	; (401760 <xQueueGenericCreate+0x74>)
  401716:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401718:	4604      	mov	r4, r0
  40171a:	b9e8      	cbnz	r0, 401758 <xQueueGenericCreate+0x6c>
  40171c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401720:	b672      	cpsid	i
  401722:	f383 8811 	msr	BASEPRI, r3
  401726:	f3bf 8f6f 	isb	sy
  40172a:	f3bf 8f4f 	dsb	sy
  40172e:	b662      	cpsie	i
  401730:	e7fe      	b.n	401730 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401732:	2058      	movs	r0, #88	; 0x58
  401734:	4b0a      	ldr	r3, [pc, #40]	; (401760 <xQueueGenericCreate+0x74>)
  401736:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401738:	4604      	mov	r4, r0
  40173a:	2800      	cmp	r0, #0
  40173c:	d0ee      	beq.n	40171c <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40173e:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401740:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401742:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401744:	2101      	movs	r1, #1
  401746:	4620      	mov	r0, r4
  401748:	4b06      	ldr	r3, [pc, #24]	; (401764 <xQueueGenericCreate+0x78>)
  40174a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  40174c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401750:	2300      	movs	r3, #0
  401752:	6563      	str	r3, [r4, #84]	; 0x54
}
  401754:	4620      	mov	r0, r4
  401756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401758:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40175c:	6003      	str	r3, [r0, #0]
  40175e:	e7ef      	b.n	401740 <xQueueGenericCreate+0x54>
  401760:	00401429 	.word	0x00401429
  401764:	00401659 	.word	0x00401659

00401768 <xQueueGenericSend>:
{
  401768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40176c:	b085      	sub	sp, #20
  40176e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401770:	b1b8      	cbz	r0, 4017a2 <xQueueGenericSend+0x3a>
  401772:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401774:	b301      	cbz	r1, 4017b8 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401776:	2b02      	cmp	r3, #2
  401778:	d02c      	beq.n	4017d4 <xQueueGenericSend+0x6c>
  40177a:	461d      	mov	r5, r3
  40177c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40177e:	4b66      	ldr	r3, [pc, #408]	; (401918 <xQueueGenericSend+0x1b0>)
  401780:	4798      	blx	r3
  401782:	2800      	cmp	r0, #0
  401784:	d134      	bne.n	4017f0 <xQueueGenericSend+0x88>
  401786:	9b01      	ldr	r3, [sp, #4]
  401788:	2b00      	cmp	r3, #0
  40178a:	d038      	beq.n	4017fe <xQueueGenericSend+0x96>
  40178c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401790:	b672      	cpsid	i
  401792:	f383 8811 	msr	BASEPRI, r3
  401796:	f3bf 8f6f 	isb	sy
  40179a:	f3bf 8f4f 	dsb	sy
  40179e:	b662      	cpsie	i
  4017a0:	e7fe      	b.n	4017a0 <xQueueGenericSend+0x38>
  4017a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017a6:	b672      	cpsid	i
  4017a8:	f383 8811 	msr	BASEPRI, r3
  4017ac:	f3bf 8f6f 	isb	sy
  4017b0:	f3bf 8f4f 	dsb	sy
  4017b4:	b662      	cpsie	i
  4017b6:	e7fe      	b.n	4017b6 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4017ba:	2a00      	cmp	r2, #0
  4017bc:	d0db      	beq.n	401776 <xQueueGenericSend+0xe>
  4017be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017c2:	b672      	cpsid	i
  4017c4:	f383 8811 	msr	BASEPRI, r3
  4017c8:	f3bf 8f6f 	isb	sy
  4017cc:	f3bf 8f4f 	dsb	sy
  4017d0:	b662      	cpsie	i
  4017d2:	e7fe      	b.n	4017d2 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4017d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4017d6:	2a01      	cmp	r2, #1
  4017d8:	d0cf      	beq.n	40177a <xQueueGenericSend+0x12>
  4017da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017de:	b672      	cpsid	i
  4017e0:	f383 8811 	msr	BASEPRI, r3
  4017e4:	f3bf 8f6f 	isb	sy
  4017e8:	f3bf 8f4f 	dsb	sy
  4017ec:	b662      	cpsie	i
  4017ee:	e7fe      	b.n	4017ee <xQueueGenericSend+0x86>
  4017f0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4017f2:	4e4a      	ldr	r6, [pc, #296]	; (40191c <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4017f4:	f8df a150 	ldr.w	sl, [pc, #336]	; 401948 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4017f8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401928 <xQueueGenericSend+0x1c0>
  4017fc:	e042      	b.n	401884 <xQueueGenericSend+0x11c>
  4017fe:	2700      	movs	r7, #0
  401800:	e7f7      	b.n	4017f2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401802:	462a      	mov	r2, r5
  401804:	4641      	mov	r1, r8
  401806:	4620      	mov	r0, r4
  401808:	4b45      	ldr	r3, [pc, #276]	; (401920 <xQueueGenericSend+0x1b8>)
  40180a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  40180c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40180e:	b19b      	cbz	r3, 401838 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401810:	4629      	mov	r1, r5
  401812:	4620      	mov	r0, r4
  401814:	4b43      	ldr	r3, [pc, #268]	; (401924 <xQueueGenericSend+0x1bc>)
  401816:	4798      	blx	r3
  401818:	2801      	cmp	r0, #1
  40181a:	d107      	bne.n	40182c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40181c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401820:	4b41      	ldr	r3, [pc, #260]	; (401928 <xQueueGenericSend+0x1c0>)
  401822:	601a      	str	r2, [r3, #0]
  401824:	f3bf 8f4f 	dsb	sy
  401828:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40182c:	4b3f      	ldr	r3, [pc, #252]	; (40192c <xQueueGenericSend+0x1c4>)
  40182e:	4798      	blx	r3
				return pdPASS;
  401830:	2001      	movs	r0, #1
}
  401832:	b005      	add	sp, #20
  401834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401838:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40183a:	b173      	cbz	r3, 40185a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40183c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401840:	4b3b      	ldr	r3, [pc, #236]	; (401930 <xQueueGenericSend+0x1c8>)
  401842:	4798      	blx	r3
  401844:	2801      	cmp	r0, #1
  401846:	d1f1      	bne.n	40182c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40184c:	4b36      	ldr	r3, [pc, #216]	; (401928 <xQueueGenericSend+0x1c0>)
  40184e:	601a      	str	r2, [r3, #0]
  401850:	f3bf 8f4f 	dsb	sy
  401854:	f3bf 8f6f 	isb	sy
  401858:	e7e8      	b.n	40182c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40185a:	2800      	cmp	r0, #0
  40185c:	d0e6      	beq.n	40182c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40185e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401862:	4b31      	ldr	r3, [pc, #196]	; (401928 <xQueueGenericSend+0x1c0>)
  401864:	601a      	str	r2, [r3, #0]
  401866:	f3bf 8f4f 	dsb	sy
  40186a:	f3bf 8f6f 	isb	sy
  40186e:	e7dd      	b.n	40182c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401870:	4b2e      	ldr	r3, [pc, #184]	; (40192c <xQueueGenericSend+0x1c4>)
  401872:	4798      	blx	r3
					return errQUEUE_FULL;
  401874:	2000      	movs	r0, #0
  401876:	e7dc      	b.n	401832 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401878:	4620      	mov	r0, r4
  40187a:	4b2e      	ldr	r3, [pc, #184]	; (401934 <xQueueGenericSend+0x1cc>)
  40187c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40187e:	4b2e      	ldr	r3, [pc, #184]	; (401938 <xQueueGenericSend+0x1d0>)
  401880:	4798      	blx	r3
  401882:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401884:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401886:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401888:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40188a:	429a      	cmp	r2, r3
  40188c:	d3b9      	bcc.n	401802 <xQueueGenericSend+0x9a>
  40188e:	2d02      	cmp	r5, #2
  401890:	d0b7      	beq.n	401802 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401892:	9b01      	ldr	r3, [sp, #4]
  401894:	2b00      	cmp	r3, #0
  401896:	d0eb      	beq.n	401870 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401898:	b90f      	cbnz	r7, 40189e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40189a:	a802      	add	r0, sp, #8
  40189c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40189e:	4b23      	ldr	r3, [pc, #140]	; (40192c <xQueueGenericSend+0x1c4>)
  4018a0:	4798      	blx	r3
		vTaskSuspendAll();
  4018a2:	4b26      	ldr	r3, [pc, #152]	; (40193c <xQueueGenericSend+0x1d4>)
  4018a4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4018a6:	47b0      	blx	r6
  4018a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4018aa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018ae:	d101      	bne.n	4018b4 <xQueueGenericSend+0x14c>
  4018b0:	2300      	movs	r3, #0
  4018b2:	6463      	str	r3, [r4, #68]	; 0x44
  4018b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018ba:	d101      	bne.n	4018c0 <xQueueGenericSend+0x158>
  4018bc:	2300      	movs	r3, #0
  4018be:	64a3      	str	r3, [r4, #72]	; 0x48
  4018c0:	4b1a      	ldr	r3, [pc, #104]	; (40192c <xQueueGenericSend+0x1c4>)
  4018c2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4018c4:	a901      	add	r1, sp, #4
  4018c6:	a802      	add	r0, sp, #8
  4018c8:	4b1d      	ldr	r3, [pc, #116]	; (401940 <xQueueGenericSend+0x1d8>)
  4018ca:	4798      	blx	r3
  4018cc:	b9e0      	cbnz	r0, 401908 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  4018ce:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4018d0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4018d4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4018d6:	4b15      	ldr	r3, [pc, #84]	; (40192c <xQueueGenericSend+0x1c4>)
  4018d8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4018da:	45bb      	cmp	fp, r7
  4018dc:	d1cc      	bne.n	401878 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4018de:	9901      	ldr	r1, [sp, #4]
  4018e0:	f104 0010 	add.w	r0, r4, #16
  4018e4:	4b17      	ldr	r3, [pc, #92]	; (401944 <xQueueGenericSend+0x1dc>)
  4018e6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4018e8:	4620      	mov	r0, r4
  4018ea:	4b12      	ldr	r3, [pc, #72]	; (401934 <xQueueGenericSend+0x1cc>)
  4018ec:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4018ee:	4b12      	ldr	r3, [pc, #72]	; (401938 <xQueueGenericSend+0x1d0>)
  4018f0:	4798      	blx	r3
  4018f2:	2800      	cmp	r0, #0
  4018f4:	d1c5      	bne.n	401882 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4018f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4018fa:	f8c9 3000 	str.w	r3, [r9]
  4018fe:	f3bf 8f4f 	dsb	sy
  401902:	f3bf 8f6f 	isb	sy
  401906:	e7bc      	b.n	401882 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401908:	4620      	mov	r0, r4
  40190a:	4b0a      	ldr	r3, [pc, #40]	; (401934 <xQueueGenericSend+0x1cc>)
  40190c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40190e:	4b0a      	ldr	r3, [pc, #40]	; (401938 <xQueueGenericSend+0x1d0>)
  401910:	4798      	blx	r3
			return errQUEUE_FULL;
  401912:	2000      	movs	r0, #0
  401914:	e78d      	b.n	401832 <xQueueGenericSend+0xca>
  401916:	bf00      	nop
  401918:	004026d9 	.word	0x004026d9
  40191c:	004011cd 	.word	0x004011cd
  401920:	0040147d 	.word	0x0040147d
  401924:	00401505 	.word	0x00401505
  401928:	e000ed04 	.word	0xe000ed04
  40192c:	00401219 	.word	0x00401219
  401930:	00402571 	.word	0x00402571
  401934:	004015b5 	.word	0x004015b5
  401938:	00402155 	.word	0x00402155
  40193c:	00401fed 	.word	0x00401fed
  401940:	00402639 	.word	0x00402639
  401944:	0040246d 	.word	0x0040246d
  401948:	00402609 	.word	0x00402609

0040194c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  40194c:	2800      	cmp	r0, #0
  40194e:	d036      	beq.n	4019be <xQueueGenericSendFromISR+0x72>
{
  401950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401954:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401956:	2900      	cmp	r1, #0
  401958:	d03c      	beq.n	4019d4 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40195a:	2b02      	cmp	r3, #2
  40195c:	d048      	beq.n	4019f0 <xQueueGenericSendFromISR+0xa4>
  40195e:	461e      	mov	r6, r3
  401960:	4615      	mov	r5, r2
  401962:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401964:	4b35      	ldr	r3, [pc, #212]	; (401a3c <xQueueGenericSendFromISR+0xf0>)
  401966:	4798      	blx	r3
	__asm volatile
  401968:	f3ef 8711 	mrs	r7, BASEPRI
  40196c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401970:	b672      	cpsid	i
  401972:	f383 8811 	msr	BASEPRI, r3
  401976:	f3bf 8f6f 	isb	sy
  40197a:	f3bf 8f4f 	dsb	sy
  40197e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401980:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401982:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401984:	429a      	cmp	r2, r3
  401986:	d301      	bcc.n	40198c <xQueueGenericSendFromISR+0x40>
  401988:	2e02      	cmp	r6, #2
  40198a:	d14f      	bne.n	401a2c <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40198c:	4632      	mov	r2, r6
  40198e:	4641      	mov	r1, r8
  401990:	4620      	mov	r0, r4
  401992:	4b2b      	ldr	r3, [pc, #172]	; (401a40 <xQueueGenericSendFromISR+0xf4>)
  401994:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401996:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401998:	f1b3 3fff 	cmp.w	r3, #4294967295
  40199c:	d141      	bne.n	401a22 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40199e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019a0:	2b00      	cmp	r3, #0
  4019a2:	d033      	beq.n	401a0c <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4019a4:	4631      	mov	r1, r6
  4019a6:	4620      	mov	r0, r4
  4019a8:	4b26      	ldr	r3, [pc, #152]	; (401a44 <xQueueGenericSendFromISR+0xf8>)
  4019aa:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4019ac:	2d00      	cmp	r5, #0
  4019ae:	d03f      	beq.n	401a30 <xQueueGenericSendFromISR+0xe4>
  4019b0:	2801      	cmp	r0, #1
  4019b2:	d13d      	bne.n	401a30 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4019b4:	6028      	str	r0, [r5, #0]
	__asm volatile
  4019b6:	f387 8811 	msr	BASEPRI, r7
}
  4019ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4019be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019c2:	b672      	cpsid	i
  4019c4:	f383 8811 	msr	BASEPRI, r3
  4019c8:	f3bf 8f6f 	isb	sy
  4019cc:	f3bf 8f4f 	dsb	sy
  4019d0:	b662      	cpsie	i
  4019d2:	e7fe      	b.n	4019d2 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4019d4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4019d6:	2800      	cmp	r0, #0
  4019d8:	d0bf      	beq.n	40195a <xQueueGenericSendFromISR+0xe>
  4019da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019de:	b672      	cpsid	i
  4019e0:	f383 8811 	msr	BASEPRI, r3
  4019e4:	f3bf 8f6f 	isb	sy
  4019e8:	f3bf 8f4f 	dsb	sy
  4019ec:	b662      	cpsie	i
  4019ee:	e7fe      	b.n	4019ee <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4019f0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4019f2:	2801      	cmp	r0, #1
  4019f4:	d0b3      	beq.n	40195e <xQueueGenericSendFromISR+0x12>
  4019f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019fa:	b672      	cpsid	i
  4019fc:	f383 8811 	msr	BASEPRI, r3
  401a00:	f3bf 8f6f 	isb	sy
  401a04:	f3bf 8f4f 	dsb	sy
  401a08:	b662      	cpsie	i
  401a0a:	e7fe      	b.n	401a0a <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a0e:	b18b      	cbz	r3, 401a34 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a10:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a14:	4b0c      	ldr	r3, [pc, #48]	; (401a48 <xQueueGenericSendFromISR+0xfc>)
  401a16:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401a18:	b175      	cbz	r5, 401a38 <xQueueGenericSendFromISR+0xec>
  401a1a:	b168      	cbz	r0, 401a38 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401a1c:	2001      	movs	r0, #1
  401a1e:	6028      	str	r0, [r5, #0]
  401a20:	e7c9      	b.n	4019b6 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401a22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a24:	3301      	adds	r3, #1
  401a26:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401a28:	2001      	movs	r0, #1
  401a2a:	e7c4      	b.n	4019b6 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401a2c:	2000      	movs	r0, #0
  401a2e:	e7c2      	b.n	4019b6 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401a30:	2001      	movs	r0, #1
  401a32:	e7c0      	b.n	4019b6 <xQueueGenericSendFromISR+0x6a>
  401a34:	2001      	movs	r0, #1
  401a36:	e7be      	b.n	4019b6 <xQueueGenericSendFromISR+0x6a>
  401a38:	2001      	movs	r0, #1
  401a3a:	e7bc      	b.n	4019b6 <xQueueGenericSendFromISR+0x6a>
  401a3c:	004013c5 	.word	0x004013c5
  401a40:	0040147d 	.word	0x0040147d
  401a44:	00401505 	.word	0x00401505
  401a48:	00402571 	.word	0x00402571

00401a4c <xQueueGenericReceive>:
{
  401a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401a50:	b084      	sub	sp, #16
  401a52:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401a54:	b198      	cbz	r0, 401a7e <xQueueGenericReceive+0x32>
  401a56:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a58:	b1e1      	cbz	r1, 401a94 <xQueueGenericReceive+0x48>
  401a5a:	4698      	mov	r8, r3
  401a5c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401a5e:	4b61      	ldr	r3, [pc, #388]	; (401be4 <xQueueGenericReceive+0x198>)
  401a60:	4798      	blx	r3
  401a62:	bb28      	cbnz	r0, 401ab0 <xQueueGenericReceive+0x64>
  401a64:	9b01      	ldr	r3, [sp, #4]
  401a66:	b353      	cbz	r3, 401abe <xQueueGenericReceive+0x72>
  401a68:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a6c:	b672      	cpsid	i
  401a6e:	f383 8811 	msr	BASEPRI, r3
  401a72:	f3bf 8f6f 	isb	sy
  401a76:	f3bf 8f4f 	dsb	sy
  401a7a:	b662      	cpsie	i
  401a7c:	e7fe      	b.n	401a7c <xQueueGenericReceive+0x30>
  401a7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a82:	b672      	cpsid	i
  401a84:	f383 8811 	msr	BASEPRI, r3
  401a88:	f3bf 8f6f 	isb	sy
  401a8c:	f3bf 8f4f 	dsb	sy
  401a90:	b662      	cpsie	i
  401a92:	e7fe      	b.n	401a92 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a94:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401a96:	2a00      	cmp	r2, #0
  401a98:	d0df      	beq.n	401a5a <xQueueGenericReceive+0xe>
  401a9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9e:	b672      	cpsid	i
  401aa0:	f383 8811 	msr	BASEPRI, r3
  401aa4:	f3bf 8f6f 	isb	sy
  401aa8:	f3bf 8f4f 	dsb	sy
  401aac:	b662      	cpsie	i
  401aae:	e7fe      	b.n	401aae <xQueueGenericReceive+0x62>
  401ab0:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401ab2:	4d4d      	ldr	r5, [pc, #308]	; (401be8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401ab4:	f8df a160 	ldr.w	sl, [pc, #352]	; 401c18 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401ab8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401bf8 <xQueueGenericReceive+0x1ac>
  401abc:	e04b      	b.n	401b56 <xQueueGenericReceive+0x10a>
  401abe:	2600      	movs	r6, #0
  401ac0:	e7f7      	b.n	401ab2 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401ac2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401ac4:	4639      	mov	r1, r7
  401ac6:	4620      	mov	r0, r4
  401ac8:	4b48      	ldr	r3, [pc, #288]	; (401bec <xQueueGenericReceive+0x1a0>)
  401aca:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401acc:	f1b8 0f00 	cmp.w	r8, #0
  401ad0:	d11d      	bne.n	401b0e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401ad4:	3b01      	subs	r3, #1
  401ad6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401ad8:	6823      	ldr	r3, [r4, #0]
  401ada:	b913      	cbnz	r3, 401ae2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401adc:	4b44      	ldr	r3, [pc, #272]	; (401bf0 <xQueueGenericReceive+0x1a4>)
  401ade:	4798      	blx	r3
  401ae0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ae2:	6923      	ldr	r3, [r4, #16]
  401ae4:	b16b      	cbz	r3, 401b02 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401ae6:	f104 0010 	add.w	r0, r4, #16
  401aea:	4b42      	ldr	r3, [pc, #264]	; (401bf4 <xQueueGenericReceive+0x1a8>)
  401aec:	4798      	blx	r3
  401aee:	2801      	cmp	r0, #1
  401af0:	d107      	bne.n	401b02 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401af6:	4b40      	ldr	r3, [pc, #256]	; (401bf8 <xQueueGenericReceive+0x1ac>)
  401af8:	601a      	str	r2, [r3, #0]
  401afa:	f3bf 8f4f 	dsb	sy
  401afe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401b02:	4b3e      	ldr	r3, [pc, #248]	; (401bfc <xQueueGenericReceive+0x1b0>)
  401b04:	4798      	blx	r3
				return pdPASS;
  401b06:	2001      	movs	r0, #1
}
  401b08:	b004      	add	sp, #16
  401b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401b0e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b12:	2b00      	cmp	r3, #0
  401b14:	d0f5      	beq.n	401b02 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401b16:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b1a:	4b36      	ldr	r3, [pc, #216]	; (401bf4 <xQueueGenericReceive+0x1a8>)
  401b1c:	4798      	blx	r3
  401b1e:	2800      	cmp	r0, #0
  401b20:	d0ef      	beq.n	401b02 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b26:	4b34      	ldr	r3, [pc, #208]	; (401bf8 <xQueueGenericReceive+0x1ac>)
  401b28:	601a      	str	r2, [r3, #0]
  401b2a:	f3bf 8f4f 	dsb	sy
  401b2e:	f3bf 8f6f 	isb	sy
  401b32:	e7e6      	b.n	401b02 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401b34:	4b31      	ldr	r3, [pc, #196]	; (401bfc <xQueueGenericReceive+0x1b0>)
  401b36:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401b38:	2000      	movs	r0, #0
  401b3a:	e7e5      	b.n	401b08 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401b3c:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401b3e:	6860      	ldr	r0, [r4, #4]
  401b40:	4b2f      	ldr	r3, [pc, #188]	; (401c00 <xQueueGenericReceive+0x1b4>)
  401b42:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401b44:	4b2d      	ldr	r3, [pc, #180]	; (401bfc <xQueueGenericReceive+0x1b0>)
  401b46:	4798      	blx	r3
  401b48:	e030      	b.n	401bac <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401b4a:	4620      	mov	r0, r4
  401b4c:	4b2d      	ldr	r3, [pc, #180]	; (401c04 <xQueueGenericReceive+0x1b8>)
  401b4e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401b50:	4b2d      	ldr	r3, [pc, #180]	; (401c08 <xQueueGenericReceive+0x1bc>)
  401b52:	4798      	blx	r3
  401b54:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401b56:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d1b1      	bne.n	401ac2 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401b5e:	9b01      	ldr	r3, [sp, #4]
  401b60:	2b00      	cmp	r3, #0
  401b62:	d0e7      	beq.n	401b34 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401b64:	b90e      	cbnz	r6, 401b6a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401b66:	a802      	add	r0, sp, #8
  401b68:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401b6a:	4b24      	ldr	r3, [pc, #144]	; (401bfc <xQueueGenericReceive+0x1b0>)
  401b6c:	4798      	blx	r3
		vTaskSuspendAll();
  401b6e:	4b27      	ldr	r3, [pc, #156]	; (401c0c <xQueueGenericReceive+0x1c0>)
  401b70:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401b72:	47a8      	blx	r5
  401b74:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401b76:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b7a:	d101      	bne.n	401b80 <xQueueGenericReceive+0x134>
  401b7c:	2300      	movs	r3, #0
  401b7e:	6463      	str	r3, [r4, #68]	; 0x44
  401b80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b82:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b86:	d101      	bne.n	401b8c <xQueueGenericReceive+0x140>
  401b88:	2300      	movs	r3, #0
  401b8a:	64a3      	str	r3, [r4, #72]	; 0x48
  401b8c:	4b1b      	ldr	r3, [pc, #108]	; (401bfc <xQueueGenericReceive+0x1b0>)
  401b8e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401b90:	a901      	add	r1, sp, #4
  401b92:	a802      	add	r0, sp, #8
  401b94:	4b1e      	ldr	r3, [pc, #120]	; (401c10 <xQueueGenericReceive+0x1c4>)
  401b96:	4798      	blx	r3
  401b98:	b9e8      	cbnz	r0, 401bd6 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401b9a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401b9c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401b9e:	4b17      	ldr	r3, [pc, #92]	; (401bfc <xQueueGenericReceive+0x1b0>)
  401ba0:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401ba2:	2e00      	cmp	r6, #0
  401ba4:	d1d1      	bne.n	401b4a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401ba6:	6823      	ldr	r3, [r4, #0]
  401ba8:	2b00      	cmp	r3, #0
  401baa:	d0c7      	beq.n	401b3c <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401bac:	9901      	ldr	r1, [sp, #4]
  401bae:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401bb2:	4b18      	ldr	r3, [pc, #96]	; (401c14 <xQueueGenericReceive+0x1c8>)
  401bb4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401bb6:	4620      	mov	r0, r4
  401bb8:	4b12      	ldr	r3, [pc, #72]	; (401c04 <xQueueGenericReceive+0x1b8>)
  401bba:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401bbc:	4b12      	ldr	r3, [pc, #72]	; (401c08 <xQueueGenericReceive+0x1bc>)
  401bbe:	4798      	blx	r3
  401bc0:	2800      	cmp	r0, #0
  401bc2:	d1c7      	bne.n	401b54 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401bc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401bc8:	f8c9 3000 	str.w	r3, [r9]
  401bcc:	f3bf 8f4f 	dsb	sy
  401bd0:	f3bf 8f6f 	isb	sy
  401bd4:	e7be      	b.n	401b54 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401bd6:	4620      	mov	r0, r4
  401bd8:	4b0a      	ldr	r3, [pc, #40]	; (401c04 <xQueueGenericReceive+0x1b8>)
  401bda:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401bdc:	4b0a      	ldr	r3, [pc, #40]	; (401c08 <xQueueGenericReceive+0x1bc>)
  401bde:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401be0:	2000      	movs	r0, #0
  401be2:	e791      	b.n	401b08 <xQueueGenericReceive+0xbc>
  401be4:	004026d9 	.word	0x004026d9
  401be8:	004011cd 	.word	0x004011cd
  401bec:	0040158d 	.word	0x0040158d
  401bf0:	00402859 	.word	0x00402859
  401bf4:	00402571 	.word	0x00402571
  401bf8:	e000ed04 	.word	0xe000ed04
  401bfc:	00401219 	.word	0x00401219
  401c00:	004026f9 	.word	0x004026f9
  401c04:	004015b5 	.word	0x004015b5
  401c08:	00402155 	.word	0x00402155
  401c0c:	00401fed 	.word	0x00401fed
  401c10:	00402639 	.word	0x00402639
  401c14:	0040246d 	.word	0x0040246d
  401c18:	00402609 	.word	0x00402609

00401c1c <vQueueAddToRegistry>:
	{
  401c1c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401c1e:	4b0b      	ldr	r3, [pc, #44]	; (401c4c <vQueueAddToRegistry+0x30>)
  401c20:	681b      	ldr	r3, [r3, #0]
  401c22:	b153      	cbz	r3, 401c3a <vQueueAddToRegistry+0x1e>
  401c24:	2301      	movs	r3, #1
  401c26:	4c09      	ldr	r4, [pc, #36]	; (401c4c <vQueueAddToRegistry+0x30>)
  401c28:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401c2c:	b132      	cbz	r2, 401c3c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401c2e:	3301      	adds	r3, #1
  401c30:	2b08      	cmp	r3, #8
  401c32:	d1f9      	bne.n	401c28 <vQueueAddToRegistry+0xc>
	}
  401c34:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c38:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401c3a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401c3c:	4a03      	ldr	r2, [pc, #12]	; (401c4c <vQueueAddToRegistry+0x30>)
  401c3e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401c42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401c46:	6058      	str	r0, [r3, #4]
				break;
  401c48:	e7f4      	b.n	401c34 <vQueueAddToRegistry+0x18>
  401c4a:	bf00      	nop
  401c4c:	20400c54 	.word	0x20400c54

00401c50 <vQueueWaitForMessageRestricted>:
	{
  401c50:	b570      	push	{r4, r5, r6, lr}
  401c52:	4604      	mov	r4, r0
  401c54:	460d      	mov	r5, r1
  401c56:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401c58:	4b0f      	ldr	r3, [pc, #60]	; (401c98 <vQueueWaitForMessageRestricted+0x48>)
  401c5a:	4798      	blx	r3
  401c5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c62:	d00b      	beq.n	401c7c <vQueueWaitForMessageRestricted+0x2c>
  401c64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c66:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c6a:	d00a      	beq.n	401c82 <vQueueWaitForMessageRestricted+0x32>
  401c6c:	4b0b      	ldr	r3, [pc, #44]	; (401c9c <vQueueWaitForMessageRestricted+0x4c>)
  401c6e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401c70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c72:	b14b      	cbz	r3, 401c88 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401c74:	4620      	mov	r0, r4
  401c76:	4b0a      	ldr	r3, [pc, #40]	; (401ca0 <vQueueWaitForMessageRestricted+0x50>)
  401c78:	4798      	blx	r3
  401c7a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401c7c:	2300      	movs	r3, #0
  401c7e:	6463      	str	r3, [r4, #68]	; 0x44
  401c80:	e7f0      	b.n	401c64 <vQueueWaitForMessageRestricted+0x14>
  401c82:	2300      	movs	r3, #0
  401c84:	64a3      	str	r3, [r4, #72]	; 0x48
  401c86:	e7f1      	b.n	401c6c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401c88:	4632      	mov	r2, r6
  401c8a:	4629      	mov	r1, r5
  401c8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c90:	4b04      	ldr	r3, [pc, #16]	; (401ca4 <vQueueWaitForMessageRestricted+0x54>)
  401c92:	4798      	blx	r3
  401c94:	e7ee      	b.n	401c74 <vQueueWaitForMessageRestricted+0x24>
  401c96:	bf00      	nop
  401c98:	004011cd 	.word	0x004011cd
  401c9c:	00401219 	.word	0x00401219
  401ca0:	004015b5 	.word	0x004015b5
  401ca4:	004024f1 	.word	0x004024f1

00401ca8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401ca8:	4b08      	ldr	r3, [pc, #32]	; (401ccc <prvResetNextTaskUnblockTime+0x24>)
  401caa:	681b      	ldr	r3, [r3, #0]
  401cac:	681b      	ldr	r3, [r3, #0]
  401cae:	b13b      	cbz	r3, 401cc0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401cb0:	4b06      	ldr	r3, [pc, #24]	; (401ccc <prvResetNextTaskUnblockTime+0x24>)
  401cb2:	681b      	ldr	r3, [r3, #0]
  401cb4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401cb6:	68db      	ldr	r3, [r3, #12]
  401cb8:	685a      	ldr	r2, [r3, #4]
  401cba:	4b05      	ldr	r3, [pc, #20]	; (401cd0 <prvResetNextTaskUnblockTime+0x28>)
  401cbc:	601a      	str	r2, [r3, #0]
  401cbe:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401cc0:	f04f 32ff 	mov.w	r2, #4294967295
  401cc4:	4b02      	ldr	r3, [pc, #8]	; (401cd0 <prvResetNextTaskUnblockTime+0x28>)
  401cc6:	601a      	str	r2, [r3, #0]
  401cc8:	4770      	bx	lr
  401cca:	bf00      	nop
  401ccc:	20400a58 	.word	0x20400a58
  401cd0:	20400b04 	.word	0x20400b04

00401cd4 <prvAddCurrentTaskToDelayedList>:
{
  401cd4:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401cd6:	4b0f      	ldr	r3, [pc, #60]	; (401d14 <prvAddCurrentTaskToDelayedList+0x40>)
  401cd8:	681b      	ldr	r3, [r3, #0]
  401cda:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401cdc:	4b0e      	ldr	r3, [pc, #56]	; (401d18 <prvAddCurrentTaskToDelayedList+0x44>)
  401cde:	681b      	ldr	r3, [r3, #0]
  401ce0:	4298      	cmp	r0, r3
  401ce2:	d30e      	bcc.n	401d02 <prvAddCurrentTaskToDelayedList+0x2e>
  401ce4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401ce6:	4b0d      	ldr	r3, [pc, #52]	; (401d1c <prvAddCurrentTaskToDelayedList+0x48>)
  401ce8:	6818      	ldr	r0, [r3, #0]
  401cea:	4b0a      	ldr	r3, [pc, #40]	; (401d14 <prvAddCurrentTaskToDelayedList+0x40>)
  401cec:	6819      	ldr	r1, [r3, #0]
  401cee:	3104      	adds	r1, #4
  401cf0:	4b0b      	ldr	r3, [pc, #44]	; (401d20 <prvAddCurrentTaskToDelayedList+0x4c>)
  401cf2:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401cf4:	4b0b      	ldr	r3, [pc, #44]	; (401d24 <prvAddCurrentTaskToDelayedList+0x50>)
  401cf6:	681b      	ldr	r3, [r3, #0]
  401cf8:	429c      	cmp	r4, r3
  401cfa:	d201      	bcs.n	401d00 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401cfc:	4b09      	ldr	r3, [pc, #36]	; (401d24 <prvAddCurrentTaskToDelayedList+0x50>)
  401cfe:	601c      	str	r4, [r3, #0]
  401d00:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d02:	4b09      	ldr	r3, [pc, #36]	; (401d28 <prvAddCurrentTaskToDelayedList+0x54>)
  401d04:	6818      	ldr	r0, [r3, #0]
  401d06:	4b03      	ldr	r3, [pc, #12]	; (401d14 <prvAddCurrentTaskToDelayedList+0x40>)
  401d08:	6819      	ldr	r1, [r3, #0]
  401d0a:	3104      	adds	r1, #4
  401d0c:	4b04      	ldr	r3, [pc, #16]	; (401d20 <prvAddCurrentTaskToDelayedList+0x4c>)
  401d0e:	4798      	blx	r3
  401d10:	bd10      	pop	{r4, pc}
  401d12:	bf00      	nop
  401d14:	20400a54 	.word	0x20400a54
  401d18:	20400b4c 	.word	0x20400b4c
  401d1c:	20400a58 	.word	0x20400a58
  401d20:	004010b5 	.word	0x004010b5
  401d24:	20400b04 	.word	0x20400b04
  401d28:	20400a5c 	.word	0x20400a5c

00401d2c <xTaskGenericCreate>:
{
  401d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d30:	b083      	sub	sp, #12
  401d32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401d34:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401d38:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401d3a:	b160      	cbz	r0, 401d56 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401d3c:	2d04      	cmp	r5, #4
  401d3e:	d915      	bls.n	401d6c <xTaskGenericCreate+0x40>
  401d40:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d44:	b672      	cpsid	i
  401d46:	f383 8811 	msr	BASEPRI, r3
  401d4a:	f3bf 8f6f 	isb	sy
  401d4e:	f3bf 8f4f 	dsb	sy
  401d52:	b662      	cpsie	i
  401d54:	e7fe      	b.n	401d54 <xTaskGenericCreate+0x28>
  401d56:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d5a:	b672      	cpsid	i
  401d5c:	f383 8811 	msr	BASEPRI, r3
  401d60:	f3bf 8f6f 	isb	sy
  401d64:	f3bf 8f4f 	dsb	sy
  401d68:	b662      	cpsie	i
  401d6a:	e7fe      	b.n	401d6a <xTaskGenericCreate+0x3e>
  401d6c:	9001      	str	r0, [sp, #4]
  401d6e:	4698      	mov	r8, r3
  401d70:	4691      	mov	r9, r2
  401d72:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d74:	b936      	cbnz	r6, 401d84 <xTaskGenericCreate+0x58>
  401d76:	0090      	lsls	r0, r2, #2
  401d78:	4b62      	ldr	r3, [pc, #392]	; (401f04 <xTaskGenericCreate+0x1d8>)
  401d7a:	4798      	blx	r3
		if( pxStack != NULL )
  401d7c:	4606      	mov	r6, r0
  401d7e:	2800      	cmp	r0, #0
  401d80:	f000 809e 	beq.w	401ec0 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401d84:	2058      	movs	r0, #88	; 0x58
  401d86:	4b5f      	ldr	r3, [pc, #380]	; (401f04 <xTaskGenericCreate+0x1d8>)
  401d88:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401d8a:	4604      	mov	r4, r0
  401d8c:	2800      	cmp	r0, #0
  401d8e:	f000 8094 	beq.w	401eba <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401d92:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401d94:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401d98:	21a5      	movs	r1, #165	; 0xa5
  401d9a:	4630      	mov	r0, r6
  401d9c:	4b5a      	ldr	r3, [pc, #360]	; (401f08 <xTaskGenericCreate+0x1dc>)
  401d9e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401da0:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401da4:	444e      	add	r6, r9
  401da6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401da8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401dac:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401db0:	783b      	ldrb	r3, [r7, #0]
  401db2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401db6:	783b      	ldrb	r3, [r7, #0]
  401db8:	2b00      	cmp	r3, #0
  401dba:	f040 8084 	bne.w	401ec6 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401dbe:	2700      	movs	r7, #0
  401dc0:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401dc4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401dc6:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401dc8:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401dca:	f104 0904 	add.w	r9, r4, #4
  401dce:	4648      	mov	r0, r9
  401dd0:	f8df b184 	ldr.w	fp, [pc, #388]	; 401f58 <xTaskGenericCreate+0x22c>
  401dd4:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401dd6:	f104 0018 	add.w	r0, r4, #24
  401dda:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401ddc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dde:	f1c5 0305 	rsb	r3, r5, #5
  401de2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401de4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401de6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401de8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401dec:	4642      	mov	r2, r8
  401dee:	9901      	ldr	r1, [sp, #4]
  401df0:	4630      	mov	r0, r6
  401df2:	4b46      	ldr	r3, [pc, #280]	; (401f0c <xTaskGenericCreate+0x1e0>)
  401df4:	4798      	blx	r3
  401df6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401df8:	f1ba 0f00 	cmp.w	sl, #0
  401dfc:	d001      	beq.n	401e02 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401dfe:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401e02:	4b43      	ldr	r3, [pc, #268]	; (401f10 <xTaskGenericCreate+0x1e4>)
  401e04:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401e06:	4a43      	ldr	r2, [pc, #268]	; (401f14 <xTaskGenericCreate+0x1e8>)
  401e08:	6813      	ldr	r3, [r2, #0]
  401e0a:	3301      	adds	r3, #1
  401e0c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401e0e:	4b42      	ldr	r3, [pc, #264]	; (401f18 <xTaskGenericCreate+0x1ec>)
  401e10:	681b      	ldr	r3, [r3, #0]
  401e12:	2b00      	cmp	r3, #0
  401e14:	d166      	bne.n	401ee4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401e16:	4b40      	ldr	r3, [pc, #256]	; (401f18 <xTaskGenericCreate+0x1ec>)
  401e18:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401e1a:	6813      	ldr	r3, [r2, #0]
  401e1c:	2b01      	cmp	r3, #1
  401e1e:	d121      	bne.n	401e64 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401e20:	4f3e      	ldr	r7, [pc, #248]	; (401f1c <xTaskGenericCreate+0x1f0>)
  401e22:	4638      	mov	r0, r7
  401e24:	4e3e      	ldr	r6, [pc, #248]	; (401f20 <xTaskGenericCreate+0x1f4>)
  401e26:	47b0      	blx	r6
  401e28:	f107 0014 	add.w	r0, r7, #20
  401e2c:	47b0      	blx	r6
  401e2e:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401e32:	47b0      	blx	r6
  401e34:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401e38:	47b0      	blx	r6
  401e3a:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401e3e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401e40:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401f5c <xTaskGenericCreate+0x230>
  401e44:	4640      	mov	r0, r8
  401e46:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401e48:	4f36      	ldr	r7, [pc, #216]	; (401f24 <xTaskGenericCreate+0x1f8>)
  401e4a:	4638      	mov	r0, r7
  401e4c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401e4e:	4836      	ldr	r0, [pc, #216]	; (401f28 <xTaskGenericCreate+0x1fc>)
  401e50:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401e52:	4836      	ldr	r0, [pc, #216]	; (401f2c <xTaskGenericCreate+0x200>)
  401e54:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401e56:	4836      	ldr	r0, [pc, #216]	; (401f30 <xTaskGenericCreate+0x204>)
  401e58:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401e5a:	4b36      	ldr	r3, [pc, #216]	; (401f34 <xTaskGenericCreate+0x208>)
  401e5c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401e60:	4b35      	ldr	r3, [pc, #212]	; (401f38 <xTaskGenericCreate+0x20c>)
  401e62:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401e64:	4a35      	ldr	r2, [pc, #212]	; (401f3c <xTaskGenericCreate+0x210>)
  401e66:	6813      	ldr	r3, [r2, #0]
  401e68:	3301      	adds	r3, #1
  401e6a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401e6c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401e6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401e70:	4a33      	ldr	r2, [pc, #204]	; (401f40 <xTaskGenericCreate+0x214>)
  401e72:	6811      	ldr	r1, [r2, #0]
  401e74:	2301      	movs	r3, #1
  401e76:	4083      	lsls	r3, r0
  401e78:	430b      	orrs	r3, r1
  401e7a:	6013      	str	r3, [r2, #0]
  401e7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e80:	4649      	mov	r1, r9
  401e82:	4b26      	ldr	r3, [pc, #152]	; (401f1c <xTaskGenericCreate+0x1f0>)
  401e84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401e88:	4b2e      	ldr	r3, [pc, #184]	; (401f44 <xTaskGenericCreate+0x218>)
  401e8a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401e8c:	4b2e      	ldr	r3, [pc, #184]	; (401f48 <xTaskGenericCreate+0x21c>)
  401e8e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401e90:	4b2e      	ldr	r3, [pc, #184]	; (401f4c <xTaskGenericCreate+0x220>)
  401e92:	681b      	ldr	r3, [r3, #0]
  401e94:	2b00      	cmp	r3, #0
  401e96:	d031      	beq.n	401efc <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401e98:	4b1f      	ldr	r3, [pc, #124]	; (401f18 <xTaskGenericCreate+0x1ec>)
  401e9a:	681b      	ldr	r3, [r3, #0]
  401e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401e9e:	429d      	cmp	r5, r3
  401ea0:	d92e      	bls.n	401f00 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ea6:	4b2a      	ldr	r3, [pc, #168]	; (401f50 <xTaskGenericCreate+0x224>)
  401ea8:	601a      	str	r2, [r3, #0]
  401eaa:	f3bf 8f4f 	dsb	sy
  401eae:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401eb2:	2001      	movs	r0, #1
}
  401eb4:	b003      	add	sp, #12
  401eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401eba:	4630      	mov	r0, r6
  401ebc:	4b25      	ldr	r3, [pc, #148]	; (401f54 <xTaskGenericCreate+0x228>)
  401ebe:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401ec0:	f04f 30ff 	mov.w	r0, #4294967295
  401ec4:	e7f6      	b.n	401eb4 <xTaskGenericCreate+0x188>
  401ec6:	463b      	mov	r3, r7
  401ec8:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401ecc:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401ece:	7859      	ldrb	r1, [r3, #1]
  401ed0:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401ed4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401ed8:	2900      	cmp	r1, #0
  401eda:	f43f af70 	beq.w	401dbe <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401ede:	42bb      	cmp	r3, r7
  401ee0:	d1f5      	bne.n	401ece <xTaskGenericCreate+0x1a2>
  401ee2:	e76c      	b.n	401dbe <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401ee4:	4b19      	ldr	r3, [pc, #100]	; (401f4c <xTaskGenericCreate+0x220>)
  401ee6:	681b      	ldr	r3, [r3, #0]
  401ee8:	2b00      	cmp	r3, #0
  401eea:	d1bb      	bne.n	401e64 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401eec:	4b0a      	ldr	r3, [pc, #40]	; (401f18 <xTaskGenericCreate+0x1ec>)
  401eee:	681b      	ldr	r3, [r3, #0]
  401ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401ef2:	429d      	cmp	r5, r3
  401ef4:	d3b6      	bcc.n	401e64 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401ef6:	4b08      	ldr	r3, [pc, #32]	; (401f18 <xTaskGenericCreate+0x1ec>)
  401ef8:	601c      	str	r4, [r3, #0]
  401efa:	e7b3      	b.n	401e64 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401efc:	2001      	movs	r0, #1
  401efe:	e7d9      	b.n	401eb4 <xTaskGenericCreate+0x188>
  401f00:	2001      	movs	r0, #1
	return xReturn;
  401f02:	e7d7      	b.n	401eb4 <xTaskGenericCreate+0x188>
  401f04:	00401429 	.word	0x00401429
  401f08:	00404861 	.word	0x00404861
  401f0c:	00401181 	.word	0x00401181
  401f10:	004011cd 	.word	0x004011cd
  401f14:	20400ac4 	.word	0x20400ac4
  401f18:	20400a54 	.word	0x20400a54
  401f1c:	20400a60 	.word	0x20400a60
  401f20:	00401081 	.word	0x00401081
  401f24:	20400af0 	.word	0x20400af0
  401f28:	20400b0c 	.word	0x20400b0c
  401f2c:	20400b38 	.word	0x20400b38
  401f30:	20400b24 	.word	0x20400b24
  401f34:	20400a58 	.word	0x20400a58
  401f38:	20400a5c 	.word	0x20400a5c
  401f3c:	20400ad0 	.word	0x20400ad0
  401f40:	20400ad8 	.word	0x20400ad8
  401f44:	0040109d 	.word	0x0040109d
  401f48:	00401219 	.word	0x00401219
  401f4c:	20400b20 	.word	0x20400b20
  401f50:	e000ed04 	.word	0xe000ed04
  401f54:	00401459 	.word	0x00401459
  401f58:	00401097 	.word	0x00401097
  401f5c:	20400adc 	.word	0x20400adc

00401f60 <vTaskStartScheduler>:
{
  401f60:	b510      	push	{r4, lr}
  401f62:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401f64:	2300      	movs	r3, #0
  401f66:	9303      	str	r3, [sp, #12]
  401f68:	9302      	str	r3, [sp, #8]
  401f6a:	9301      	str	r3, [sp, #4]
  401f6c:	9300      	str	r3, [sp, #0]
  401f6e:	2282      	movs	r2, #130	; 0x82
  401f70:	4916      	ldr	r1, [pc, #88]	; (401fcc <vTaskStartScheduler+0x6c>)
  401f72:	4817      	ldr	r0, [pc, #92]	; (401fd0 <vTaskStartScheduler+0x70>)
  401f74:	4c17      	ldr	r4, [pc, #92]	; (401fd4 <vTaskStartScheduler+0x74>)
  401f76:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401f78:	2801      	cmp	r0, #1
  401f7a:	d00b      	beq.n	401f94 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  401f7c:	bb20      	cbnz	r0, 401fc8 <vTaskStartScheduler+0x68>
  401f7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f82:	b672      	cpsid	i
  401f84:	f383 8811 	msr	BASEPRI, r3
  401f88:	f3bf 8f6f 	isb	sy
  401f8c:	f3bf 8f4f 	dsb	sy
  401f90:	b662      	cpsie	i
  401f92:	e7fe      	b.n	401f92 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  401f94:	4b10      	ldr	r3, [pc, #64]	; (401fd8 <vTaskStartScheduler+0x78>)
  401f96:	4798      	blx	r3
	if( xReturn == pdPASS )
  401f98:	2801      	cmp	r0, #1
  401f9a:	d1ef      	bne.n	401f7c <vTaskStartScheduler+0x1c>
  401f9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fa0:	b672      	cpsid	i
  401fa2:	f383 8811 	msr	BASEPRI, r3
  401fa6:	f3bf 8f6f 	isb	sy
  401faa:	f3bf 8f4f 	dsb	sy
  401fae:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401fb0:	f04f 32ff 	mov.w	r2, #4294967295
  401fb4:	4b09      	ldr	r3, [pc, #36]	; (401fdc <vTaskStartScheduler+0x7c>)
  401fb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401fb8:	2201      	movs	r2, #1
  401fba:	4b09      	ldr	r3, [pc, #36]	; (401fe0 <vTaskStartScheduler+0x80>)
  401fbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401fbe:	2200      	movs	r2, #0
  401fc0:	4b08      	ldr	r3, [pc, #32]	; (401fe4 <vTaskStartScheduler+0x84>)
  401fc2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401fc4:	4b08      	ldr	r3, [pc, #32]	; (401fe8 <vTaskStartScheduler+0x88>)
  401fc6:	4798      	blx	r3
}
  401fc8:	b004      	add	sp, #16
  401fca:	bd10      	pop	{r4, pc}
  401fcc:	004091ec 	.word	0x004091ec
  401fd0:	00402305 	.word	0x00402305
  401fd4:	00401d2d 	.word	0x00401d2d
  401fd8:	00402945 	.word	0x00402945
  401fdc:	20400b04 	.word	0x20400b04
  401fe0:	20400b20 	.word	0x20400b20
  401fe4:	20400b4c 	.word	0x20400b4c
  401fe8:	00401301 	.word	0x00401301

00401fec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401fec:	4a02      	ldr	r2, [pc, #8]	; (401ff8 <vTaskSuspendAll+0xc>)
  401fee:	6813      	ldr	r3, [r2, #0]
  401ff0:	3301      	adds	r3, #1
  401ff2:	6013      	str	r3, [r2, #0]
  401ff4:	4770      	bx	lr
  401ff6:	bf00      	nop
  401ff8:	20400acc 	.word	0x20400acc

00401ffc <xTaskGetTickCount>:
		xTicks = xTickCount;
  401ffc:	4b01      	ldr	r3, [pc, #4]	; (402004 <xTaskGetTickCount+0x8>)
  401ffe:	6818      	ldr	r0, [r3, #0]
}
  402000:	4770      	bx	lr
  402002:	bf00      	nop
  402004:	20400b4c 	.word	0x20400b4c

00402008 <xTaskIncrementTick>:
{
  402008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40200c:	4b42      	ldr	r3, [pc, #264]	; (402118 <xTaskIncrementTick+0x110>)
  40200e:	681b      	ldr	r3, [r3, #0]
  402010:	2b00      	cmp	r3, #0
  402012:	d178      	bne.n	402106 <xTaskIncrementTick+0xfe>
		++xTickCount;
  402014:	4b41      	ldr	r3, [pc, #260]	; (40211c <xTaskIncrementTick+0x114>)
  402016:	681a      	ldr	r2, [r3, #0]
  402018:	3201      	adds	r2, #1
  40201a:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  40201c:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40201e:	b9d6      	cbnz	r6, 402056 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402020:	4b3f      	ldr	r3, [pc, #252]	; (402120 <xTaskIncrementTick+0x118>)
  402022:	681b      	ldr	r3, [r3, #0]
  402024:	681b      	ldr	r3, [r3, #0]
  402026:	b153      	cbz	r3, 40203e <xTaskIncrementTick+0x36>
  402028:	f04f 0380 	mov.w	r3, #128	; 0x80
  40202c:	b672      	cpsid	i
  40202e:	f383 8811 	msr	BASEPRI, r3
  402032:	f3bf 8f6f 	isb	sy
  402036:	f3bf 8f4f 	dsb	sy
  40203a:	b662      	cpsie	i
  40203c:	e7fe      	b.n	40203c <xTaskIncrementTick+0x34>
  40203e:	4a38      	ldr	r2, [pc, #224]	; (402120 <xTaskIncrementTick+0x118>)
  402040:	6811      	ldr	r1, [r2, #0]
  402042:	4b38      	ldr	r3, [pc, #224]	; (402124 <xTaskIncrementTick+0x11c>)
  402044:	6818      	ldr	r0, [r3, #0]
  402046:	6010      	str	r0, [r2, #0]
  402048:	6019      	str	r1, [r3, #0]
  40204a:	4a37      	ldr	r2, [pc, #220]	; (402128 <xTaskIncrementTick+0x120>)
  40204c:	6813      	ldr	r3, [r2, #0]
  40204e:	3301      	adds	r3, #1
  402050:	6013      	str	r3, [r2, #0]
  402052:	4b36      	ldr	r3, [pc, #216]	; (40212c <xTaskIncrementTick+0x124>)
  402054:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402056:	4b36      	ldr	r3, [pc, #216]	; (402130 <xTaskIncrementTick+0x128>)
  402058:	681b      	ldr	r3, [r3, #0]
  40205a:	429e      	cmp	r6, r3
  40205c:	d218      	bcs.n	402090 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40205e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402060:	4b34      	ldr	r3, [pc, #208]	; (402134 <xTaskIncrementTick+0x12c>)
  402062:	681b      	ldr	r3, [r3, #0]
  402064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402066:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40206a:	4a33      	ldr	r2, [pc, #204]	; (402138 <xTaskIncrementTick+0x130>)
  40206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402070:	2b02      	cmp	r3, #2
  402072:	bf28      	it	cs
  402074:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402076:	4b31      	ldr	r3, [pc, #196]	; (40213c <xTaskIncrementTick+0x134>)
  402078:	681b      	ldr	r3, [r3, #0]
  40207a:	b90b      	cbnz	r3, 402080 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  40207c:	4b30      	ldr	r3, [pc, #192]	; (402140 <xTaskIncrementTick+0x138>)
  40207e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402080:	4b30      	ldr	r3, [pc, #192]	; (402144 <xTaskIncrementTick+0x13c>)
  402082:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402084:	2b00      	cmp	r3, #0
}
  402086:	bf0c      	ite	eq
  402088:	4620      	moveq	r0, r4
  40208a:	2001      	movne	r0, #1
  40208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402090:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402092:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402120 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402096:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402150 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40209a:	4f2b      	ldr	r7, [pc, #172]	; (402148 <xTaskIncrementTick+0x140>)
  40209c:	e01f      	b.n	4020de <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  40209e:	f04f 32ff 	mov.w	r2, #4294967295
  4020a2:	4b23      	ldr	r3, [pc, #140]	; (402130 <xTaskIncrementTick+0x128>)
  4020a4:	601a      	str	r2, [r3, #0]
						break;
  4020a6:	e7db      	b.n	402060 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4020a8:	4a21      	ldr	r2, [pc, #132]	; (402130 <xTaskIncrementTick+0x128>)
  4020aa:	6013      	str	r3, [r2, #0]
							break;
  4020ac:	e7d8      	b.n	402060 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4020ae:	f105 0018 	add.w	r0, r5, #24
  4020b2:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4020b4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4020b6:	683a      	ldr	r2, [r7, #0]
  4020b8:	2301      	movs	r3, #1
  4020ba:	4083      	lsls	r3, r0
  4020bc:	4313      	orrs	r3, r2
  4020be:	603b      	str	r3, [r7, #0]
  4020c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4020c4:	4651      	mov	r1, sl
  4020c6:	4b1c      	ldr	r3, [pc, #112]	; (402138 <xTaskIncrementTick+0x130>)
  4020c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4020cc:	4b1f      	ldr	r3, [pc, #124]	; (40214c <xTaskIncrementTick+0x144>)
  4020ce:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4020d0:	4b18      	ldr	r3, [pc, #96]	; (402134 <xTaskIncrementTick+0x12c>)
  4020d2:	681b      	ldr	r3, [r3, #0]
  4020d4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4020d8:	429a      	cmp	r2, r3
  4020da:	bf28      	it	cs
  4020dc:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4020de:	f8d9 3000 	ldr.w	r3, [r9]
  4020e2:	681b      	ldr	r3, [r3, #0]
  4020e4:	2b00      	cmp	r3, #0
  4020e6:	d0da      	beq.n	40209e <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4020e8:	f8d9 3000 	ldr.w	r3, [r9]
  4020ec:	68db      	ldr	r3, [r3, #12]
  4020ee:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4020f0:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4020f2:	429e      	cmp	r6, r3
  4020f4:	d3d8      	bcc.n	4020a8 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4020f6:	f105 0a04 	add.w	sl, r5, #4
  4020fa:	4650      	mov	r0, sl
  4020fc:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4020fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402100:	2b00      	cmp	r3, #0
  402102:	d1d4      	bne.n	4020ae <xTaskIncrementTick+0xa6>
  402104:	e7d6      	b.n	4020b4 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402106:	4a0d      	ldr	r2, [pc, #52]	; (40213c <xTaskIncrementTick+0x134>)
  402108:	6813      	ldr	r3, [r2, #0]
  40210a:	3301      	adds	r3, #1
  40210c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40210e:	4b0c      	ldr	r3, [pc, #48]	; (402140 <xTaskIncrementTick+0x138>)
  402110:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402112:	2400      	movs	r4, #0
  402114:	e7b4      	b.n	402080 <xTaskIncrementTick+0x78>
  402116:	bf00      	nop
  402118:	20400acc 	.word	0x20400acc
  40211c:	20400b4c 	.word	0x20400b4c
  402120:	20400a58 	.word	0x20400a58
  402124:	20400a5c 	.word	0x20400a5c
  402128:	20400b08 	.word	0x20400b08
  40212c:	00401ca9 	.word	0x00401ca9
  402130:	20400b04 	.word	0x20400b04
  402134:	20400a54 	.word	0x20400a54
  402138:	20400a60 	.word	0x20400a60
  40213c:	20400ac8 	.word	0x20400ac8
  402140:	00403049 	.word	0x00403049
  402144:	20400b50 	.word	0x20400b50
  402148:	20400ad8 	.word	0x20400ad8
  40214c:	0040109d 	.word	0x0040109d
  402150:	004010e9 	.word	0x004010e9

00402154 <xTaskResumeAll>:
{
  402154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402158:	4b38      	ldr	r3, [pc, #224]	; (40223c <xTaskResumeAll+0xe8>)
  40215a:	681b      	ldr	r3, [r3, #0]
  40215c:	b953      	cbnz	r3, 402174 <xTaskResumeAll+0x20>
  40215e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402162:	b672      	cpsid	i
  402164:	f383 8811 	msr	BASEPRI, r3
  402168:	f3bf 8f6f 	isb	sy
  40216c:	f3bf 8f4f 	dsb	sy
  402170:	b662      	cpsie	i
  402172:	e7fe      	b.n	402172 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402174:	4b32      	ldr	r3, [pc, #200]	; (402240 <xTaskResumeAll+0xec>)
  402176:	4798      	blx	r3
		--uxSchedulerSuspended;
  402178:	4b30      	ldr	r3, [pc, #192]	; (40223c <xTaskResumeAll+0xe8>)
  40217a:	681a      	ldr	r2, [r3, #0]
  40217c:	3a01      	subs	r2, #1
  40217e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402180:	681b      	ldr	r3, [r3, #0]
  402182:	2b00      	cmp	r3, #0
  402184:	d155      	bne.n	402232 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402186:	4b2f      	ldr	r3, [pc, #188]	; (402244 <xTaskResumeAll+0xf0>)
  402188:	681b      	ldr	r3, [r3, #0]
  40218a:	2b00      	cmp	r3, #0
  40218c:	d132      	bne.n	4021f4 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40218e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402190:	4b2d      	ldr	r3, [pc, #180]	; (402248 <xTaskResumeAll+0xf4>)
  402192:	4798      	blx	r3
}
  402194:	4620      	mov	r0, r4
  402196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40219a:	68fb      	ldr	r3, [r7, #12]
  40219c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40219e:	f104 0018 	add.w	r0, r4, #24
  4021a2:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4021a4:	f104 0804 	add.w	r8, r4, #4
  4021a8:	4640      	mov	r0, r8
  4021aa:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4021ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4021ae:	682a      	ldr	r2, [r5, #0]
  4021b0:	2301      	movs	r3, #1
  4021b2:	4083      	lsls	r3, r0
  4021b4:	4313      	orrs	r3, r2
  4021b6:	602b      	str	r3, [r5, #0]
  4021b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021bc:	4641      	mov	r1, r8
  4021be:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4021c2:	4b22      	ldr	r3, [pc, #136]	; (40224c <xTaskResumeAll+0xf8>)
  4021c4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4021c6:	4b22      	ldr	r3, [pc, #136]	; (402250 <xTaskResumeAll+0xfc>)
  4021c8:	681b      	ldr	r3, [r3, #0]
  4021ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4021ce:	429a      	cmp	r2, r3
  4021d0:	d20c      	bcs.n	4021ec <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4021d2:	683b      	ldr	r3, [r7, #0]
  4021d4:	2b00      	cmp	r3, #0
  4021d6:	d1e0      	bne.n	40219a <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4021d8:	4b1e      	ldr	r3, [pc, #120]	; (402254 <xTaskResumeAll+0x100>)
  4021da:	681b      	ldr	r3, [r3, #0]
  4021dc:	b1db      	cbz	r3, 402216 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4021de:	4b1d      	ldr	r3, [pc, #116]	; (402254 <xTaskResumeAll+0x100>)
  4021e0:	681b      	ldr	r3, [r3, #0]
  4021e2:	b1c3      	cbz	r3, 402216 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4021e4:	4e1c      	ldr	r6, [pc, #112]	; (402258 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4021e6:	4d1d      	ldr	r5, [pc, #116]	; (40225c <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4021e8:	4c1a      	ldr	r4, [pc, #104]	; (402254 <xTaskResumeAll+0x100>)
  4021ea:	e00e      	b.n	40220a <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4021ec:	2201      	movs	r2, #1
  4021ee:	4b1b      	ldr	r3, [pc, #108]	; (40225c <xTaskResumeAll+0x108>)
  4021f0:	601a      	str	r2, [r3, #0]
  4021f2:	e7ee      	b.n	4021d2 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4021f4:	4f1a      	ldr	r7, [pc, #104]	; (402260 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4021f6:	4e1b      	ldr	r6, [pc, #108]	; (402264 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4021f8:	4d1b      	ldr	r5, [pc, #108]	; (402268 <xTaskResumeAll+0x114>)
  4021fa:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402270 <xTaskResumeAll+0x11c>
  4021fe:	e7e8      	b.n	4021d2 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402200:	6823      	ldr	r3, [r4, #0]
  402202:	3b01      	subs	r3, #1
  402204:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402206:	6823      	ldr	r3, [r4, #0]
  402208:	b12b      	cbz	r3, 402216 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40220a:	47b0      	blx	r6
  40220c:	2800      	cmp	r0, #0
  40220e:	d0f7      	beq.n	402200 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402210:	2301      	movs	r3, #1
  402212:	602b      	str	r3, [r5, #0]
  402214:	e7f4      	b.n	402200 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402216:	4b11      	ldr	r3, [pc, #68]	; (40225c <xTaskResumeAll+0x108>)
  402218:	681b      	ldr	r3, [r3, #0]
  40221a:	2b01      	cmp	r3, #1
  40221c:	d10b      	bne.n	402236 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40221e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402222:	4b12      	ldr	r3, [pc, #72]	; (40226c <xTaskResumeAll+0x118>)
  402224:	601a      	str	r2, [r3, #0]
  402226:	f3bf 8f4f 	dsb	sy
  40222a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40222e:	2401      	movs	r4, #1
  402230:	e7ae      	b.n	402190 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  402232:	2400      	movs	r4, #0
  402234:	e7ac      	b.n	402190 <xTaskResumeAll+0x3c>
  402236:	2400      	movs	r4, #0
  402238:	e7aa      	b.n	402190 <xTaskResumeAll+0x3c>
  40223a:	bf00      	nop
  40223c:	20400acc 	.word	0x20400acc
  402240:	004011cd 	.word	0x004011cd
  402244:	20400ac4 	.word	0x20400ac4
  402248:	00401219 	.word	0x00401219
  40224c:	0040109d 	.word	0x0040109d
  402250:	20400a54 	.word	0x20400a54
  402254:	20400ac8 	.word	0x20400ac8
  402258:	00402009 	.word	0x00402009
  40225c:	20400b50 	.word	0x20400b50
  402260:	20400b0c 	.word	0x20400b0c
  402264:	004010e9 	.word	0x004010e9
  402268:	20400ad8 	.word	0x20400ad8
  40226c:	e000ed04 	.word	0xe000ed04
  402270:	20400a60 	.word	0x20400a60

00402274 <vTaskDelay>:
	{
  402274:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402276:	2800      	cmp	r0, #0
  402278:	d029      	beq.n	4022ce <vTaskDelay+0x5a>
  40227a:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40227c:	4b18      	ldr	r3, [pc, #96]	; (4022e0 <vTaskDelay+0x6c>)
  40227e:	681b      	ldr	r3, [r3, #0]
  402280:	b153      	cbz	r3, 402298 <vTaskDelay+0x24>
  402282:	f04f 0380 	mov.w	r3, #128	; 0x80
  402286:	b672      	cpsid	i
  402288:	f383 8811 	msr	BASEPRI, r3
  40228c:	f3bf 8f6f 	isb	sy
  402290:	f3bf 8f4f 	dsb	sy
  402294:	b662      	cpsie	i
  402296:	e7fe      	b.n	402296 <vTaskDelay+0x22>
			vTaskSuspendAll();
  402298:	4b12      	ldr	r3, [pc, #72]	; (4022e4 <vTaskDelay+0x70>)
  40229a:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  40229c:	4b12      	ldr	r3, [pc, #72]	; (4022e8 <vTaskDelay+0x74>)
  40229e:	681b      	ldr	r3, [r3, #0]
  4022a0:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4022a2:	4b12      	ldr	r3, [pc, #72]	; (4022ec <vTaskDelay+0x78>)
  4022a4:	6818      	ldr	r0, [r3, #0]
  4022a6:	3004      	adds	r0, #4
  4022a8:	4b11      	ldr	r3, [pc, #68]	; (4022f0 <vTaskDelay+0x7c>)
  4022aa:	4798      	blx	r3
  4022ac:	b948      	cbnz	r0, 4022c2 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4022ae:	4b0f      	ldr	r3, [pc, #60]	; (4022ec <vTaskDelay+0x78>)
  4022b0:	681a      	ldr	r2, [r3, #0]
  4022b2:	4910      	ldr	r1, [pc, #64]	; (4022f4 <vTaskDelay+0x80>)
  4022b4:	680b      	ldr	r3, [r1, #0]
  4022b6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4022b8:	2201      	movs	r2, #1
  4022ba:	4082      	lsls	r2, r0
  4022bc:	ea23 0302 	bic.w	r3, r3, r2
  4022c0:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4022c2:	4620      	mov	r0, r4
  4022c4:	4b0c      	ldr	r3, [pc, #48]	; (4022f8 <vTaskDelay+0x84>)
  4022c6:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4022c8:	4b0c      	ldr	r3, [pc, #48]	; (4022fc <vTaskDelay+0x88>)
  4022ca:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4022cc:	b938      	cbnz	r0, 4022de <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4022ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022d2:	4b0b      	ldr	r3, [pc, #44]	; (402300 <vTaskDelay+0x8c>)
  4022d4:	601a      	str	r2, [r3, #0]
  4022d6:	f3bf 8f4f 	dsb	sy
  4022da:	f3bf 8f6f 	isb	sy
  4022de:	bd10      	pop	{r4, pc}
  4022e0:	20400acc 	.word	0x20400acc
  4022e4:	00401fed 	.word	0x00401fed
  4022e8:	20400b4c 	.word	0x20400b4c
  4022ec:	20400a54 	.word	0x20400a54
  4022f0:	004010e9 	.word	0x004010e9
  4022f4:	20400ad8 	.word	0x20400ad8
  4022f8:	00401cd5 	.word	0x00401cd5
  4022fc:	00402155 	.word	0x00402155
  402300:	e000ed04 	.word	0xe000ed04

00402304 <prvIdleTask>:
{
  402304:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402306:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402390 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40230a:	4e19      	ldr	r6, [pc, #100]	; (402370 <prvIdleTask+0x6c>)
				taskYIELD();
  40230c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402394 <prvIdleTask+0x90>
  402310:	e02a      	b.n	402368 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402312:	4b18      	ldr	r3, [pc, #96]	; (402374 <prvIdleTask+0x70>)
  402314:	681b      	ldr	r3, [r3, #0]
  402316:	2b01      	cmp	r3, #1
  402318:	d81e      	bhi.n	402358 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40231a:	682b      	ldr	r3, [r5, #0]
  40231c:	2b00      	cmp	r3, #0
  40231e:	d0f8      	beq.n	402312 <prvIdleTask+0xe>
			vTaskSuspendAll();
  402320:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402322:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402324:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402326:	2c00      	cmp	r4, #0
  402328:	d0f7      	beq.n	40231a <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40232a:	4b13      	ldr	r3, [pc, #76]	; (402378 <prvIdleTask+0x74>)
  40232c:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40232e:	68f3      	ldr	r3, [r6, #12]
  402330:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402332:	1d20      	adds	r0, r4, #4
  402334:	4b11      	ldr	r3, [pc, #68]	; (40237c <prvIdleTask+0x78>)
  402336:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402338:	4a11      	ldr	r2, [pc, #68]	; (402380 <prvIdleTask+0x7c>)
  40233a:	6813      	ldr	r3, [r2, #0]
  40233c:	3b01      	subs	r3, #1
  40233e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402340:	682b      	ldr	r3, [r5, #0]
  402342:	3b01      	subs	r3, #1
  402344:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402346:	4b0f      	ldr	r3, [pc, #60]	; (402384 <prvIdleTask+0x80>)
  402348:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40234a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40234c:	f8df a048 	ldr.w	sl, [pc, #72]	; 402398 <prvIdleTask+0x94>
  402350:	47d0      	blx	sl
		vPortFree( pxTCB );
  402352:	4620      	mov	r0, r4
  402354:	47d0      	blx	sl
  402356:	e7e0      	b.n	40231a <prvIdleTask+0x16>
				taskYIELD();
  402358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40235c:	f8c9 3000 	str.w	r3, [r9]
  402360:	f3bf 8f4f 	dsb	sy
  402364:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402368:	4d07      	ldr	r5, [pc, #28]	; (402388 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40236a:	4f08      	ldr	r7, [pc, #32]	; (40238c <prvIdleTask+0x88>)
  40236c:	e7d5      	b.n	40231a <prvIdleTask+0x16>
  40236e:	bf00      	nop
  402370:	20400b38 	.word	0x20400b38
  402374:	20400a60 	.word	0x20400a60
  402378:	004011cd 	.word	0x004011cd
  40237c:	004010e9 	.word	0x004010e9
  402380:	20400ac4 	.word	0x20400ac4
  402384:	00401219 	.word	0x00401219
  402388:	20400ad4 	.word	0x20400ad4
  40238c:	00402155 	.word	0x00402155
  402390:	00401fed 	.word	0x00401fed
  402394:	e000ed04 	.word	0xe000ed04
  402398:	00401459 	.word	0x00401459

0040239c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40239c:	4b2d      	ldr	r3, [pc, #180]	; (402454 <vTaskSwitchContext+0xb8>)
  40239e:	681b      	ldr	r3, [r3, #0]
  4023a0:	2b00      	cmp	r3, #0
  4023a2:	d12c      	bne.n	4023fe <vTaskSwitchContext+0x62>
{
  4023a4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4023a6:	2200      	movs	r2, #0
  4023a8:	4b2b      	ldr	r3, [pc, #172]	; (402458 <vTaskSwitchContext+0xbc>)
  4023aa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4023ac:	4b2b      	ldr	r3, [pc, #172]	; (40245c <vTaskSwitchContext+0xc0>)
  4023ae:	681b      	ldr	r3, [r3, #0]
  4023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023b2:	681a      	ldr	r2, [r3, #0]
  4023b4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4023b8:	d103      	bne.n	4023c2 <vTaskSwitchContext+0x26>
  4023ba:	685a      	ldr	r2, [r3, #4]
  4023bc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4023c0:	d021      	beq.n	402406 <vTaskSwitchContext+0x6a>
  4023c2:	4b26      	ldr	r3, [pc, #152]	; (40245c <vTaskSwitchContext+0xc0>)
  4023c4:	6818      	ldr	r0, [r3, #0]
  4023c6:	6819      	ldr	r1, [r3, #0]
  4023c8:	3134      	adds	r1, #52	; 0x34
  4023ca:	4b25      	ldr	r3, [pc, #148]	; (402460 <vTaskSwitchContext+0xc4>)
  4023cc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4023ce:	4b25      	ldr	r3, [pc, #148]	; (402464 <vTaskSwitchContext+0xc8>)
  4023d0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4023d2:	fab3 f383 	clz	r3, r3
  4023d6:	b2db      	uxtb	r3, r3
  4023d8:	f1c3 031f 	rsb	r3, r3, #31
  4023dc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4023e0:	4a21      	ldr	r2, [pc, #132]	; (402468 <vTaskSwitchContext+0xcc>)
  4023e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4023e6:	b9ba      	cbnz	r2, 402418 <vTaskSwitchContext+0x7c>
	__asm volatile
  4023e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023ec:	b672      	cpsid	i
  4023ee:	f383 8811 	msr	BASEPRI, r3
  4023f2:	f3bf 8f6f 	isb	sy
  4023f6:	f3bf 8f4f 	dsb	sy
  4023fa:	b662      	cpsie	i
  4023fc:	e7fe      	b.n	4023fc <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4023fe:	2201      	movs	r2, #1
  402400:	4b15      	ldr	r3, [pc, #84]	; (402458 <vTaskSwitchContext+0xbc>)
  402402:	601a      	str	r2, [r3, #0]
  402404:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402406:	689a      	ldr	r2, [r3, #8]
  402408:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40240c:	d1d9      	bne.n	4023c2 <vTaskSwitchContext+0x26>
  40240e:	68db      	ldr	r3, [r3, #12]
  402410:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402414:	d1d5      	bne.n	4023c2 <vTaskSwitchContext+0x26>
  402416:	e7da      	b.n	4023ce <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402418:	4a13      	ldr	r2, [pc, #76]	; (402468 <vTaskSwitchContext+0xcc>)
  40241a:	0099      	lsls	r1, r3, #2
  40241c:	18c8      	adds	r0, r1, r3
  40241e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402422:	6844      	ldr	r4, [r0, #4]
  402424:	6864      	ldr	r4, [r4, #4]
  402426:	6044      	str	r4, [r0, #4]
  402428:	4419      	add	r1, r3
  40242a:	4602      	mov	r2, r0
  40242c:	3208      	adds	r2, #8
  40242e:	4294      	cmp	r4, r2
  402430:	d009      	beq.n	402446 <vTaskSwitchContext+0xaa>
  402432:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402436:	4a0c      	ldr	r2, [pc, #48]	; (402468 <vTaskSwitchContext+0xcc>)
  402438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40243c:	685b      	ldr	r3, [r3, #4]
  40243e:	68da      	ldr	r2, [r3, #12]
  402440:	4b06      	ldr	r3, [pc, #24]	; (40245c <vTaskSwitchContext+0xc0>)
  402442:	601a      	str	r2, [r3, #0]
  402444:	bd10      	pop	{r4, pc}
  402446:	6860      	ldr	r0, [r4, #4]
  402448:	4a07      	ldr	r2, [pc, #28]	; (402468 <vTaskSwitchContext+0xcc>)
  40244a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40244e:	6050      	str	r0, [r2, #4]
  402450:	e7ef      	b.n	402432 <vTaskSwitchContext+0x96>
  402452:	bf00      	nop
  402454:	20400acc 	.word	0x20400acc
  402458:	20400b50 	.word	0x20400b50
  40245c:	20400a54 	.word	0x20400a54
  402460:	00403031 	.word	0x00403031
  402464:	20400ad8 	.word	0x20400ad8
  402468:	20400a60 	.word	0x20400a60

0040246c <vTaskPlaceOnEventList>:
{
  40246c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40246e:	b1e0      	cbz	r0, 4024aa <vTaskPlaceOnEventList+0x3e>
  402470:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402472:	4d17      	ldr	r5, [pc, #92]	; (4024d0 <vTaskPlaceOnEventList+0x64>)
  402474:	6829      	ldr	r1, [r5, #0]
  402476:	3118      	adds	r1, #24
  402478:	4b16      	ldr	r3, [pc, #88]	; (4024d4 <vTaskPlaceOnEventList+0x68>)
  40247a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40247c:	6828      	ldr	r0, [r5, #0]
  40247e:	3004      	adds	r0, #4
  402480:	4b15      	ldr	r3, [pc, #84]	; (4024d8 <vTaskPlaceOnEventList+0x6c>)
  402482:	4798      	blx	r3
  402484:	b940      	cbnz	r0, 402498 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402486:	682a      	ldr	r2, [r5, #0]
  402488:	4914      	ldr	r1, [pc, #80]	; (4024dc <vTaskPlaceOnEventList+0x70>)
  40248a:	680b      	ldr	r3, [r1, #0]
  40248c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40248e:	2201      	movs	r2, #1
  402490:	4082      	lsls	r2, r0
  402492:	ea23 0302 	bic.w	r3, r3, r2
  402496:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402498:	f1b4 3fff 	cmp.w	r4, #4294967295
  40249c:	d010      	beq.n	4024c0 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40249e:	4b10      	ldr	r3, [pc, #64]	; (4024e0 <vTaskPlaceOnEventList+0x74>)
  4024a0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4024a2:	4420      	add	r0, r4
  4024a4:	4b0f      	ldr	r3, [pc, #60]	; (4024e4 <vTaskPlaceOnEventList+0x78>)
  4024a6:	4798      	blx	r3
  4024a8:	bd38      	pop	{r3, r4, r5, pc}
  4024aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024ae:	b672      	cpsid	i
  4024b0:	f383 8811 	msr	BASEPRI, r3
  4024b4:	f3bf 8f6f 	isb	sy
  4024b8:	f3bf 8f4f 	dsb	sy
  4024bc:	b662      	cpsie	i
  4024be:	e7fe      	b.n	4024be <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4024c0:	4b03      	ldr	r3, [pc, #12]	; (4024d0 <vTaskPlaceOnEventList+0x64>)
  4024c2:	6819      	ldr	r1, [r3, #0]
  4024c4:	3104      	adds	r1, #4
  4024c6:	4808      	ldr	r0, [pc, #32]	; (4024e8 <vTaskPlaceOnEventList+0x7c>)
  4024c8:	4b08      	ldr	r3, [pc, #32]	; (4024ec <vTaskPlaceOnEventList+0x80>)
  4024ca:	4798      	blx	r3
  4024cc:	bd38      	pop	{r3, r4, r5, pc}
  4024ce:	bf00      	nop
  4024d0:	20400a54 	.word	0x20400a54
  4024d4:	004010b5 	.word	0x004010b5
  4024d8:	004010e9 	.word	0x004010e9
  4024dc:	20400ad8 	.word	0x20400ad8
  4024e0:	20400b4c 	.word	0x20400b4c
  4024e4:	00401cd5 	.word	0x00401cd5
  4024e8:	20400b24 	.word	0x20400b24
  4024ec:	0040109d 	.word	0x0040109d

004024f0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4024f0:	b1e8      	cbz	r0, 40252e <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4024f2:	b570      	push	{r4, r5, r6, lr}
  4024f4:	4615      	mov	r5, r2
  4024f6:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4024f8:	4e16      	ldr	r6, [pc, #88]	; (402554 <vTaskPlaceOnEventListRestricted+0x64>)
  4024fa:	6831      	ldr	r1, [r6, #0]
  4024fc:	3118      	adds	r1, #24
  4024fe:	4b16      	ldr	r3, [pc, #88]	; (402558 <vTaskPlaceOnEventListRestricted+0x68>)
  402500:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402502:	6830      	ldr	r0, [r6, #0]
  402504:	3004      	adds	r0, #4
  402506:	4b15      	ldr	r3, [pc, #84]	; (40255c <vTaskPlaceOnEventListRestricted+0x6c>)
  402508:	4798      	blx	r3
  40250a:	b940      	cbnz	r0, 40251e <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40250c:	6832      	ldr	r2, [r6, #0]
  40250e:	4914      	ldr	r1, [pc, #80]	; (402560 <vTaskPlaceOnEventListRestricted+0x70>)
  402510:	680b      	ldr	r3, [r1, #0]
  402512:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402514:	2201      	movs	r2, #1
  402516:	4082      	lsls	r2, r0
  402518:	ea23 0302 	bic.w	r3, r3, r2
  40251c:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40251e:	2d01      	cmp	r5, #1
  402520:	d010      	beq.n	402544 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402522:	4b10      	ldr	r3, [pc, #64]	; (402564 <vTaskPlaceOnEventListRestricted+0x74>)
  402524:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402526:	4420      	add	r0, r4
  402528:	4b0f      	ldr	r3, [pc, #60]	; (402568 <vTaskPlaceOnEventListRestricted+0x78>)
  40252a:	4798      	blx	r3
  40252c:	bd70      	pop	{r4, r5, r6, pc}
  40252e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402532:	b672      	cpsid	i
  402534:	f383 8811 	msr	BASEPRI, r3
  402538:	f3bf 8f6f 	isb	sy
  40253c:	f3bf 8f4f 	dsb	sy
  402540:	b662      	cpsie	i
  402542:	e7fe      	b.n	402542 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402544:	4b03      	ldr	r3, [pc, #12]	; (402554 <vTaskPlaceOnEventListRestricted+0x64>)
  402546:	6819      	ldr	r1, [r3, #0]
  402548:	3104      	adds	r1, #4
  40254a:	4808      	ldr	r0, [pc, #32]	; (40256c <vTaskPlaceOnEventListRestricted+0x7c>)
  40254c:	4b02      	ldr	r3, [pc, #8]	; (402558 <vTaskPlaceOnEventListRestricted+0x68>)
  40254e:	4798      	blx	r3
  402550:	bd70      	pop	{r4, r5, r6, pc}
  402552:	bf00      	nop
  402554:	20400a54 	.word	0x20400a54
  402558:	0040109d 	.word	0x0040109d
  40255c:	004010e9 	.word	0x004010e9
  402560:	20400ad8 	.word	0x20400ad8
  402564:	20400b4c 	.word	0x20400b4c
  402568:	00401cd5 	.word	0x00401cd5
  40256c:	20400b24 	.word	0x20400b24

00402570 <xTaskRemoveFromEventList>:
{
  402570:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402572:	68c3      	ldr	r3, [r0, #12]
  402574:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402576:	b324      	cbz	r4, 4025c2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402578:	f104 0518 	add.w	r5, r4, #24
  40257c:	4628      	mov	r0, r5
  40257e:	4b1a      	ldr	r3, [pc, #104]	; (4025e8 <xTaskRemoveFromEventList+0x78>)
  402580:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402582:	4b1a      	ldr	r3, [pc, #104]	; (4025ec <xTaskRemoveFromEventList+0x7c>)
  402584:	681b      	ldr	r3, [r3, #0]
  402586:	bb3b      	cbnz	r3, 4025d8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402588:	1d25      	adds	r5, r4, #4
  40258a:	4628      	mov	r0, r5
  40258c:	4b16      	ldr	r3, [pc, #88]	; (4025e8 <xTaskRemoveFromEventList+0x78>)
  40258e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402590:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402592:	4a17      	ldr	r2, [pc, #92]	; (4025f0 <xTaskRemoveFromEventList+0x80>)
  402594:	6811      	ldr	r1, [r2, #0]
  402596:	2301      	movs	r3, #1
  402598:	4083      	lsls	r3, r0
  40259a:	430b      	orrs	r3, r1
  40259c:	6013      	str	r3, [r2, #0]
  40259e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4025a2:	4629      	mov	r1, r5
  4025a4:	4b13      	ldr	r3, [pc, #76]	; (4025f4 <xTaskRemoveFromEventList+0x84>)
  4025a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4025aa:	4b13      	ldr	r3, [pc, #76]	; (4025f8 <xTaskRemoveFromEventList+0x88>)
  4025ac:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4025ae:	4b13      	ldr	r3, [pc, #76]	; (4025fc <xTaskRemoveFromEventList+0x8c>)
  4025b0:	681b      	ldr	r3, [r3, #0]
  4025b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4025b6:	429a      	cmp	r2, r3
  4025b8:	d913      	bls.n	4025e2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4025ba:	2001      	movs	r0, #1
  4025bc:	4b10      	ldr	r3, [pc, #64]	; (402600 <xTaskRemoveFromEventList+0x90>)
  4025be:	6018      	str	r0, [r3, #0]
  4025c0:	bd38      	pop	{r3, r4, r5, pc}
  4025c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025c6:	b672      	cpsid	i
  4025c8:	f383 8811 	msr	BASEPRI, r3
  4025cc:	f3bf 8f6f 	isb	sy
  4025d0:	f3bf 8f4f 	dsb	sy
  4025d4:	b662      	cpsie	i
  4025d6:	e7fe      	b.n	4025d6 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4025d8:	4629      	mov	r1, r5
  4025da:	480a      	ldr	r0, [pc, #40]	; (402604 <xTaskRemoveFromEventList+0x94>)
  4025dc:	4b06      	ldr	r3, [pc, #24]	; (4025f8 <xTaskRemoveFromEventList+0x88>)
  4025de:	4798      	blx	r3
  4025e0:	e7e5      	b.n	4025ae <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4025e2:	2000      	movs	r0, #0
}
  4025e4:	bd38      	pop	{r3, r4, r5, pc}
  4025e6:	bf00      	nop
  4025e8:	004010e9 	.word	0x004010e9
  4025ec:	20400acc 	.word	0x20400acc
  4025f0:	20400ad8 	.word	0x20400ad8
  4025f4:	20400a60 	.word	0x20400a60
  4025f8:	0040109d 	.word	0x0040109d
  4025fc:	20400a54 	.word	0x20400a54
  402600:	20400b50 	.word	0x20400b50
  402604:	20400b0c 	.word	0x20400b0c

00402608 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402608:	b130      	cbz	r0, 402618 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40260a:	4a09      	ldr	r2, [pc, #36]	; (402630 <vTaskSetTimeOutState+0x28>)
  40260c:	6812      	ldr	r2, [r2, #0]
  40260e:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402610:	4a08      	ldr	r2, [pc, #32]	; (402634 <vTaskSetTimeOutState+0x2c>)
  402612:	6812      	ldr	r2, [r2, #0]
  402614:	6042      	str	r2, [r0, #4]
  402616:	4770      	bx	lr
  402618:	f04f 0380 	mov.w	r3, #128	; 0x80
  40261c:	b672      	cpsid	i
  40261e:	f383 8811 	msr	BASEPRI, r3
  402622:	f3bf 8f6f 	isb	sy
  402626:	f3bf 8f4f 	dsb	sy
  40262a:	b662      	cpsie	i
  40262c:	e7fe      	b.n	40262c <vTaskSetTimeOutState+0x24>
  40262e:	bf00      	nop
  402630:	20400b08 	.word	0x20400b08
  402634:	20400b4c 	.word	0x20400b4c

00402638 <xTaskCheckForTimeOut>:
{
  402638:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40263a:	b1c0      	cbz	r0, 40266e <xTaskCheckForTimeOut+0x36>
  40263c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40263e:	b309      	cbz	r1, 402684 <xTaskCheckForTimeOut+0x4c>
  402640:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402642:	4b1d      	ldr	r3, [pc, #116]	; (4026b8 <xTaskCheckForTimeOut+0x80>)
  402644:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402646:	4b1d      	ldr	r3, [pc, #116]	; (4026bc <xTaskCheckForTimeOut+0x84>)
  402648:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40264a:	682b      	ldr	r3, [r5, #0]
  40264c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402650:	d02e      	beq.n	4026b0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402652:	491b      	ldr	r1, [pc, #108]	; (4026c0 <xTaskCheckForTimeOut+0x88>)
  402654:	6809      	ldr	r1, [r1, #0]
  402656:	6820      	ldr	r0, [r4, #0]
  402658:	4288      	cmp	r0, r1
  40265a:	d002      	beq.n	402662 <xTaskCheckForTimeOut+0x2a>
  40265c:	6861      	ldr	r1, [r4, #4]
  40265e:	428a      	cmp	r2, r1
  402660:	d228      	bcs.n	4026b4 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402662:	6861      	ldr	r1, [r4, #4]
  402664:	1a50      	subs	r0, r2, r1
  402666:	4283      	cmp	r3, r0
  402668:	d817      	bhi.n	40269a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40266a:	2401      	movs	r4, #1
  40266c:	e01c      	b.n	4026a8 <xTaskCheckForTimeOut+0x70>
  40266e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402672:	b672      	cpsid	i
  402674:	f383 8811 	msr	BASEPRI, r3
  402678:	f3bf 8f6f 	isb	sy
  40267c:	f3bf 8f4f 	dsb	sy
  402680:	b662      	cpsie	i
  402682:	e7fe      	b.n	402682 <xTaskCheckForTimeOut+0x4a>
  402684:	f04f 0380 	mov.w	r3, #128	; 0x80
  402688:	b672      	cpsid	i
  40268a:	f383 8811 	msr	BASEPRI, r3
  40268e:	f3bf 8f6f 	isb	sy
  402692:	f3bf 8f4f 	dsb	sy
  402696:	b662      	cpsie	i
  402698:	e7fe      	b.n	402698 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40269a:	1a9b      	subs	r3, r3, r2
  40269c:	440b      	add	r3, r1
  40269e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4026a0:	4620      	mov	r0, r4
  4026a2:	4b08      	ldr	r3, [pc, #32]	; (4026c4 <xTaskCheckForTimeOut+0x8c>)
  4026a4:	4798      	blx	r3
			xReturn = pdFALSE;
  4026a6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4026a8:	4b07      	ldr	r3, [pc, #28]	; (4026c8 <xTaskCheckForTimeOut+0x90>)
  4026aa:	4798      	blx	r3
}
  4026ac:	4620      	mov	r0, r4
  4026ae:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4026b0:	2400      	movs	r4, #0
  4026b2:	e7f9      	b.n	4026a8 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4026b4:	2401      	movs	r4, #1
  4026b6:	e7f7      	b.n	4026a8 <xTaskCheckForTimeOut+0x70>
  4026b8:	004011cd 	.word	0x004011cd
  4026bc:	20400b4c 	.word	0x20400b4c
  4026c0:	20400b08 	.word	0x20400b08
  4026c4:	00402609 	.word	0x00402609
  4026c8:	00401219 	.word	0x00401219

004026cc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4026cc:	2201      	movs	r2, #1
  4026ce:	4b01      	ldr	r3, [pc, #4]	; (4026d4 <vTaskMissedYield+0x8>)
  4026d0:	601a      	str	r2, [r3, #0]
  4026d2:	4770      	bx	lr
  4026d4:	20400b50 	.word	0x20400b50

004026d8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4026d8:	4b05      	ldr	r3, [pc, #20]	; (4026f0 <xTaskGetSchedulerState+0x18>)
  4026da:	681b      	ldr	r3, [r3, #0]
  4026dc:	b133      	cbz	r3, 4026ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4026de:	4b05      	ldr	r3, [pc, #20]	; (4026f4 <xTaskGetSchedulerState+0x1c>)
  4026e0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4026e2:	2b00      	cmp	r3, #0
  4026e4:	bf0c      	ite	eq
  4026e6:	2002      	moveq	r0, #2
  4026e8:	2000      	movne	r0, #0
  4026ea:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4026ec:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4026ee:	4770      	bx	lr
  4026f0:	20400b20 	.word	0x20400b20
  4026f4:	20400acc 	.word	0x20400acc

004026f8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4026f8:	2800      	cmp	r0, #0
  4026fa:	d044      	beq.n	402786 <vTaskPriorityInherit+0x8e>
	{
  4026fc:	b538      	push	{r3, r4, r5, lr}
  4026fe:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402700:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402702:	4921      	ldr	r1, [pc, #132]	; (402788 <vTaskPriorityInherit+0x90>)
  402704:	6809      	ldr	r1, [r1, #0]
  402706:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402708:	428a      	cmp	r2, r1
  40270a:	d214      	bcs.n	402736 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40270c:	6981      	ldr	r1, [r0, #24]
  40270e:	2900      	cmp	r1, #0
  402710:	db05      	blt.n	40271e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402712:	491d      	ldr	r1, [pc, #116]	; (402788 <vTaskPriorityInherit+0x90>)
  402714:	6809      	ldr	r1, [r1, #0]
  402716:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402718:	f1c1 0105 	rsb	r1, r1, #5
  40271c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40271e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402722:	491a      	ldr	r1, [pc, #104]	; (40278c <vTaskPriorityInherit+0x94>)
  402724:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402728:	6961      	ldr	r1, [r4, #20]
  40272a:	4291      	cmp	r1, r2
  40272c:	d004      	beq.n	402738 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40272e:	4a16      	ldr	r2, [pc, #88]	; (402788 <vTaskPriorityInherit+0x90>)
  402730:	6812      	ldr	r2, [r2, #0]
  402732:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402734:	62e2      	str	r2, [r4, #44]	; 0x2c
  402736:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402738:	1d25      	adds	r5, r4, #4
  40273a:	4628      	mov	r0, r5
  40273c:	4b14      	ldr	r3, [pc, #80]	; (402790 <vTaskPriorityInherit+0x98>)
  40273e:	4798      	blx	r3
  402740:	b970      	cbnz	r0, 402760 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402742:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402744:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402748:	4a10      	ldr	r2, [pc, #64]	; (40278c <vTaskPriorityInherit+0x94>)
  40274a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40274e:	b93a      	cbnz	r2, 402760 <vTaskPriorityInherit+0x68>
  402750:	4810      	ldr	r0, [pc, #64]	; (402794 <vTaskPriorityInherit+0x9c>)
  402752:	6802      	ldr	r2, [r0, #0]
  402754:	2101      	movs	r1, #1
  402756:	fa01 f303 	lsl.w	r3, r1, r3
  40275a:	ea22 0303 	bic.w	r3, r2, r3
  40275e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402760:	4b09      	ldr	r3, [pc, #36]	; (402788 <vTaskPriorityInherit+0x90>)
  402762:	681b      	ldr	r3, [r3, #0]
  402764:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402766:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402768:	4a0a      	ldr	r2, [pc, #40]	; (402794 <vTaskPriorityInherit+0x9c>)
  40276a:	6811      	ldr	r1, [r2, #0]
  40276c:	2301      	movs	r3, #1
  40276e:	4083      	lsls	r3, r0
  402770:	430b      	orrs	r3, r1
  402772:	6013      	str	r3, [r2, #0]
  402774:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402778:	4629      	mov	r1, r5
  40277a:	4b04      	ldr	r3, [pc, #16]	; (40278c <vTaskPriorityInherit+0x94>)
  40277c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402780:	4b05      	ldr	r3, [pc, #20]	; (402798 <vTaskPriorityInherit+0xa0>)
  402782:	4798      	blx	r3
  402784:	bd38      	pop	{r3, r4, r5, pc}
  402786:	4770      	bx	lr
  402788:	20400a54 	.word	0x20400a54
  40278c:	20400a60 	.word	0x20400a60
  402790:	004010e9 	.word	0x004010e9
  402794:	20400ad8 	.word	0x20400ad8
  402798:	0040109d 	.word	0x0040109d

0040279c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  40279c:	2800      	cmp	r0, #0
  40279e:	d04d      	beq.n	40283c <xTaskPriorityDisinherit+0xa0>
	{
  4027a0:	b538      	push	{r3, r4, r5, lr}
  4027a2:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4027a4:	4a27      	ldr	r2, [pc, #156]	; (402844 <xTaskPriorityDisinherit+0xa8>)
  4027a6:	6812      	ldr	r2, [r2, #0]
  4027a8:	4290      	cmp	r0, r2
  4027aa:	d00a      	beq.n	4027c2 <xTaskPriorityDisinherit+0x26>
  4027ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027b0:	b672      	cpsid	i
  4027b2:	f383 8811 	msr	BASEPRI, r3
  4027b6:	f3bf 8f6f 	isb	sy
  4027ba:	f3bf 8f4f 	dsb	sy
  4027be:	b662      	cpsie	i
  4027c0:	e7fe      	b.n	4027c0 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4027c2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4027c4:	b952      	cbnz	r2, 4027dc <xTaskPriorityDisinherit+0x40>
  4027c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027ca:	b672      	cpsid	i
  4027cc:	f383 8811 	msr	BASEPRI, r3
  4027d0:	f3bf 8f6f 	isb	sy
  4027d4:	f3bf 8f4f 	dsb	sy
  4027d8:	b662      	cpsie	i
  4027da:	e7fe      	b.n	4027da <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4027dc:	3a01      	subs	r2, #1
  4027de:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4027e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4027e2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4027e4:	4288      	cmp	r0, r1
  4027e6:	d02b      	beq.n	402840 <xTaskPriorityDisinherit+0xa4>
  4027e8:	bb52      	cbnz	r2, 402840 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4027ea:	1d25      	adds	r5, r4, #4
  4027ec:	4628      	mov	r0, r5
  4027ee:	4b16      	ldr	r3, [pc, #88]	; (402848 <xTaskPriorityDisinherit+0xac>)
  4027f0:	4798      	blx	r3
  4027f2:	b968      	cbnz	r0, 402810 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4027f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4027f6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4027fa:	4b14      	ldr	r3, [pc, #80]	; (40284c <xTaskPriorityDisinherit+0xb0>)
  4027fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402800:	b933      	cbnz	r3, 402810 <xTaskPriorityDisinherit+0x74>
  402802:	4813      	ldr	r0, [pc, #76]	; (402850 <xTaskPriorityDisinherit+0xb4>)
  402804:	6803      	ldr	r3, [r0, #0]
  402806:	2201      	movs	r2, #1
  402808:	408a      	lsls	r2, r1
  40280a:	ea23 0302 	bic.w	r3, r3, r2
  40280e:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402810:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402812:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402814:	f1c0 0305 	rsb	r3, r0, #5
  402818:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40281a:	4a0d      	ldr	r2, [pc, #52]	; (402850 <xTaskPriorityDisinherit+0xb4>)
  40281c:	6811      	ldr	r1, [r2, #0]
  40281e:	2401      	movs	r4, #1
  402820:	fa04 f300 	lsl.w	r3, r4, r0
  402824:	430b      	orrs	r3, r1
  402826:	6013      	str	r3, [r2, #0]
  402828:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40282c:	4629      	mov	r1, r5
  40282e:	4b07      	ldr	r3, [pc, #28]	; (40284c <xTaskPriorityDisinherit+0xb0>)
  402830:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402834:	4b07      	ldr	r3, [pc, #28]	; (402854 <xTaskPriorityDisinherit+0xb8>)
  402836:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402838:	4620      	mov	r0, r4
  40283a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  40283c:	2000      	movs	r0, #0
  40283e:	4770      	bx	lr
  402840:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402842:	bd38      	pop	{r3, r4, r5, pc}
  402844:	20400a54 	.word	0x20400a54
  402848:	004010e9 	.word	0x004010e9
  40284c:	20400a60 	.word	0x20400a60
  402850:	20400ad8 	.word	0x20400ad8
  402854:	0040109d 	.word	0x0040109d

00402858 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402858:	4b05      	ldr	r3, [pc, #20]	; (402870 <pvTaskIncrementMutexHeldCount+0x18>)
  40285a:	681b      	ldr	r3, [r3, #0]
  40285c:	b123      	cbz	r3, 402868 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40285e:	4b04      	ldr	r3, [pc, #16]	; (402870 <pvTaskIncrementMutexHeldCount+0x18>)
  402860:	681a      	ldr	r2, [r3, #0]
  402862:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402864:	3301      	adds	r3, #1
  402866:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402868:	4b01      	ldr	r3, [pc, #4]	; (402870 <pvTaskIncrementMutexHeldCount+0x18>)
  40286a:	6818      	ldr	r0, [r3, #0]
	}
  40286c:	4770      	bx	lr
  40286e:	bf00      	nop
  402870:	20400a54 	.word	0x20400a54

00402874 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402874:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402876:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402878:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40287a:	4291      	cmp	r1, r2
  40287c:	d80c      	bhi.n	402898 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40287e:	1ad2      	subs	r2, r2, r3
  402880:	6983      	ldr	r3, [r0, #24]
  402882:	429a      	cmp	r2, r3
  402884:	d301      	bcc.n	40288a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402886:	2001      	movs	r0, #1
  402888:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40288a:	1d01      	adds	r1, r0, #4
  40288c:	4b09      	ldr	r3, [pc, #36]	; (4028b4 <prvInsertTimerInActiveList+0x40>)
  40288e:	6818      	ldr	r0, [r3, #0]
  402890:	4b09      	ldr	r3, [pc, #36]	; (4028b8 <prvInsertTimerInActiveList+0x44>)
  402892:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402894:	2000      	movs	r0, #0
  402896:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402898:	429a      	cmp	r2, r3
  40289a:	d203      	bcs.n	4028a4 <prvInsertTimerInActiveList+0x30>
  40289c:	4299      	cmp	r1, r3
  40289e:	d301      	bcc.n	4028a4 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4028a0:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4028a2:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4028a4:	1d01      	adds	r1, r0, #4
  4028a6:	4b05      	ldr	r3, [pc, #20]	; (4028bc <prvInsertTimerInActiveList+0x48>)
  4028a8:	6818      	ldr	r0, [r3, #0]
  4028aa:	4b03      	ldr	r3, [pc, #12]	; (4028b8 <prvInsertTimerInActiveList+0x44>)
  4028ac:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4028ae:	2000      	movs	r0, #0
  4028b0:	bd08      	pop	{r3, pc}
  4028b2:	bf00      	nop
  4028b4:	20400b58 	.word	0x20400b58
  4028b8:	004010b5 	.word	0x004010b5
  4028bc:	20400b54 	.word	0x20400b54

004028c0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4028c0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4028c2:	4b15      	ldr	r3, [pc, #84]	; (402918 <prvCheckForValidListAndQueue+0x58>)
  4028c4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4028c6:	4b15      	ldr	r3, [pc, #84]	; (40291c <prvCheckForValidListAndQueue+0x5c>)
  4028c8:	681b      	ldr	r3, [r3, #0]
  4028ca:	b113      	cbz	r3, 4028d2 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4028cc:	4b14      	ldr	r3, [pc, #80]	; (402920 <prvCheckForValidListAndQueue+0x60>)
  4028ce:	4798      	blx	r3
  4028d0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4028d2:	4d14      	ldr	r5, [pc, #80]	; (402924 <prvCheckForValidListAndQueue+0x64>)
  4028d4:	4628      	mov	r0, r5
  4028d6:	4e14      	ldr	r6, [pc, #80]	; (402928 <prvCheckForValidListAndQueue+0x68>)
  4028d8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4028da:	4c14      	ldr	r4, [pc, #80]	; (40292c <prvCheckForValidListAndQueue+0x6c>)
  4028dc:	4620      	mov	r0, r4
  4028de:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4028e0:	4b13      	ldr	r3, [pc, #76]	; (402930 <prvCheckForValidListAndQueue+0x70>)
  4028e2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4028e4:	4b13      	ldr	r3, [pc, #76]	; (402934 <prvCheckForValidListAndQueue+0x74>)
  4028e6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4028e8:	2200      	movs	r2, #0
  4028ea:	2110      	movs	r1, #16
  4028ec:	2005      	movs	r0, #5
  4028ee:	4b12      	ldr	r3, [pc, #72]	; (402938 <prvCheckForValidListAndQueue+0x78>)
  4028f0:	4798      	blx	r3
  4028f2:	4b0a      	ldr	r3, [pc, #40]	; (40291c <prvCheckForValidListAndQueue+0x5c>)
  4028f4:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4028f6:	b118      	cbz	r0, 402900 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4028f8:	4910      	ldr	r1, [pc, #64]	; (40293c <prvCheckForValidListAndQueue+0x7c>)
  4028fa:	4b11      	ldr	r3, [pc, #68]	; (402940 <prvCheckForValidListAndQueue+0x80>)
  4028fc:	4798      	blx	r3
  4028fe:	e7e5      	b.n	4028cc <prvCheckForValidListAndQueue+0xc>
  402900:	f04f 0380 	mov.w	r3, #128	; 0x80
  402904:	b672      	cpsid	i
  402906:	f383 8811 	msr	BASEPRI, r3
  40290a:	f3bf 8f6f 	isb	sy
  40290e:	f3bf 8f4f 	dsb	sy
  402912:	b662      	cpsie	i
  402914:	e7fe      	b.n	402914 <prvCheckForValidListAndQueue+0x54>
  402916:	bf00      	nop
  402918:	004011cd 	.word	0x004011cd
  40291c:	20400b88 	.word	0x20400b88
  402920:	00401219 	.word	0x00401219
  402924:	20400b5c 	.word	0x20400b5c
  402928:	00401081 	.word	0x00401081
  40292c:	20400b70 	.word	0x20400b70
  402930:	20400b54 	.word	0x20400b54
  402934:	20400b58 	.word	0x20400b58
  402938:	004016ed 	.word	0x004016ed
  40293c:	004091f4 	.word	0x004091f4
  402940:	00401c1d 	.word	0x00401c1d

00402944 <xTimerCreateTimerTask>:
{
  402944:	b510      	push	{r4, lr}
  402946:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402948:	4b0f      	ldr	r3, [pc, #60]	; (402988 <xTimerCreateTimerTask+0x44>)
  40294a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40294c:	4b0f      	ldr	r3, [pc, #60]	; (40298c <xTimerCreateTimerTask+0x48>)
  40294e:	681b      	ldr	r3, [r3, #0]
  402950:	b173      	cbz	r3, 402970 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402952:	2300      	movs	r3, #0
  402954:	9303      	str	r3, [sp, #12]
  402956:	9302      	str	r3, [sp, #8]
  402958:	9301      	str	r3, [sp, #4]
  40295a:	2204      	movs	r2, #4
  40295c:	9200      	str	r2, [sp, #0]
  40295e:	f44f 7282 	mov.w	r2, #260	; 0x104
  402962:	490b      	ldr	r1, [pc, #44]	; (402990 <xTimerCreateTimerTask+0x4c>)
  402964:	480b      	ldr	r0, [pc, #44]	; (402994 <xTimerCreateTimerTask+0x50>)
  402966:	4c0c      	ldr	r4, [pc, #48]	; (402998 <xTimerCreateTimerTask+0x54>)
  402968:	47a0      	blx	r4
	configASSERT( xReturn );
  40296a:	b108      	cbz	r0, 402970 <xTimerCreateTimerTask+0x2c>
}
  40296c:	b004      	add	sp, #16
  40296e:	bd10      	pop	{r4, pc}
  402970:	f04f 0380 	mov.w	r3, #128	; 0x80
  402974:	b672      	cpsid	i
  402976:	f383 8811 	msr	BASEPRI, r3
  40297a:	f3bf 8f6f 	isb	sy
  40297e:	f3bf 8f4f 	dsb	sy
  402982:	b662      	cpsie	i
  402984:	e7fe      	b.n	402984 <xTimerCreateTimerTask+0x40>
  402986:	bf00      	nop
  402988:	004028c1 	.word	0x004028c1
  40298c:	20400b88 	.word	0x20400b88
  402990:	004091fc 	.word	0x004091fc
  402994:	00402ac5 	.word	0x00402ac5
  402998:	00401d2d 	.word	0x00401d2d

0040299c <xTimerGenericCommand>:
	configASSERT( xTimer );
  40299c:	b1d8      	cbz	r0, 4029d6 <xTimerGenericCommand+0x3a>
{
  40299e:	b530      	push	{r4, r5, lr}
  4029a0:	b085      	sub	sp, #20
  4029a2:	4615      	mov	r5, r2
  4029a4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4029a6:	4a15      	ldr	r2, [pc, #84]	; (4029fc <xTimerGenericCommand+0x60>)
  4029a8:	6810      	ldr	r0, [r2, #0]
  4029aa:	b320      	cbz	r0, 4029f6 <xTimerGenericCommand+0x5a>
  4029ac:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4029ae:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4029b0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4029b2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4029b4:	2905      	cmp	r1, #5
  4029b6:	dc19      	bgt.n	4029ec <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4029b8:	4b11      	ldr	r3, [pc, #68]	; (402a00 <xTimerGenericCommand+0x64>)
  4029ba:	4798      	blx	r3
  4029bc:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4029be:	f04f 0300 	mov.w	r3, #0
  4029c2:	bf0c      	ite	eq
  4029c4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4029c6:	461a      	movne	r2, r3
  4029c8:	4669      	mov	r1, sp
  4029ca:	480c      	ldr	r0, [pc, #48]	; (4029fc <xTimerGenericCommand+0x60>)
  4029cc:	6800      	ldr	r0, [r0, #0]
  4029ce:	4c0d      	ldr	r4, [pc, #52]	; (402a04 <xTimerGenericCommand+0x68>)
  4029d0:	47a0      	blx	r4
}
  4029d2:	b005      	add	sp, #20
  4029d4:	bd30      	pop	{r4, r5, pc}
  4029d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029da:	b672      	cpsid	i
  4029dc:	f383 8811 	msr	BASEPRI, r3
  4029e0:	f3bf 8f6f 	isb	sy
  4029e4:	f3bf 8f4f 	dsb	sy
  4029e8:	b662      	cpsie	i
  4029ea:	e7fe      	b.n	4029ea <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4029ec:	2300      	movs	r3, #0
  4029ee:	4669      	mov	r1, sp
  4029f0:	4c05      	ldr	r4, [pc, #20]	; (402a08 <xTimerGenericCommand+0x6c>)
  4029f2:	47a0      	blx	r4
  4029f4:	e7ed      	b.n	4029d2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4029f6:	2000      	movs	r0, #0
	return xReturn;
  4029f8:	e7eb      	b.n	4029d2 <xTimerGenericCommand+0x36>
  4029fa:	bf00      	nop
  4029fc:	20400b88 	.word	0x20400b88
  402a00:	004026d9 	.word	0x004026d9
  402a04:	00401769 	.word	0x00401769
  402a08:	0040194d 	.word	0x0040194d

00402a0c <prvSampleTimeNow>:
{
  402a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a10:	b082      	sub	sp, #8
  402a12:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402a14:	4b24      	ldr	r3, [pc, #144]	; (402aa8 <prvSampleTimeNow+0x9c>)
  402a16:	4798      	blx	r3
  402a18:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402a1a:	4b24      	ldr	r3, [pc, #144]	; (402aac <prvSampleTimeNow+0xa0>)
  402a1c:	681b      	ldr	r3, [r3, #0]
  402a1e:	4298      	cmp	r0, r3
  402a20:	d31b      	bcc.n	402a5a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402a22:	2300      	movs	r3, #0
  402a24:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402a28:	4b20      	ldr	r3, [pc, #128]	; (402aac <prvSampleTimeNow+0xa0>)
  402a2a:	601f      	str	r7, [r3, #0]
}
  402a2c:	4638      	mov	r0, r7
  402a2e:	b002      	add	sp, #8
  402a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402a34:	2100      	movs	r1, #0
  402a36:	9100      	str	r1, [sp, #0]
  402a38:	460b      	mov	r3, r1
  402a3a:	4652      	mov	r2, sl
  402a3c:	4620      	mov	r0, r4
  402a3e:	4c1c      	ldr	r4, [pc, #112]	; (402ab0 <prvSampleTimeNow+0xa4>)
  402a40:	47a0      	blx	r4
				configASSERT( xResult );
  402a42:	b960      	cbnz	r0, 402a5e <prvSampleTimeNow+0x52>
  402a44:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a48:	b672      	cpsid	i
  402a4a:	f383 8811 	msr	BASEPRI, r3
  402a4e:	f3bf 8f6f 	isb	sy
  402a52:	f3bf 8f4f 	dsb	sy
  402a56:	b662      	cpsie	i
  402a58:	e7fe      	b.n	402a58 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a5a:	4d16      	ldr	r5, [pc, #88]	; (402ab4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a5c:	4e16      	ldr	r6, [pc, #88]	; (402ab8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a5e:	682b      	ldr	r3, [r5, #0]
  402a60:	681a      	ldr	r2, [r3, #0]
  402a62:	b1c2      	cbz	r2, 402a96 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a64:	68db      	ldr	r3, [r3, #12]
  402a66:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a6a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a6c:	f104 0904 	add.w	r9, r4, #4
  402a70:	4648      	mov	r0, r9
  402a72:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402a76:	4620      	mov	r0, r4
  402a78:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402a7a:	69e3      	ldr	r3, [r4, #28]
  402a7c:	2b01      	cmp	r3, #1
  402a7e:	d1ee      	bne.n	402a5e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402a80:	69a3      	ldr	r3, [r4, #24]
  402a82:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402a84:	459a      	cmp	sl, r3
  402a86:	d2d5      	bcs.n	402a34 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402a88:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402a8a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402a8c:	4649      	mov	r1, r9
  402a8e:	6828      	ldr	r0, [r5, #0]
  402a90:	4b0a      	ldr	r3, [pc, #40]	; (402abc <prvSampleTimeNow+0xb0>)
  402a92:	4798      	blx	r3
  402a94:	e7e3      	b.n	402a5e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402a96:	4a0a      	ldr	r2, [pc, #40]	; (402ac0 <prvSampleTimeNow+0xb4>)
  402a98:	6810      	ldr	r0, [r2, #0]
  402a9a:	4906      	ldr	r1, [pc, #24]	; (402ab4 <prvSampleTimeNow+0xa8>)
  402a9c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402a9e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402aa0:	2301      	movs	r3, #1
  402aa2:	f8c8 3000 	str.w	r3, [r8]
  402aa6:	e7bf      	b.n	402a28 <prvSampleTimeNow+0x1c>
  402aa8:	00401ffd 	.word	0x00401ffd
  402aac:	20400b84 	.word	0x20400b84
  402ab0:	0040299d 	.word	0x0040299d
  402ab4:	20400b54 	.word	0x20400b54
  402ab8:	004010e9 	.word	0x004010e9
  402abc:	004010b5 	.word	0x004010b5
  402ac0:	20400b58 	.word	0x20400b58

00402ac4 <prvTimerTask>:
{
  402ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ac8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402aca:	4e75      	ldr	r6, [pc, #468]	; (402ca0 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402acc:	4f75      	ldr	r7, [pc, #468]	; (402ca4 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402ace:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402ccc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402ad2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402cd0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402ad6:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402ad8:	681a      	ldr	r2, [r3, #0]
  402ada:	2a00      	cmp	r2, #0
  402adc:	f000 80ce 	beq.w	402c7c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ae0:	68db      	ldr	r3, [r3, #12]
  402ae2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402ae4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402ae6:	a804      	add	r0, sp, #16
  402ae8:	4b6f      	ldr	r3, [pc, #444]	; (402ca8 <prvTimerTask+0x1e4>)
  402aea:	4798      	blx	r3
  402aec:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402aee:	9b04      	ldr	r3, [sp, #16]
  402af0:	2b00      	cmp	r3, #0
  402af2:	d144      	bne.n	402b7e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402af4:	42a0      	cmp	r0, r4
  402af6:	d212      	bcs.n	402b1e <prvTimerTask+0x5a>
  402af8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402afa:	1b61      	subs	r1, r4, r5
  402afc:	4b6b      	ldr	r3, [pc, #428]	; (402cac <prvTimerTask+0x1e8>)
  402afe:	6818      	ldr	r0, [r3, #0]
  402b00:	4b6b      	ldr	r3, [pc, #428]	; (402cb0 <prvTimerTask+0x1ec>)
  402b02:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402b04:	4b6b      	ldr	r3, [pc, #428]	; (402cb4 <prvTimerTask+0x1f0>)
  402b06:	4798      	blx	r3
  402b08:	2800      	cmp	r0, #0
  402b0a:	d13a      	bne.n	402b82 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402b0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402b10:	f8c9 3000 	str.w	r3, [r9]
  402b14:	f3bf 8f4f 	dsb	sy
  402b18:	f3bf 8f6f 	isb	sy
  402b1c:	e031      	b.n	402b82 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402b1e:	4b65      	ldr	r3, [pc, #404]	; (402cb4 <prvTimerTask+0x1f0>)
  402b20:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b22:	6833      	ldr	r3, [r6, #0]
  402b24:	68db      	ldr	r3, [r3, #12]
  402b26:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b2a:	f10a 0004 	add.w	r0, sl, #4
  402b2e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b30:	f8da 301c 	ldr.w	r3, [sl, #28]
  402b34:	2b01      	cmp	r3, #1
  402b36:	d004      	beq.n	402b42 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b38:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402b3c:	4650      	mov	r0, sl
  402b3e:	4798      	blx	r3
  402b40:	e01f      	b.n	402b82 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402b42:	f8da 1018 	ldr.w	r1, [sl, #24]
  402b46:	4623      	mov	r3, r4
  402b48:	462a      	mov	r2, r5
  402b4a:	4421      	add	r1, r4
  402b4c:	4650      	mov	r0, sl
  402b4e:	4d5a      	ldr	r5, [pc, #360]	; (402cb8 <prvTimerTask+0x1f4>)
  402b50:	47a8      	blx	r5
  402b52:	2801      	cmp	r0, #1
  402b54:	d1f0      	bne.n	402b38 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b56:	2100      	movs	r1, #0
  402b58:	9100      	str	r1, [sp, #0]
  402b5a:	460b      	mov	r3, r1
  402b5c:	4622      	mov	r2, r4
  402b5e:	4650      	mov	r0, sl
  402b60:	4c56      	ldr	r4, [pc, #344]	; (402cbc <prvTimerTask+0x1f8>)
  402b62:	47a0      	blx	r4
			configASSERT( xResult );
  402b64:	2800      	cmp	r0, #0
  402b66:	d1e7      	bne.n	402b38 <prvTimerTask+0x74>
  402b68:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b6c:	b672      	cpsid	i
  402b6e:	f383 8811 	msr	BASEPRI, r3
  402b72:	f3bf 8f6f 	isb	sy
  402b76:	f3bf 8f4f 	dsb	sy
  402b7a:	b662      	cpsie	i
  402b7c:	e7fe      	b.n	402b7c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402b7e:	4b4d      	ldr	r3, [pc, #308]	; (402cb4 <prvTimerTask+0x1f0>)
  402b80:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402b82:	4d4a      	ldr	r5, [pc, #296]	; (402cac <prvTimerTask+0x1e8>)
  402b84:	4c4e      	ldr	r4, [pc, #312]	; (402cc0 <prvTimerTask+0x1fc>)
  402b86:	e006      	b.n	402b96 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402b88:	9907      	ldr	r1, [sp, #28]
  402b8a:	9806      	ldr	r0, [sp, #24]
  402b8c:	9b05      	ldr	r3, [sp, #20]
  402b8e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402b90:	9b04      	ldr	r3, [sp, #16]
  402b92:	2b00      	cmp	r3, #0
  402b94:	da09      	bge.n	402baa <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402b96:	2300      	movs	r3, #0
  402b98:	461a      	mov	r2, r3
  402b9a:	a904      	add	r1, sp, #16
  402b9c:	6828      	ldr	r0, [r5, #0]
  402b9e:	47a0      	blx	r4
  402ba0:	2800      	cmp	r0, #0
  402ba2:	d098      	beq.n	402ad6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402ba4:	9b04      	ldr	r3, [sp, #16]
  402ba6:	2b00      	cmp	r3, #0
  402ba8:	dbee      	blt.n	402b88 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402baa:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402bae:	f8da 3014 	ldr.w	r3, [sl, #20]
  402bb2:	b113      	cbz	r3, 402bba <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402bb4:	f10a 0004 	add.w	r0, sl, #4
  402bb8:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402bba:	a803      	add	r0, sp, #12
  402bbc:	4b3a      	ldr	r3, [pc, #232]	; (402ca8 <prvTimerTask+0x1e4>)
  402bbe:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402bc0:	9b04      	ldr	r3, [sp, #16]
  402bc2:	2b09      	cmp	r3, #9
  402bc4:	d8e7      	bhi.n	402b96 <prvTimerTask+0xd2>
  402bc6:	a201      	add	r2, pc, #4	; (adr r2, 402bcc <prvTimerTask+0x108>)
  402bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402bcc:	00402bf5 	.word	0x00402bf5
  402bd0:	00402bf5 	.word	0x00402bf5
  402bd4:	00402bf5 	.word	0x00402bf5
  402bd8:	00402b97 	.word	0x00402b97
  402bdc:	00402c49 	.word	0x00402c49
  402be0:	00402c75 	.word	0x00402c75
  402be4:	00402bf5 	.word	0x00402bf5
  402be8:	00402bf5 	.word	0x00402bf5
  402bec:	00402b97 	.word	0x00402b97
  402bf0:	00402c49 	.word	0x00402c49
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402bf4:	9c05      	ldr	r4, [sp, #20]
  402bf6:	f8da 1018 	ldr.w	r1, [sl, #24]
  402bfa:	4623      	mov	r3, r4
  402bfc:	4602      	mov	r2, r0
  402bfe:	4421      	add	r1, r4
  402c00:	4650      	mov	r0, sl
  402c02:	4c2d      	ldr	r4, [pc, #180]	; (402cb8 <prvTimerTask+0x1f4>)
  402c04:	47a0      	blx	r4
  402c06:	2801      	cmp	r0, #1
  402c08:	d1bc      	bne.n	402b84 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c0a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402c0e:	4650      	mov	r0, sl
  402c10:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402c12:	f8da 301c 	ldr.w	r3, [sl, #28]
  402c16:	2b01      	cmp	r3, #1
  402c18:	d1b4      	bne.n	402b84 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402c1a:	f8da 2018 	ldr.w	r2, [sl, #24]
  402c1e:	2100      	movs	r1, #0
  402c20:	9100      	str	r1, [sp, #0]
  402c22:	460b      	mov	r3, r1
  402c24:	9805      	ldr	r0, [sp, #20]
  402c26:	4402      	add	r2, r0
  402c28:	4650      	mov	r0, sl
  402c2a:	4c24      	ldr	r4, [pc, #144]	; (402cbc <prvTimerTask+0x1f8>)
  402c2c:	47a0      	blx	r4
							configASSERT( xResult );
  402c2e:	2800      	cmp	r0, #0
  402c30:	d1a8      	bne.n	402b84 <prvTimerTask+0xc0>
  402c32:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c36:	b672      	cpsid	i
  402c38:	f383 8811 	msr	BASEPRI, r3
  402c3c:	f3bf 8f6f 	isb	sy
  402c40:	f3bf 8f4f 	dsb	sy
  402c44:	b662      	cpsie	i
  402c46:	e7fe      	b.n	402c46 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402c48:	9905      	ldr	r1, [sp, #20]
  402c4a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402c4e:	b131      	cbz	r1, 402c5e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402c50:	4603      	mov	r3, r0
  402c52:	4602      	mov	r2, r0
  402c54:	4401      	add	r1, r0
  402c56:	4650      	mov	r0, sl
  402c58:	4c17      	ldr	r4, [pc, #92]	; (402cb8 <prvTimerTask+0x1f4>)
  402c5a:	47a0      	blx	r4
  402c5c:	e792      	b.n	402b84 <prvTimerTask+0xc0>
  402c5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c62:	b672      	cpsid	i
  402c64:	f383 8811 	msr	BASEPRI, r3
  402c68:	f3bf 8f6f 	isb	sy
  402c6c:	f3bf 8f4f 	dsb	sy
  402c70:	b662      	cpsie	i
  402c72:	e7fe      	b.n	402c72 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402c74:	4650      	mov	r0, sl
  402c76:	4b13      	ldr	r3, [pc, #76]	; (402cc4 <prvTimerTask+0x200>)
  402c78:	4798      	blx	r3
  402c7a:	e783      	b.n	402b84 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402c7c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402c7e:	a804      	add	r0, sp, #16
  402c80:	4b09      	ldr	r3, [pc, #36]	; (402ca8 <prvTimerTask+0x1e4>)
  402c82:	4798      	blx	r3
  402c84:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402c86:	9b04      	ldr	r3, [sp, #16]
  402c88:	2b00      	cmp	r3, #0
  402c8a:	f47f af78 	bne.w	402b7e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402c8e:	4b0e      	ldr	r3, [pc, #56]	; (402cc8 <prvTimerTask+0x204>)
  402c90:	681b      	ldr	r3, [r3, #0]
  402c92:	681a      	ldr	r2, [r3, #0]
  402c94:	fab2 f282 	clz	r2, r2
  402c98:	0952      	lsrs	r2, r2, #5
  402c9a:	2400      	movs	r4, #0
  402c9c:	e72d      	b.n	402afa <prvTimerTask+0x36>
  402c9e:	bf00      	nop
  402ca0:	20400b54 	.word	0x20400b54
  402ca4:	00401fed 	.word	0x00401fed
  402ca8:	00402a0d 	.word	0x00402a0d
  402cac:	20400b88 	.word	0x20400b88
  402cb0:	00401c51 	.word	0x00401c51
  402cb4:	00402155 	.word	0x00402155
  402cb8:	00402875 	.word	0x00402875
  402cbc:	0040299d 	.word	0x0040299d
  402cc0:	00401a4d 	.word	0x00401a4d
  402cc4:	00401459 	.word	0x00401459
  402cc8:	20400b58 	.word	0x20400b58
  402ccc:	e000ed04 	.word	0xe000ed04
  402cd0:	004010e9 	.word	0x004010e9

00402cd4 <usart_serial_putchar>:
{
  402cd4:	b570      	push	{r4, r5, r6, lr}
  402cd6:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402cd8:	4b2a      	ldr	r3, [pc, #168]	; (402d84 <usart_serial_putchar+0xb0>)
  402cda:	4298      	cmp	r0, r3
  402cdc:	d013      	beq.n	402d06 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402cde:	4b2a      	ldr	r3, [pc, #168]	; (402d88 <usart_serial_putchar+0xb4>)
  402ce0:	4298      	cmp	r0, r3
  402ce2:	d019      	beq.n	402d18 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402ce4:	4b29      	ldr	r3, [pc, #164]	; (402d8c <usart_serial_putchar+0xb8>)
  402ce6:	4298      	cmp	r0, r3
  402ce8:	d01f      	beq.n	402d2a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402cea:	4b29      	ldr	r3, [pc, #164]	; (402d90 <usart_serial_putchar+0xbc>)
  402cec:	4298      	cmp	r0, r3
  402cee:	d025      	beq.n	402d3c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402cf0:	4b28      	ldr	r3, [pc, #160]	; (402d94 <usart_serial_putchar+0xc0>)
  402cf2:	4298      	cmp	r0, r3
  402cf4:	d02b      	beq.n	402d4e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402cf6:	4b28      	ldr	r3, [pc, #160]	; (402d98 <usart_serial_putchar+0xc4>)
  402cf8:	4298      	cmp	r0, r3
  402cfa:	d031      	beq.n	402d60 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402cfc:	4b27      	ldr	r3, [pc, #156]	; (402d9c <usart_serial_putchar+0xc8>)
  402cfe:	4298      	cmp	r0, r3
  402d00:	d037      	beq.n	402d72 <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402d02:	2000      	movs	r0, #0
}
  402d04:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402d06:	461e      	mov	r6, r3
  402d08:	4d25      	ldr	r5, [pc, #148]	; (402da0 <usart_serial_putchar+0xcc>)
  402d0a:	4621      	mov	r1, r4
  402d0c:	4630      	mov	r0, r6
  402d0e:	47a8      	blx	r5
  402d10:	2800      	cmp	r0, #0
  402d12:	d1fa      	bne.n	402d0a <usart_serial_putchar+0x36>
		return 1;
  402d14:	2001      	movs	r0, #1
  402d16:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402d18:	461e      	mov	r6, r3
  402d1a:	4d21      	ldr	r5, [pc, #132]	; (402da0 <usart_serial_putchar+0xcc>)
  402d1c:	4621      	mov	r1, r4
  402d1e:	4630      	mov	r0, r6
  402d20:	47a8      	blx	r5
  402d22:	2800      	cmp	r0, #0
  402d24:	d1fa      	bne.n	402d1c <usart_serial_putchar+0x48>
		return 1;
  402d26:	2001      	movs	r0, #1
  402d28:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402d2a:	461e      	mov	r6, r3
  402d2c:	4d1c      	ldr	r5, [pc, #112]	; (402da0 <usart_serial_putchar+0xcc>)
  402d2e:	4621      	mov	r1, r4
  402d30:	4630      	mov	r0, r6
  402d32:	47a8      	blx	r5
  402d34:	2800      	cmp	r0, #0
  402d36:	d1fa      	bne.n	402d2e <usart_serial_putchar+0x5a>
		return 1;
  402d38:	2001      	movs	r0, #1
  402d3a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402d3c:	461e      	mov	r6, r3
  402d3e:	4d18      	ldr	r5, [pc, #96]	; (402da0 <usart_serial_putchar+0xcc>)
  402d40:	4621      	mov	r1, r4
  402d42:	4630      	mov	r0, r6
  402d44:	47a8      	blx	r5
  402d46:	2800      	cmp	r0, #0
  402d48:	d1fa      	bne.n	402d40 <usart_serial_putchar+0x6c>
		return 1;
  402d4a:	2001      	movs	r0, #1
  402d4c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402d4e:	461e      	mov	r6, r3
  402d50:	4d14      	ldr	r5, [pc, #80]	; (402da4 <usart_serial_putchar+0xd0>)
  402d52:	4621      	mov	r1, r4
  402d54:	4630      	mov	r0, r6
  402d56:	47a8      	blx	r5
  402d58:	2800      	cmp	r0, #0
  402d5a:	d1fa      	bne.n	402d52 <usart_serial_putchar+0x7e>
		return 1;
  402d5c:	2001      	movs	r0, #1
  402d5e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402d60:	461e      	mov	r6, r3
  402d62:	4d10      	ldr	r5, [pc, #64]	; (402da4 <usart_serial_putchar+0xd0>)
  402d64:	4621      	mov	r1, r4
  402d66:	4630      	mov	r0, r6
  402d68:	47a8      	blx	r5
  402d6a:	2800      	cmp	r0, #0
  402d6c:	d1fa      	bne.n	402d64 <usart_serial_putchar+0x90>
		return 1;
  402d6e:	2001      	movs	r0, #1
  402d70:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402d72:	461e      	mov	r6, r3
  402d74:	4d0b      	ldr	r5, [pc, #44]	; (402da4 <usart_serial_putchar+0xd0>)
  402d76:	4621      	mov	r1, r4
  402d78:	4630      	mov	r0, r6
  402d7a:	47a8      	blx	r5
  402d7c:	2800      	cmp	r0, #0
  402d7e:	d1fa      	bne.n	402d76 <usart_serial_putchar+0xa2>
		return 1;
  402d80:	2001      	movs	r0, #1
  402d82:	bd70      	pop	{r4, r5, r6, pc}
  402d84:	400e0800 	.word	0x400e0800
  402d88:	400e0a00 	.word	0x400e0a00
  402d8c:	400e1a00 	.word	0x400e1a00
  402d90:	400e1c00 	.word	0x400e1c00
  402d94:	40024000 	.word	0x40024000
  402d98:	40028000 	.word	0x40028000
  402d9c:	4002c000 	.word	0x4002c000
  402da0:	00400c8f 	.word	0x00400c8f
  402da4:	00400da1 	.word	0x00400da1

00402da8 <task_adc>:
		
	}
}


static void task_adc(void *pvParameters) {
  402da8:	b508      	push	{r3, lr}

	// variável para recever dados da fila
	//float adc;

	while (1) {
		if (xQueueReceive(xQueueADC, &(adc_vx), 1000)) {
  402daa:	4d15      	ldr	r5, [pc, #84]	; (402e00 <task_adc+0x58>)
  402dac:	4e15      	ldr	r6, [pc, #84]	; (402e04 <task_adc+0x5c>)
  402dae:	4c16      	ldr	r4, [pc, #88]	; (402e08 <task_adc+0x60>)
  402db0:	e00b      	b.n	402dca <task_adc+0x22>
			printf("ADCX: %f \n", adc_vx);
  402db2:	6828      	ldr	r0, [r5, #0]
  402db4:	4b15      	ldr	r3, [pc, #84]	; (402e0c <task_adc+0x64>)
  402db6:	4798      	blx	r3
  402db8:	4602      	mov	r2, r0
  402dba:	460b      	mov	r3, r1
  402dbc:	4814      	ldr	r0, [pc, #80]	; (402e10 <task_adc+0x68>)
  402dbe:	4915      	ldr	r1, [pc, #84]	; (402e14 <task_adc+0x6c>)
  402dc0:	4788      	blx	r1
  402dc2:	e00a      	b.n	402dda <task_adc+0x32>
		} if (xQueueReceive(xQueueADC2, &(adc_vy), 1000)) {
			printf("ADCY: %f \n", adc_vy);
		}
		 else {
			printf("Nao chegou um novo dado em 1 segundo vx \n");
  402dc4:	4814      	ldr	r0, [pc, #80]	; (402e18 <task_adc+0x70>)
  402dc6:	4b15      	ldr	r3, [pc, #84]	; (402e1c <task_adc+0x74>)
  402dc8:	4798      	blx	r3
		if (xQueueReceive(xQueueADC, &(adc_vx), 1000)) {
  402dca:	2300      	movs	r3, #0
  402dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402dd0:	4629      	mov	r1, r5
  402dd2:	6830      	ldr	r0, [r6, #0]
  402dd4:	47a0      	blx	r4
  402dd6:	2800      	cmp	r0, #0
  402dd8:	d1eb      	bne.n	402db2 <task_adc+0xa>
		} if (xQueueReceive(xQueueADC2, &(adc_vy), 1000)) {
  402dda:	2300      	movs	r3, #0
  402ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402de0:	490f      	ldr	r1, [pc, #60]	; (402e20 <task_adc+0x78>)
  402de2:	4810      	ldr	r0, [pc, #64]	; (402e24 <task_adc+0x7c>)
  402de4:	6800      	ldr	r0, [r0, #0]
  402de6:	47a0      	blx	r4
  402de8:	2800      	cmp	r0, #0
  402dea:	d0eb      	beq.n	402dc4 <task_adc+0x1c>
			printf("ADCY: %f \n", adc_vy);
  402dec:	4b0c      	ldr	r3, [pc, #48]	; (402e20 <task_adc+0x78>)
  402dee:	6818      	ldr	r0, [r3, #0]
  402df0:	4b06      	ldr	r3, [pc, #24]	; (402e0c <task_adc+0x64>)
  402df2:	4798      	blx	r3
  402df4:	4602      	mov	r2, r0
  402df6:	460b      	mov	r3, r1
  402df8:	480b      	ldr	r0, [pc, #44]	; (402e28 <task_adc+0x80>)
  402dfa:	4906      	ldr	r1, [pc, #24]	; (402e14 <task_adc+0x6c>)
  402dfc:	4788      	blx	r1
  402dfe:	e7e4      	b.n	402dca <task_adc+0x22>
  402e00:	20400ca4 	.word	0x20400ca4
  402e04:	20400ca0 	.word	0x20400ca0
  402e08:	00401a4d 	.word	0x00401a4d
  402e0c:	00403bf1 	.word	0x00403bf1
  402e10:	00409284 	.word	0x00409284
  402e14:	00404915 	.word	0x00404915
  402e18:	0040929c 	.word	0x0040929c
  402e1c:	004049d9 	.word	0x004049d9
  402e20:	20400c9c 	.word	0x20400c9c
  402e24:	20400c94 	.word	0x20400c94
  402e28:	00409290 	.word	0x00409290

00402e2c <AFEC_vry_Callback>:
static void AFEC_vry_Callback(void) {
  402e2c:	b510      	push	{r4, lr}
  402e2e:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  402e30:	4b08      	ldr	r3, [pc, #32]	; (402e54 <AFEC_vry_Callback+0x28>)
  402e32:	2205      	movs	r2, #5
  402e34:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	adc.value = afec_channel_get_value(AFEC_VRY, AFEC_VRY_CHANNEL);
  402e38:	9301      	str	r3, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  402e3a:	aa02      	add	r2, sp, #8
  402e3c:	2301      	movs	r3, #1
  402e3e:	f842 3d08 	str.w	r3, [r2, #-8]!
	xQueueSendFromISR(xQueueADCProc2, &adc, &xHigherPriorityTaskWoken);
  402e42:	2300      	movs	r3, #0
  402e44:	a901      	add	r1, sp, #4
  402e46:	4804      	ldr	r0, [pc, #16]	; (402e58 <AFEC_vry_Callback+0x2c>)
  402e48:	6800      	ldr	r0, [r0, #0]
  402e4a:	4c04      	ldr	r4, [pc, #16]	; (402e5c <AFEC_vry_Callback+0x30>)
  402e4c:	47a0      	blx	r4
}
  402e4e:	b002      	add	sp, #8
  402e50:	bd10      	pop	{r4, pc}
  402e52:	bf00      	nop
  402e54:	4003c000 	.word	0x4003c000
  402e58:	20400ca8 	.word	0x20400ca8
  402e5c:	0040194d 	.word	0x0040194d

00402e60 <AFEC_vrx_Callback>:
static void AFEC_vrx_Callback(void) {
  402e60:	b510      	push	{r4, lr}
  402e62:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  402e64:	4b08      	ldr	r3, [pc, #32]	; (402e88 <AFEC_vrx_Callback+0x28>)
  402e66:	2205      	movs	r2, #5
  402e68:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	adc.value = afec_channel_get_value(AFEC_VRX, AFEC_VRX_CHANNEL);
  402e6c:	9301      	str	r3, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  402e6e:	aa02      	add	r2, sp, #8
  402e70:	2301      	movs	r3, #1
  402e72:	f842 3d08 	str.w	r3, [r2, #-8]!
	xQueueSendFromISR(xQueueADCProc, &adc, &xHigherPriorityTaskWoken);
  402e76:	2300      	movs	r3, #0
  402e78:	a901      	add	r1, sp, #4
  402e7a:	4804      	ldr	r0, [pc, #16]	; (402e8c <AFEC_vrx_Callback+0x2c>)
  402e7c:	6800      	ldr	r0, [r0, #0]
  402e7e:	4c04      	ldr	r4, [pc, #16]	; (402e90 <AFEC_vrx_Callback+0x30>)
  402e80:	47a0      	blx	r4
}
  402e82:	b002      	add	sp, #8
  402e84:	bd10      	pop	{r4, pc}
  402e86:	bf00      	nop
  402e88:	40064000 	.word	0x40064000
  402e8c:	20400c98 	.word	0x20400c98
  402e90:	0040194d 	.word	0x0040194d

00402e94 <config_AFEC_pot>:
                            afec_callback_t callback) {
  402e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e98:	b08a      	sub	sp, #40	; 0x28
  402e9a:	4604      	mov	r4, r0
  402e9c:	460d      	mov	r5, r1
  402e9e:	4616      	mov	r6, r2
  402ea0:	4698      	mov	r8, r3
  afec_enable(afec);
  402ea2:	4b21      	ldr	r3, [pc, #132]	; (402f28 <config_AFEC_pot+0x94>)
  402ea4:	4798      	blx	r3
  afec_get_config_defaults(&afec_cfg);
  402ea6:	a804      	add	r0, sp, #16
  402ea8:	4b20      	ldr	r3, [pc, #128]	; (402f2c <config_AFEC_pot+0x98>)
  402eaa:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  402eac:	a904      	add	r1, sp, #16
  402eae:	4620      	mov	r0, r4
  402eb0:	4b1f      	ldr	r3, [pc, #124]	; (402f30 <config_AFEC_pot+0x9c>)
  402eb2:	4798      	blx	r3
	reg = afec->AFEC_MR;
  402eb4:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402eb6:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  402eba:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  402ebc:	a803      	add	r0, sp, #12
  402ebe:	4b1d      	ldr	r3, [pc, #116]	; (402f34 <config_AFEC_pot+0xa0>)
  402ec0:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402ec2:	2300      	movs	r3, #0
  402ec4:	f88d 300d 	strb.w	r3, [sp, #13]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  402ec8:	b2b7      	uxth	r7, r6
  402eca:	aa03      	add	r2, sp, #12
  402ecc:	4639      	mov	r1, r7
  402ece:	4620      	mov	r0, r4
  402ed0:	4b19      	ldr	r3, [pc, #100]	; (402f38 <config_AFEC_pot+0xa4>)
  402ed2:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  402ed4:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
  402eda:	66e3      	str	r3, [r4, #108]	; 0x6c
  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402edc:	a801      	add	r0, sp, #4
  402ede:	4b17      	ldr	r3, [pc, #92]	; (402f3c <config_AFEC_pot+0xa8>)
  402ee0:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  402ee2:	a901      	add	r1, sp, #4
  402ee4:	4620      	mov	r0, r4
  402ee6:	4b16      	ldr	r3, [pc, #88]	; (402f40 <config_AFEC_pot+0xac>)
  402ee8:	4798      	blx	r3
  afec_set_callback(afec, afec_channel, callback, 1);
  402eea:	2301      	movs	r3, #1
  402eec:	4642      	mov	r2, r8
  402eee:	4631      	mov	r1, r6
  402ef0:	4620      	mov	r0, r4
  402ef2:	4c14      	ldr	r4, [pc, #80]	; (402f44 <config_AFEC_pot+0xb0>)
  402ef4:	47a0      	blx	r4
  NVIC_SetPriority(afec_id, 4);
  402ef6:	b26b      	sxtb	r3, r5
  if(IRQn < 0) {
  402ef8:	2b00      	cmp	r3, #0
  402efa:	db0e      	blt.n	402f1a <config_AFEC_pot+0x86>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402efc:	4a12      	ldr	r2, [pc, #72]	; (402f48 <config_AFEC_pot+0xb4>)
  402efe:	2180      	movs	r1, #128	; 0x80
  402f00:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402f02:	095b      	lsrs	r3, r3, #5
  402f04:	f005 051f 	and.w	r5, r5, #31
  402f08:	2201      	movs	r2, #1
  402f0a:	fa02 f505 	lsl.w	r5, r2, r5
  402f0e:	4a0f      	ldr	r2, [pc, #60]	; (402f4c <config_AFEC_pot+0xb8>)
  402f10:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
}
  402f14:	b00a      	add	sp, #40	; 0x28
  402f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402f1a:	f005 010f 	and.w	r1, r5, #15
  402f1e:	4a0c      	ldr	r2, [pc, #48]	; (402f50 <config_AFEC_pot+0xbc>)
  402f20:	440a      	add	r2, r1
  402f22:	2180      	movs	r1, #128	; 0x80
  402f24:	7611      	strb	r1, [r2, #24]
  402f26:	e7ec      	b.n	402f02 <config_AFEC_pot+0x6e>
  402f28:	004007b5 	.word	0x004007b5
  402f2c:	004005e5 	.word	0x004005e5
  402f30:	00400635 	.word	0x00400635
  402f34:	00400615 	.word	0x00400615
  402f38:	004005a1 	.word	0x004005a1
  402f3c:	0040061f 	.word	0x0040061f
  402f40:	004005d1 	.word	0x004005d1
  402f44:	00400735 	.word	0x00400735
  402f48:	e000e400 	.word	0xe000e400
  402f4c:	e000e100 	.word	0xe000e100
  402f50:	e000ecfc 	.word	0xe000ecfc

00402f54 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402f54:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f56:	b083      	sub	sp, #12
  402f58:	4605      	mov	r5, r0
  402f5a:	460c      	mov	r4, r1
	uint32_t val = 0;
  402f5c:	2300      	movs	r3, #0
  402f5e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402f60:	4b2a      	ldr	r3, [pc, #168]	; (40300c <usart_serial_getchar+0xb8>)
  402f62:	4298      	cmp	r0, r3
  402f64:	d013      	beq.n	402f8e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402f66:	4b2a      	ldr	r3, [pc, #168]	; (403010 <usart_serial_getchar+0xbc>)
  402f68:	4298      	cmp	r0, r3
  402f6a:	d018      	beq.n	402f9e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402f6c:	4b29      	ldr	r3, [pc, #164]	; (403014 <usart_serial_getchar+0xc0>)
  402f6e:	4298      	cmp	r0, r3
  402f70:	d01d      	beq.n	402fae <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402f72:	4b29      	ldr	r3, [pc, #164]	; (403018 <usart_serial_getchar+0xc4>)
  402f74:	429d      	cmp	r5, r3
  402f76:	d022      	beq.n	402fbe <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402f78:	4b28      	ldr	r3, [pc, #160]	; (40301c <usart_serial_getchar+0xc8>)
  402f7a:	429d      	cmp	r5, r3
  402f7c:	d027      	beq.n	402fce <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402f7e:	4b28      	ldr	r3, [pc, #160]	; (403020 <usart_serial_getchar+0xcc>)
  402f80:	429d      	cmp	r5, r3
  402f82:	d02e      	beq.n	402fe2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402f84:	4b27      	ldr	r3, [pc, #156]	; (403024 <usart_serial_getchar+0xd0>)
  402f86:	429d      	cmp	r5, r3
  402f88:	d035      	beq.n	402ff6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402f8a:	b003      	add	sp, #12
  402f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402f8e:	461f      	mov	r7, r3
  402f90:	4e25      	ldr	r6, [pc, #148]	; (403028 <usart_serial_getchar+0xd4>)
  402f92:	4621      	mov	r1, r4
  402f94:	4638      	mov	r0, r7
  402f96:	47b0      	blx	r6
  402f98:	2800      	cmp	r0, #0
  402f9a:	d1fa      	bne.n	402f92 <usart_serial_getchar+0x3e>
  402f9c:	e7e9      	b.n	402f72 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402f9e:	461f      	mov	r7, r3
  402fa0:	4e21      	ldr	r6, [pc, #132]	; (403028 <usart_serial_getchar+0xd4>)
  402fa2:	4621      	mov	r1, r4
  402fa4:	4638      	mov	r0, r7
  402fa6:	47b0      	blx	r6
  402fa8:	2800      	cmp	r0, #0
  402faa:	d1fa      	bne.n	402fa2 <usart_serial_getchar+0x4e>
  402fac:	e7e4      	b.n	402f78 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402fae:	461f      	mov	r7, r3
  402fb0:	4e1d      	ldr	r6, [pc, #116]	; (403028 <usart_serial_getchar+0xd4>)
  402fb2:	4621      	mov	r1, r4
  402fb4:	4638      	mov	r0, r7
  402fb6:	47b0      	blx	r6
  402fb8:	2800      	cmp	r0, #0
  402fba:	d1fa      	bne.n	402fb2 <usart_serial_getchar+0x5e>
  402fbc:	e7df      	b.n	402f7e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402fbe:	461f      	mov	r7, r3
  402fc0:	4e19      	ldr	r6, [pc, #100]	; (403028 <usart_serial_getchar+0xd4>)
  402fc2:	4621      	mov	r1, r4
  402fc4:	4638      	mov	r0, r7
  402fc6:	47b0      	blx	r6
  402fc8:	2800      	cmp	r0, #0
  402fca:	d1fa      	bne.n	402fc2 <usart_serial_getchar+0x6e>
  402fcc:	e7da      	b.n	402f84 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402fce:	461e      	mov	r6, r3
  402fd0:	4d16      	ldr	r5, [pc, #88]	; (40302c <usart_serial_getchar+0xd8>)
  402fd2:	a901      	add	r1, sp, #4
  402fd4:	4630      	mov	r0, r6
  402fd6:	47a8      	blx	r5
  402fd8:	2800      	cmp	r0, #0
  402fda:	d1fa      	bne.n	402fd2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402fdc:	9b01      	ldr	r3, [sp, #4]
  402fde:	7023      	strb	r3, [r4, #0]
  402fe0:	e7d3      	b.n	402f8a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402fe2:	461e      	mov	r6, r3
  402fe4:	4d11      	ldr	r5, [pc, #68]	; (40302c <usart_serial_getchar+0xd8>)
  402fe6:	a901      	add	r1, sp, #4
  402fe8:	4630      	mov	r0, r6
  402fea:	47a8      	blx	r5
  402fec:	2800      	cmp	r0, #0
  402fee:	d1fa      	bne.n	402fe6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402ff0:	9b01      	ldr	r3, [sp, #4]
  402ff2:	7023      	strb	r3, [r4, #0]
  402ff4:	e7c9      	b.n	402f8a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402ff6:	461e      	mov	r6, r3
  402ff8:	4d0c      	ldr	r5, [pc, #48]	; (40302c <usart_serial_getchar+0xd8>)
  402ffa:	a901      	add	r1, sp, #4
  402ffc:	4630      	mov	r0, r6
  402ffe:	47a8      	blx	r5
  403000:	2800      	cmp	r0, #0
  403002:	d1fa      	bne.n	402ffa <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403004:	9b01      	ldr	r3, [sp, #4]
  403006:	7023      	strb	r3, [r4, #0]
}
  403008:	e7bf      	b.n	402f8a <usart_serial_getchar+0x36>
  40300a:	bf00      	nop
  40300c:	400e0800 	.word	0x400e0800
  403010:	400e0a00 	.word	0x400e0a00
  403014:	400e1a00 	.word	0x400e1a00
  403018:	400e1c00 	.word	0x400e1c00
  40301c:	40024000 	.word	0x40024000
  403020:	40028000 	.word	0x40028000
  403024:	4002c000 	.word	0x4002c000
  403028:	00400ca1 	.word	0x00400ca1
  40302c:	00400db7 	.word	0x00400db7

00403030 <vApplicationStackOverflowHook>:
signed char *pcTaskName) {
  403030:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403032:	460a      	mov	r2, r1
  403034:	4601      	mov	r1, r0
  403036:	4802      	ldr	r0, [pc, #8]	; (403040 <vApplicationStackOverflowHook+0x10>)
  403038:	4b02      	ldr	r3, [pc, #8]	; (403044 <vApplicationStackOverflowHook+0x14>)
  40303a:	4798      	blx	r3
  40303c:	e7fe      	b.n	40303c <vApplicationStackOverflowHook+0xc>
  40303e:	bf00      	nop
  403040:	00409304 	.word	0x00409304
  403044:	00404915 	.word	0x00404915

00403048 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403048:	4770      	bx	lr

0040304a <vApplicationMallocFailedHook>:
  40304a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40304e:	b672      	cpsid	i
  403050:	f383 8811 	msr	BASEPRI, r3
  403054:	f3bf 8f6f 	isb	sy
  403058:	f3bf 8f4f 	dsb	sy
  40305c:	b662      	cpsie	i
  40305e:	e7fe      	b.n	40305e <vApplicationMallocFailedHook+0x14>

00403060 <io_init>:
void io_init(void) {
  403060:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(LED_PIO_ID);
  403062:	200c      	movs	r0, #12
  403064:	4c0d      	ldr	r4, [pc, #52]	; (40309c <io_init+0x3c>)
  403066:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT_PIO_ID);
  403068:	2010      	movs	r0, #16
  40306a:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT1_PIO_ID);
  40306c:	200a      	movs	r0, #10
  40306e:	47a0      	blx	r4
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  403070:	2308      	movs	r3, #8
  403072:	f44f 7280 	mov.w	r2, #256	; 0x100
  403076:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40307a:	4809      	ldr	r0, [pc, #36]	; (4030a0 <io_init+0x40>)
  40307c:	4c09      	ldr	r4, [pc, #36]	; (4030a4 <io_init+0x44>)
  40307e:	47a0      	blx	r4
	pio_configure(BUT_PIO, PIO_INPUT, BUT_IDX_MASK, PIO_PULLUP);
  403080:	2301      	movs	r3, #1
  403082:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403086:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40308a:	4807      	ldr	r0, [pc, #28]	; (4030a8 <io_init+0x48>)
  40308c:	47a0      	blx	r4
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP);
  40308e:	2301      	movs	r3, #1
  403090:	2240      	movs	r2, #64	; 0x40
  403092:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403096:	4805      	ldr	r0, [pc, #20]	; (4030ac <io_init+0x4c>)
  403098:	47a0      	blx	r4
  40309a:	bd10      	pop	{r4, pc}
  40309c:	00400b91 	.word	0x00400b91
  4030a0:	400e1200 	.word	0x400e1200
  4030a4:	00400925 	.word	0x00400925
  4030a8:	400e1400 	.word	0x400e1400
  4030ac:	400e0e00 	.word	0x400e0e00

004030b0 <usart_put_string>:
void usart_put_string(Usart *usart, char str[]) {
  4030b0:	b538      	push	{r3, r4, r5, lr}
  4030b2:	4605      	mov	r5, r0
  4030b4:	460c      	mov	r4, r1
	usart_serial_write_packet(usart, str, strlen(str));
  4030b6:	4608      	mov	r0, r1
  4030b8:	4b03      	ldr	r3, [pc, #12]	; (4030c8 <usart_put_string+0x18>)
  4030ba:	4798      	blx	r3
  4030bc:	4602      	mov	r2, r0
  4030be:	4621      	mov	r1, r4
  4030c0:	4628      	mov	r0, r5
  4030c2:	4b02      	ldr	r3, [pc, #8]	; (4030cc <usart_put_string+0x1c>)
  4030c4:	4798      	blx	r3
  4030c6:	bd38      	pop	{r3, r4, r5, pc}
  4030c8:	00404bc1 	.word	0x00404bc1
  4030cc:	0040021d 	.word	0x0040021d

004030d0 <usart_get_string>:
int usart_get_string(Usart *usart, char buffer[], int bufferlen, uint timeout_ms) {
  4030d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4030d4:	b082      	sub	sp, #8
  4030d6:	4689      	mov	r9, r1
	while( (timecounter > 0) && (counter < bufferlen - 1)) {
  4030d8:	b1c3      	cbz	r3, 40310c <usart_get_string+0x3c>
  4030da:	4680      	mov	r8, r0
  4030dc:	461d      	mov	r5, r3
  4030de:	1e56      	subs	r6, r2, #1
  4030e0:	d01c      	beq.n	40311c <usart_get_string+0x4c>
  4030e2:	2400      	movs	r4, #0
		if(usart_read(usart, &rx) == 0) {
  4030e4:	4f0e      	ldr	r7, [pc, #56]	; (403120 <usart_get_string+0x50>)
			vTaskDelay(1);
  4030e6:	f8df a03c 	ldr.w	sl, [pc, #60]	; 403124 <usart_get_string+0x54>
  4030ea:	e005      	b.n	4030f8 <usart_get_string+0x28>
			timecounter--;
  4030ec:	3d01      	subs	r5, #1
			vTaskDelay(1);
  4030ee:	2001      	movs	r0, #1
  4030f0:	47d0      	blx	sl
	while( (timecounter > 0) && (counter < bufferlen - 1)) {
  4030f2:	b165      	cbz	r5, 40310e <usart_get_string+0x3e>
  4030f4:	42b4      	cmp	r4, r6
  4030f6:	d20a      	bcs.n	40310e <usart_get_string+0x3e>
		if(usart_read(usart, &rx) == 0) {
  4030f8:	a901      	add	r1, sp, #4
  4030fa:	4640      	mov	r0, r8
  4030fc:	47b8      	blx	r7
  4030fe:	2800      	cmp	r0, #0
  403100:	d1f4      	bne.n	4030ec <usart_get_string+0x1c>
			buffer[counter++] = rx;
  403102:	9b01      	ldr	r3, [sp, #4]
  403104:	f809 3004 	strb.w	r3, [r9, r4]
  403108:	3401      	adds	r4, #1
  40310a:	e7f2      	b.n	4030f2 <usart_get_string+0x22>
	uint32_t counter = 0;
  40310c:	2400      	movs	r4, #0
	buffer[counter] = 0x00;
  40310e:	2300      	movs	r3, #0
  403110:	f809 3004 	strb.w	r3, [r9, r4]
}
  403114:	4620      	mov	r0, r4
  403116:	b002      	add	sp, #8
  403118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t counter = 0;
  40311c:	4634      	mov	r4, r6
  40311e:	e7f6      	b.n	40310e <usart_get_string+0x3e>
  403120:	00400db7 	.word	0x00400db7
  403124:	00402275 	.word	0x00402275

00403128 <usart_send_command>:
char buffer_tx[], int timeout) {
  403128:	b570      	push	{r4, r5, r6, lr}
  40312a:	4604      	mov	r4, r0
  40312c:	460d      	mov	r5, r1
  40312e:	4616      	mov	r6, r2
	usart_put_string(usart, buffer_tx);
  403130:	4619      	mov	r1, r3
  403132:	4b04      	ldr	r3, [pc, #16]	; (403144 <usart_send_command+0x1c>)
  403134:	4798      	blx	r3
	usart_get_string(usart, buffer_rx, bufferlen, timeout);
  403136:	9b04      	ldr	r3, [sp, #16]
  403138:	4632      	mov	r2, r6
  40313a:	4629      	mov	r1, r5
  40313c:	4620      	mov	r0, r4
  40313e:	4c02      	ldr	r4, [pc, #8]	; (403148 <usart_send_command+0x20>)
  403140:	47a0      	blx	r4
  403142:	bd70      	pop	{r4, r5, r6, pc}
  403144:	004030b1 	.word	0x004030b1
  403148:	004030d1 	.word	0x004030d1

0040314c <config_usart0>:
void config_usart0(void) {
  40314c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40314e:	b087      	sub	sp, #28
  403150:	200d      	movs	r0, #13
  403152:	4c17      	ldr	r4, [pc, #92]	; (4031b0 <config_usart0+0x64>)
  403154:	47a0      	blx	r4
	usart_settings.baudrate = opt->baudrate;
  403156:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  40315a:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40315c:	23c0      	movs	r3, #192	; 0xc0
  40315e:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  403160:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403164:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  403166:	2500      	movs	r5, #0
  403168:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40316a:	9504      	str	r5, [sp, #16]
  40316c:	200d      	movs	r0, #13
  40316e:	47a0      	blx	r4
		usart_init_rs232(p_usart, &usart_settings,
  403170:	4c10      	ldr	r4, [pc, #64]	; (4031b4 <config_usart0+0x68>)
  403172:	4a11      	ldr	r2, [pc, #68]	; (4031b8 <config_usart0+0x6c>)
  403174:	4669      	mov	r1, sp
  403176:	4620      	mov	r0, r4
  403178:	4b10      	ldr	r3, [pc, #64]	; (4031bc <config_usart0+0x70>)
  40317a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40317c:	4620      	mov	r0, r4
  40317e:	4f10      	ldr	r7, [pc, #64]	; (4031c0 <config_usart0+0x74>)
  403180:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  403182:	4620      	mov	r0, r4
  403184:	4e0f      	ldr	r6, [pc, #60]	; (4031c4 <config_usart0+0x78>)
  403186:	47b0      	blx	r6
	usart_enable_tx(USART0);
  403188:	4620      	mov	r0, r4
  40318a:	47b8      	blx	r7
	usart_enable_rx(USART0);
  40318c:	4620      	mov	r0, r4
  40318e:	47b0      	blx	r6
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  403190:	4e0d      	ldr	r6, [pc, #52]	; (4031c8 <config_usart0+0x7c>)
  403192:	462b      	mov	r3, r5
  403194:	2201      	movs	r2, #1
  403196:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40319a:	4630      	mov	r0, r6
  40319c:	4c0b      	ldr	r4, [pc, #44]	; (4031cc <config_usart0+0x80>)
  40319e:	47a0      	blx	r4
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  4031a0:	462b      	mov	r3, r5
  4031a2:	2202      	movs	r2, #2
  4031a4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4031a8:	4630      	mov	r0, r6
  4031aa:	47a0      	blx	r4
}
  4031ac:	b007      	add	sp, #28
  4031ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4031b0:	00400b91 	.word	0x00400b91
  4031b4:	40024000 	.word	0x40024000
  4031b8:	08f0d180 	.word	0x08f0d180
  4031bc:	00400d39 	.word	0x00400d39
  4031c0:	00400d8d 	.word	0x00400d8d
  4031c4:	00400d93 	.word	0x00400d93
  4031c8:	400e1000 	.word	0x400e1000
  4031cc:	00400925 	.word	0x00400925

004031d0 <hc05_init>:
int hc05_init(void) {
  4031d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4031d4:	b0a3      	sub	sp, #140	; 0x8c
	usart_send_command(USART_COM, buffer_rx, 1000, "AT", 100);
  4031d6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 403268 <hc05_init+0x98>
  4031da:	4e1e      	ldr	r6, [pc, #120]	; (403254 <hc05_init+0x84>)
  4031dc:	f04f 0964 	mov.w	r9, #100	; 0x64
  4031e0:	f8cd 9000 	str.w	r9, [sp]
  4031e4:	4643      	mov	r3, r8
  4031e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4031ea:	a902      	add	r1, sp, #8
  4031ec:	4630      	mov	r0, r6
  4031ee:	4d1a      	ldr	r5, [pc, #104]	; (403258 <hc05_init+0x88>)
  4031f0:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  4031f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4031f6:	4c19      	ldr	r4, [pc, #100]	; (40325c <hc05_init+0x8c>)
  4031f8:	47a0      	blx	r4
	usart_send_command(USART_COM, buffer_rx, 1000, "AT", 100);
  4031fa:	f8cd 9000 	str.w	r9, [sp]
  4031fe:	4643      	mov	r3, r8
  403200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403204:	a902      	add	r1, sp, #8
  403206:	4630      	mov	r0, r6
  403208:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  40320a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40320e:	47a0      	blx	r4
	usart_send_command(USART_COM, buffer_rx, 1000, "AT+NAMEGuerreiros", 1000);
  403210:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  403214:	9700      	str	r7, [sp, #0]
  403216:	4b12      	ldr	r3, [pc, #72]	; (403260 <hc05_init+0x90>)
  403218:	463a      	mov	r2, r7
  40321a:	a902      	add	r1, sp, #8
  40321c:	4630      	mov	r0, r6
  40321e:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  403220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403224:	47a0      	blx	r4
	usart_send_command(USART_COM, buffer_rx, 1000, "AT", 100);
  403226:	f8cd 9000 	str.w	r9, [sp]
  40322a:	4643      	mov	r3, r8
  40322c:	463a      	mov	r2, r7
  40322e:	a902      	add	r1, sp, #8
  403230:	4630      	mov	r0, r6
  403232:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  403234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403238:	47a0      	blx	r4
	usart_send_command(USART_COM, buffer_rx, 1000, "AT+PIN1234", 1000);
  40323a:	9700      	str	r7, [sp, #0]
  40323c:	4b09      	ldr	r3, [pc, #36]	; (403264 <hc05_init+0x94>)
  40323e:	463a      	mov	r2, r7
  403240:	a902      	add	r1, sp, #8
  403242:	4630      	mov	r0, r6
  403244:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  403246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40324a:	47a0      	blx	r4
}
  40324c:	b023      	add	sp, #140	; 0x8c
  40324e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403252:	bf00      	nop
  403254:	40024000 	.word	0x40024000
  403258:	00403129 	.word	0x00403129
  40325c:	00402275 	.word	0x00402275
  403260:	00409208 	.word	0x00409208
  403264:	0040921c 	.word	0x0040921c
  403268:	00409204 	.word	0x00409204

0040326c <task_bluetooth>:
		}
	}
}


void task_bluetooth(void) {
  40326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403270:	ed2d 8b02 	vpush	{d8}
  403274:	b083      	sub	sp, #12
	printf("Task Bluetooth started \n");
  403276:	486c      	ldr	r0, [pc, #432]	; (403428 <task_bluetooth+0x1bc>)
  403278:	4c6c      	ldr	r4, [pc, #432]	; (40342c <task_bluetooth+0x1c0>)
  40327a:	47a0      	blx	r4
	
	printf("Inicializando HC05 \n");
  40327c:	486c      	ldr	r0, [pc, #432]	; (403430 <task_bluetooth+0x1c4>)
  40327e:	47a0      	blx	r4
	config_usart0();
  403280:	4b6c      	ldr	r3, [pc, #432]	; (403434 <task_bluetooth+0x1c8>)
  403282:	4798      	blx	r3
	hc05_init();
  403284:	4b6c      	ldr	r3, [pc, #432]	; (403438 <task_bluetooth+0x1cc>)
  403286:	4798      	blx	r3

	// configura LEDs e Botões
	io_init();
  403288:	4b6c      	ldr	r3, [pc, #432]	; (40343c <task_bluetooth+0x1d0>)
  40328a:	4798      	blx	r3
		} else {
			head_vx_esquerda = 'L';
			vx_esquerda = '0';
		}
		
		if (adc_vx >= 3500){
  40328c:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 403440 <task_bluetooth+0x1d4>
	
		//char protocol_status[20];
		//sprintf(protocol_status, "%d%d", button1, button2);
		
		
		usart_write(USART_COM, head1);
  403290:	4c6c      	ldr	r4, [pc, #432]	; (403444 <task_bluetooth+0x1d8>)
  403292:	4f6d      	ldr	r7, [pc, #436]	; (403448 <task_bluetooth+0x1dc>)


		while(!usart_is_tx_ready(USART_COM)) {
  403294:	4d6d      	ldr	r5, [pc, #436]	; (40344c <task_bluetooth+0x1e0>)
			vTaskDelay(10 / portTICK_PERIOD_MS);
  403296:	4e6e      	ldr	r6, [pc, #440]	; (403450 <task_bluetooth+0x1e4>)
  403298:	e078      	b.n	40338c <task_bluetooth+0x120>
  40329a:	200a      	movs	r0, #10
  40329c:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  40329e:	4620      	mov	r0, r4
  4032a0:	47a8      	blx	r5
  4032a2:	2800      	cmp	r0, #0
  4032a4:	d0f9      	beq.n	40329a <task_bluetooth+0x2e>
		}

		usart_write(USART_COM, button1);
  4032a6:	4659      	mov	r1, fp
  4032a8:	4620      	mov	r0, r4
  4032aa:	47b8      	blx	r7
		
		// envia fim de pacote
		while(!usart_is_tx_ready(USART_COM)) {
  4032ac:	e001      	b.n	4032b2 <task_bluetooth+0x46>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  4032ae:	200a      	movs	r0, #10
  4032b0:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  4032b2:	4620      	mov	r0, r4
  4032b4:	47a8      	blx	r5
  4032b6:	2800      	cmp	r0, #0
  4032b8:	d0f9      	beq.n	4032ae <task_bluetooth+0x42>
		}
		
		usart_write(USART_COM, head2);
  4032ba:	2142      	movs	r1, #66	; 0x42
  4032bc:	4620      	mov	r0, r4
  4032be:	47b8      	blx	r7
		
		while(!usart_is_tx_ready(USART_COM)) {
  4032c0:	e001      	b.n	4032c6 <task_bluetooth+0x5a>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  4032c2:	200a      	movs	r0, #10
  4032c4:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  4032c6:	4620      	mov	r0, r4
  4032c8:	47a8      	blx	r5
  4032ca:	2800      	cmp	r0, #0
  4032cc:	d0f9      	beq.n	4032c2 <task_bluetooth+0x56>
		}

		usart_write(USART_COM, button2);
  4032ce:	4651      	mov	r1, sl
  4032d0:	4620      	mov	r0, r4
  4032d2:	47b8      	blx	r7
		
		while(!usart_is_tx_ready(USART_COM)) {
  4032d4:	e001      	b.n	4032da <task_bluetooth+0x6e>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  4032d6:	200a      	movs	r0, #10
  4032d8:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  4032da:	4620      	mov	r0, r4
  4032dc:	47a8      	blx	r5
  4032de:	2800      	cmp	r0, #0
  4032e0:	d0f9      	beq.n	4032d6 <task_bluetooth+0x6a>
		}
		
		usart_write(USART_COM, head_vx_direita);
  4032e2:	2152      	movs	r1, #82	; 0x52
  4032e4:	4620      	mov	r0, r4
  4032e6:	47b8      	blx	r7
		
		while(!usart_is_tx_ready(USART_COM)) {
  4032e8:	e001      	b.n	4032ee <task_bluetooth+0x82>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  4032ea:	200a      	movs	r0, #10
  4032ec:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  4032ee:	4620      	mov	r0, r4
  4032f0:	47a8      	blx	r5
  4032f2:	2800      	cmp	r0, #0
  4032f4:	d0f9      	beq.n	4032ea <task_bluetooth+0x7e>
		}
		
		usart_write(USART_COM, vx_direita);
  4032f6:	4649      	mov	r1, r9
  4032f8:	4620      	mov	r0, r4
  4032fa:	47b8      	blx	r7
		
		while(!usart_is_tx_ready(USART_COM)) {
  4032fc:	e001      	b.n	403302 <task_bluetooth+0x96>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  4032fe:	200a      	movs	r0, #10
  403300:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  403302:	4620      	mov	r0, r4
  403304:	47a8      	blx	r5
  403306:	2800      	cmp	r0, #0
  403308:	d0f9      	beq.n	4032fe <task_bluetooth+0x92>
		}
		
		usart_write(USART_COM, head_vx_esquerda);
  40330a:	214c      	movs	r1, #76	; 0x4c
  40330c:	4620      	mov	r0, r4
  40330e:	47b8      	blx	r7
		
		while(!usart_is_tx_ready(USART_COM)) {
  403310:	e001      	b.n	403316 <task_bluetooth+0xaa>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  403312:	200a      	movs	r0, #10
  403314:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  403316:	4620      	mov	r0, r4
  403318:	47a8      	blx	r5
  40331a:	2800      	cmp	r0, #0
  40331c:	d0f9      	beq.n	403312 <task_bluetooth+0xa6>
		}
		
		usart_write(USART_COM, vx_esquerda);
  40331e:	4641      	mov	r1, r8
  403320:	4620      	mov	r0, r4
  403322:	47b8      	blx	r7
		
		while(!usart_is_tx_ready(USART_COM)) {
  403324:	e001      	b.n	40332a <task_bluetooth+0xbe>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  403326:	200a      	movs	r0, #10
  403328:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  40332a:	4620      	mov	r0, r4
  40332c:	47a8      	blx	r5
  40332e:	2800      	cmp	r0, #0
  403330:	d0f9      	beq.n	403326 <task_bluetooth+0xba>
		}
			
		usart_write(USART_COM, head_vy_cima);
  403332:	2155      	movs	r1, #85	; 0x55
  403334:	4620      	mov	r0, r4
  403336:	47b8      	blx	r7
			
		while(!usart_is_tx_ready(USART_COM)) {
  403338:	e001      	b.n	40333e <task_bluetooth+0xd2>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  40333a:	200a      	movs	r0, #10
  40333c:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  40333e:	4620      	mov	r0, r4
  403340:	47a8      	blx	r5
  403342:	2800      	cmp	r0, #0
  403344:	d0f9      	beq.n	40333a <task_bluetooth+0xce>
		}
			
		usart_write(USART_COM, vy_cima);
  403346:	9900      	ldr	r1, [sp, #0]
  403348:	4620      	mov	r0, r4
  40334a:	47b8      	blx	r7
		
		while(!usart_is_tx_ready(USART_COM)) {
  40334c:	e001      	b.n	403352 <task_bluetooth+0xe6>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  40334e:	200a      	movs	r0, #10
  403350:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  403352:	4620      	mov	r0, r4
  403354:	47a8      	blx	r5
  403356:	2800      	cmp	r0, #0
  403358:	d0f9      	beq.n	40334e <task_bluetooth+0xe2>
		}
		
		usart_write(USART_COM, head_vy_baixo);
  40335a:	2144      	movs	r1, #68	; 0x44
  40335c:	4620      	mov	r0, r4
  40335e:	47b8      	blx	r7
		
		while(!usart_is_tx_ready(USART_COM)) {
  403360:	e001      	b.n	403366 <task_bluetooth+0xfa>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  403362:	200a      	movs	r0, #10
  403364:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  403366:	4620      	mov	r0, r4
  403368:	47a8      	blx	r5
  40336a:	2800      	cmp	r0, #0
  40336c:	d0f9      	beq.n	403362 <task_bluetooth+0xf6>
		}
		
		usart_write(USART_COM, vy_baixo);
  40336e:	9901      	ldr	r1, [sp, #4]
  403370:	4620      	mov	r0, r4
  403372:	47b8      	blx	r7
		
		// envia fim de pacote
		while(!usart_is_tx_ready(USART_COM)) {
  403374:	e001      	b.n	40337a <task_bluetooth+0x10e>
			vTaskDelay(10 / portTICK_PERIOD_MS);
  403376:	200a      	movs	r0, #10
  403378:	47b0      	blx	r6
		while(!usart_is_tx_ready(USART_COM)) {
  40337a:	4620      	mov	r0, r4
  40337c:	47a8      	blx	r5
  40337e:	2800      	cmp	r0, #0
  403380:	d0f9      	beq.n	403376 <task_bluetooth+0x10a>
		}
		
		usart_write(USART_COM, eof);
  403382:	2158      	movs	r1, #88	; 0x58
  403384:	4620      	mov	r0, r4
  403386:	47b8      	blx	r7

		// dorme por 500 ms
		vTaskDelay(100 / portTICK_PERIOD_MS);
  403388:	2064      	movs	r0, #100	; 0x64
  40338a:	47b0      	blx	r6
		if(pio_get(BUT_PIO, PIO_INPUT, BUT_IDX_MASK) == 0) {
  40338c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403390:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403394:	482f      	ldr	r0, [pc, #188]	; (403454 <task_bluetooth+0x1e8>)
  403396:	4b30      	ldr	r3, [pc, #192]	; (403458 <task_bluetooth+0x1ec>)
  403398:	4798      	blx	r3
  40339a:	2800      	cmp	r0, #0
			button1 = button_low;
  40339c:	bf0c      	ite	eq
  40339e:	f04f 0b31 	moveq.w	fp, #49	; 0x31
  4033a2:	f04f 0b30 	movne.w	fp, #48	; 0x30
		if(pio_get(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK) == 0){
  4033a6:	2240      	movs	r2, #64	; 0x40
  4033a8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4033ac:	482b      	ldr	r0, [pc, #172]	; (40345c <task_bluetooth+0x1f0>)
  4033ae:	4b2a      	ldr	r3, [pc, #168]	; (403458 <task_bluetooth+0x1ec>)
  4033b0:	4798      	blx	r3
  4033b2:	2800      	cmp	r0, #0
			button2 = button_low;
  4033b4:	bf0c      	ite	eq
  4033b6:	f04f 0a31 	moveq.w	sl, #49	; 0x31
  4033ba:	f04f 0a30 	movne.w	sl, #48	; 0x30
		if (adc_vx <= 50){
  4033be:	4b28      	ldr	r3, [pc, #160]	; (403460 <task_bluetooth+0x1f4>)
  4033c0:	ed93 7a00 	vldr	s14, [r3]
  4033c4:	eddf 7a27 	vldr	s15, [pc, #156]	; 403464 <task_bluetooth+0x1f8>
			vx_esquerda = '0';
  4033c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4033cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4033d0:	bf94      	ite	ls
  4033d2:	f04f 0831 	movls.w	r8, #49	; 0x31
  4033d6:	f04f 0830 	movhi.w	r8, #48	; 0x30
		if (adc_vx >= 3500){
  4033da:	edd3 7a00 	vldr	s15, [r3]
			vx_direita = '0';
  4033de:	eef4 7ac8 	vcmpe.f32	s15, s16
  4033e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4033e6:	bfac      	ite	ge
  4033e8:	f04f 0931 	movge.w	r9, #49	; 0x31
  4033ec:	f04f 0930 	movlt.w	r9, #48	; 0x30
		if (adc_vy <= 20){
  4033f0:	4b1d      	ldr	r3, [pc, #116]	; (403468 <task_bluetooth+0x1fc>)
  4033f2:	ed93 7a00 	vldr	s14, [r3]
  4033f6:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
			vy_cima = '0';
  4033fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403402:	bf94      	ite	ls
  403404:	2331      	movls	r3, #49	; 0x31
  403406:	2330      	movhi	r3, #48	; 0x30
  403408:	9300      	str	r3, [sp, #0]
		if (adc_vy >= 3500){
  40340a:	4b17      	ldr	r3, [pc, #92]	; (403468 <task_bluetooth+0x1fc>)
  40340c:	edd3 7a00 	vldr	s15, [r3]
			vy_baixo = '0';
  403410:	eef4 7ac8 	vcmpe.f32	s15, s16
  403414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403418:	bfac      	ite	ge
  40341a:	2331      	movge	r3, #49	; 0x31
  40341c:	2330      	movlt	r3, #48	; 0x30
  40341e:	9301      	str	r3, [sp, #4]
		usart_write(USART_COM, head1);
  403420:	2141      	movs	r1, #65	; 0x41
  403422:	4620      	mov	r0, r4
  403424:	47b8      	blx	r7
		while(!usart_is_tx_ready(USART_COM)) {
  403426:	e73a      	b.n	40329e <task_bluetooth+0x32>
  403428:	004092c8 	.word	0x004092c8
  40342c:	004049d9 	.word	0x004049d9
  403430:	004092e0 	.word	0x004092e0
  403434:	0040314d 	.word	0x0040314d
  403438:	004031d1 	.word	0x004031d1
  40343c:	00403061 	.word	0x00403061
  403440:	455ac000 	.word	0x455ac000
  403444:	40024000 	.word	0x40024000
  403448:	00400da1 	.word	0x00400da1
  40344c:	00400d99 	.word	0x00400d99
  403450:	00402275 	.word	0x00402275
  403454:	400e1400 	.word	0x400e1400
  403458:	00400819 	.word	0x00400819
  40345c:	400e0e00 	.word	0x400e0e00
  403460:	20400ca4 	.word	0x20400ca4
  403464:	42480000 	.word	0x42480000
  403468:	20400c9c 	.word	0x20400c9c

0040346c <TC1_Handler>:
void TC1_Handler(void) {
  40346c:	b500      	push	{lr}
  40346e:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 1);
  403470:	2101      	movs	r1, #1
  403472:	4808      	ldr	r0, [pc, #32]	; (403494 <TC1_Handler+0x28>)
  403474:	4b08      	ldr	r3, [pc, #32]	; (403498 <TC1_Handler+0x2c>)
  403476:	4798      	blx	r3
  403478:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  40347a:	9b01      	ldr	r3, [sp, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40347c:	4b07      	ldr	r3, [pc, #28]	; (40349c <TC1_Handler+0x30>)
  40347e:	2120      	movs	r1, #32
  403480:	6159      	str	r1, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  403482:	2202      	movs	r2, #2
  403484:	601a      	str	r2, [r3, #0]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403486:	f5a3 3320 	sub.w	r3, r3, #163840	; 0x28000
  40348a:	6159      	str	r1, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  40348c:	601a      	str	r2, [r3, #0]
}
  40348e:	b003      	add	sp, #12
  403490:	f85d fb04 	ldr.w	pc, [sp], #4
  403494:	4000c000 	.word	0x4000c000
  403498:	00400c17 	.word	0x00400c17
  40349c:	40064000 	.word	0x40064000

004034a0 <TC_init>:
void TC_init(Tc *TC, int ID_TC, int TC_CHANNEL, int freq) {
  4034a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4034a4:	b085      	sub	sp, #20
  4034a6:	4606      	mov	r6, r0
  4034a8:	460c      	mov	r4, r1
  4034aa:	4617      	mov	r7, r2
  4034ac:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  4034ae:	4608      	mov	r0, r1
  4034b0:	4b1c      	ldr	r3, [pc, #112]	; (403524 <TC_init+0x84>)
  4034b2:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4034b4:	4d1c      	ldr	r5, [pc, #112]	; (403528 <TC_init+0x88>)
  4034b6:	9500      	str	r5, [sp, #0]
  4034b8:	ab02      	add	r3, sp, #8
  4034ba:	aa03      	add	r2, sp, #12
  4034bc:	4629      	mov	r1, r5
  4034be:	4640      	mov	r0, r8
  4034c0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 403544 <TC_init+0xa4>
  4034c4:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4034c6:	9a02      	ldr	r2, [sp, #8]
  4034c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4034cc:	4639      	mov	r1, r7
  4034ce:	4630      	mov	r0, r6
  4034d0:	4b16      	ldr	r3, [pc, #88]	; (40352c <TC_init+0x8c>)
  4034d2:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  4034d4:	9a03      	ldr	r2, [sp, #12]
  4034d6:	fbb5 f2f2 	udiv	r2, r5, r2
  4034da:	fbb2 f2f8 	udiv	r2, r2, r8
  4034de:	4639      	mov	r1, r7
  4034e0:	4630      	mov	r0, r6
  4034e2:	4b13      	ldr	r3, [pc, #76]	; (403530 <TC_init+0x90>)
  4034e4:	4798      	blx	r3
	NVIC_SetPriority((IRQn_Type)ID_TC, 4);
  4034e6:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  4034e8:	2b00      	cmp	r3, #0
  4034ea:	db13      	blt.n	403514 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034ec:	4a11      	ldr	r2, [pc, #68]	; (403534 <TC_init+0x94>)
  4034ee:	2180      	movs	r1, #128	; 0x80
  4034f0:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034f2:	095b      	lsrs	r3, r3, #5
  4034f4:	f004 041f 	and.w	r4, r4, #31
  4034f8:	2201      	movs	r2, #1
  4034fa:	fa02 f404 	lsl.w	r4, r2, r4
  4034fe:	4a0e      	ldr	r2, [pc, #56]	; (403538 <TC_init+0x98>)
  403500:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  403504:	2210      	movs	r2, #16
  403506:	4639      	mov	r1, r7
  403508:	4630      	mov	r0, r6
  40350a:	4b0c      	ldr	r3, [pc, #48]	; (40353c <TC_init+0x9c>)
  40350c:	4798      	blx	r3
}
  40350e:	b005      	add	sp, #20
  403510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403514:	f004 010f 	and.w	r1, r4, #15
  403518:	4a09      	ldr	r2, [pc, #36]	; (403540 <TC_init+0xa0>)
  40351a:	440a      	add	r2, r1
  40351c:	2180      	movs	r1, #128	; 0x80
  40351e:	7611      	strb	r1, [r2, #24]
  403520:	e7e7      	b.n	4034f2 <TC_init+0x52>
  403522:	bf00      	nop
  403524:	00400b91 	.word	0x00400b91
  403528:	11e1a300 	.word	0x11e1a300
  40352c:	00400be5 	.word	0x00400be5
  403530:	00400c07 	.word	0x00400c07
  403534:	e000e400 	.word	0xe000e400
  403538:	e000e100 	.word	0xe000e100
  40353c:	00400c0f 	.word	0x00400c0f
  403540:	e000ecfc 	.word	0xe000ecfc
  403544:	00400c1f 	.word	0x00400c1f

00403548 <task_proc2>:
static void task_proc2(void *pvParameters){
  403548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40354c:	b08b      	sub	sp, #44	; 0x2c
	config_AFEC_pot(AFEC_VRY, AFEC_VRY_ID, AFEC_VRY_CHANNEL, AFEC_vry_Callback);
  40354e:	4b30      	ldr	r3, [pc, #192]	; (403610 <task_proc2+0xc8>)
  403550:	2205      	movs	r2, #5
  403552:	211d      	movs	r1, #29
  403554:	482f      	ldr	r0, [pc, #188]	; (403614 <task_proc2+0xcc>)
  403556:	4c30      	ldr	r4, [pc, #192]	; (403618 <task_proc2+0xd0>)
  403558:	47a0      	blx	r4
	TC_init(TC0, ID_TC1, 1, 10);
  40355a:	4c30      	ldr	r4, [pc, #192]	; (40361c <task_proc2+0xd4>)
  40355c:	230a      	movs	r3, #10
  40355e:	2201      	movs	r2, #1
  403560:	2118      	movs	r1, #24
  403562:	4620      	mov	r0, r4
  403564:	4d2e      	ldr	r5, [pc, #184]	; (403620 <task_proc2+0xd8>)
  403566:	47a8      	blx	r5
	tc_start(TC0, 1);
  403568:	2101      	movs	r1, #1
  40356a:	4620      	mov	r0, r4
  40356c:	4b2d      	ldr	r3, [pc, #180]	; (403624 <task_proc2+0xdc>)
  40356e:	4798      	blx	r3
	int i = 0;
  403570:	2300      	movs	r3, #0
  403572:	9301      	str	r3, [sp, #4]
		if (xQueueReceive(xQueueADCProc2, &(adc2), 1000)){
  403574:	4f2c      	ldr	r7, [pc, #176]	; (403628 <task_proc2+0xe0>)
  403576:	4e2d      	ldr	r6, [pc, #180]	; (40362c <task_proc2+0xe4>)
			media2 = (soma2/5.0);
  403578:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 403644 <task_proc2+0xfc>
  40357c:	f04f 0a00 	mov.w	sl, #0
  403580:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 403648 <task_proc2+0x100>
		if (xQueueReceive(xQueueADCProc2, &(adc2), 1000)){
  403584:	2300      	movs	r3, #0
  403586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40358a:	a909      	add	r1, sp, #36	; 0x24
  40358c:	6838      	ldr	r0, [r7, #0]
  40358e:	47b0      	blx	r6
  403590:	b928      	cbnz	r0, 40359e <task_proc2+0x56>
			media2 = (soma2/5.0);
  403592:	4d27      	ldr	r5, [pc, #156]	; (403630 <task_proc2+0xe8>)
		} while (i >= 5){
  403594:	9b01      	ldr	r3, [sp, #4]
  403596:	2b04      	cmp	r3, #4
  403598:	ddf4      	ble.n	403584 <task_proc2+0x3c>
  40359a:	ac09      	add	r4, sp, #36	; 0x24
  40359c:	e02c      	b.n	4035f8 <task_proc2+0xb0>
			valores2[i] = adc2.value;
  40359e:	9909      	ldr	r1, [sp, #36]	; 0x24
  4035a0:	aa0a      	add	r2, sp, #40	; 0x28
  4035a2:	9c01      	ldr	r4, [sp, #4]
  4035a4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  4035a8:	f843 1c18 	str.w	r1, [r3, #-24]
			printf("Y: %d \n", adc2.value );
  4035ac:	4821      	ldr	r0, [pc, #132]	; (403634 <task_proc2+0xec>)
  4035ae:	4b22      	ldr	r3, [pc, #136]	; (403638 <task_proc2+0xf0>)
  4035b0:	4798      	blx	r3
			i++;
  4035b2:	4623      	mov	r3, r4
  4035b4:	3301      	adds	r3, #1
  4035b6:	9301      	str	r3, [sp, #4]
  4035b8:	e7eb      	b.n	403592 <task_proc2+0x4a>
			media2 = (soma2/5.0);
  4035ba:	47c8      	blx	r9
  4035bc:	4652      	mov	r2, sl
  4035be:	465b      	mov	r3, fp
  4035c0:	47a8      	blx	r5
  4035c2:	4b1e      	ldr	r3, [pc, #120]	; (40363c <task_proc2+0xf4>)
  4035c4:	4798      	blx	r3
  4035c6:	a90a      	add	r1, sp, #40	; 0x28
  4035c8:	f841 0d1c 	str.w	r0, [r1, #-28]!
			xQueueSend(xQueueADC2,(void *)&media2, 10);
  4035cc:	2300      	movs	r3, #0
  4035ce:	220a      	movs	r2, #10
  4035d0:	481b      	ldr	r0, [pc, #108]	; (403640 <task_proc2+0xf8>)
  4035d2:	6800      	ldr	r0, [r0, #0]
  4035d4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 40364c <task_proc2+0x104>
  4035d8:	47c0      	blx	r8
				valores2[j] = temp2;
  4035da:	9b05      	ldr	r3, [sp, #20]
  4035dc:	9304      	str	r3, [sp, #16]
  4035de:	9b06      	ldr	r3, [sp, #24]
  4035e0:	9305      	str	r3, [sp, #20]
  4035e2:	9b07      	ldr	r3, [sp, #28]
  4035e4:	9306      	str	r3, [sp, #24]
  4035e6:	9b08      	ldr	r3, [sp, #32]
  4035e8:	9307      	str	r3, [sp, #28]
			if (xQueueReceive(xQueueADCProc2, &(adc2), 1000)){
  4035ea:	2300      	movs	r3, #0
  4035ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4035f0:	4621      	mov	r1, r4
  4035f2:	6838      	ldr	r0, [r7, #0]
  4035f4:	47b0      	blx	r6
  4035f6:	b938      	cbnz	r0, 403608 <task_proc2+0xc0>
  4035f8:	ab04      	add	r3, sp, #16
	int i = 0;
  4035fa:	2000      	movs	r0, #0
				soma2 += valores2[j];
  4035fc:	f853 2b04 	ldr.w	r2, [r3], #4
  403600:	4410      	add	r0, r2
			for (int j = 0; j < 5; j++){
  403602:	429c      	cmp	r4, r3
  403604:	d1fa      	bne.n	4035fc <task_proc2+0xb4>
  403606:	e7d8      	b.n	4035ba <task_proc2+0x72>
				valores2[4] = adc2.value;
  403608:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40360a:	9308      	str	r3, [sp, #32]
  40360c:	e7c2      	b.n	403594 <task_proc2+0x4c>
  40360e:	bf00      	nop
  403610:	00402e2d 	.word	0x00402e2d
  403614:	4003c000 	.word	0x4003c000
  403618:	00402e95 	.word	0x00402e95
  40361c:	4000c000 	.word	0x4000c000
  403620:	004034a1 	.word	0x004034a1
  403624:	00400bff 	.word	0x00400bff
  403628:	20400ca8 	.word	0x20400ca8
  40362c:	00401a4d 	.word	0x00401a4d
  403630:	00403eed 	.word	0x00403eed
  403634:	004092fc 	.word	0x004092fc
  403638:	00404915 	.word	0x00404915
  40363c:	004040bd 	.word	0x004040bd
  403640:	20400c94 	.word	0x20400c94
  403644:	00403bad 	.word	0x00403bad
  403648:	40140000 	.word	0x40140000
  40364c:	00401769 	.word	0x00401769

00403650 <task_proc>:
static void task_proc(void *pvParameters){
  403650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403654:	b08b      	sub	sp, #44	; 0x2c
	config_AFEC_pot(AFEC_VRX, AFEC_VRX_ID, AFEC_VRX_CHANNEL, AFEC_vrx_Callback);
  403656:	4b30      	ldr	r3, [pc, #192]	; (403718 <task_proc+0xc8>)
  403658:	2205      	movs	r2, #5
  40365a:	2128      	movs	r1, #40	; 0x28
  40365c:	482f      	ldr	r0, [pc, #188]	; (40371c <task_proc+0xcc>)
  40365e:	4c30      	ldr	r4, [pc, #192]	; (403720 <task_proc+0xd0>)
  403660:	47a0      	blx	r4
	TC_init(TC0, ID_TC1, 1, 10);
  403662:	4c30      	ldr	r4, [pc, #192]	; (403724 <task_proc+0xd4>)
  403664:	230a      	movs	r3, #10
  403666:	2201      	movs	r2, #1
  403668:	2118      	movs	r1, #24
  40366a:	4620      	mov	r0, r4
  40366c:	4d2e      	ldr	r5, [pc, #184]	; (403728 <task_proc+0xd8>)
  40366e:	47a8      	blx	r5
	tc_start(TC0, 1);
  403670:	2101      	movs	r1, #1
  403672:	4620      	mov	r0, r4
  403674:	4b2d      	ldr	r3, [pc, #180]	; (40372c <task_proc+0xdc>)
  403676:	4798      	blx	r3
	int i = 0;
  403678:	2300      	movs	r3, #0
  40367a:	9301      	str	r3, [sp, #4]
		if (xQueueReceive(xQueueADCProc, &(adc), 1000)) {
  40367c:	4f2c      	ldr	r7, [pc, #176]	; (403730 <task_proc+0xe0>)
  40367e:	4e2d      	ldr	r6, [pc, #180]	; (403734 <task_proc+0xe4>)
			media = (soma/5.0);
  403680:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 40374c <task_proc+0xfc>
  403684:	f04f 0a00 	mov.w	sl, #0
  403688:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 403750 <task_proc+0x100>
		if (xQueueReceive(xQueueADCProc, &(adc), 1000)) {
  40368c:	2300      	movs	r3, #0
  40368e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403692:	a909      	add	r1, sp, #36	; 0x24
  403694:	6838      	ldr	r0, [r7, #0]
  403696:	47b0      	blx	r6
  403698:	b928      	cbnz	r0, 4036a6 <task_proc+0x56>
			media = (soma/5.0);
  40369a:	4d27      	ldr	r5, [pc, #156]	; (403738 <task_proc+0xe8>)
		} while (i >= 5){
  40369c:	9b01      	ldr	r3, [sp, #4]
  40369e:	2b04      	cmp	r3, #4
  4036a0:	ddf4      	ble.n	40368c <task_proc+0x3c>
  4036a2:	ac09      	add	r4, sp, #36	; 0x24
  4036a4:	e02c      	b.n	403700 <task_proc+0xb0>
			valores[i] = adc.value;
  4036a6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4036a8:	aa0a      	add	r2, sp, #40	; 0x28
  4036aa:	9c01      	ldr	r4, [sp, #4]
  4036ac:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  4036b0:	f843 1c18 	str.w	r1, [r3, #-24]
			printf("X: %d \n", adc.value);		
  4036b4:	4821      	ldr	r0, [pc, #132]	; (40373c <task_proc+0xec>)
  4036b6:	4b22      	ldr	r3, [pc, #136]	; (403740 <task_proc+0xf0>)
  4036b8:	4798      	blx	r3
			i++;
  4036ba:	4623      	mov	r3, r4
  4036bc:	3301      	adds	r3, #1
  4036be:	9301      	str	r3, [sp, #4]
  4036c0:	e7eb      	b.n	40369a <task_proc+0x4a>
			media = (soma/5.0);
  4036c2:	47c8      	blx	r9
  4036c4:	4652      	mov	r2, sl
  4036c6:	465b      	mov	r3, fp
  4036c8:	47a8      	blx	r5
  4036ca:	4b1e      	ldr	r3, [pc, #120]	; (403744 <task_proc+0xf4>)
  4036cc:	4798      	blx	r3
  4036ce:	a90a      	add	r1, sp, #40	; 0x28
  4036d0:	f841 0d1c 	str.w	r0, [r1, #-28]!
			xQueueSend(xQueueADC, (void *)&media, 10);
  4036d4:	2300      	movs	r3, #0
  4036d6:	220a      	movs	r2, #10
  4036d8:	481b      	ldr	r0, [pc, #108]	; (403748 <task_proc+0xf8>)
  4036da:	6800      	ldr	r0, [r0, #0]
  4036dc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 403754 <task_proc+0x104>
  4036e0:	47c0      	blx	r8
				valores[j] = temp;
  4036e2:	9b05      	ldr	r3, [sp, #20]
  4036e4:	9304      	str	r3, [sp, #16]
  4036e6:	9b06      	ldr	r3, [sp, #24]
  4036e8:	9305      	str	r3, [sp, #20]
  4036ea:	9b07      	ldr	r3, [sp, #28]
  4036ec:	9306      	str	r3, [sp, #24]
  4036ee:	9b08      	ldr	r3, [sp, #32]
  4036f0:	9307      	str	r3, [sp, #28]
			if (xQueueReceive(xQueueADCProc, &(adc), 1000)){
  4036f2:	2300      	movs	r3, #0
  4036f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4036f8:	4621      	mov	r1, r4
  4036fa:	6838      	ldr	r0, [r7, #0]
  4036fc:	47b0      	blx	r6
  4036fe:	b938      	cbnz	r0, 403710 <task_proc+0xc0>
  403700:	ab04      	add	r3, sp, #16
	int i = 0;
  403702:	2000      	movs	r0, #0
				soma += valores[j];
  403704:	f853 2b04 	ldr.w	r2, [r3], #4
  403708:	4410      	add	r0, r2
			for (int j = 0; j < 5; j++){
  40370a:	429c      	cmp	r4, r3
  40370c:	d1fa      	bne.n	403704 <task_proc+0xb4>
  40370e:	e7d8      	b.n	4036c2 <task_proc+0x72>
				valores[4] = adc.value;
  403710:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403712:	9308      	str	r3, [sp, #32]
  403714:	e7c2      	b.n	40369c <task_proc+0x4c>
  403716:	bf00      	nop
  403718:	00402e61 	.word	0x00402e61
  40371c:	40064000 	.word	0x40064000
  403720:	00402e95 	.word	0x00402e95
  403724:	4000c000 	.word	0x4000c000
  403728:	004034a1 	.word	0x004034a1
  40372c:	00400bff 	.word	0x00400bff
  403730:	20400c98 	.word	0x20400c98
  403734:	00401a4d 	.word	0x00401a4d
  403738:	00403eed 	.word	0x00403eed
  40373c:	004092f4 	.word	0x004092f4
  403740:	00404915 	.word	0x00404915
  403744:	004040bd 	.word	0x004040bd
  403748:	20400ca0 	.word	0x20400ca0
  40374c:	00403bad 	.word	0x00403bad
  403750:	40140000 	.word	0x40140000
  403754:	00401769 	.word	0x00401769

00403758 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

  
int main(void) {
  403758:	b500      	push	{lr}
  40375a:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  40375c:	4b51      	ldr	r3, [pc, #324]	; (4038a4 <main+0x14c>)
  40375e:	4798      	blx	r3
	board_init();
  403760:	4b51      	ldr	r3, [pc, #324]	; (4038a8 <main+0x150>)
  403762:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403764:	4d51      	ldr	r5, [pc, #324]	; (4038ac <main+0x154>)
  403766:	4b52      	ldr	r3, [pc, #328]	; (4038b0 <main+0x158>)
  403768:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40376a:	4a52      	ldr	r2, [pc, #328]	; (4038b4 <main+0x15c>)
  40376c:	4b52      	ldr	r3, [pc, #328]	; (4038b8 <main+0x160>)
  40376e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403770:	4a52      	ldr	r2, [pc, #328]	; (4038bc <main+0x164>)
  403772:	4b53      	ldr	r3, [pc, #332]	; (4038c0 <main+0x168>)
  403774:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403776:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40377a:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  40377c:	23c0      	movs	r3, #192	; 0xc0
  40377e:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403780:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403784:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403786:	2400      	movs	r4, #0
  403788:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40378a:	9408      	str	r4, [sp, #32]
  40378c:	200e      	movs	r0, #14
  40378e:	4b4d      	ldr	r3, [pc, #308]	; (4038c4 <main+0x16c>)
  403790:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403792:	4a4d      	ldr	r2, [pc, #308]	; (4038c8 <main+0x170>)
  403794:	a904      	add	r1, sp, #16
  403796:	4628      	mov	r0, r5
  403798:	4b4c      	ldr	r3, [pc, #304]	; (4038cc <main+0x174>)
  40379a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40379c:	4628      	mov	r0, r5
  40379e:	4b4c      	ldr	r3, [pc, #304]	; (4038d0 <main+0x178>)
  4037a0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4037a2:	4628      	mov	r0, r5
  4037a4:	4b4b      	ldr	r3, [pc, #300]	; (4038d4 <main+0x17c>)
  4037a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4037a8:	4e4b      	ldr	r6, [pc, #300]	; (4038d8 <main+0x180>)
  4037aa:	6833      	ldr	r3, [r6, #0]
  4037ac:	4621      	mov	r1, r4
  4037ae:	6898      	ldr	r0, [r3, #8]
  4037b0:	4d4a      	ldr	r5, [pc, #296]	; (4038dc <main+0x184>)
  4037b2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4037b4:	6833      	ldr	r3, [r6, #0]
  4037b6:	4621      	mov	r1, r4
  4037b8:	6858      	ldr	r0, [r3, #4]
  4037ba:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4037bc:	6833      	ldr	r3, [r6, #0]
  4037be:	4621      	mov	r1, r4
  4037c0:	6898      	ldr	r0, [r3, #8]
  4037c2:	47a8      	blx	r5

	configure_console();

	/* Create task to make led blink */
	xTaskCreate(task_bluetooth, "BLT", TASK_BLUETOOTH_STACK_SIZE, NULL,	TASK_BLUETOOTH_STACK_PRIORITY, NULL);
  4037c4:	9403      	str	r4, [sp, #12]
  4037c6:	9402      	str	r4, [sp, #8]
  4037c8:	9401      	str	r4, [sp, #4]
  4037ca:	9400      	str	r4, [sp, #0]
  4037cc:	4623      	mov	r3, r4
  4037ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4037d2:	4943      	ldr	r1, [pc, #268]	; (4038e0 <main+0x188>)
  4037d4:	4843      	ldr	r0, [pc, #268]	; (4038e4 <main+0x18c>)
  4037d6:	4d44      	ldr	r5, [pc, #272]	; (4038e8 <main+0x190>)
  4037d8:	47a8      	blx	r5
	
	xQueueADC = xQueueCreate(100, sizeof(adcData));
  4037da:	4622      	mov	r2, r4
  4037dc:	2104      	movs	r1, #4
  4037de:	2064      	movs	r0, #100	; 0x64
  4037e0:	4b42      	ldr	r3, [pc, #264]	; (4038ec <main+0x194>)
  4037e2:	4798      	blx	r3
  4037e4:	4b42      	ldr	r3, [pc, #264]	; (4038f0 <main+0x198>)
  4037e6:	6018      	str	r0, [r3, #0]
	if (xQueueADC == NULL)
  4037e8:	2800      	cmp	r0, #0
  4037ea:	d04b      	beq.n	403884 <main+0x12c>
		printf("falha em criar a queue xQueueADC \n");
	
	xQueueADCProc = xQueueCreate(100, sizeof(adcData));
  4037ec:	2200      	movs	r2, #0
  4037ee:	2104      	movs	r1, #4
  4037f0:	2064      	movs	r0, #100	; 0x64
  4037f2:	4b3e      	ldr	r3, [pc, #248]	; (4038ec <main+0x194>)
  4037f4:	4798      	blx	r3
  4037f6:	4b3f      	ldr	r3, [pc, #252]	; (4038f4 <main+0x19c>)
  4037f8:	6018      	str	r0, [r3, #0]
	if (xQueueADCProc == NULL)
  4037fa:	2800      	cmp	r0, #0
  4037fc:	d046      	beq.n	40388c <main+0x134>
		printf("falha em criar a queue xQueueADC \n");

	if (xTaskCreate(task_adc, "ADC", TASK_ADC_STACK_SIZE, NULL,
  4037fe:	2300      	movs	r3, #0
  403800:	9303      	str	r3, [sp, #12]
  403802:	9302      	str	r3, [sp, #8]
  403804:	9301      	str	r3, [sp, #4]
  403806:	9300      	str	r3, [sp, #0]
  403808:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  40380c:	493a      	ldr	r1, [pc, #232]	; (4038f8 <main+0x1a0>)
  40380e:	483b      	ldr	r0, [pc, #236]	; (4038fc <main+0x1a4>)
  403810:	4c35      	ldr	r4, [pc, #212]	; (4038e8 <main+0x190>)
  403812:	47a0      	blx	r4
  403814:	2801      	cmp	r0, #1
  403816:	d002      	beq.n	40381e <main+0xc6>
	TASK_ADC_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test ADC task\r\n");
  403818:	4839      	ldr	r0, [pc, #228]	; (403900 <main+0x1a8>)
  40381a:	4b3a      	ldr	r3, [pc, #232]	; (403904 <main+0x1ac>)
  40381c:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_proc, "proc", TASK_PROC_STACK_SIZE, NULL,
  40381e:	2300      	movs	r3, #0
  403820:	9303      	str	r3, [sp, #12]
  403822:	9302      	str	r3, [sp, #8]
  403824:	9301      	str	r3, [sp, #4]
  403826:	9300      	str	r3, [sp, #0]
  403828:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  40382c:	4936      	ldr	r1, [pc, #216]	; (403908 <main+0x1b0>)
  40382e:	4837      	ldr	r0, [pc, #220]	; (40390c <main+0x1b4>)
  403830:	4c2d      	ldr	r4, [pc, #180]	; (4038e8 <main+0x190>)
  403832:	47a0      	blx	r4
  403834:	2801      	cmp	r0, #1
  403836:	d002      	beq.n	40383e <main+0xe6>
	TASK_PROC_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test ADC task\r\n");
  403838:	4831      	ldr	r0, [pc, #196]	; (403900 <main+0x1a8>)
  40383a:	4b32      	ldr	r3, [pc, #200]	; (403904 <main+0x1ac>)
  40383c:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_proc2, "proc2", TASK_PROC2_STACK_SIZE, NULL,
  40383e:	2300      	movs	r3, #0
  403840:	9303      	str	r3, [sp, #12]
  403842:	9302      	str	r3, [sp, #8]
  403844:	9301      	str	r3, [sp, #4]
  403846:	9300      	str	r3, [sp, #0]
  403848:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  40384c:	4930      	ldr	r1, [pc, #192]	; (403910 <main+0x1b8>)
  40384e:	4831      	ldr	r0, [pc, #196]	; (403914 <main+0x1bc>)
  403850:	4c25      	ldr	r4, [pc, #148]	; (4038e8 <main+0x190>)
  403852:	47a0      	blx	r4
  403854:	2801      	cmp	r0, #1
  403856:	d002      	beq.n	40385e <main+0x106>
	TASK_PROC2_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test ADC task\r\n");
  403858:	4829      	ldr	r0, [pc, #164]	; (403900 <main+0x1a8>)
  40385a:	4b2a      	ldr	r3, [pc, #168]	; (403904 <main+0x1ac>)
  40385c:	4798      	blx	r3
	}
	
	
	xQueueADC2 = xQueueCreate(100, sizeof(adcData));
  40385e:	2200      	movs	r2, #0
  403860:	2104      	movs	r1, #4
  403862:	2064      	movs	r0, #100	; 0x64
  403864:	4b21      	ldr	r3, [pc, #132]	; (4038ec <main+0x194>)
  403866:	4798      	blx	r3
  403868:	4b2b      	ldr	r3, [pc, #172]	; (403918 <main+0x1c0>)
  40386a:	6018      	str	r0, [r3, #0]
	if (xQueueADC2 == NULL)
  40386c:	b190      	cbz	r0, 403894 <main+0x13c>
	printf("falha em criar a queue xQueueADC \n");
	
	xQueueADCProc2 = xQueueCreate(100, sizeof(adcData));
  40386e:	2200      	movs	r2, #0
  403870:	2104      	movs	r1, #4
  403872:	2064      	movs	r0, #100	; 0x64
  403874:	4b1d      	ldr	r3, [pc, #116]	; (4038ec <main+0x194>)
  403876:	4798      	blx	r3
  403878:	4b28      	ldr	r3, [pc, #160]	; (40391c <main+0x1c4>)
  40387a:	6018      	str	r0, [r3, #0]
	if (xQueueADCProc2 == NULL)
  40387c:	b170      	cbz	r0, 40389c <main+0x144>
	printf("falha em criar a queue xQueueADC \n");


	/* Start the scheduler. */
	vTaskStartScheduler();
  40387e:	4b28      	ldr	r3, [pc, #160]	; (403920 <main+0x1c8>)
  403880:	4798      	blx	r3
  403882:	e7fe      	b.n	403882 <main+0x12a>
		printf("falha em criar a queue xQueueADC \n");
  403884:	4827      	ldr	r0, [pc, #156]	; (403924 <main+0x1cc>)
  403886:	4b1f      	ldr	r3, [pc, #124]	; (403904 <main+0x1ac>)
  403888:	4798      	blx	r3
  40388a:	e7af      	b.n	4037ec <main+0x94>
		printf("falha em criar a queue xQueueADC \n");
  40388c:	4825      	ldr	r0, [pc, #148]	; (403924 <main+0x1cc>)
  40388e:	4b1d      	ldr	r3, [pc, #116]	; (403904 <main+0x1ac>)
  403890:	4798      	blx	r3
  403892:	e7b4      	b.n	4037fe <main+0xa6>
	printf("falha em criar a queue xQueueADC \n");
  403894:	4823      	ldr	r0, [pc, #140]	; (403924 <main+0x1cc>)
  403896:	4b1b      	ldr	r3, [pc, #108]	; (403904 <main+0x1ac>)
  403898:	4798      	blx	r3
  40389a:	e7e8      	b.n	40386e <main+0x116>
	printf("falha em criar a queue xQueueADC \n");
  40389c:	4821      	ldr	r0, [pc, #132]	; (403924 <main+0x1cc>)
  40389e:	4b19      	ldr	r3, [pc, #100]	; (403904 <main+0x1ac>)
  4038a0:	4798      	blx	r3
  4038a2:	e7ec      	b.n	40387e <main+0x126>
  4038a4:	004001ad 	.word	0x004001ad
  4038a8:	00400381 	.word	0x00400381
  4038ac:	40028000 	.word	0x40028000
  4038b0:	20400bd0 	.word	0x20400bd0
  4038b4:	00402cd5 	.word	0x00402cd5
  4038b8:	20400bcc 	.word	0x20400bcc
  4038bc:	00402f55 	.word	0x00402f55
  4038c0:	20400bc8 	.word	0x20400bc8
  4038c4:	00400b91 	.word	0x00400b91
  4038c8:	08f0d180 	.word	0x08f0d180
  4038cc:	00400d39 	.word	0x00400d39
  4038d0:	00400d8d 	.word	0x00400d8d
  4038d4:	00400d93 	.word	0x00400d93
  4038d8:	2040000c 	.word	0x2040000c
  4038dc:	00404a0d 	.word	0x00404a0d
  4038e0:	00409228 	.word	0x00409228
  4038e4:	0040326d 	.word	0x0040326d
  4038e8:	00401d2d 	.word	0x00401d2d
  4038ec:	004016ed 	.word	0x004016ed
  4038f0:	20400ca0 	.word	0x20400ca0
  4038f4:	20400c98 	.word	0x20400c98
  4038f8:	00409250 	.word	0x00409250
  4038fc:	00402da9 	.word	0x00402da9
  403900:	00409254 	.word	0x00409254
  403904:	004049d9 	.word	0x004049d9
  403908:	00409274 	.word	0x00409274
  40390c:	00403651 	.word	0x00403651
  403910:	0040927c 	.word	0x0040927c
  403914:	00403549 	.word	0x00403549
  403918:	20400c94 	.word	0x20400c94
  40391c:	20400ca8 	.word	0x20400ca8
  403920:	00401f61 	.word	0x00401f61
  403924:	0040922c 	.word	0x0040922c

00403928 <__aeabi_drsub>:
  403928:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40392c:	e002      	b.n	403934 <__adddf3>
  40392e:	bf00      	nop

00403930 <__aeabi_dsub>:
  403930:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403934 <__adddf3>:
  403934:	b530      	push	{r4, r5, lr}
  403936:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40393a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40393e:	ea94 0f05 	teq	r4, r5
  403942:	bf08      	it	eq
  403944:	ea90 0f02 	teqeq	r0, r2
  403948:	bf1f      	itttt	ne
  40394a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40394e:	ea55 0c02 	orrsne.w	ip, r5, r2
  403952:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403956:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40395a:	f000 80e2 	beq.w	403b22 <__adddf3+0x1ee>
  40395e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403962:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403966:	bfb8      	it	lt
  403968:	426d      	neglt	r5, r5
  40396a:	dd0c      	ble.n	403986 <__adddf3+0x52>
  40396c:	442c      	add	r4, r5
  40396e:	ea80 0202 	eor.w	r2, r0, r2
  403972:	ea81 0303 	eor.w	r3, r1, r3
  403976:	ea82 0000 	eor.w	r0, r2, r0
  40397a:	ea83 0101 	eor.w	r1, r3, r1
  40397e:	ea80 0202 	eor.w	r2, r0, r2
  403982:	ea81 0303 	eor.w	r3, r1, r3
  403986:	2d36      	cmp	r5, #54	; 0x36
  403988:	bf88      	it	hi
  40398a:	bd30      	pophi	{r4, r5, pc}
  40398c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403990:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403994:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403998:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40399c:	d002      	beq.n	4039a4 <__adddf3+0x70>
  40399e:	4240      	negs	r0, r0
  4039a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4039a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4039a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4039ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4039b0:	d002      	beq.n	4039b8 <__adddf3+0x84>
  4039b2:	4252      	negs	r2, r2
  4039b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4039b8:	ea94 0f05 	teq	r4, r5
  4039bc:	f000 80a7 	beq.w	403b0e <__adddf3+0x1da>
  4039c0:	f1a4 0401 	sub.w	r4, r4, #1
  4039c4:	f1d5 0e20 	rsbs	lr, r5, #32
  4039c8:	db0d      	blt.n	4039e6 <__adddf3+0xb2>
  4039ca:	fa02 fc0e 	lsl.w	ip, r2, lr
  4039ce:	fa22 f205 	lsr.w	r2, r2, r5
  4039d2:	1880      	adds	r0, r0, r2
  4039d4:	f141 0100 	adc.w	r1, r1, #0
  4039d8:	fa03 f20e 	lsl.w	r2, r3, lr
  4039dc:	1880      	adds	r0, r0, r2
  4039de:	fa43 f305 	asr.w	r3, r3, r5
  4039e2:	4159      	adcs	r1, r3
  4039e4:	e00e      	b.n	403a04 <__adddf3+0xd0>
  4039e6:	f1a5 0520 	sub.w	r5, r5, #32
  4039ea:	f10e 0e20 	add.w	lr, lr, #32
  4039ee:	2a01      	cmp	r2, #1
  4039f0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4039f4:	bf28      	it	cs
  4039f6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4039fa:	fa43 f305 	asr.w	r3, r3, r5
  4039fe:	18c0      	adds	r0, r0, r3
  403a00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403a04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403a08:	d507      	bpl.n	403a1a <__adddf3+0xe6>
  403a0a:	f04f 0e00 	mov.w	lr, #0
  403a0e:	f1dc 0c00 	rsbs	ip, ip, #0
  403a12:	eb7e 0000 	sbcs.w	r0, lr, r0
  403a16:	eb6e 0101 	sbc.w	r1, lr, r1
  403a1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403a1e:	d31b      	bcc.n	403a58 <__adddf3+0x124>
  403a20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403a24:	d30c      	bcc.n	403a40 <__adddf3+0x10c>
  403a26:	0849      	lsrs	r1, r1, #1
  403a28:	ea5f 0030 	movs.w	r0, r0, rrx
  403a2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403a30:	f104 0401 	add.w	r4, r4, #1
  403a34:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403a38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403a3c:	f080 809a 	bcs.w	403b74 <__adddf3+0x240>
  403a40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403a44:	bf08      	it	eq
  403a46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403a4a:	f150 0000 	adcs.w	r0, r0, #0
  403a4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403a52:	ea41 0105 	orr.w	r1, r1, r5
  403a56:	bd30      	pop	{r4, r5, pc}
  403a58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403a5c:	4140      	adcs	r0, r0
  403a5e:	eb41 0101 	adc.w	r1, r1, r1
  403a62:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a66:	f1a4 0401 	sub.w	r4, r4, #1
  403a6a:	d1e9      	bne.n	403a40 <__adddf3+0x10c>
  403a6c:	f091 0f00 	teq	r1, #0
  403a70:	bf04      	itt	eq
  403a72:	4601      	moveq	r1, r0
  403a74:	2000      	moveq	r0, #0
  403a76:	fab1 f381 	clz	r3, r1
  403a7a:	bf08      	it	eq
  403a7c:	3320      	addeq	r3, #32
  403a7e:	f1a3 030b 	sub.w	r3, r3, #11
  403a82:	f1b3 0220 	subs.w	r2, r3, #32
  403a86:	da0c      	bge.n	403aa2 <__adddf3+0x16e>
  403a88:	320c      	adds	r2, #12
  403a8a:	dd08      	ble.n	403a9e <__adddf3+0x16a>
  403a8c:	f102 0c14 	add.w	ip, r2, #20
  403a90:	f1c2 020c 	rsb	r2, r2, #12
  403a94:	fa01 f00c 	lsl.w	r0, r1, ip
  403a98:	fa21 f102 	lsr.w	r1, r1, r2
  403a9c:	e00c      	b.n	403ab8 <__adddf3+0x184>
  403a9e:	f102 0214 	add.w	r2, r2, #20
  403aa2:	bfd8      	it	le
  403aa4:	f1c2 0c20 	rsble	ip, r2, #32
  403aa8:	fa01 f102 	lsl.w	r1, r1, r2
  403aac:	fa20 fc0c 	lsr.w	ip, r0, ip
  403ab0:	bfdc      	itt	le
  403ab2:	ea41 010c 	orrle.w	r1, r1, ip
  403ab6:	4090      	lslle	r0, r2
  403ab8:	1ae4      	subs	r4, r4, r3
  403aba:	bfa2      	ittt	ge
  403abc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403ac0:	4329      	orrge	r1, r5
  403ac2:	bd30      	popge	{r4, r5, pc}
  403ac4:	ea6f 0404 	mvn.w	r4, r4
  403ac8:	3c1f      	subs	r4, #31
  403aca:	da1c      	bge.n	403b06 <__adddf3+0x1d2>
  403acc:	340c      	adds	r4, #12
  403ace:	dc0e      	bgt.n	403aee <__adddf3+0x1ba>
  403ad0:	f104 0414 	add.w	r4, r4, #20
  403ad4:	f1c4 0220 	rsb	r2, r4, #32
  403ad8:	fa20 f004 	lsr.w	r0, r0, r4
  403adc:	fa01 f302 	lsl.w	r3, r1, r2
  403ae0:	ea40 0003 	orr.w	r0, r0, r3
  403ae4:	fa21 f304 	lsr.w	r3, r1, r4
  403ae8:	ea45 0103 	orr.w	r1, r5, r3
  403aec:	bd30      	pop	{r4, r5, pc}
  403aee:	f1c4 040c 	rsb	r4, r4, #12
  403af2:	f1c4 0220 	rsb	r2, r4, #32
  403af6:	fa20 f002 	lsr.w	r0, r0, r2
  403afa:	fa01 f304 	lsl.w	r3, r1, r4
  403afe:	ea40 0003 	orr.w	r0, r0, r3
  403b02:	4629      	mov	r1, r5
  403b04:	bd30      	pop	{r4, r5, pc}
  403b06:	fa21 f004 	lsr.w	r0, r1, r4
  403b0a:	4629      	mov	r1, r5
  403b0c:	bd30      	pop	{r4, r5, pc}
  403b0e:	f094 0f00 	teq	r4, #0
  403b12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403b16:	bf06      	itte	eq
  403b18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403b1c:	3401      	addeq	r4, #1
  403b1e:	3d01      	subne	r5, #1
  403b20:	e74e      	b.n	4039c0 <__adddf3+0x8c>
  403b22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403b26:	bf18      	it	ne
  403b28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403b2c:	d029      	beq.n	403b82 <__adddf3+0x24e>
  403b2e:	ea94 0f05 	teq	r4, r5
  403b32:	bf08      	it	eq
  403b34:	ea90 0f02 	teqeq	r0, r2
  403b38:	d005      	beq.n	403b46 <__adddf3+0x212>
  403b3a:	ea54 0c00 	orrs.w	ip, r4, r0
  403b3e:	bf04      	itt	eq
  403b40:	4619      	moveq	r1, r3
  403b42:	4610      	moveq	r0, r2
  403b44:	bd30      	pop	{r4, r5, pc}
  403b46:	ea91 0f03 	teq	r1, r3
  403b4a:	bf1e      	ittt	ne
  403b4c:	2100      	movne	r1, #0
  403b4e:	2000      	movne	r0, #0
  403b50:	bd30      	popne	{r4, r5, pc}
  403b52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403b56:	d105      	bne.n	403b64 <__adddf3+0x230>
  403b58:	0040      	lsls	r0, r0, #1
  403b5a:	4149      	adcs	r1, r1
  403b5c:	bf28      	it	cs
  403b5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403b62:	bd30      	pop	{r4, r5, pc}
  403b64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403b68:	bf3c      	itt	cc
  403b6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403b6e:	bd30      	popcc	{r4, r5, pc}
  403b70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403b74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403b78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403b7c:	f04f 0000 	mov.w	r0, #0
  403b80:	bd30      	pop	{r4, r5, pc}
  403b82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403b86:	bf1a      	itte	ne
  403b88:	4619      	movne	r1, r3
  403b8a:	4610      	movne	r0, r2
  403b8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403b90:	bf1c      	itt	ne
  403b92:	460b      	movne	r3, r1
  403b94:	4602      	movne	r2, r0
  403b96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403b9a:	bf06      	itte	eq
  403b9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403ba0:	ea91 0f03 	teqeq	r1, r3
  403ba4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403ba8:	bd30      	pop	{r4, r5, pc}
  403baa:	bf00      	nop

00403bac <__aeabi_ui2d>:
  403bac:	f090 0f00 	teq	r0, #0
  403bb0:	bf04      	itt	eq
  403bb2:	2100      	moveq	r1, #0
  403bb4:	4770      	bxeq	lr
  403bb6:	b530      	push	{r4, r5, lr}
  403bb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403bbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403bc0:	f04f 0500 	mov.w	r5, #0
  403bc4:	f04f 0100 	mov.w	r1, #0
  403bc8:	e750      	b.n	403a6c <__adddf3+0x138>
  403bca:	bf00      	nop

00403bcc <__aeabi_i2d>:
  403bcc:	f090 0f00 	teq	r0, #0
  403bd0:	bf04      	itt	eq
  403bd2:	2100      	moveq	r1, #0
  403bd4:	4770      	bxeq	lr
  403bd6:	b530      	push	{r4, r5, lr}
  403bd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403bdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403be0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403be4:	bf48      	it	mi
  403be6:	4240      	negmi	r0, r0
  403be8:	f04f 0100 	mov.w	r1, #0
  403bec:	e73e      	b.n	403a6c <__adddf3+0x138>
  403bee:	bf00      	nop

00403bf0 <__aeabi_f2d>:
  403bf0:	0042      	lsls	r2, r0, #1
  403bf2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403bf6:	ea4f 0131 	mov.w	r1, r1, rrx
  403bfa:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403bfe:	bf1f      	itttt	ne
  403c00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403c04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403c08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403c0c:	4770      	bxne	lr
  403c0e:	f092 0f00 	teq	r2, #0
  403c12:	bf14      	ite	ne
  403c14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403c18:	4770      	bxeq	lr
  403c1a:	b530      	push	{r4, r5, lr}
  403c1c:	f44f 7460 	mov.w	r4, #896	; 0x380
  403c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403c24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403c28:	e720      	b.n	403a6c <__adddf3+0x138>
  403c2a:	bf00      	nop

00403c2c <__aeabi_ul2d>:
  403c2c:	ea50 0201 	orrs.w	r2, r0, r1
  403c30:	bf08      	it	eq
  403c32:	4770      	bxeq	lr
  403c34:	b530      	push	{r4, r5, lr}
  403c36:	f04f 0500 	mov.w	r5, #0
  403c3a:	e00a      	b.n	403c52 <__aeabi_l2d+0x16>

00403c3c <__aeabi_l2d>:
  403c3c:	ea50 0201 	orrs.w	r2, r0, r1
  403c40:	bf08      	it	eq
  403c42:	4770      	bxeq	lr
  403c44:	b530      	push	{r4, r5, lr}
  403c46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403c4a:	d502      	bpl.n	403c52 <__aeabi_l2d+0x16>
  403c4c:	4240      	negs	r0, r0
  403c4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403c52:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403c56:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403c5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403c5e:	f43f aedc 	beq.w	403a1a <__adddf3+0xe6>
  403c62:	f04f 0203 	mov.w	r2, #3
  403c66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403c6a:	bf18      	it	ne
  403c6c:	3203      	addne	r2, #3
  403c6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403c72:	bf18      	it	ne
  403c74:	3203      	addne	r2, #3
  403c76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403c7a:	f1c2 0320 	rsb	r3, r2, #32
  403c7e:	fa00 fc03 	lsl.w	ip, r0, r3
  403c82:	fa20 f002 	lsr.w	r0, r0, r2
  403c86:	fa01 fe03 	lsl.w	lr, r1, r3
  403c8a:	ea40 000e 	orr.w	r0, r0, lr
  403c8e:	fa21 f102 	lsr.w	r1, r1, r2
  403c92:	4414      	add	r4, r2
  403c94:	e6c1      	b.n	403a1a <__adddf3+0xe6>
  403c96:	bf00      	nop

00403c98 <__aeabi_dmul>:
  403c98:	b570      	push	{r4, r5, r6, lr}
  403c9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403c9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403ca2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403ca6:	bf1d      	ittte	ne
  403ca8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403cac:	ea94 0f0c 	teqne	r4, ip
  403cb0:	ea95 0f0c 	teqne	r5, ip
  403cb4:	f000 f8de 	bleq	403e74 <__aeabi_dmul+0x1dc>
  403cb8:	442c      	add	r4, r5
  403cba:	ea81 0603 	eor.w	r6, r1, r3
  403cbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403cc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  403cc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403cca:	bf18      	it	ne
  403ccc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403cd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403cd8:	d038      	beq.n	403d4c <__aeabi_dmul+0xb4>
  403cda:	fba0 ce02 	umull	ip, lr, r0, r2
  403cde:	f04f 0500 	mov.w	r5, #0
  403ce2:	fbe1 e502 	umlal	lr, r5, r1, r2
  403ce6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403cea:	fbe0 e503 	umlal	lr, r5, r0, r3
  403cee:	f04f 0600 	mov.w	r6, #0
  403cf2:	fbe1 5603 	umlal	r5, r6, r1, r3
  403cf6:	f09c 0f00 	teq	ip, #0
  403cfa:	bf18      	it	ne
  403cfc:	f04e 0e01 	orrne.w	lr, lr, #1
  403d00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403d04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403d08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403d0c:	d204      	bcs.n	403d18 <__aeabi_dmul+0x80>
  403d0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403d12:	416d      	adcs	r5, r5
  403d14:	eb46 0606 	adc.w	r6, r6, r6
  403d18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403d1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403d20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403d24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403d28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403d2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403d30:	bf88      	it	hi
  403d32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403d36:	d81e      	bhi.n	403d76 <__aeabi_dmul+0xde>
  403d38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403d3c:	bf08      	it	eq
  403d3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403d42:	f150 0000 	adcs.w	r0, r0, #0
  403d46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403d4a:	bd70      	pop	{r4, r5, r6, pc}
  403d4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403d50:	ea46 0101 	orr.w	r1, r6, r1
  403d54:	ea40 0002 	orr.w	r0, r0, r2
  403d58:	ea81 0103 	eor.w	r1, r1, r3
  403d5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403d60:	bfc2      	ittt	gt
  403d62:	ebd4 050c 	rsbsgt	r5, r4, ip
  403d66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403d6a:	bd70      	popgt	{r4, r5, r6, pc}
  403d6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403d70:	f04f 0e00 	mov.w	lr, #0
  403d74:	3c01      	subs	r4, #1
  403d76:	f300 80ab 	bgt.w	403ed0 <__aeabi_dmul+0x238>
  403d7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403d7e:	bfde      	ittt	le
  403d80:	2000      	movle	r0, #0
  403d82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403d86:	bd70      	pople	{r4, r5, r6, pc}
  403d88:	f1c4 0400 	rsb	r4, r4, #0
  403d8c:	3c20      	subs	r4, #32
  403d8e:	da35      	bge.n	403dfc <__aeabi_dmul+0x164>
  403d90:	340c      	adds	r4, #12
  403d92:	dc1b      	bgt.n	403dcc <__aeabi_dmul+0x134>
  403d94:	f104 0414 	add.w	r4, r4, #20
  403d98:	f1c4 0520 	rsb	r5, r4, #32
  403d9c:	fa00 f305 	lsl.w	r3, r0, r5
  403da0:	fa20 f004 	lsr.w	r0, r0, r4
  403da4:	fa01 f205 	lsl.w	r2, r1, r5
  403da8:	ea40 0002 	orr.w	r0, r0, r2
  403dac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403db0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403db4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403db8:	fa21 f604 	lsr.w	r6, r1, r4
  403dbc:	eb42 0106 	adc.w	r1, r2, r6
  403dc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403dc4:	bf08      	it	eq
  403dc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403dca:	bd70      	pop	{r4, r5, r6, pc}
  403dcc:	f1c4 040c 	rsb	r4, r4, #12
  403dd0:	f1c4 0520 	rsb	r5, r4, #32
  403dd4:	fa00 f304 	lsl.w	r3, r0, r4
  403dd8:	fa20 f005 	lsr.w	r0, r0, r5
  403ddc:	fa01 f204 	lsl.w	r2, r1, r4
  403de0:	ea40 0002 	orr.w	r0, r0, r2
  403de4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403de8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403dec:	f141 0100 	adc.w	r1, r1, #0
  403df0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403df4:	bf08      	it	eq
  403df6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403dfa:	bd70      	pop	{r4, r5, r6, pc}
  403dfc:	f1c4 0520 	rsb	r5, r4, #32
  403e00:	fa00 f205 	lsl.w	r2, r0, r5
  403e04:	ea4e 0e02 	orr.w	lr, lr, r2
  403e08:	fa20 f304 	lsr.w	r3, r0, r4
  403e0c:	fa01 f205 	lsl.w	r2, r1, r5
  403e10:	ea43 0302 	orr.w	r3, r3, r2
  403e14:	fa21 f004 	lsr.w	r0, r1, r4
  403e18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403e1c:	fa21 f204 	lsr.w	r2, r1, r4
  403e20:	ea20 0002 	bic.w	r0, r0, r2
  403e24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403e28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403e2c:	bf08      	it	eq
  403e2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403e32:	bd70      	pop	{r4, r5, r6, pc}
  403e34:	f094 0f00 	teq	r4, #0
  403e38:	d10f      	bne.n	403e5a <__aeabi_dmul+0x1c2>
  403e3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403e3e:	0040      	lsls	r0, r0, #1
  403e40:	eb41 0101 	adc.w	r1, r1, r1
  403e44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403e48:	bf08      	it	eq
  403e4a:	3c01      	subeq	r4, #1
  403e4c:	d0f7      	beq.n	403e3e <__aeabi_dmul+0x1a6>
  403e4e:	ea41 0106 	orr.w	r1, r1, r6
  403e52:	f095 0f00 	teq	r5, #0
  403e56:	bf18      	it	ne
  403e58:	4770      	bxne	lr
  403e5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403e5e:	0052      	lsls	r2, r2, #1
  403e60:	eb43 0303 	adc.w	r3, r3, r3
  403e64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403e68:	bf08      	it	eq
  403e6a:	3d01      	subeq	r5, #1
  403e6c:	d0f7      	beq.n	403e5e <__aeabi_dmul+0x1c6>
  403e6e:	ea43 0306 	orr.w	r3, r3, r6
  403e72:	4770      	bx	lr
  403e74:	ea94 0f0c 	teq	r4, ip
  403e78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403e7c:	bf18      	it	ne
  403e7e:	ea95 0f0c 	teqne	r5, ip
  403e82:	d00c      	beq.n	403e9e <__aeabi_dmul+0x206>
  403e84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403e88:	bf18      	it	ne
  403e8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403e8e:	d1d1      	bne.n	403e34 <__aeabi_dmul+0x19c>
  403e90:	ea81 0103 	eor.w	r1, r1, r3
  403e94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403e98:	f04f 0000 	mov.w	r0, #0
  403e9c:	bd70      	pop	{r4, r5, r6, pc}
  403e9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403ea2:	bf06      	itte	eq
  403ea4:	4610      	moveq	r0, r2
  403ea6:	4619      	moveq	r1, r3
  403ea8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403eac:	d019      	beq.n	403ee2 <__aeabi_dmul+0x24a>
  403eae:	ea94 0f0c 	teq	r4, ip
  403eb2:	d102      	bne.n	403eba <__aeabi_dmul+0x222>
  403eb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403eb8:	d113      	bne.n	403ee2 <__aeabi_dmul+0x24a>
  403eba:	ea95 0f0c 	teq	r5, ip
  403ebe:	d105      	bne.n	403ecc <__aeabi_dmul+0x234>
  403ec0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403ec4:	bf1c      	itt	ne
  403ec6:	4610      	movne	r0, r2
  403ec8:	4619      	movne	r1, r3
  403eca:	d10a      	bne.n	403ee2 <__aeabi_dmul+0x24a>
  403ecc:	ea81 0103 	eor.w	r1, r1, r3
  403ed0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403ed4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403ed8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403edc:	f04f 0000 	mov.w	r0, #0
  403ee0:	bd70      	pop	{r4, r5, r6, pc}
  403ee2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403ee6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403eea:	bd70      	pop	{r4, r5, r6, pc}

00403eec <__aeabi_ddiv>:
  403eec:	b570      	push	{r4, r5, r6, lr}
  403eee:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403ef2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403ef6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403efa:	bf1d      	ittte	ne
  403efc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403f00:	ea94 0f0c 	teqne	r4, ip
  403f04:	ea95 0f0c 	teqne	r5, ip
  403f08:	f000 f8a7 	bleq	40405a <__aeabi_ddiv+0x16e>
  403f0c:	eba4 0405 	sub.w	r4, r4, r5
  403f10:	ea81 0e03 	eor.w	lr, r1, r3
  403f14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403f18:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403f1c:	f000 8088 	beq.w	404030 <__aeabi_ddiv+0x144>
  403f20:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403f24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403f28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403f2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403f30:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403f34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403f38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403f3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403f40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403f44:	429d      	cmp	r5, r3
  403f46:	bf08      	it	eq
  403f48:	4296      	cmpeq	r6, r2
  403f4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403f4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403f52:	d202      	bcs.n	403f5a <__aeabi_ddiv+0x6e>
  403f54:	085b      	lsrs	r3, r3, #1
  403f56:	ea4f 0232 	mov.w	r2, r2, rrx
  403f5a:	1ab6      	subs	r6, r6, r2
  403f5c:	eb65 0503 	sbc.w	r5, r5, r3
  403f60:	085b      	lsrs	r3, r3, #1
  403f62:	ea4f 0232 	mov.w	r2, r2, rrx
  403f66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403f6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403f6e:	ebb6 0e02 	subs.w	lr, r6, r2
  403f72:	eb75 0e03 	sbcs.w	lr, r5, r3
  403f76:	bf22      	ittt	cs
  403f78:	1ab6      	subcs	r6, r6, r2
  403f7a:	4675      	movcs	r5, lr
  403f7c:	ea40 000c 	orrcs.w	r0, r0, ip
  403f80:	085b      	lsrs	r3, r3, #1
  403f82:	ea4f 0232 	mov.w	r2, r2, rrx
  403f86:	ebb6 0e02 	subs.w	lr, r6, r2
  403f8a:	eb75 0e03 	sbcs.w	lr, r5, r3
  403f8e:	bf22      	ittt	cs
  403f90:	1ab6      	subcs	r6, r6, r2
  403f92:	4675      	movcs	r5, lr
  403f94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403f98:	085b      	lsrs	r3, r3, #1
  403f9a:	ea4f 0232 	mov.w	r2, r2, rrx
  403f9e:	ebb6 0e02 	subs.w	lr, r6, r2
  403fa2:	eb75 0e03 	sbcs.w	lr, r5, r3
  403fa6:	bf22      	ittt	cs
  403fa8:	1ab6      	subcs	r6, r6, r2
  403faa:	4675      	movcs	r5, lr
  403fac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403fb0:	085b      	lsrs	r3, r3, #1
  403fb2:	ea4f 0232 	mov.w	r2, r2, rrx
  403fb6:	ebb6 0e02 	subs.w	lr, r6, r2
  403fba:	eb75 0e03 	sbcs.w	lr, r5, r3
  403fbe:	bf22      	ittt	cs
  403fc0:	1ab6      	subcs	r6, r6, r2
  403fc2:	4675      	movcs	r5, lr
  403fc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403fc8:	ea55 0e06 	orrs.w	lr, r5, r6
  403fcc:	d018      	beq.n	404000 <__aeabi_ddiv+0x114>
  403fce:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403fd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403fd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403fda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403fde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403fe2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403fe6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403fea:	d1c0      	bne.n	403f6e <__aeabi_ddiv+0x82>
  403fec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403ff0:	d10b      	bne.n	40400a <__aeabi_ddiv+0x11e>
  403ff2:	ea41 0100 	orr.w	r1, r1, r0
  403ff6:	f04f 0000 	mov.w	r0, #0
  403ffa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403ffe:	e7b6      	b.n	403f6e <__aeabi_ddiv+0x82>
  404000:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404004:	bf04      	itt	eq
  404006:	4301      	orreq	r1, r0
  404008:	2000      	moveq	r0, #0
  40400a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40400e:	bf88      	it	hi
  404010:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404014:	f63f aeaf 	bhi.w	403d76 <__aeabi_dmul+0xde>
  404018:	ebb5 0c03 	subs.w	ip, r5, r3
  40401c:	bf04      	itt	eq
  40401e:	ebb6 0c02 	subseq.w	ip, r6, r2
  404022:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404026:	f150 0000 	adcs.w	r0, r0, #0
  40402a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40402e:	bd70      	pop	{r4, r5, r6, pc}
  404030:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404034:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404038:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40403c:	bfc2      	ittt	gt
  40403e:	ebd4 050c 	rsbsgt	r5, r4, ip
  404042:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404046:	bd70      	popgt	{r4, r5, r6, pc}
  404048:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40404c:	f04f 0e00 	mov.w	lr, #0
  404050:	3c01      	subs	r4, #1
  404052:	e690      	b.n	403d76 <__aeabi_dmul+0xde>
  404054:	ea45 0e06 	orr.w	lr, r5, r6
  404058:	e68d      	b.n	403d76 <__aeabi_dmul+0xde>
  40405a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40405e:	ea94 0f0c 	teq	r4, ip
  404062:	bf08      	it	eq
  404064:	ea95 0f0c 	teqeq	r5, ip
  404068:	f43f af3b 	beq.w	403ee2 <__aeabi_dmul+0x24a>
  40406c:	ea94 0f0c 	teq	r4, ip
  404070:	d10a      	bne.n	404088 <__aeabi_ddiv+0x19c>
  404072:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404076:	f47f af34 	bne.w	403ee2 <__aeabi_dmul+0x24a>
  40407a:	ea95 0f0c 	teq	r5, ip
  40407e:	f47f af25 	bne.w	403ecc <__aeabi_dmul+0x234>
  404082:	4610      	mov	r0, r2
  404084:	4619      	mov	r1, r3
  404086:	e72c      	b.n	403ee2 <__aeabi_dmul+0x24a>
  404088:	ea95 0f0c 	teq	r5, ip
  40408c:	d106      	bne.n	40409c <__aeabi_ddiv+0x1b0>
  40408e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404092:	f43f aefd 	beq.w	403e90 <__aeabi_dmul+0x1f8>
  404096:	4610      	mov	r0, r2
  404098:	4619      	mov	r1, r3
  40409a:	e722      	b.n	403ee2 <__aeabi_dmul+0x24a>
  40409c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4040a0:	bf18      	it	ne
  4040a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4040a6:	f47f aec5 	bne.w	403e34 <__aeabi_dmul+0x19c>
  4040aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4040ae:	f47f af0d 	bne.w	403ecc <__aeabi_dmul+0x234>
  4040b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4040b6:	f47f aeeb 	bne.w	403e90 <__aeabi_dmul+0x1f8>
  4040ba:	e712      	b.n	403ee2 <__aeabi_dmul+0x24a>

004040bc <__aeabi_d2f>:
  4040bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4040c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4040c4:	bf24      	itt	cs
  4040c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4040ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4040ce:	d90d      	bls.n	4040ec <__aeabi_d2f+0x30>
  4040d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4040d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4040d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4040dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4040e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4040e4:	bf08      	it	eq
  4040e6:	f020 0001 	biceq.w	r0, r0, #1
  4040ea:	4770      	bx	lr
  4040ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4040f0:	d121      	bne.n	404136 <__aeabi_d2f+0x7a>
  4040f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4040f6:	bfbc      	itt	lt
  4040f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4040fc:	4770      	bxlt	lr
  4040fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404102:	ea4f 5252 	mov.w	r2, r2, lsr #21
  404106:	f1c2 0218 	rsb	r2, r2, #24
  40410a:	f1c2 0c20 	rsb	ip, r2, #32
  40410e:	fa10 f30c 	lsls.w	r3, r0, ip
  404112:	fa20 f002 	lsr.w	r0, r0, r2
  404116:	bf18      	it	ne
  404118:	f040 0001 	orrne.w	r0, r0, #1
  40411c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404120:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  404124:	fa03 fc0c 	lsl.w	ip, r3, ip
  404128:	ea40 000c 	orr.w	r0, r0, ip
  40412c:	fa23 f302 	lsr.w	r3, r3, r2
  404130:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404134:	e7cc      	b.n	4040d0 <__aeabi_d2f+0x14>
  404136:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40413a:	d107      	bne.n	40414c <__aeabi_d2f+0x90>
  40413c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  404140:	bf1e      	ittt	ne
  404142:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  404146:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40414a:	4770      	bxne	lr
  40414c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  404150:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404154:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404158:	4770      	bx	lr
  40415a:	bf00      	nop

0040415c <__libc_init_array>:
  40415c:	b570      	push	{r4, r5, r6, lr}
  40415e:	4e0f      	ldr	r6, [pc, #60]	; (40419c <__libc_init_array+0x40>)
  404160:	4d0f      	ldr	r5, [pc, #60]	; (4041a0 <__libc_init_array+0x44>)
  404162:	1b76      	subs	r6, r6, r5
  404164:	10b6      	asrs	r6, r6, #2
  404166:	bf18      	it	ne
  404168:	2400      	movne	r4, #0
  40416a:	d005      	beq.n	404178 <__libc_init_array+0x1c>
  40416c:	3401      	adds	r4, #1
  40416e:	f855 3b04 	ldr.w	r3, [r5], #4
  404172:	4798      	blx	r3
  404174:	42a6      	cmp	r6, r4
  404176:	d1f9      	bne.n	40416c <__libc_init_array+0x10>
  404178:	4e0a      	ldr	r6, [pc, #40]	; (4041a4 <__libc_init_array+0x48>)
  40417a:	4d0b      	ldr	r5, [pc, #44]	; (4041a8 <__libc_init_array+0x4c>)
  40417c:	1b76      	subs	r6, r6, r5
  40417e:	f005 fa13 	bl	4095a8 <_init>
  404182:	10b6      	asrs	r6, r6, #2
  404184:	bf18      	it	ne
  404186:	2400      	movne	r4, #0
  404188:	d006      	beq.n	404198 <__libc_init_array+0x3c>
  40418a:	3401      	adds	r4, #1
  40418c:	f855 3b04 	ldr.w	r3, [r5], #4
  404190:	4798      	blx	r3
  404192:	42a6      	cmp	r6, r4
  404194:	d1f9      	bne.n	40418a <__libc_init_array+0x2e>
  404196:	bd70      	pop	{r4, r5, r6, pc}
  404198:	bd70      	pop	{r4, r5, r6, pc}
  40419a:	bf00      	nop
  40419c:	004095b4 	.word	0x004095b4
  4041a0:	004095b4 	.word	0x004095b4
  4041a4:	004095bc 	.word	0x004095bc
  4041a8:	004095b4 	.word	0x004095b4

004041ac <malloc>:
  4041ac:	4b02      	ldr	r3, [pc, #8]	; (4041b8 <malloc+0xc>)
  4041ae:	4601      	mov	r1, r0
  4041b0:	6818      	ldr	r0, [r3, #0]
  4041b2:	f000 b80b 	b.w	4041cc <_malloc_r>
  4041b6:	bf00      	nop
  4041b8:	2040000c 	.word	0x2040000c

004041bc <free>:
  4041bc:	4b02      	ldr	r3, [pc, #8]	; (4041c8 <free+0xc>)
  4041be:	4601      	mov	r1, r0
  4041c0:	6818      	ldr	r0, [r3, #0]
  4041c2:	f003 ba25 	b.w	407610 <_free_r>
  4041c6:	bf00      	nop
  4041c8:	2040000c 	.word	0x2040000c

004041cc <_malloc_r>:
  4041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041d0:	f101 060b 	add.w	r6, r1, #11
  4041d4:	2e16      	cmp	r6, #22
  4041d6:	b083      	sub	sp, #12
  4041d8:	4605      	mov	r5, r0
  4041da:	f240 809e 	bls.w	40431a <_malloc_r+0x14e>
  4041de:	f036 0607 	bics.w	r6, r6, #7
  4041e2:	f100 80bd 	bmi.w	404360 <_malloc_r+0x194>
  4041e6:	42b1      	cmp	r1, r6
  4041e8:	f200 80ba 	bhi.w	404360 <_malloc_r+0x194>
  4041ec:	f000 fb86 	bl	4048fc <__malloc_lock>
  4041f0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4041f4:	f0c0 8293 	bcc.w	40471e <_malloc_r+0x552>
  4041f8:	0a73      	lsrs	r3, r6, #9
  4041fa:	f000 80b8 	beq.w	40436e <_malloc_r+0x1a2>
  4041fe:	2b04      	cmp	r3, #4
  404200:	f200 8179 	bhi.w	4044f6 <_malloc_r+0x32a>
  404204:	09b3      	lsrs	r3, r6, #6
  404206:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40420a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40420e:	00c3      	lsls	r3, r0, #3
  404210:	4fbf      	ldr	r7, [pc, #764]	; (404510 <_malloc_r+0x344>)
  404212:	443b      	add	r3, r7
  404214:	f1a3 0108 	sub.w	r1, r3, #8
  404218:	685c      	ldr	r4, [r3, #4]
  40421a:	42a1      	cmp	r1, r4
  40421c:	d106      	bne.n	40422c <_malloc_r+0x60>
  40421e:	e00c      	b.n	40423a <_malloc_r+0x6e>
  404220:	2a00      	cmp	r2, #0
  404222:	f280 80aa 	bge.w	40437a <_malloc_r+0x1ae>
  404226:	68e4      	ldr	r4, [r4, #12]
  404228:	42a1      	cmp	r1, r4
  40422a:	d006      	beq.n	40423a <_malloc_r+0x6e>
  40422c:	6863      	ldr	r3, [r4, #4]
  40422e:	f023 0303 	bic.w	r3, r3, #3
  404232:	1b9a      	subs	r2, r3, r6
  404234:	2a0f      	cmp	r2, #15
  404236:	ddf3      	ble.n	404220 <_malloc_r+0x54>
  404238:	4670      	mov	r0, lr
  40423a:	693c      	ldr	r4, [r7, #16]
  40423c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404524 <_malloc_r+0x358>
  404240:	4574      	cmp	r4, lr
  404242:	f000 81ab 	beq.w	40459c <_malloc_r+0x3d0>
  404246:	6863      	ldr	r3, [r4, #4]
  404248:	f023 0303 	bic.w	r3, r3, #3
  40424c:	1b9a      	subs	r2, r3, r6
  40424e:	2a0f      	cmp	r2, #15
  404250:	f300 8190 	bgt.w	404574 <_malloc_r+0x3a8>
  404254:	2a00      	cmp	r2, #0
  404256:	f8c7 e014 	str.w	lr, [r7, #20]
  40425a:	f8c7 e010 	str.w	lr, [r7, #16]
  40425e:	f280 809d 	bge.w	40439c <_malloc_r+0x1d0>
  404262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404266:	f080 8161 	bcs.w	40452c <_malloc_r+0x360>
  40426a:	08db      	lsrs	r3, r3, #3
  40426c:	f103 0c01 	add.w	ip, r3, #1
  404270:	1099      	asrs	r1, r3, #2
  404272:	687a      	ldr	r2, [r7, #4]
  404274:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404278:	f8c4 8008 	str.w	r8, [r4, #8]
  40427c:	2301      	movs	r3, #1
  40427e:	408b      	lsls	r3, r1
  404280:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404284:	4313      	orrs	r3, r2
  404286:	3908      	subs	r1, #8
  404288:	60e1      	str	r1, [r4, #12]
  40428a:	607b      	str	r3, [r7, #4]
  40428c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404290:	f8c8 400c 	str.w	r4, [r8, #12]
  404294:	1082      	asrs	r2, r0, #2
  404296:	2401      	movs	r4, #1
  404298:	4094      	lsls	r4, r2
  40429a:	429c      	cmp	r4, r3
  40429c:	f200 808b 	bhi.w	4043b6 <_malloc_r+0x1ea>
  4042a0:	421c      	tst	r4, r3
  4042a2:	d106      	bne.n	4042b2 <_malloc_r+0xe6>
  4042a4:	f020 0003 	bic.w	r0, r0, #3
  4042a8:	0064      	lsls	r4, r4, #1
  4042aa:	421c      	tst	r4, r3
  4042ac:	f100 0004 	add.w	r0, r0, #4
  4042b0:	d0fa      	beq.n	4042a8 <_malloc_r+0xdc>
  4042b2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4042b6:	46cc      	mov	ip, r9
  4042b8:	4680      	mov	r8, r0
  4042ba:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4042be:	459c      	cmp	ip, r3
  4042c0:	d107      	bne.n	4042d2 <_malloc_r+0x106>
  4042c2:	e16d      	b.n	4045a0 <_malloc_r+0x3d4>
  4042c4:	2a00      	cmp	r2, #0
  4042c6:	f280 817b 	bge.w	4045c0 <_malloc_r+0x3f4>
  4042ca:	68db      	ldr	r3, [r3, #12]
  4042cc:	459c      	cmp	ip, r3
  4042ce:	f000 8167 	beq.w	4045a0 <_malloc_r+0x3d4>
  4042d2:	6859      	ldr	r1, [r3, #4]
  4042d4:	f021 0103 	bic.w	r1, r1, #3
  4042d8:	1b8a      	subs	r2, r1, r6
  4042da:	2a0f      	cmp	r2, #15
  4042dc:	ddf2      	ble.n	4042c4 <_malloc_r+0xf8>
  4042de:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4042e2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4042e6:	9300      	str	r3, [sp, #0]
  4042e8:	199c      	adds	r4, r3, r6
  4042ea:	4628      	mov	r0, r5
  4042ec:	f046 0601 	orr.w	r6, r6, #1
  4042f0:	f042 0501 	orr.w	r5, r2, #1
  4042f4:	605e      	str	r6, [r3, #4]
  4042f6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4042fa:	f8cc 8008 	str.w	r8, [ip, #8]
  4042fe:	617c      	str	r4, [r7, #20]
  404300:	613c      	str	r4, [r7, #16]
  404302:	f8c4 e00c 	str.w	lr, [r4, #12]
  404306:	f8c4 e008 	str.w	lr, [r4, #8]
  40430a:	6065      	str	r5, [r4, #4]
  40430c:	505a      	str	r2, [r3, r1]
  40430e:	f000 fafb 	bl	404908 <__malloc_unlock>
  404312:	9b00      	ldr	r3, [sp, #0]
  404314:	f103 0408 	add.w	r4, r3, #8
  404318:	e01e      	b.n	404358 <_malloc_r+0x18c>
  40431a:	2910      	cmp	r1, #16
  40431c:	d820      	bhi.n	404360 <_malloc_r+0x194>
  40431e:	f000 faed 	bl	4048fc <__malloc_lock>
  404322:	2610      	movs	r6, #16
  404324:	2318      	movs	r3, #24
  404326:	2002      	movs	r0, #2
  404328:	4f79      	ldr	r7, [pc, #484]	; (404510 <_malloc_r+0x344>)
  40432a:	443b      	add	r3, r7
  40432c:	f1a3 0208 	sub.w	r2, r3, #8
  404330:	685c      	ldr	r4, [r3, #4]
  404332:	4294      	cmp	r4, r2
  404334:	f000 813d 	beq.w	4045b2 <_malloc_r+0x3e6>
  404338:	6863      	ldr	r3, [r4, #4]
  40433a:	68e1      	ldr	r1, [r4, #12]
  40433c:	68a6      	ldr	r6, [r4, #8]
  40433e:	f023 0303 	bic.w	r3, r3, #3
  404342:	4423      	add	r3, r4
  404344:	4628      	mov	r0, r5
  404346:	685a      	ldr	r2, [r3, #4]
  404348:	60f1      	str	r1, [r6, #12]
  40434a:	f042 0201 	orr.w	r2, r2, #1
  40434e:	608e      	str	r6, [r1, #8]
  404350:	605a      	str	r2, [r3, #4]
  404352:	f000 fad9 	bl	404908 <__malloc_unlock>
  404356:	3408      	adds	r4, #8
  404358:	4620      	mov	r0, r4
  40435a:	b003      	add	sp, #12
  40435c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404360:	2400      	movs	r4, #0
  404362:	230c      	movs	r3, #12
  404364:	4620      	mov	r0, r4
  404366:	602b      	str	r3, [r5, #0]
  404368:	b003      	add	sp, #12
  40436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40436e:	2040      	movs	r0, #64	; 0x40
  404370:	f44f 7300 	mov.w	r3, #512	; 0x200
  404374:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404378:	e74a      	b.n	404210 <_malloc_r+0x44>
  40437a:	4423      	add	r3, r4
  40437c:	68e1      	ldr	r1, [r4, #12]
  40437e:	685a      	ldr	r2, [r3, #4]
  404380:	68a6      	ldr	r6, [r4, #8]
  404382:	f042 0201 	orr.w	r2, r2, #1
  404386:	60f1      	str	r1, [r6, #12]
  404388:	4628      	mov	r0, r5
  40438a:	608e      	str	r6, [r1, #8]
  40438c:	605a      	str	r2, [r3, #4]
  40438e:	f000 fabb 	bl	404908 <__malloc_unlock>
  404392:	3408      	adds	r4, #8
  404394:	4620      	mov	r0, r4
  404396:	b003      	add	sp, #12
  404398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40439c:	4423      	add	r3, r4
  40439e:	4628      	mov	r0, r5
  4043a0:	685a      	ldr	r2, [r3, #4]
  4043a2:	f042 0201 	orr.w	r2, r2, #1
  4043a6:	605a      	str	r2, [r3, #4]
  4043a8:	f000 faae 	bl	404908 <__malloc_unlock>
  4043ac:	3408      	adds	r4, #8
  4043ae:	4620      	mov	r0, r4
  4043b0:	b003      	add	sp, #12
  4043b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043b6:	68bc      	ldr	r4, [r7, #8]
  4043b8:	6863      	ldr	r3, [r4, #4]
  4043ba:	f023 0803 	bic.w	r8, r3, #3
  4043be:	45b0      	cmp	r8, r6
  4043c0:	d304      	bcc.n	4043cc <_malloc_r+0x200>
  4043c2:	eba8 0306 	sub.w	r3, r8, r6
  4043c6:	2b0f      	cmp	r3, #15
  4043c8:	f300 8085 	bgt.w	4044d6 <_malloc_r+0x30a>
  4043cc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404528 <_malloc_r+0x35c>
  4043d0:	4b50      	ldr	r3, [pc, #320]	; (404514 <_malloc_r+0x348>)
  4043d2:	f8d9 2000 	ldr.w	r2, [r9]
  4043d6:	681b      	ldr	r3, [r3, #0]
  4043d8:	3201      	adds	r2, #1
  4043da:	4433      	add	r3, r6
  4043dc:	eb04 0a08 	add.w	sl, r4, r8
  4043e0:	f000 8155 	beq.w	40468e <_malloc_r+0x4c2>
  4043e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4043e8:	330f      	adds	r3, #15
  4043ea:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4043ee:	f02b 0b0f 	bic.w	fp, fp, #15
  4043f2:	4659      	mov	r1, fp
  4043f4:	4628      	mov	r0, r5
  4043f6:	f000 faf7 	bl	4049e8 <_sbrk_r>
  4043fa:	1c41      	adds	r1, r0, #1
  4043fc:	4602      	mov	r2, r0
  4043fe:	f000 80fc 	beq.w	4045fa <_malloc_r+0x42e>
  404402:	4582      	cmp	sl, r0
  404404:	f200 80f7 	bhi.w	4045f6 <_malloc_r+0x42a>
  404408:	4b43      	ldr	r3, [pc, #268]	; (404518 <_malloc_r+0x34c>)
  40440a:	6819      	ldr	r1, [r3, #0]
  40440c:	4459      	add	r1, fp
  40440e:	6019      	str	r1, [r3, #0]
  404410:	f000 814d 	beq.w	4046ae <_malloc_r+0x4e2>
  404414:	f8d9 0000 	ldr.w	r0, [r9]
  404418:	3001      	adds	r0, #1
  40441a:	bf1b      	ittet	ne
  40441c:	eba2 0a0a 	subne.w	sl, r2, sl
  404420:	4451      	addne	r1, sl
  404422:	f8c9 2000 	streq.w	r2, [r9]
  404426:	6019      	strne	r1, [r3, #0]
  404428:	f012 0107 	ands.w	r1, r2, #7
  40442c:	f000 8115 	beq.w	40465a <_malloc_r+0x48e>
  404430:	f1c1 0008 	rsb	r0, r1, #8
  404434:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404438:	4402      	add	r2, r0
  40443a:	3108      	adds	r1, #8
  40443c:	eb02 090b 	add.w	r9, r2, fp
  404440:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404444:	eba1 0909 	sub.w	r9, r1, r9
  404448:	4649      	mov	r1, r9
  40444a:	4628      	mov	r0, r5
  40444c:	9301      	str	r3, [sp, #4]
  40444e:	9200      	str	r2, [sp, #0]
  404450:	f000 faca 	bl	4049e8 <_sbrk_r>
  404454:	1c43      	adds	r3, r0, #1
  404456:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40445a:	f000 8143 	beq.w	4046e4 <_malloc_r+0x518>
  40445e:	1a80      	subs	r0, r0, r2
  404460:	4448      	add	r0, r9
  404462:	f040 0001 	orr.w	r0, r0, #1
  404466:	6819      	ldr	r1, [r3, #0]
  404468:	60ba      	str	r2, [r7, #8]
  40446a:	4449      	add	r1, r9
  40446c:	42bc      	cmp	r4, r7
  40446e:	6050      	str	r0, [r2, #4]
  404470:	6019      	str	r1, [r3, #0]
  404472:	d017      	beq.n	4044a4 <_malloc_r+0x2d8>
  404474:	f1b8 0f0f 	cmp.w	r8, #15
  404478:	f240 80fb 	bls.w	404672 <_malloc_r+0x4a6>
  40447c:	6860      	ldr	r0, [r4, #4]
  40447e:	f1a8 020c 	sub.w	r2, r8, #12
  404482:	f022 0207 	bic.w	r2, r2, #7
  404486:	eb04 0e02 	add.w	lr, r4, r2
  40448a:	f000 0001 	and.w	r0, r0, #1
  40448e:	f04f 0c05 	mov.w	ip, #5
  404492:	4310      	orrs	r0, r2
  404494:	2a0f      	cmp	r2, #15
  404496:	6060      	str	r0, [r4, #4]
  404498:	f8ce c004 	str.w	ip, [lr, #4]
  40449c:	f8ce c008 	str.w	ip, [lr, #8]
  4044a0:	f200 8117 	bhi.w	4046d2 <_malloc_r+0x506>
  4044a4:	4b1d      	ldr	r3, [pc, #116]	; (40451c <_malloc_r+0x350>)
  4044a6:	68bc      	ldr	r4, [r7, #8]
  4044a8:	681a      	ldr	r2, [r3, #0]
  4044aa:	4291      	cmp	r1, r2
  4044ac:	bf88      	it	hi
  4044ae:	6019      	strhi	r1, [r3, #0]
  4044b0:	4b1b      	ldr	r3, [pc, #108]	; (404520 <_malloc_r+0x354>)
  4044b2:	681a      	ldr	r2, [r3, #0]
  4044b4:	4291      	cmp	r1, r2
  4044b6:	6862      	ldr	r2, [r4, #4]
  4044b8:	bf88      	it	hi
  4044ba:	6019      	strhi	r1, [r3, #0]
  4044bc:	f022 0203 	bic.w	r2, r2, #3
  4044c0:	4296      	cmp	r6, r2
  4044c2:	eba2 0306 	sub.w	r3, r2, r6
  4044c6:	d801      	bhi.n	4044cc <_malloc_r+0x300>
  4044c8:	2b0f      	cmp	r3, #15
  4044ca:	dc04      	bgt.n	4044d6 <_malloc_r+0x30a>
  4044cc:	4628      	mov	r0, r5
  4044ce:	f000 fa1b 	bl	404908 <__malloc_unlock>
  4044d2:	2400      	movs	r4, #0
  4044d4:	e740      	b.n	404358 <_malloc_r+0x18c>
  4044d6:	19a2      	adds	r2, r4, r6
  4044d8:	f043 0301 	orr.w	r3, r3, #1
  4044dc:	f046 0601 	orr.w	r6, r6, #1
  4044e0:	6066      	str	r6, [r4, #4]
  4044e2:	4628      	mov	r0, r5
  4044e4:	60ba      	str	r2, [r7, #8]
  4044e6:	6053      	str	r3, [r2, #4]
  4044e8:	f000 fa0e 	bl	404908 <__malloc_unlock>
  4044ec:	3408      	adds	r4, #8
  4044ee:	4620      	mov	r0, r4
  4044f0:	b003      	add	sp, #12
  4044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044f6:	2b14      	cmp	r3, #20
  4044f8:	d971      	bls.n	4045de <_malloc_r+0x412>
  4044fa:	2b54      	cmp	r3, #84	; 0x54
  4044fc:	f200 80a3 	bhi.w	404646 <_malloc_r+0x47a>
  404500:	0b33      	lsrs	r3, r6, #12
  404502:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404506:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40450a:	00c3      	lsls	r3, r0, #3
  40450c:	e680      	b.n	404210 <_malloc_r+0x44>
  40450e:	bf00      	nop
  404510:	20400438 	.word	0x20400438
  404514:	20400bbc 	.word	0x20400bbc
  404518:	20400b8c 	.word	0x20400b8c
  40451c:	20400bb4 	.word	0x20400bb4
  404520:	20400bb8 	.word	0x20400bb8
  404524:	20400440 	.word	0x20400440
  404528:	20400840 	.word	0x20400840
  40452c:	0a5a      	lsrs	r2, r3, #9
  40452e:	2a04      	cmp	r2, #4
  404530:	d95b      	bls.n	4045ea <_malloc_r+0x41e>
  404532:	2a14      	cmp	r2, #20
  404534:	f200 80ae 	bhi.w	404694 <_malloc_r+0x4c8>
  404538:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40453c:	00c9      	lsls	r1, r1, #3
  40453e:	325b      	adds	r2, #91	; 0x5b
  404540:	eb07 0c01 	add.w	ip, r7, r1
  404544:	5879      	ldr	r1, [r7, r1]
  404546:	f1ac 0c08 	sub.w	ip, ip, #8
  40454a:	458c      	cmp	ip, r1
  40454c:	f000 8088 	beq.w	404660 <_malloc_r+0x494>
  404550:	684a      	ldr	r2, [r1, #4]
  404552:	f022 0203 	bic.w	r2, r2, #3
  404556:	4293      	cmp	r3, r2
  404558:	d273      	bcs.n	404642 <_malloc_r+0x476>
  40455a:	6889      	ldr	r1, [r1, #8]
  40455c:	458c      	cmp	ip, r1
  40455e:	d1f7      	bne.n	404550 <_malloc_r+0x384>
  404560:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404564:	687b      	ldr	r3, [r7, #4]
  404566:	60e2      	str	r2, [r4, #12]
  404568:	f8c4 c008 	str.w	ip, [r4, #8]
  40456c:	6094      	str	r4, [r2, #8]
  40456e:	f8cc 400c 	str.w	r4, [ip, #12]
  404572:	e68f      	b.n	404294 <_malloc_r+0xc8>
  404574:	19a1      	adds	r1, r4, r6
  404576:	f046 0c01 	orr.w	ip, r6, #1
  40457a:	f042 0601 	orr.w	r6, r2, #1
  40457e:	f8c4 c004 	str.w	ip, [r4, #4]
  404582:	4628      	mov	r0, r5
  404584:	6179      	str	r1, [r7, #20]
  404586:	6139      	str	r1, [r7, #16]
  404588:	f8c1 e00c 	str.w	lr, [r1, #12]
  40458c:	f8c1 e008 	str.w	lr, [r1, #8]
  404590:	604e      	str	r6, [r1, #4]
  404592:	50e2      	str	r2, [r4, r3]
  404594:	f000 f9b8 	bl	404908 <__malloc_unlock>
  404598:	3408      	adds	r4, #8
  40459a:	e6dd      	b.n	404358 <_malloc_r+0x18c>
  40459c:	687b      	ldr	r3, [r7, #4]
  40459e:	e679      	b.n	404294 <_malloc_r+0xc8>
  4045a0:	f108 0801 	add.w	r8, r8, #1
  4045a4:	f018 0f03 	tst.w	r8, #3
  4045a8:	f10c 0c08 	add.w	ip, ip, #8
  4045ac:	f47f ae85 	bne.w	4042ba <_malloc_r+0xee>
  4045b0:	e02d      	b.n	40460e <_malloc_r+0x442>
  4045b2:	68dc      	ldr	r4, [r3, #12]
  4045b4:	42a3      	cmp	r3, r4
  4045b6:	bf08      	it	eq
  4045b8:	3002      	addeq	r0, #2
  4045ba:	f43f ae3e 	beq.w	40423a <_malloc_r+0x6e>
  4045be:	e6bb      	b.n	404338 <_malloc_r+0x16c>
  4045c0:	4419      	add	r1, r3
  4045c2:	461c      	mov	r4, r3
  4045c4:	684a      	ldr	r2, [r1, #4]
  4045c6:	68db      	ldr	r3, [r3, #12]
  4045c8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4045cc:	f042 0201 	orr.w	r2, r2, #1
  4045d0:	604a      	str	r2, [r1, #4]
  4045d2:	4628      	mov	r0, r5
  4045d4:	60f3      	str	r3, [r6, #12]
  4045d6:	609e      	str	r6, [r3, #8]
  4045d8:	f000 f996 	bl	404908 <__malloc_unlock>
  4045dc:	e6bc      	b.n	404358 <_malloc_r+0x18c>
  4045de:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4045e2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4045e6:	00c3      	lsls	r3, r0, #3
  4045e8:	e612      	b.n	404210 <_malloc_r+0x44>
  4045ea:	099a      	lsrs	r2, r3, #6
  4045ec:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4045f0:	00c9      	lsls	r1, r1, #3
  4045f2:	3238      	adds	r2, #56	; 0x38
  4045f4:	e7a4      	b.n	404540 <_malloc_r+0x374>
  4045f6:	42bc      	cmp	r4, r7
  4045f8:	d054      	beq.n	4046a4 <_malloc_r+0x4d8>
  4045fa:	68bc      	ldr	r4, [r7, #8]
  4045fc:	6862      	ldr	r2, [r4, #4]
  4045fe:	f022 0203 	bic.w	r2, r2, #3
  404602:	e75d      	b.n	4044c0 <_malloc_r+0x2f4>
  404604:	f859 3908 	ldr.w	r3, [r9], #-8
  404608:	4599      	cmp	r9, r3
  40460a:	f040 8086 	bne.w	40471a <_malloc_r+0x54e>
  40460e:	f010 0f03 	tst.w	r0, #3
  404612:	f100 30ff 	add.w	r0, r0, #4294967295
  404616:	d1f5      	bne.n	404604 <_malloc_r+0x438>
  404618:	687b      	ldr	r3, [r7, #4]
  40461a:	ea23 0304 	bic.w	r3, r3, r4
  40461e:	607b      	str	r3, [r7, #4]
  404620:	0064      	lsls	r4, r4, #1
  404622:	429c      	cmp	r4, r3
  404624:	f63f aec7 	bhi.w	4043b6 <_malloc_r+0x1ea>
  404628:	2c00      	cmp	r4, #0
  40462a:	f43f aec4 	beq.w	4043b6 <_malloc_r+0x1ea>
  40462e:	421c      	tst	r4, r3
  404630:	4640      	mov	r0, r8
  404632:	f47f ae3e 	bne.w	4042b2 <_malloc_r+0xe6>
  404636:	0064      	lsls	r4, r4, #1
  404638:	421c      	tst	r4, r3
  40463a:	f100 0004 	add.w	r0, r0, #4
  40463e:	d0fa      	beq.n	404636 <_malloc_r+0x46a>
  404640:	e637      	b.n	4042b2 <_malloc_r+0xe6>
  404642:	468c      	mov	ip, r1
  404644:	e78c      	b.n	404560 <_malloc_r+0x394>
  404646:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40464a:	d815      	bhi.n	404678 <_malloc_r+0x4ac>
  40464c:	0bf3      	lsrs	r3, r6, #15
  40464e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404652:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404656:	00c3      	lsls	r3, r0, #3
  404658:	e5da      	b.n	404210 <_malloc_r+0x44>
  40465a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40465e:	e6ed      	b.n	40443c <_malloc_r+0x270>
  404660:	687b      	ldr	r3, [r7, #4]
  404662:	1092      	asrs	r2, r2, #2
  404664:	2101      	movs	r1, #1
  404666:	fa01 f202 	lsl.w	r2, r1, r2
  40466a:	4313      	orrs	r3, r2
  40466c:	607b      	str	r3, [r7, #4]
  40466e:	4662      	mov	r2, ip
  404670:	e779      	b.n	404566 <_malloc_r+0x39a>
  404672:	2301      	movs	r3, #1
  404674:	6053      	str	r3, [r2, #4]
  404676:	e729      	b.n	4044cc <_malloc_r+0x300>
  404678:	f240 5254 	movw	r2, #1364	; 0x554
  40467c:	4293      	cmp	r3, r2
  40467e:	d822      	bhi.n	4046c6 <_malloc_r+0x4fa>
  404680:	0cb3      	lsrs	r3, r6, #18
  404682:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404686:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40468a:	00c3      	lsls	r3, r0, #3
  40468c:	e5c0      	b.n	404210 <_malloc_r+0x44>
  40468e:	f103 0b10 	add.w	fp, r3, #16
  404692:	e6ae      	b.n	4043f2 <_malloc_r+0x226>
  404694:	2a54      	cmp	r2, #84	; 0x54
  404696:	d829      	bhi.n	4046ec <_malloc_r+0x520>
  404698:	0b1a      	lsrs	r2, r3, #12
  40469a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40469e:	00c9      	lsls	r1, r1, #3
  4046a0:	326e      	adds	r2, #110	; 0x6e
  4046a2:	e74d      	b.n	404540 <_malloc_r+0x374>
  4046a4:	4b20      	ldr	r3, [pc, #128]	; (404728 <_malloc_r+0x55c>)
  4046a6:	6819      	ldr	r1, [r3, #0]
  4046a8:	4459      	add	r1, fp
  4046aa:	6019      	str	r1, [r3, #0]
  4046ac:	e6b2      	b.n	404414 <_malloc_r+0x248>
  4046ae:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4046b2:	2800      	cmp	r0, #0
  4046b4:	f47f aeae 	bne.w	404414 <_malloc_r+0x248>
  4046b8:	eb08 030b 	add.w	r3, r8, fp
  4046bc:	68ba      	ldr	r2, [r7, #8]
  4046be:	f043 0301 	orr.w	r3, r3, #1
  4046c2:	6053      	str	r3, [r2, #4]
  4046c4:	e6ee      	b.n	4044a4 <_malloc_r+0x2d8>
  4046c6:	207f      	movs	r0, #127	; 0x7f
  4046c8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4046cc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4046d0:	e59e      	b.n	404210 <_malloc_r+0x44>
  4046d2:	f104 0108 	add.w	r1, r4, #8
  4046d6:	4628      	mov	r0, r5
  4046d8:	9300      	str	r3, [sp, #0]
  4046da:	f002 ff99 	bl	407610 <_free_r>
  4046de:	9b00      	ldr	r3, [sp, #0]
  4046e0:	6819      	ldr	r1, [r3, #0]
  4046e2:	e6df      	b.n	4044a4 <_malloc_r+0x2d8>
  4046e4:	2001      	movs	r0, #1
  4046e6:	f04f 0900 	mov.w	r9, #0
  4046ea:	e6bc      	b.n	404466 <_malloc_r+0x29a>
  4046ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4046f0:	d805      	bhi.n	4046fe <_malloc_r+0x532>
  4046f2:	0bda      	lsrs	r2, r3, #15
  4046f4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4046f8:	00c9      	lsls	r1, r1, #3
  4046fa:	3277      	adds	r2, #119	; 0x77
  4046fc:	e720      	b.n	404540 <_malloc_r+0x374>
  4046fe:	f240 5154 	movw	r1, #1364	; 0x554
  404702:	428a      	cmp	r2, r1
  404704:	d805      	bhi.n	404712 <_malloc_r+0x546>
  404706:	0c9a      	lsrs	r2, r3, #18
  404708:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40470c:	00c9      	lsls	r1, r1, #3
  40470e:	327c      	adds	r2, #124	; 0x7c
  404710:	e716      	b.n	404540 <_malloc_r+0x374>
  404712:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404716:	227e      	movs	r2, #126	; 0x7e
  404718:	e712      	b.n	404540 <_malloc_r+0x374>
  40471a:	687b      	ldr	r3, [r7, #4]
  40471c:	e780      	b.n	404620 <_malloc_r+0x454>
  40471e:	08f0      	lsrs	r0, r6, #3
  404720:	f106 0308 	add.w	r3, r6, #8
  404724:	e600      	b.n	404328 <_malloc_r+0x15c>
  404726:	bf00      	nop
  404728:	20400b8c 	.word	0x20400b8c

0040472c <memcpy>:
  40472c:	4684      	mov	ip, r0
  40472e:	ea41 0300 	orr.w	r3, r1, r0
  404732:	f013 0303 	ands.w	r3, r3, #3
  404736:	d16d      	bne.n	404814 <memcpy+0xe8>
  404738:	3a40      	subs	r2, #64	; 0x40
  40473a:	d341      	bcc.n	4047c0 <memcpy+0x94>
  40473c:	f851 3b04 	ldr.w	r3, [r1], #4
  404740:	f840 3b04 	str.w	r3, [r0], #4
  404744:	f851 3b04 	ldr.w	r3, [r1], #4
  404748:	f840 3b04 	str.w	r3, [r0], #4
  40474c:	f851 3b04 	ldr.w	r3, [r1], #4
  404750:	f840 3b04 	str.w	r3, [r0], #4
  404754:	f851 3b04 	ldr.w	r3, [r1], #4
  404758:	f840 3b04 	str.w	r3, [r0], #4
  40475c:	f851 3b04 	ldr.w	r3, [r1], #4
  404760:	f840 3b04 	str.w	r3, [r0], #4
  404764:	f851 3b04 	ldr.w	r3, [r1], #4
  404768:	f840 3b04 	str.w	r3, [r0], #4
  40476c:	f851 3b04 	ldr.w	r3, [r1], #4
  404770:	f840 3b04 	str.w	r3, [r0], #4
  404774:	f851 3b04 	ldr.w	r3, [r1], #4
  404778:	f840 3b04 	str.w	r3, [r0], #4
  40477c:	f851 3b04 	ldr.w	r3, [r1], #4
  404780:	f840 3b04 	str.w	r3, [r0], #4
  404784:	f851 3b04 	ldr.w	r3, [r1], #4
  404788:	f840 3b04 	str.w	r3, [r0], #4
  40478c:	f851 3b04 	ldr.w	r3, [r1], #4
  404790:	f840 3b04 	str.w	r3, [r0], #4
  404794:	f851 3b04 	ldr.w	r3, [r1], #4
  404798:	f840 3b04 	str.w	r3, [r0], #4
  40479c:	f851 3b04 	ldr.w	r3, [r1], #4
  4047a0:	f840 3b04 	str.w	r3, [r0], #4
  4047a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047a8:	f840 3b04 	str.w	r3, [r0], #4
  4047ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4047b0:	f840 3b04 	str.w	r3, [r0], #4
  4047b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047b8:	f840 3b04 	str.w	r3, [r0], #4
  4047bc:	3a40      	subs	r2, #64	; 0x40
  4047be:	d2bd      	bcs.n	40473c <memcpy+0x10>
  4047c0:	3230      	adds	r2, #48	; 0x30
  4047c2:	d311      	bcc.n	4047e8 <memcpy+0xbc>
  4047c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047c8:	f840 3b04 	str.w	r3, [r0], #4
  4047cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4047d0:	f840 3b04 	str.w	r3, [r0], #4
  4047d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4047d8:	f840 3b04 	str.w	r3, [r0], #4
  4047dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4047e0:	f840 3b04 	str.w	r3, [r0], #4
  4047e4:	3a10      	subs	r2, #16
  4047e6:	d2ed      	bcs.n	4047c4 <memcpy+0x98>
  4047e8:	320c      	adds	r2, #12
  4047ea:	d305      	bcc.n	4047f8 <memcpy+0xcc>
  4047ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4047f0:	f840 3b04 	str.w	r3, [r0], #4
  4047f4:	3a04      	subs	r2, #4
  4047f6:	d2f9      	bcs.n	4047ec <memcpy+0xc0>
  4047f8:	3204      	adds	r2, #4
  4047fa:	d008      	beq.n	40480e <memcpy+0xe2>
  4047fc:	07d2      	lsls	r2, r2, #31
  4047fe:	bf1c      	itt	ne
  404800:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404804:	f800 3b01 	strbne.w	r3, [r0], #1
  404808:	d301      	bcc.n	40480e <memcpy+0xe2>
  40480a:	880b      	ldrh	r3, [r1, #0]
  40480c:	8003      	strh	r3, [r0, #0]
  40480e:	4660      	mov	r0, ip
  404810:	4770      	bx	lr
  404812:	bf00      	nop
  404814:	2a08      	cmp	r2, #8
  404816:	d313      	bcc.n	404840 <memcpy+0x114>
  404818:	078b      	lsls	r3, r1, #30
  40481a:	d08d      	beq.n	404738 <memcpy+0xc>
  40481c:	f010 0303 	ands.w	r3, r0, #3
  404820:	d08a      	beq.n	404738 <memcpy+0xc>
  404822:	f1c3 0304 	rsb	r3, r3, #4
  404826:	1ad2      	subs	r2, r2, r3
  404828:	07db      	lsls	r3, r3, #31
  40482a:	bf1c      	itt	ne
  40482c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404830:	f800 3b01 	strbne.w	r3, [r0], #1
  404834:	d380      	bcc.n	404738 <memcpy+0xc>
  404836:	f831 3b02 	ldrh.w	r3, [r1], #2
  40483a:	f820 3b02 	strh.w	r3, [r0], #2
  40483e:	e77b      	b.n	404738 <memcpy+0xc>
  404840:	3a04      	subs	r2, #4
  404842:	d3d9      	bcc.n	4047f8 <memcpy+0xcc>
  404844:	3a01      	subs	r2, #1
  404846:	f811 3b01 	ldrb.w	r3, [r1], #1
  40484a:	f800 3b01 	strb.w	r3, [r0], #1
  40484e:	d2f9      	bcs.n	404844 <memcpy+0x118>
  404850:	780b      	ldrb	r3, [r1, #0]
  404852:	7003      	strb	r3, [r0, #0]
  404854:	784b      	ldrb	r3, [r1, #1]
  404856:	7043      	strb	r3, [r0, #1]
  404858:	788b      	ldrb	r3, [r1, #2]
  40485a:	7083      	strb	r3, [r0, #2]
  40485c:	4660      	mov	r0, ip
  40485e:	4770      	bx	lr

00404860 <memset>:
  404860:	b470      	push	{r4, r5, r6}
  404862:	0786      	lsls	r6, r0, #30
  404864:	d046      	beq.n	4048f4 <memset+0x94>
  404866:	1e54      	subs	r4, r2, #1
  404868:	2a00      	cmp	r2, #0
  40486a:	d041      	beq.n	4048f0 <memset+0x90>
  40486c:	b2ca      	uxtb	r2, r1
  40486e:	4603      	mov	r3, r0
  404870:	e002      	b.n	404878 <memset+0x18>
  404872:	f114 34ff 	adds.w	r4, r4, #4294967295
  404876:	d33b      	bcc.n	4048f0 <memset+0x90>
  404878:	f803 2b01 	strb.w	r2, [r3], #1
  40487c:	079d      	lsls	r5, r3, #30
  40487e:	d1f8      	bne.n	404872 <memset+0x12>
  404880:	2c03      	cmp	r4, #3
  404882:	d92e      	bls.n	4048e2 <memset+0x82>
  404884:	b2cd      	uxtb	r5, r1
  404886:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40488a:	2c0f      	cmp	r4, #15
  40488c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404890:	d919      	bls.n	4048c6 <memset+0x66>
  404892:	f103 0210 	add.w	r2, r3, #16
  404896:	4626      	mov	r6, r4
  404898:	3e10      	subs	r6, #16
  40489a:	2e0f      	cmp	r6, #15
  40489c:	f842 5c10 	str.w	r5, [r2, #-16]
  4048a0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4048a4:	f842 5c08 	str.w	r5, [r2, #-8]
  4048a8:	f842 5c04 	str.w	r5, [r2, #-4]
  4048ac:	f102 0210 	add.w	r2, r2, #16
  4048b0:	d8f2      	bhi.n	404898 <memset+0x38>
  4048b2:	f1a4 0210 	sub.w	r2, r4, #16
  4048b6:	f022 020f 	bic.w	r2, r2, #15
  4048ba:	f004 040f 	and.w	r4, r4, #15
  4048be:	3210      	adds	r2, #16
  4048c0:	2c03      	cmp	r4, #3
  4048c2:	4413      	add	r3, r2
  4048c4:	d90d      	bls.n	4048e2 <memset+0x82>
  4048c6:	461e      	mov	r6, r3
  4048c8:	4622      	mov	r2, r4
  4048ca:	3a04      	subs	r2, #4
  4048cc:	2a03      	cmp	r2, #3
  4048ce:	f846 5b04 	str.w	r5, [r6], #4
  4048d2:	d8fa      	bhi.n	4048ca <memset+0x6a>
  4048d4:	1f22      	subs	r2, r4, #4
  4048d6:	f022 0203 	bic.w	r2, r2, #3
  4048da:	3204      	adds	r2, #4
  4048dc:	4413      	add	r3, r2
  4048de:	f004 0403 	and.w	r4, r4, #3
  4048e2:	b12c      	cbz	r4, 4048f0 <memset+0x90>
  4048e4:	b2c9      	uxtb	r1, r1
  4048e6:	441c      	add	r4, r3
  4048e8:	f803 1b01 	strb.w	r1, [r3], #1
  4048ec:	429c      	cmp	r4, r3
  4048ee:	d1fb      	bne.n	4048e8 <memset+0x88>
  4048f0:	bc70      	pop	{r4, r5, r6}
  4048f2:	4770      	bx	lr
  4048f4:	4614      	mov	r4, r2
  4048f6:	4603      	mov	r3, r0
  4048f8:	e7c2      	b.n	404880 <memset+0x20>
  4048fa:	bf00      	nop

004048fc <__malloc_lock>:
  4048fc:	4801      	ldr	r0, [pc, #4]	; (404904 <__malloc_lock+0x8>)
  4048fe:	f003 b921 	b.w	407b44 <__retarget_lock_acquire_recursive>
  404902:	bf00      	nop
  404904:	20400cbc 	.word	0x20400cbc

00404908 <__malloc_unlock>:
  404908:	4801      	ldr	r0, [pc, #4]	; (404910 <__malloc_unlock+0x8>)
  40490a:	f003 b91d 	b.w	407b48 <__retarget_lock_release_recursive>
  40490e:	bf00      	nop
  404910:	20400cbc 	.word	0x20400cbc

00404914 <printf>:
  404914:	b40f      	push	{r0, r1, r2, r3}
  404916:	b500      	push	{lr}
  404918:	4907      	ldr	r1, [pc, #28]	; (404938 <printf+0x24>)
  40491a:	b083      	sub	sp, #12
  40491c:	ab04      	add	r3, sp, #16
  40491e:	6808      	ldr	r0, [r1, #0]
  404920:	f853 2b04 	ldr.w	r2, [r3], #4
  404924:	6881      	ldr	r1, [r0, #8]
  404926:	9301      	str	r3, [sp, #4]
  404928:	f000 f9b8 	bl	404c9c <_vfprintf_r>
  40492c:	b003      	add	sp, #12
  40492e:	f85d eb04 	ldr.w	lr, [sp], #4
  404932:	b004      	add	sp, #16
  404934:	4770      	bx	lr
  404936:	bf00      	nop
  404938:	2040000c 	.word	0x2040000c

0040493c <_puts_r>:
  40493c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40493e:	4605      	mov	r5, r0
  404940:	b089      	sub	sp, #36	; 0x24
  404942:	4608      	mov	r0, r1
  404944:	460c      	mov	r4, r1
  404946:	f000 f93b 	bl	404bc0 <strlen>
  40494a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40494c:	4f21      	ldr	r7, [pc, #132]	; (4049d4 <_puts_r+0x98>)
  40494e:	9404      	str	r4, [sp, #16]
  404950:	2601      	movs	r6, #1
  404952:	1c44      	adds	r4, r0, #1
  404954:	a904      	add	r1, sp, #16
  404956:	2202      	movs	r2, #2
  404958:	9403      	str	r4, [sp, #12]
  40495a:	9005      	str	r0, [sp, #20]
  40495c:	68ac      	ldr	r4, [r5, #8]
  40495e:	9706      	str	r7, [sp, #24]
  404960:	9607      	str	r6, [sp, #28]
  404962:	9101      	str	r1, [sp, #4]
  404964:	9202      	str	r2, [sp, #8]
  404966:	b353      	cbz	r3, 4049be <_puts_r+0x82>
  404968:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40496a:	f013 0f01 	tst.w	r3, #1
  40496e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404972:	b29a      	uxth	r2, r3
  404974:	d101      	bne.n	40497a <_puts_r+0x3e>
  404976:	0590      	lsls	r0, r2, #22
  404978:	d525      	bpl.n	4049c6 <_puts_r+0x8a>
  40497a:	0491      	lsls	r1, r2, #18
  40497c:	d406      	bmi.n	40498c <_puts_r+0x50>
  40497e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404980:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  404988:	81a3      	strh	r3, [r4, #12]
  40498a:	6662      	str	r2, [r4, #100]	; 0x64
  40498c:	4628      	mov	r0, r5
  40498e:	aa01      	add	r2, sp, #4
  404990:	4621      	mov	r1, r4
  404992:	f002 ff23 	bl	4077dc <__sfvwrite_r>
  404996:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404998:	2800      	cmp	r0, #0
  40499a:	bf0c      	ite	eq
  40499c:	250a      	moveq	r5, #10
  40499e:	f04f 35ff 	movne.w	r5, #4294967295
  4049a2:	07da      	lsls	r2, r3, #31
  4049a4:	d402      	bmi.n	4049ac <_puts_r+0x70>
  4049a6:	89a3      	ldrh	r3, [r4, #12]
  4049a8:	059b      	lsls	r3, r3, #22
  4049aa:	d502      	bpl.n	4049b2 <_puts_r+0x76>
  4049ac:	4628      	mov	r0, r5
  4049ae:	b009      	add	sp, #36	; 0x24
  4049b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049b4:	f003 f8c8 	bl	407b48 <__retarget_lock_release_recursive>
  4049b8:	4628      	mov	r0, r5
  4049ba:	b009      	add	sp, #36	; 0x24
  4049bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4049be:	4628      	mov	r0, r5
  4049c0:	f002 fd84 	bl	4074cc <__sinit>
  4049c4:	e7d0      	b.n	404968 <_puts_r+0x2c>
  4049c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049c8:	f003 f8bc 	bl	407b44 <__retarget_lock_acquire_recursive>
  4049cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049d0:	b29a      	uxth	r2, r3
  4049d2:	e7d2      	b.n	40497a <_puts_r+0x3e>
  4049d4:	00409320 	.word	0x00409320

004049d8 <puts>:
  4049d8:	4b02      	ldr	r3, [pc, #8]	; (4049e4 <puts+0xc>)
  4049da:	4601      	mov	r1, r0
  4049dc:	6818      	ldr	r0, [r3, #0]
  4049de:	f7ff bfad 	b.w	40493c <_puts_r>
  4049e2:	bf00      	nop
  4049e4:	2040000c 	.word	0x2040000c

004049e8 <_sbrk_r>:
  4049e8:	b538      	push	{r3, r4, r5, lr}
  4049ea:	4c07      	ldr	r4, [pc, #28]	; (404a08 <_sbrk_r+0x20>)
  4049ec:	2300      	movs	r3, #0
  4049ee:	4605      	mov	r5, r0
  4049f0:	4608      	mov	r0, r1
  4049f2:	6023      	str	r3, [r4, #0]
  4049f4:	f7fc fb1c 	bl	401030 <_sbrk>
  4049f8:	1c43      	adds	r3, r0, #1
  4049fa:	d000      	beq.n	4049fe <_sbrk_r+0x16>
  4049fc:	bd38      	pop	{r3, r4, r5, pc}
  4049fe:	6823      	ldr	r3, [r4, #0]
  404a00:	2b00      	cmp	r3, #0
  404a02:	d0fb      	beq.n	4049fc <_sbrk_r+0x14>
  404a04:	602b      	str	r3, [r5, #0]
  404a06:	bd38      	pop	{r3, r4, r5, pc}
  404a08:	20400cd0 	.word	0x20400cd0

00404a0c <setbuf>:
  404a0c:	2900      	cmp	r1, #0
  404a0e:	bf0c      	ite	eq
  404a10:	2202      	moveq	r2, #2
  404a12:	2200      	movne	r2, #0
  404a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a18:	f000 b800 	b.w	404a1c <setvbuf>

00404a1c <setvbuf>:
  404a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404a20:	4c61      	ldr	r4, [pc, #388]	; (404ba8 <setvbuf+0x18c>)
  404a22:	6825      	ldr	r5, [r4, #0]
  404a24:	b083      	sub	sp, #12
  404a26:	4604      	mov	r4, r0
  404a28:	460f      	mov	r7, r1
  404a2a:	4690      	mov	r8, r2
  404a2c:	461e      	mov	r6, r3
  404a2e:	b115      	cbz	r5, 404a36 <setvbuf+0x1a>
  404a30:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404a32:	2b00      	cmp	r3, #0
  404a34:	d064      	beq.n	404b00 <setvbuf+0xe4>
  404a36:	f1b8 0f02 	cmp.w	r8, #2
  404a3a:	d006      	beq.n	404a4a <setvbuf+0x2e>
  404a3c:	f1b8 0f01 	cmp.w	r8, #1
  404a40:	f200 809f 	bhi.w	404b82 <setvbuf+0x166>
  404a44:	2e00      	cmp	r6, #0
  404a46:	f2c0 809c 	blt.w	404b82 <setvbuf+0x166>
  404a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404a4c:	07d8      	lsls	r0, r3, #31
  404a4e:	d534      	bpl.n	404aba <setvbuf+0x9e>
  404a50:	4621      	mov	r1, r4
  404a52:	4628      	mov	r0, r5
  404a54:	f002 fce2 	bl	40741c <_fflush_r>
  404a58:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404a5a:	b141      	cbz	r1, 404a6e <setvbuf+0x52>
  404a5c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404a60:	4299      	cmp	r1, r3
  404a62:	d002      	beq.n	404a6a <setvbuf+0x4e>
  404a64:	4628      	mov	r0, r5
  404a66:	f002 fdd3 	bl	407610 <_free_r>
  404a6a:	2300      	movs	r3, #0
  404a6c:	6323      	str	r3, [r4, #48]	; 0x30
  404a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a72:	2200      	movs	r2, #0
  404a74:	61a2      	str	r2, [r4, #24]
  404a76:	6062      	str	r2, [r4, #4]
  404a78:	061a      	lsls	r2, r3, #24
  404a7a:	d43a      	bmi.n	404af2 <setvbuf+0xd6>
  404a7c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404a80:	f023 0303 	bic.w	r3, r3, #3
  404a84:	f1b8 0f02 	cmp.w	r8, #2
  404a88:	81a3      	strh	r3, [r4, #12]
  404a8a:	d01d      	beq.n	404ac8 <setvbuf+0xac>
  404a8c:	ab01      	add	r3, sp, #4
  404a8e:	466a      	mov	r2, sp
  404a90:	4621      	mov	r1, r4
  404a92:	4628      	mov	r0, r5
  404a94:	f003 f85a 	bl	407b4c <__swhatbuf_r>
  404a98:	89a3      	ldrh	r3, [r4, #12]
  404a9a:	4318      	orrs	r0, r3
  404a9c:	81a0      	strh	r0, [r4, #12]
  404a9e:	2e00      	cmp	r6, #0
  404aa0:	d132      	bne.n	404b08 <setvbuf+0xec>
  404aa2:	9e00      	ldr	r6, [sp, #0]
  404aa4:	4630      	mov	r0, r6
  404aa6:	f7ff fb81 	bl	4041ac <malloc>
  404aaa:	4607      	mov	r7, r0
  404aac:	2800      	cmp	r0, #0
  404aae:	d06b      	beq.n	404b88 <setvbuf+0x16c>
  404ab0:	89a3      	ldrh	r3, [r4, #12]
  404ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404ab6:	81a3      	strh	r3, [r4, #12]
  404ab8:	e028      	b.n	404b0c <setvbuf+0xf0>
  404aba:	89a3      	ldrh	r3, [r4, #12]
  404abc:	0599      	lsls	r1, r3, #22
  404abe:	d4c7      	bmi.n	404a50 <setvbuf+0x34>
  404ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404ac2:	f003 f83f 	bl	407b44 <__retarget_lock_acquire_recursive>
  404ac6:	e7c3      	b.n	404a50 <setvbuf+0x34>
  404ac8:	2500      	movs	r5, #0
  404aca:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404acc:	2600      	movs	r6, #0
  404ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404ad2:	f043 0302 	orr.w	r3, r3, #2
  404ad6:	2001      	movs	r0, #1
  404ad8:	60a6      	str	r6, [r4, #8]
  404ada:	07ce      	lsls	r6, r1, #31
  404adc:	81a3      	strh	r3, [r4, #12]
  404ade:	6022      	str	r2, [r4, #0]
  404ae0:	6122      	str	r2, [r4, #16]
  404ae2:	6160      	str	r0, [r4, #20]
  404ae4:	d401      	bmi.n	404aea <setvbuf+0xce>
  404ae6:	0598      	lsls	r0, r3, #22
  404ae8:	d53e      	bpl.n	404b68 <setvbuf+0x14c>
  404aea:	4628      	mov	r0, r5
  404aec:	b003      	add	sp, #12
  404aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404af2:	6921      	ldr	r1, [r4, #16]
  404af4:	4628      	mov	r0, r5
  404af6:	f002 fd8b 	bl	407610 <_free_r>
  404afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404afe:	e7bd      	b.n	404a7c <setvbuf+0x60>
  404b00:	4628      	mov	r0, r5
  404b02:	f002 fce3 	bl	4074cc <__sinit>
  404b06:	e796      	b.n	404a36 <setvbuf+0x1a>
  404b08:	2f00      	cmp	r7, #0
  404b0a:	d0cb      	beq.n	404aa4 <setvbuf+0x88>
  404b0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404b0e:	2b00      	cmp	r3, #0
  404b10:	d033      	beq.n	404b7a <setvbuf+0x15e>
  404b12:	9b00      	ldr	r3, [sp, #0]
  404b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404b18:	6027      	str	r7, [r4, #0]
  404b1a:	429e      	cmp	r6, r3
  404b1c:	bf1c      	itt	ne
  404b1e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404b22:	81a2      	strhne	r2, [r4, #12]
  404b24:	f1b8 0f01 	cmp.w	r8, #1
  404b28:	bf04      	itt	eq
  404b2a:	f042 0201 	orreq.w	r2, r2, #1
  404b2e:	81a2      	strheq	r2, [r4, #12]
  404b30:	b292      	uxth	r2, r2
  404b32:	f012 0308 	ands.w	r3, r2, #8
  404b36:	6127      	str	r7, [r4, #16]
  404b38:	6166      	str	r6, [r4, #20]
  404b3a:	d00e      	beq.n	404b5a <setvbuf+0x13e>
  404b3c:	07d1      	lsls	r1, r2, #31
  404b3e:	d51a      	bpl.n	404b76 <setvbuf+0x15a>
  404b40:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b42:	4276      	negs	r6, r6
  404b44:	2300      	movs	r3, #0
  404b46:	f015 0501 	ands.w	r5, r5, #1
  404b4a:	61a6      	str	r6, [r4, #24]
  404b4c:	60a3      	str	r3, [r4, #8]
  404b4e:	d009      	beq.n	404b64 <setvbuf+0x148>
  404b50:	2500      	movs	r5, #0
  404b52:	4628      	mov	r0, r5
  404b54:	b003      	add	sp, #12
  404b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b5a:	60a3      	str	r3, [r4, #8]
  404b5c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404b5e:	f015 0501 	ands.w	r5, r5, #1
  404b62:	d1f5      	bne.n	404b50 <setvbuf+0x134>
  404b64:	0593      	lsls	r3, r2, #22
  404b66:	d4c0      	bmi.n	404aea <setvbuf+0xce>
  404b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404b6a:	f002 ffed 	bl	407b48 <__retarget_lock_release_recursive>
  404b6e:	4628      	mov	r0, r5
  404b70:	b003      	add	sp, #12
  404b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404b76:	60a6      	str	r6, [r4, #8]
  404b78:	e7f0      	b.n	404b5c <setvbuf+0x140>
  404b7a:	4628      	mov	r0, r5
  404b7c:	f002 fca6 	bl	4074cc <__sinit>
  404b80:	e7c7      	b.n	404b12 <setvbuf+0xf6>
  404b82:	f04f 35ff 	mov.w	r5, #4294967295
  404b86:	e7b0      	b.n	404aea <setvbuf+0xce>
  404b88:	f8dd 9000 	ldr.w	r9, [sp]
  404b8c:	45b1      	cmp	r9, r6
  404b8e:	d004      	beq.n	404b9a <setvbuf+0x17e>
  404b90:	4648      	mov	r0, r9
  404b92:	f7ff fb0b 	bl	4041ac <malloc>
  404b96:	4607      	mov	r7, r0
  404b98:	b920      	cbnz	r0, 404ba4 <setvbuf+0x188>
  404b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404b9e:	f04f 35ff 	mov.w	r5, #4294967295
  404ba2:	e792      	b.n	404aca <setvbuf+0xae>
  404ba4:	464e      	mov	r6, r9
  404ba6:	e783      	b.n	404ab0 <setvbuf+0x94>
  404ba8:	2040000c 	.word	0x2040000c
	...

00404bc0 <strlen>:
  404bc0:	f890 f000 	pld	[r0]
  404bc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404bc8:	f020 0107 	bic.w	r1, r0, #7
  404bcc:	f06f 0c00 	mvn.w	ip, #0
  404bd0:	f010 0407 	ands.w	r4, r0, #7
  404bd4:	f891 f020 	pld	[r1, #32]
  404bd8:	f040 8049 	bne.w	404c6e <strlen+0xae>
  404bdc:	f04f 0400 	mov.w	r4, #0
  404be0:	f06f 0007 	mvn.w	r0, #7
  404be4:	e9d1 2300 	ldrd	r2, r3, [r1]
  404be8:	f891 f040 	pld	[r1, #64]	; 0x40
  404bec:	f100 0008 	add.w	r0, r0, #8
  404bf0:	fa82 f24c 	uadd8	r2, r2, ip
  404bf4:	faa4 f28c 	sel	r2, r4, ip
  404bf8:	fa83 f34c 	uadd8	r3, r3, ip
  404bfc:	faa2 f38c 	sel	r3, r2, ip
  404c00:	bb4b      	cbnz	r3, 404c56 <strlen+0x96>
  404c02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404c06:	fa82 f24c 	uadd8	r2, r2, ip
  404c0a:	f100 0008 	add.w	r0, r0, #8
  404c0e:	faa4 f28c 	sel	r2, r4, ip
  404c12:	fa83 f34c 	uadd8	r3, r3, ip
  404c16:	faa2 f38c 	sel	r3, r2, ip
  404c1a:	b9e3      	cbnz	r3, 404c56 <strlen+0x96>
  404c1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404c20:	fa82 f24c 	uadd8	r2, r2, ip
  404c24:	f100 0008 	add.w	r0, r0, #8
  404c28:	faa4 f28c 	sel	r2, r4, ip
  404c2c:	fa83 f34c 	uadd8	r3, r3, ip
  404c30:	faa2 f38c 	sel	r3, r2, ip
  404c34:	b97b      	cbnz	r3, 404c56 <strlen+0x96>
  404c36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404c3a:	f101 0120 	add.w	r1, r1, #32
  404c3e:	fa82 f24c 	uadd8	r2, r2, ip
  404c42:	f100 0008 	add.w	r0, r0, #8
  404c46:	faa4 f28c 	sel	r2, r4, ip
  404c4a:	fa83 f34c 	uadd8	r3, r3, ip
  404c4e:	faa2 f38c 	sel	r3, r2, ip
  404c52:	2b00      	cmp	r3, #0
  404c54:	d0c6      	beq.n	404be4 <strlen+0x24>
  404c56:	2a00      	cmp	r2, #0
  404c58:	bf04      	itt	eq
  404c5a:	3004      	addeq	r0, #4
  404c5c:	461a      	moveq	r2, r3
  404c5e:	ba12      	rev	r2, r2
  404c60:	fab2 f282 	clz	r2, r2
  404c64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404c68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404c6c:	4770      	bx	lr
  404c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404c72:	f004 0503 	and.w	r5, r4, #3
  404c76:	f1c4 0000 	rsb	r0, r4, #0
  404c7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404c7e:	f014 0f04 	tst.w	r4, #4
  404c82:	f891 f040 	pld	[r1, #64]	; 0x40
  404c86:	fa0c f505 	lsl.w	r5, ip, r5
  404c8a:	ea62 0205 	orn	r2, r2, r5
  404c8e:	bf1c      	itt	ne
  404c90:	ea63 0305 	ornne	r3, r3, r5
  404c94:	4662      	movne	r2, ip
  404c96:	f04f 0400 	mov.w	r4, #0
  404c9a:	e7a9      	b.n	404bf0 <strlen+0x30>

00404c9c <_vfprintf_r>:
  404c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ca0:	b0c1      	sub	sp, #260	; 0x104
  404ca2:	461d      	mov	r5, r3
  404ca4:	468a      	mov	sl, r1
  404ca6:	4691      	mov	r9, r2
  404ca8:	4604      	mov	r4, r0
  404caa:	9008      	str	r0, [sp, #32]
  404cac:	f002 ff38 	bl	407b20 <_localeconv_r>
  404cb0:	6803      	ldr	r3, [r0, #0]
  404cb2:	9315      	str	r3, [sp, #84]	; 0x54
  404cb4:	4618      	mov	r0, r3
  404cb6:	f7ff ff83 	bl	404bc0 <strlen>
  404cba:	950e      	str	r5, [sp, #56]	; 0x38
  404cbc:	9014      	str	r0, [sp, #80]	; 0x50
  404cbe:	b11c      	cbz	r4, 404cc8 <_vfprintf_r+0x2c>
  404cc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404cc2:	2b00      	cmp	r3, #0
  404cc4:	f000 825f 	beq.w	405186 <_vfprintf_r+0x4ea>
  404cc8:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404ccc:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  404cd0:	f013 0f01 	tst.w	r3, #1
  404cd4:	b293      	uxth	r3, r2
  404cd6:	d102      	bne.n	404cde <_vfprintf_r+0x42>
  404cd8:	0599      	lsls	r1, r3, #22
  404cda:	f140 8275 	bpl.w	4051c8 <_vfprintf_r+0x52c>
  404cde:	049f      	lsls	r7, r3, #18
  404ce0:	d40a      	bmi.n	404cf8 <_vfprintf_r+0x5c>
  404ce2:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  404ce6:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  404cea:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404cee:	f8aa 300c 	strh.w	r3, [sl, #12]
  404cf2:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  404cf6:	b29b      	uxth	r3, r3
  404cf8:	071e      	lsls	r6, r3, #28
  404cfa:	f140 8223 	bpl.w	405144 <_vfprintf_r+0x4a8>
  404cfe:	f8da 2010 	ldr.w	r2, [sl, #16]
  404d02:	2a00      	cmp	r2, #0
  404d04:	f000 821e 	beq.w	405144 <_vfprintf_r+0x4a8>
  404d08:	f003 021a 	and.w	r2, r3, #26
  404d0c:	2a0a      	cmp	r2, #10
  404d0e:	f000 823e 	beq.w	40518e <_vfprintf_r+0x4f2>
  404d12:	2300      	movs	r3, #0
  404d14:	4618      	mov	r0, r3
  404d16:	9311      	str	r3, [sp, #68]	; 0x44
  404d18:	9313      	str	r3, [sp, #76]	; 0x4c
  404d1a:	9312      	str	r3, [sp, #72]	; 0x48
  404d1c:	9325      	str	r3, [sp, #148]	; 0x94
  404d1e:	9324      	str	r3, [sp, #144]	; 0x90
  404d20:	9318      	str	r3, [sp, #96]	; 0x60
  404d22:	9319      	str	r3, [sp, #100]	; 0x64
  404d24:	930b      	str	r3, [sp, #44]	; 0x2c
  404d26:	ab30      	add	r3, sp, #192	; 0xc0
  404d28:	9323      	str	r3, [sp, #140]	; 0x8c
  404d2a:	4698      	mov	r8, r3
  404d2c:	9016      	str	r0, [sp, #88]	; 0x58
  404d2e:	9017      	str	r0, [sp, #92]	; 0x5c
  404d30:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  404d34:	f899 3000 	ldrb.w	r3, [r9]
  404d38:	464c      	mov	r4, r9
  404d3a:	b1eb      	cbz	r3, 404d78 <_vfprintf_r+0xdc>
  404d3c:	2b25      	cmp	r3, #37	; 0x25
  404d3e:	d102      	bne.n	404d46 <_vfprintf_r+0xaa>
  404d40:	e01a      	b.n	404d78 <_vfprintf_r+0xdc>
  404d42:	2b25      	cmp	r3, #37	; 0x25
  404d44:	d003      	beq.n	404d4e <_vfprintf_r+0xb2>
  404d46:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404d4a:	2b00      	cmp	r3, #0
  404d4c:	d1f9      	bne.n	404d42 <_vfprintf_r+0xa6>
  404d4e:	eba4 0509 	sub.w	r5, r4, r9
  404d52:	b18d      	cbz	r5, 404d78 <_vfprintf_r+0xdc>
  404d54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d56:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404d58:	f8c8 9000 	str.w	r9, [r8]
  404d5c:	3301      	adds	r3, #1
  404d5e:	442a      	add	r2, r5
  404d60:	2b07      	cmp	r3, #7
  404d62:	f8c8 5004 	str.w	r5, [r8, #4]
  404d66:	9225      	str	r2, [sp, #148]	; 0x94
  404d68:	9324      	str	r3, [sp, #144]	; 0x90
  404d6a:	f300 8201 	bgt.w	405170 <_vfprintf_r+0x4d4>
  404d6e:	f108 0808 	add.w	r8, r8, #8
  404d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404d74:	442b      	add	r3, r5
  404d76:	930b      	str	r3, [sp, #44]	; 0x2c
  404d78:	7823      	ldrb	r3, [r4, #0]
  404d7a:	2b00      	cmp	r3, #0
  404d7c:	f000 83f0 	beq.w	405560 <_vfprintf_r+0x8c4>
  404d80:	2300      	movs	r3, #0
  404d82:	461a      	mov	r2, r3
  404d84:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404d88:	4619      	mov	r1, r3
  404d8a:	930c      	str	r3, [sp, #48]	; 0x30
  404d8c:	469b      	mov	fp, r3
  404d8e:	7866      	ldrb	r6, [r4, #1]
  404d90:	f04f 33ff 	mov.w	r3, #4294967295
  404d94:	f104 0901 	add.w	r9, r4, #1
  404d98:	9309      	str	r3, [sp, #36]	; 0x24
  404d9a:	f109 0901 	add.w	r9, r9, #1
  404d9e:	f1a6 0320 	sub.w	r3, r6, #32
  404da2:	2b58      	cmp	r3, #88	; 0x58
  404da4:	f200 83bf 	bhi.w	405526 <_vfprintf_r+0x88a>
  404da8:	e8df f013 	tbh	[pc, r3, lsl #1]
  404dac:	03bd02e0 	.word	0x03bd02e0
  404db0:	034f03bd 	.word	0x034f03bd
  404db4:	03bd03bd 	.word	0x03bd03bd
  404db8:	03bd03bd 	.word	0x03bd03bd
  404dbc:	03bd03bd 	.word	0x03bd03bd
  404dc0:	03080354 	.word	0x03080354
  404dc4:	021a03bd 	.word	0x021a03bd
  404dc8:	03bd02e8 	.word	0x03bd02e8
  404dcc:	033a0303 	.word	0x033a0303
  404dd0:	033a033a 	.word	0x033a033a
  404dd4:	033a033a 	.word	0x033a033a
  404dd8:	033a033a 	.word	0x033a033a
  404ddc:	033a033a 	.word	0x033a033a
  404de0:	03bd03bd 	.word	0x03bd03bd
  404de4:	03bd03bd 	.word	0x03bd03bd
  404de8:	03bd03bd 	.word	0x03bd03bd
  404dec:	03bd03bd 	.word	0x03bd03bd
  404df0:	03bd03bd 	.word	0x03bd03bd
  404df4:	03620349 	.word	0x03620349
  404df8:	036203bd 	.word	0x036203bd
  404dfc:	03bd03bd 	.word	0x03bd03bd
  404e00:	03bd03bd 	.word	0x03bd03bd
  404e04:	03bd03a2 	.word	0x03bd03a2
  404e08:	006f03bd 	.word	0x006f03bd
  404e0c:	03bd03bd 	.word	0x03bd03bd
  404e10:	03bd03bd 	.word	0x03bd03bd
  404e14:	005903bd 	.word	0x005903bd
  404e18:	03bd03bd 	.word	0x03bd03bd
  404e1c:	03bd031e 	.word	0x03bd031e
  404e20:	03bd03bd 	.word	0x03bd03bd
  404e24:	03bd03bd 	.word	0x03bd03bd
  404e28:	03bd03bd 	.word	0x03bd03bd
  404e2c:	03bd03bd 	.word	0x03bd03bd
  404e30:	032403bd 	.word	0x032403bd
  404e34:	03620273 	.word	0x03620273
  404e38:	03620362 	.word	0x03620362
  404e3c:	027302b7 	.word	0x027302b7
  404e40:	03bd03bd 	.word	0x03bd03bd
  404e44:	03bd02bc 	.word	0x03bd02bc
  404e48:	007102c9 	.word	0x007102c9
  404e4c:	0247030d 	.word	0x0247030d
  404e50:	025203bd 	.word	0x025203bd
  404e54:	005b03bd 	.word	0x005b03bd
  404e58:	03bd03bd 	.word	0x03bd03bd
  404e5c:	021f      	.short	0x021f
  404e5e:	f04b 0b10 	orr.w	fp, fp, #16
  404e62:	f01b 0f20 	tst.w	fp, #32
  404e66:	f040 8353 	bne.w	405510 <_vfprintf_r+0x874>
  404e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404e6c:	f01b 0f10 	tst.w	fp, #16
  404e70:	4613      	mov	r3, r2
  404e72:	f040 85b4 	bne.w	4059de <_vfprintf_r+0xd42>
  404e76:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404e7a:	f000 85b0 	beq.w	4059de <_vfprintf_r+0xd42>
  404e7e:	8814      	ldrh	r4, [r2, #0]
  404e80:	3204      	adds	r2, #4
  404e82:	2500      	movs	r5, #0
  404e84:	2301      	movs	r3, #1
  404e86:	920e      	str	r2, [sp, #56]	; 0x38
  404e88:	e014      	b.n	404eb4 <_vfprintf_r+0x218>
  404e8a:	f04b 0b10 	orr.w	fp, fp, #16
  404e8e:	f01b 0320 	ands.w	r3, fp, #32
  404e92:	f040 8332 	bne.w	4054fa <_vfprintf_r+0x85e>
  404e96:	f01b 0210 	ands.w	r2, fp, #16
  404e9a:	f040 8589 	bne.w	4059b0 <_vfprintf_r+0xd14>
  404e9e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404ea2:	f000 8585 	beq.w	4059b0 <_vfprintf_r+0xd14>
  404ea6:	990e      	ldr	r1, [sp, #56]	; 0x38
  404ea8:	4613      	mov	r3, r2
  404eaa:	460a      	mov	r2, r1
  404eac:	3204      	adds	r2, #4
  404eae:	880c      	ldrh	r4, [r1, #0]
  404eb0:	920e      	str	r2, [sp, #56]	; 0x38
  404eb2:	2500      	movs	r5, #0
  404eb4:	f04f 0a00 	mov.w	sl, #0
  404eb8:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ebe:	1c4a      	adds	r2, r1, #1
  404ec0:	f000 820b 	beq.w	4052da <_vfprintf_r+0x63e>
  404ec4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404ec8:	9206      	str	r2, [sp, #24]
  404eca:	ea54 0205 	orrs.w	r2, r4, r5
  404ece:	f040 820a 	bne.w	4052e6 <_vfprintf_r+0x64a>
  404ed2:	2900      	cmp	r1, #0
  404ed4:	f040 846f 	bne.w	4057b6 <_vfprintf_r+0xb1a>
  404ed8:	2b00      	cmp	r3, #0
  404eda:	f040 852d 	bne.w	405938 <_vfprintf_r+0xc9c>
  404ede:	f01b 0301 	ands.w	r3, fp, #1
  404ee2:	930d      	str	r3, [sp, #52]	; 0x34
  404ee4:	f000 8668 	beq.w	405bb8 <_vfprintf_r+0xf1c>
  404ee8:	af40      	add	r7, sp, #256	; 0x100
  404eea:	2330      	movs	r3, #48	; 0x30
  404eec:	f807 3d41 	strb.w	r3, [r7, #-65]!
  404ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ef2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404ef4:	4293      	cmp	r3, r2
  404ef6:	bfb8      	it	lt
  404ef8:	4613      	movlt	r3, r2
  404efa:	9307      	str	r3, [sp, #28]
  404efc:	2300      	movs	r3, #0
  404efe:	9310      	str	r3, [sp, #64]	; 0x40
  404f00:	f1ba 0f00 	cmp.w	sl, #0
  404f04:	d002      	beq.n	404f0c <_vfprintf_r+0x270>
  404f06:	9b07      	ldr	r3, [sp, #28]
  404f08:	3301      	adds	r3, #1
  404f0a:	9307      	str	r3, [sp, #28]
  404f0c:	9b06      	ldr	r3, [sp, #24]
  404f0e:	f013 0302 	ands.w	r3, r3, #2
  404f12:	930f      	str	r3, [sp, #60]	; 0x3c
  404f14:	d002      	beq.n	404f1c <_vfprintf_r+0x280>
  404f16:	9b07      	ldr	r3, [sp, #28]
  404f18:	3302      	adds	r3, #2
  404f1a:	9307      	str	r3, [sp, #28]
  404f1c:	9b06      	ldr	r3, [sp, #24]
  404f1e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404f22:	f040 831b 	bne.w	40555c <_vfprintf_r+0x8c0>
  404f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f28:	9a07      	ldr	r2, [sp, #28]
  404f2a:	eba3 0b02 	sub.w	fp, r3, r2
  404f2e:	f1bb 0f00 	cmp.w	fp, #0
  404f32:	f340 8313 	ble.w	40555c <_vfprintf_r+0x8c0>
  404f36:	f1bb 0f10 	cmp.w	fp, #16
  404f3a:	9925      	ldr	r1, [sp, #148]	; 0x94
  404f3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404f3e:	dd28      	ble.n	404f92 <_vfprintf_r+0x2f6>
  404f40:	4643      	mov	r3, r8
  404f42:	2410      	movs	r4, #16
  404f44:	46a8      	mov	r8, r5
  404f46:	f8dd a020 	ldr.w	sl, [sp, #32]
  404f4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404f4c:	e006      	b.n	404f5c <_vfprintf_r+0x2c0>
  404f4e:	f1ab 0b10 	sub.w	fp, fp, #16
  404f52:	f1bb 0f10 	cmp.w	fp, #16
  404f56:	f103 0308 	add.w	r3, r3, #8
  404f5a:	dd18      	ble.n	404f8e <_vfprintf_r+0x2f2>
  404f5c:	3201      	adds	r2, #1
  404f5e:	48b9      	ldr	r0, [pc, #740]	; (405244 <_vfprintf_r+0x5a8>)
  404f60:	9224      	str	r2, [sp, #144]	; 0x90
  404f62:	3110      	adds	r1, #16
  404f64:	2a07      	cmp	r2, #7
  404f66:	9125      	str	r1, [sp, #148]	; 0x94
  404f68:	e883 0011 	stmia.w	r3, {r0, r4}
  404f6c:	ddef      	ble.n	404f4e <_vfprintf_r+0x2b2>
  404f6e:	aa23      	add	r2, sp, #140	; 0x8c
  404f70:	4629      	mov	r1, r5
  404f72:	4650      	mov	r0, sl
  404f74:	f003 fc3c 	bl	4087f0 <__sprint_r>
  404f78:	2800      	cmp	r0, #0
  404f7a:	f040 836a 	bne.w	405652 <_vfprintf_r+0x9b6>
  404f7e:	f1ab 0b10 	sub.w	fp, fp, #16
  404f82:	f1bb 0f10 	cmp.w	fp, #16
  404f86:	9925      	ldr	r1, [sp, #148]	; 0x94
  404f88:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404f8a:	ab30      	add	r3, sp, #192	; 0xc0
  404f8c:	dce6      	bgt.n	404f5c <_vfprintf_r+0x2c0>
  404f8e:	4645      	mov	r5, r8
  404f90:	4698      	mov	r8, r3
  404f92:	3201      	adds	r2, #1
  404f94:	4bab      	ldr	r3, [pc, #684]	; (405244 <_vfprintf_r+0x5a8>)
  404f96:	9224      	str	r2, [sp, #144]	; 0x90
  404f98:	eb0b 0401 	add.w	r4, fp, r1
  404f9c:	2a07      	cmp	r2, #7
  404f9e:	9425      	str	r4, [sp, #148]	; 0x94
  404fa0:	e888 0808 	stmia.w	r8, {r3, fp}
  404fa4:	f300 84cd 	bgt.w	405942 <_vfprintf_r+0xca6>
  404fa8:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404fac:	f108 0808 	add.w	r8, r8, #8
  404fb0:	f1ba 0f00 	cmp.w	sl, #0
  404fb4:	d00e      	beq.n	404fd4 <_vfprintf_r+0x338>
  404fb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fb8:	3301      	adds	r3, #1
  404fba:	3401      	adds	r4, #1
  404fbc:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404fc0:	2201      	movs	r2, #1
  404fc2:	2b07      	cmp	r3, #7
  404fc4:	9425      	str	r4, [sp, #148]	; 0x94
  404fc6:	9324      	str	r3, [sp, #144]	; 0x90
  404fc8:	e888 0006 	stmia.w	r8, {r1, r2}
  404fcc:	f300 840a 	bgt.w	4057e4 <_vfprintf_r+0xb48>
  404fd0:	f108 0808 	add.w	r8, r8, #8
  404fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404fd6:	b16b      	cbz	r3, 404ff4 <_vfprintf_r+0x358>
  404fd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404fda:	3301      	adds	r3, #1
  404fdc:	3402      	adds	r4, #2
  404fde:	a91c      	add	r1, sp, #112	; 0x70
  404fe0:	2202      	movs	r2, #2
  404fe2:	2b07      	cmp	r3, #7
  404fe4:	9425      	str	r4, [sp, #148]	; 0x94
  404fe6:	9324      	str	r3, [sp, #144]	; 0x90
  404fe8:	e888 0006 	stmia.w	r8, {r1, r2}
  404fec:	f300 8406 	bgt.w	4057fc <_vfprintf_r+0xb60>
  404ff0:	f108 0808 	add.w	r8, r8, #8
  404ff4:	2d80      	cmp	r5, #128	; 0x80
  404ff6:	f000 832e 	beq.w	405656 <_vfprintf_r+0x9ba>
  404ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ffc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404ffe:	eba3 0a02 	sub.w	sl, r3, r2
  405002:	f1ba 0f00 	cmp.w	sl, #0
  405006:	dd3b      	ble.n	405080 <_vfprintf_r+0x3e4>
  405008:	f1ba 0f10 	cmp.w	sl, #16
  40500c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40500e:	4d8e      	ldr	r5, [pc, #568]	; (405248 <_vfprintf_r+0x5ac>)
  405010:	dd2b      	ble.n	40506a <_vfprintf_r+0x3ce>
  405012:	4642      	mov	r2, r8
  405014:	4621      	mov	r1, r4
  405016:	46b0      	mov	r8, r6
  405018:	f04f 0b10 	mov.w	fp, #16
  40501c:	462e      	mov	r6, r5
  40501e:	9c08      	ldr	r4, [sp, #32]
  405020:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405022:	e006      	b.n	405032 <_vfprintf_r+0x396>
  405024:	f1aa 0a10 	sub.w	sl, sl, #16
  405028:	f1ba 0f10 	cmp.w	sl, #16
  40502c:	f102 0208 	add.w	r2, r2, #8
  405030:	dd17      	ble.n	405062 <_vfprintf_r+0x3c6>
  405032:	3301      	adds	r3, #1
  405034:	3110      	adds	r1, #16
  405036:	2b07      	cmp	r3, #7
  405038:	9125      	str	r1, [sp, #148]	; 0x94
  40503a:	9324      	str	r3, [sp, #144]	; 0x90
  40503c:	e882 0840 	stmia.w	r2, {r6, fp}
  405040:	ddf0      	ble.n	405024 <_vfprintf_r+0x388>
  405042:	aa23      	add	r2, sp, #140	; 0x8c
  405044:	4629      	mov	r1, r5
  405046:	4620      	mov	r0, r4
  405048:	f003 fbd2 	bl	4087f0 <__sprint_r>
  40504c:	2800      	cmp	r0, #0
  40504e:	f040 8300 	bne.w	405652 <_vfprintf_r+0x9b6>
  405052:	f1aa 0a10 	sub.w	sl, sl, #16
  405056:	f1ba 0f10 	cmp.w	sl, #16
  40505a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40505c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40505e:	aa30      	add	r2, sp, #192	; 0xc0
  405060:	dce7      	bgt.n	405032 <_vfprintf_r+0x396>
  405062:	4635      	mov	r5, r6
  405064:	460c      	mov	r4, r1
  405066:	4646      	mov	r6, r8
  405068:	4690      	mov	r8, r2
  40506a:	3301      	adds	r3, #1
  40506c:	4454      	add	r4, sl
  40506e:	2b07      	cmp	r3, #7
  405070:	9425      	str	r4, [sp, #148]	; 0x94
  405072:	9324      	str	r3, [sp, #144]	; 0x90
  405074:	e888 0420 	stmia.w	r8, {r5, sl}
  405078:	f300 83a9 	bgt.w	4057ce <_vfprintf_r+0xb32>
  40507c:	f108 0808 	add.w	r8, r8, #8
  405080:	9b06      	ldr	r3, [sp, #24]
  405082:	05db      	lsls	r3, r3, #23
  405084:	f100 8285 	bmi.w	405592 <_vfprintf_r+0x8f6>
  405088:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40508a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40508c:	f8c8 7000 	str.w	r7, [r8]
  405090:	3301      	adds	r3, #1
  405092:	440c      	add	r4, r1
  405094:	2b07      	cmp	r3, #7
  405096:	9425      	str	r4, [sp, #148]	; 0x94
  405098:	f8c8 1004 	str.w	r1, [r8, #4]
  40509c:	9324      	str	r3, [sp, #144]	; 0x90
  40509e:	f300 8375 	bgt.w	40578c <_vfprintf_r+0xaf0>
  4050a2:	f108 0808 	add.w	r8, r8, #8
  4050a6:	9b06      	ldr	r3, [sp, #24]
  4050a8:	0759      	lsls	r1, r3, #29
  4050aa:	d53b      	bpl.n	405124 <_vfprintf_r+0x488>
  4050ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4050ae:	9a07      	ldr	r2, [sp, #28]
  4050b0:	1a9d      	subs	r5, r3, r2
  4050b2:	2d00      	cmp	r5, #0
  4050b4:	dd36      	ble.n	405124 <_vfprintf_r+0x488>
  4050b6:	2d10      	cmp	r5, #16
  4050b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050ba:	dd21      	ble.n	405100 <_vfprintf_r+0x464>
  4050bc:	2610      	movs	r6, #16
  4050be:	9f08      	ldr	r7, [sp, #32]
  4050c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4050c4:	e004      	b.n	4050d0 <_vfprintf_r+0x434>
  4050c6:	3d10      	subs	r5, #16
  4050c8:	2d10      	cmp	r5, #16
  4050ca:	f108 0808 	add.w	r8, r8, #8
  4050ce:	dd17      	ble.n	405100 <_vfprintf_r+0x464>
  4050d0:	3301      	adds	r3, #1
  4050d2:	4a5c      	ldr	r2, [pc, #368]	; (405244 <_vfprintf_r+0x5a8>)
  4050d4:	9324      	str	r3, [sp, #144]	; 0x90
  4050d6:	3410      	adds	r4, #16
  4050d8:	2b07      	cmp	r3, #7
  4050da:	9425      	str	r4, [sp, #148]	; 0x94
  4050dc:	e888 0044 	stmia.w	r8, {r2, r6}
  4050e0:	ddf1      	ble.n	4050c6 <_vfprintf_r+0x42a>
  4050e2:	aa23      	add	r2, sp, #140	; 0x8c
  4050e4:	4651      	mov	r1, sl
  4050e6:	4638      	mov	r0, r7
  4050e8:	f003 fb82 	bl	4087f0 <__sprint_r>
  4050ec:	2800      	cmp	r0, #0
  4050ee:	f040 823f 	bne.w	405570 <_vfprintf_r+0x8d4>
  4050f2:	3d10      	subs	r5, #16
  4050f4:	2d10      	cmp	r5, #16
  4050f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4050f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050fa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4050fe:	dce7      	bgt.n	4050d0 <_vfprintf_r+0x434>
  405100:	3301      	adds	r3, #1
  405102:	4a50      	ldr	r2, [pc, #320]	; (405244 <_vfprintf_r+0x5a8>)
  405104:	9324      	str	r3, [sp, #144]	; 0x90
  405106:	442c      	add	r4, r5
  405108:	2b07      	cmp	r3, #7
  40510a:	9425      	str	r4, [sp, #148]	; 0x94
  40510c:	e888 0024 	stmia.w	r8, {r2, r5}
  405110:	dd08      	ble.n	405124 <_vfprintf_r+0x488>
  405112:	aa23      	add	r2, sp, #140	; 0x8c
  405114:	990a      	ldr	r1, [sp, #40]	; 0x28
  405116:	9808      	ldr	r0, [sp, #32]
  405118:	f003 fb6a 	bl	4087f0 <__sprint_r>
  40511c:	2800      	cmp	r0, #0
  40511e:	f040 8347 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405122:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405128:	9907      	ldr	r1, [sp, #28]
  40512a:	428a      	cmp	r2, r1
  40512c:	bfac      	ite	ge
  40512e:	189b      	addge	r3, r3, r2
  405130:	185b      	addlt	r3, r3, r1
  405132:	930b      	str	r3, [sp, #44]	; 0x2c
  405134:	2c00      	cmp	r4, #0
  405136:	f040 8333 	bne.w	4057a0 <_vfprintf_r+0xb04>
  40513a:	2300      	movs	r3, #0
  40513c:	9324      	str	r3, [sp, #144]	; 0x90
  40513e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405142:	e5f7      	b.n	404d34 <_vfprintf_r+0x98>
  405144:	4651      	mov	r1, sl
  405146:	9808      	ldr	r0, [sp, #32]
  405148:	f001 f896 	bl	406278 <__swsetup_r>
  40514c:	2800      	cmp	r0, #0
  40514e:	d038      	beq.n	4051c2 <_vfprintf_r+0x526>
  405150:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  405154:	07dd      	lsls	r5, r3, #31
  405156:	d404      	bmi.n	405162 <_vfprintf_r+0x4c6>
  405158:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40515c:	059c      	lsls	r4, r3, #22
  40515e:	f140 85ca 	bpl.w	405cf6 <_vfprintf_r+0x105a>
  405162:	f04f 33ff 	mov.w	r3, #4294967295
  405166:	930b      	str	r3, [sp, #44]	; 0x2c
  405168:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40516a:	b041      	add	sp, #260	; 0x104
  40516c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405170:	aa23      	add	r2, sp, #140	; 0x8c
  405172:	990a      	ldr	r1, [sp, #40]	; 0x28
  405174:	9808      	ldr	r0, [sp, #32]
  405176:	f003 fb3b 	bl	4087f0 <__sprint_r>
  40517a:	2800      	cmp	r0, #0
  40517c:	f040 8318 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405180:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405184:	e5f5      	b.n	404d72 <_vfprintf_r+0xd6>
  405186:	9808      	ldr	r0, [sp, #32]
  405188:	f002 f9a0 	bl	4074cc <__sinit>
  40518c:	e59c      	b.n	404cc8 <_vfprintf_r+0x2c>
  40518e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  405192:	2a00      	cmp	r2, #0
  405194:	f6ff adbd 	blt.w	404d12 <_vfprintf_r+0x76>
  405198:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  40519c:	07d0      	lsls	r0, r2, #31
  40519e:	d405      	bmi.n	4051ac <_vfprintf_r+0x510>
  4051a0:	0599      	lsls	r1, r3, #22
  4051a2:	d403      	bmi.n	4051ac <_vfprintf_r+0x510>
  4051a4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4051a8:	f002 fcce 	bl	407b48 <__retarget_lock_release_recursive>
  4051ac:	462b      	mov	r3, r5
  4051ae:	464a      	mov	r2, r9
  4051b0:	4651      	mov	r1, sl
  4051b2:	9808      	ldr	r0, [sp, #32]
  4051b4:	f001 f81e 	bl	4061f4 <__sbprintf>
  4051b8:	900b      	str	r0, [sp, #44]	; 0x2c
  4051ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4051bc:	b041      	add	sp, #260	; 0x104
  4051be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051c2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4051c6:	e59f      	b.n	404d08 <_vfprintf_r+0x6c>
  4051c8:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4051cc:	f002 fcba 	bl	407b44 <__retarget_lock_acquire_recursive>
  4051d0:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  4051d4:	b293      	uxth	r3, r2
  4051d6:	e582      	b.n	404cde <_vfprintf_r+0x42>
  4051d8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051da:	930e      	str	r3, [sp, #56]	; 0x38
  4051dc:	4240      	negs	r0, r0
  4051de:	900c      	str	r0, [sp, #48]	; 0x30
  4051e0:	f04b 0b04 	orr.w	fp, fp, #4
  4051e4:	f899 6000 	ldrb.w	r6, [r9]
  4051e8:	e5d7      	b.n	404d9a <_vfprintf_r+0xfe>
  4051ea:	2a00      	cmp	r2, #0
  4051ec:	f040 87df 	bne.w	4061ae <_vfprintf_r+0x1512>
  4051f0:	4b16      	ldr	r3, [pc, #88]	; (40524c <_vfprintf_r+0x5b0>)
  4051f2:	9318      	str	r3, [sp, #96]	; 0x60
  4051f4:	f01b 0f20 	tst.w	fp, #32
  4051f8:	f040 84b9 	bne.w	405b6e <_vfprintf_r+0xed2>
  4051fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4051fe:	f01b 0f10 	tst.w	fp, #16
  405202:	4613      	mov	r3, r2
  405204:	f040 83dc 	bne.w	4059c0 <_vfprintf_r+0xd24>
  405208:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40520c:	f000 83d8 	beq.w	4059c0 <_vfprintf_r+0xd24>
  405210:	3304      	adds	r3, #4
  405212:	8814      	ldrh	r4, [r2, #0]
  405214:	930e      	str	r3, [sp, #56]	; 0x38
  405216:	2500      	movs	r5, #0
  405218:	f01b 0f01 	tst.w	fp, #1
  40521c:	f000 8322 	beq.w	405864 <_vfprintf_r+0xbc8>
  405220:	ea54 0305 	orrs.w	r3, r4, r5
  405224:	f000 831e 	beq.w	405864 <_vfprintf_r+0xbc8>
  405228:	2330      	movs	r3, #48	; 0x30
  40522a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40522e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  405232:	f04b 0b02 	orr.w	fp, fp, #2
  405236:	2302      	movs	r3, #2
  405238:	e63c      	b.n	404eb4 <_vfprintf_r+0x218>
  40523a:	f04b 0b20 	orr.w	fp, fp, #32
  40523e:	f899 6000 	ldrb.w	r6, [r9]
  405242:	e5aa      	b.n	404d9a <_vfprintf_r+0xfe>
  405244:	00409368 	.word	0x00409368
  405248:	00409378 	.word	0x00409378
  40524c:	00409348 	.word	0x00409348
  405250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405252:	6817      	ldr	r7, [r2, #0]
  405254:	2400      	movs	r4, #0
  405256:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40525a:	1d15      	adds	r5, r2, #4
  40525c:	2f00      	cmp	r7, #0
  40525e:	f000 864e 	beq.w	405efe <_vfprintf_r+0x1262>
  405262:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405264:	1c53      	adds	r3, r2, #1
  405266:	f000 85cc 	beq.w	405e02 <_vfprintf_r+0x1166>
  40526a:	4621      	mov	r1, r4
  40526c:	4638      	mov	r0, r7
  40526e:	f002 fce7 	bl	407c40 <memchr>
  405272:	2800      	cmp	r0, #0
  405274:	f000 8697 	beq.w	405fa6 <_vfprintf_r+0x130a>
  405278:	1bc3      	subs	r3, r0, r7
  40527a:	930d      	str	r3, [sp, #52]	; 0x34
  40527c:	9409      	str	r4, [sp, #36]	; 0x24
  40527e:	950e      	str	r5, [sp, #56]	; 0x38
  405280:	f8cd b018 	str.w	fp, [sp, #24]
  405284:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405288:	9307      	str	r3, [sp, #28]
  40528a:	9410      	str	r4, [sp, #64]	; 0x40
  40528c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405290:	e636      	b.n	404f00 <_vfprintf_r+0x264>
  405292:	2a00      	cmp	r2, #0
  405294:	f040 8796 	bne.w	4061c4 <_vfprintf_r+0x1528>
  405298:	f01b 0f20 	tst.w	fp, #32
  40529c:	f040 845a 	bne.w	405b54 <_vfprintf_r+0xeb8>
  4052a0:	f01b 0f10 	tst.w	fp, #16
  4052a4:	f040 83a2 	bne.w	4059ec <_vfprintf_r+0xd50>
  4052a8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4052ac:	f000 839e 	beq.w	4059ec <_vfprintf_r+0xd50>
  4052b0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4052b2:	f9b1 4000 	ldrsh.w	r4, [r1]
  4052b6:	3104      	adds	r1, #4
  4052b8:	17e5      	asrs	r5, r4, #31
  4052ba:	4622      	mov	r2, r4
  4052bc:	462b      	mov	r3, r5
  4052be:	910e      	str	r1, [sp, #56]	; 0x38
  4052c0:	2a00      	cmp	r2, #0
  4052c2:	f173 0300 	sbcs.w	r3, r3, #0
  4052c6:	f2c0 8487 	blt.w	405bd8 <_vfprintf_r+0xf3c>
  4052ca:	9909      	ldr	r1, [sp, #36]	; 0x24
  4052cc:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4052d0:	1c4a      	adds	r2, r1, #1
  4052d2:	f04f 0301 	mov.w	r3, #1
  4052d6:	f47f adf5 	bne.w	404ec4 <_vfprintf_r+0x228>
  4052da:	ea54 0205 	orrs.w	r2, r4, r5
  4052de:	f000 826c 	beq.w	4057ba <_vfprintf_r+0xb1e>
  4052e2:	f8cd b018 	str.w	fp, [sp, #24]
  4052e6:	2b01      	cmp	r3, #1
  4052e8:	f000 8308 	beq.w	4058fc <_vfprintf_r+0xc60>
  4052ec:	2b02      	cmp	r3, #2
  4052ee:	f040 8295 	bne.w	40581c <_vfprintf_r+0xb80>
  4052f2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4052f4:	af30      	add	r7, sp, #192	; 0xc0
  4052f6:	0923      	lsrs	r3, r4, #4
  4052f8:	f004 010f 	and.w	r1, r4, #15
  4052fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405300:	092a      	lsrs	r2, r5, #4
  405302:	461c      	mov	r4, r3
  405304:	4615      	mov	r5, r2
  405306:	5c43      	ldrb	r3, [r0, r1]
  405308:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40530c:	ea54 0305 	orrs.w	r3, r4, r5
  405310:	d1f1      	bne.n	4052f6 <_vfprintf_r+0x65a>
  405312:	ab30      	add	r3, sp, #192	; 0xc0
  405314:	1bdb      	subs	r3, r3, r7
  405316:	930d      	str	r3, [sp, #52]	; 0x34
  405318:	e5ea      	b.n	404ef0 <_vfprintf_r+0x254>
  40531a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40531e:	f899 6000 	ldrb.w	r6, [r9]
  405322:	e53a      	b.n	404d9a <_vfprintf_r+0xfe>
  405324:	f899 6000 	ldrb.w	r6, [r9]
  405328:	2e6c      	cmp	r6, #108	; 0x6c
  40532a:	bf03      	ittte	eq
  40532c:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  405330:	f04b 0b20 	orreq.w	fp, fp, #32
  405334:	f109 0901 	addeq.w	r9, r9, #1
  405338:	f04b 0b10 	orrne.w	fp, fp, #16
  40533c:	e52d      	b.n	404d9a <_vfprintf_r+0xfe>
  40533e:	2a00      	cmp	r2, #0
  405340:	f040 874c 	bne.w	4061dc <_vfprintf_r+0x1540>
  405344:	f01b 0f20 	tst.w	fp, #32
  405348:	f040 853f 	bne.w	405dca <_vfprintf_r+0x112e>
  40534c:	f01b 0f10 	tst.w	fp, #16
  405350:	f040 80fc 	bne.w	40554c <_vfprintf_r+0x8b0>
  405354:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405358:	f000 80f8 	beq.w	40554c <_vfprintf_r+0x8b0>
  40535c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40535e:	6813      	ldr	r3, [r2, #0]
  405360:	3204      	adds	r2, #4
  405362:	920e      	str	r2, [sp, #56]	; 0x38
  405364:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  405368:	801a      	strh	r2, [r3, #0]
  40536a:	e4e3      	b.n	404d34 <_vfprintf_r+0x98>
  40536c:	f899 6000 	ldrb.w	r6, [r9]
  405370:	2900      	cmp	r1, #0
  405372:	f47f ad12 	bne.w	404d9a <_vfprintf_r+0xfe>
  405376:	2201      	movs	r2, #1
  405378:	2120      	movs	r1, #32
  40537a:	e50e      	b.n	404d9a <_vfprintf_r+0xfe>
  40537c:	f899 6000 	ldrb.w	r6, [r9]
  405380:	2e2a      	cmp	r6, #42	; 0x2a
  405382:	f109 0001 	add.w	r0, r9, #1
  405386:	f000 86f1 	beq.w	40616c <_vfprintf_r+0x14d0>
  40538a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40538e:	2b09      	cmp	r3, #9
  405390:	4681      	mov	r9, r0
  405392:	bf98      	it	ls
  405394:	2000      	movls	r0, #0
  405396:	f200 863d 	bhi.w	406014 <_vfprintf_r+0x1378>
  40539a:	f819 6b01 	ldrb.w	r6, [r9], #1
  40539e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4053a2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4053a6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4053aa:	2b09      	cmp	r3, #9
  4053ac:	d9f5      	bls.n	40539a <_vfprintf_r+0x6fe>
  4053ae:	9009      	str	r0, [sp, #36]	; 0x24
  4053b0:	e4f5      	b.n	404d9e <_vfprintf_r+0x102>
  4053b2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4053b6:	f899 6000 	ldrb.w	r6, [r9]
  4053ba:	e4ee      	b.n	404d9a <_vfprintf_r+0xfe>
  4053bc:	f899 6000 	ldrb.w	r6, [r9]
  4053c0:	2201      	movs	r2, #1
  4053c2:	212b      	movs	r1, #43	; 0x2b
  4053c4:	e4e9      	b.n	404d9a <_vfprintf_r+0xfe>
  4053c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4053c8:	4bae      	ldr	r3, [pc, #696]	; (405684 <_vfprintf_r+0x9e8>)
  4053ca:	6814      	ldr	r4, [r2, #0]
  4053cc:	9318      	str	r3, [sp, #96]	; 0x60
  4053ce:	2678      	movs	r6, #120	; 0x78
  4053d0:	2330      	movs	r3, #48	; 0x30
  4053d2:	3204      	adds	r2, #4
  4053d4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4053d8:	f04b 0b02 	orr.w	fp, fp, #2
  4053dc:	920e      	str	r2, [sp, #56]	; 0x38
  4053de:	2500      	movs	r5, #0
  4053e0:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4053e4:	2302      	movs	r3, #2
  4053e6:	e565      	b.n	404eb4 <_vfprintf_r+0x218>
  4053e8:	2a00      	cmp	r2, #0
  4053ea:	f040 86e4 	bne.w	4061b6 <_vfprintf_r+0x151a>
  4053ee:	4ba6      	ldr	r3, [pc, #664]	; (405688 <_vfprintf_r+0x9ec>)
  4053f0:	9318      	str	r3, [sp, #96]	; 0x60
  4053f2:	e6ff      	b.n	4051f4 <_vfprintf_r+0x558>
  4053f4:	990e      	ldr	r1, [sp, #56]	; 0x38
  4053f6:	f8cd b018 	str.w	fp, [sp, #24]
  4053fa:	680a      	ldr	r2, [r1, #0]
  4053fc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  405400:	2300      	movs	r3, #0
  405402:	460a      	mov	r2, r1
  405404:	469a      	mov	sl, r3
  405406:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40540a:	3204      	adds	r2, #4
  40540c:	2301      	movs	r3, #1
  40540e:	9307      	str	r3, [sp, #28]
  405410:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  405414:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  405418:	920e      	str	r2, [sp, #56]	; 0x38
  40541a:	930d      	str	r3, [sp, #52]	; 0x34
  40541c:	af26      	add	r7, sp, #152	; 0x98
  40541e:	e575      	b.n	404f0c <_vfprintf_r+0x270>
  405420:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  405424:	2000      	movs	r0, #0
  405426:	f819 6b01 	ldrb.w	r6, [r9], #1
  40542a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40542e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  405432:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  405436:	2b09      	cmp	r3, #9
  405438:	d9f5      	bls.n	405426 <_vfprintf_r+0x78a>
  40543a:	900c      	str	r0, [sp, #48]	; 0x30
  40543c:	e4af      	b.n	404d9e <_vfprintf_r+0x102>
  40543e:	2a00      	cmp	r2, #0
  405440:	f040 86c8 	bne.w	4061d4 <_vfprintf_r+0x1538>
  405444:	f04b 0b10 	orr.w	fp, fp, #16
  405448:	e726      	b.n	405298 <_vfprintf_r+0x5fc>
  40544a:	f04b 0b01 	orr.w	fp, fp, #1
  40544e:	f899 6000 	ldrb.w	r6, [r9]
  405452:	e4a2      	b.n	404d9a <_vfprintf_r+0xfe>
  405454:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  405456:	6823      	ldr	r3, [r4, #0]
  405458:	930c      	str	r3, [sp, #48]	; 0x30
  40545a:	4618      	mov	r0, r3
  40545c:	2800      	cmp	r0, #0
  40545e:	4623      	mov	r3, r4
  405460:	f103 0304 	add.w	r3, r3, #4
  405464:	f6ff aeb8 	blt.w	4051d8 <_vfprintf_r+0x53c>
  405468:	930e      	str	r3, [sp, #56]	; 0x38
  40546a:	f899 6000 	ldrb.w	r6, [r9]
  40546e:	e494      	b.n	404d9a <_vfprintf_r+0xfe>
  405470:	2a00      	cmp	r2, #0
  405472:	f040 86b7 	bne.w	4061e4 <_vfprintf_r+0x1548>
  405476:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405478:	3507      	adds	r5, #7
  40547a:	f025 0307 	bic.w	r3, r5, #7
  40547e:	f103 0208 	add.w	r2, r3, #8
  405482:	920e      	str	r2, [sp, #56]	; 0x38
  405484:	681a      	ldr	r2, [r3, #0]
  405486:	9213      	str	r2, [sp, #76]	; 0x4c
  405488:	685b      	ldr	r3, [r3, #4]
  40548a:	9312      	str	r3, [sp, #72]	; 0x48
  40548c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40548e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  405490:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405494:	4628      	mov	r0, r5
  405496:	4621      	mov	r1, r4
  405498:	f04f 32ff 	mov.w	r2, #4294967295
  40549c:	4b7b      	ldr	r3, [pc, #492]	; (40568c <_vfprintf_r+0x9f0>)
  40549e:	f003 fcdf 	bl	408e60 <__aeabi_dcmpun>
  4054a2:	2800      	cmp	r0, #0
  4054a4:	f040 83a2 	bne.w	405bec <_vfprintf_r+0xf50>
  4054a8:	4628      	mov	r0, r5
  4054aa:	4621      	mov	r1, r4
  4054ac:	f04f 32ff 	mov.w	r2, #4294967295
  4054b0:	4b76      	ldr	r3, [pc, #472]	; (40568c <_vfprintf_r+0x9f0>)
  4054b2:	f003 fcb7 	bl	408e24 <__aeabi_dcmple>
  4054b6:	2800      	cmp	r0, #0
  4054b8:	f040 8398 	bne.w	405bec <_vfprintf_r+0xf50>
  4054bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4054be:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4054c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4054c2:	9912      	ldr	r1, [sp, #72]	; 0x48
  4054c4:	f003 fca4 	bl	408e10 <__aeabi_dcmplt>
  4054c8:	2800      	cmp	r0, #0
  4054ca:	f040 8435 	bne.w	405d38 <_vfprintf_r+0x109c>
  4054ce:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4054d2:	4f6f      	ldr	r7, [pc, #444]	; (405690 <_vfprintf_r+0x9f4>)
  4054d4:	4b6f      	ldr	r3, [pc, #444]	; (405694 <_vfprintf_r+0x9f8>)
  4054d6:	2203      	movs	r2, #3
  4054d8:	2100      	movs	r1, #0
  4054da:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4054de:	9207      	str	r2, [sp, #28]
  4054e0:	9109      	str	r1, [sp, #36]	; 0x24
  4054e2:	9006      	str	r0, [sp, #24]
  4054e4:	2e47      	cmp	r6, #71	; 0x47
  4054e6:	bfd8      	it	le
  4054e8:	461f      	movle	r7, r3
  4054ea:	920d      	str	r2, [sp, #52]	; 0x34
  4054ec:	9110      	str	r1, [sp, #64]	; 0x40
  4054ee:	e507      	b.n	404f00 <_vfprintf_r+0x264>
  4054f0:	f04b 0b08 	orr.w	fp, fp, #8
  4054f4:	f899 6000 	ldrb.w	r6, [r9]
  4054f8:	e44f      	b.n	404d9a <_vfprintf_r+0xfe>
  4054fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4054fc:	3507      	adds	r5, #7
  4054fe:	f025 0307 	bic.w	r3, r5, #7
  405502:	f103 0208 	add.w	r2, r3, #8
  405506:	e9d3 4500 	ldrd	r4, r5, [r3]
  40550a:	920e      	str	r2, [sp, #56]	; 0x38
  40550c:	2300      	movs	r3, #0
  40550e:	e4d1      	b.n	404eb4 <_vfprintf_r+0x218>
  405510:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405512:	3507      	adds	r5, #7
  405514:	f025 0307 	bic.w	r3, r5, #7
  405518:	f103 0208 	add.w	r2, r3, #8
  40551c:	e9d3 4500 	ldrd	r4, r5, [r3]
  405520:	920e      	str	r2, [sp, #56]	; 0x38
  405522:	2301      	movs	r3, #1
  405524:	e4c6      	b.n	404eb4 <_vfprintf_r+0x218>
  405526:	2a00      	cmp	r2, #0
  405528:	f040 8650 	bne.w	4061cc <_vfprintf_r+0x1530>
  40552c:	b1c6      	cbz	r6, 405560 <_vfprintf_r+0x8c4>
  40552e:	2300      	movs	r3, #0
  405530:	2201      	movs	r2, #1
  405532:	469a      	mov	sl, r3
  405534:	9207      	str	r2, [sp, #28]
  405536:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  40553a:	f8cd b018 	str.w	fp, [sp, #24]
  40553e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  405542:	9309      	str	r3, [sp, #36]	; 0x24
  405544:	9310      	str	r3, [sp, #64]	; 0x40
  405546:	920d      	str	r2, [sp, #52]	; 0x34
  405548:	af26      	add	r7, sp, #152	; 0x98
  40554a:	e4df      	b.n	404f0c <_vfprintf_r+0x270>
  40554c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40554e:	6813      	ldr	r3, [r2, #0]
  405550:	3204      	adds	r2, #4
  405552:	920e      	str	r2, [sp, #56]	; 0x38
  405554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405556:	601a      	str	r2, [r3, #0]
  405558:	f7ff bbec 	b.w	404d34 <_vfprintf_r+0x98>
  40555c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40555e:	e527      	b.n	404fb0 <_vfprintf_r+0x314>
  405560:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405562:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  405566:	2b00      	cmp	r3, #0
  405568:	f040 8594 	bne.w	406094 <_vfprintf_r+0x13f8>
  40556c:	2300      	movs	r3, #0
  40556e:	9324      	str	r3, [sp, #144]	; 0x90
  405570:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  405574:	f013 0f01 	tst.w	r3, #1
  405578:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40557c:	d102      	bne.n	405584 <_vfprintf_r+0x8e8>
  40557e:	059a      	lsls	r2, r3, #22
  405580:	f140 8249 	bpl.w	405a16 <_vfprintf_r+0xd7a>
  405584:	065b      	lsls	r3, r3, #25
  405586:	f53f adec 	bmi.w	405162 <_vfprintf_r+0x4c6>
  40558a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40558c:	b041      	add	sp, #260	; 0x104
  40558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405592:	2e65      	cmp	r6, #101	; 0x65
  405594:	f340 80b2 	ble.w	4056fc <_vfprintf_r+0xa60>
  405598:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40559a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40559c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40559e:	9912      	ldr	r1, [sp, #72]	; 0x48
  4055a0:	f003 fc2c 	bl	408dfc <__aeabi_dcmpeq>
  4055a4:	2800      	cmp	r0, #0
  4055a6:	f000 8160 	beq.w	40586a <_vfprintf_r+0xbce>
  4055aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055ac:	4a3a      	ldr	r2, [pc, #232]	; (405698 <_vfprintf_r+0x9fc>)
  4055ae:	f8c8 2000 	str.w	r2, [r8]
  4055b2:	3301      	adds	r3, #1
  4055b4:	3401      	adds	r4, #1
  4055b6:	2201      	movs	r2, #1
  4055b8:	2b07      	cmp	r3, #7
  4055ba:	9425      	str	r4, [sp, #148]	; 0x94
  4055bc:	9324      	str	r3, [sp, #144]	; 0x90
  4055be:	f8c8 2004 	str.w	r2, [r8, #4]
  4055c2:	f300 83bf 	bgt.w	405d44 <_vfprintf_r+0x10a8>
  4055c6:	f108 0808 	add.w	r8, r8, #8
  4055ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4055cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4055ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4055d0:	4293      	cmp	r3, r2
  4055d2:	db03      	blt.n	4055dc <_vfprintf_r+0x940>
  4055d4:	9b06      	ldr	r3, [sp, #24]
  4055d6:	07df      	lsls	r7, r3, #31
  4055d8:	f57f ad65 	bpl.w	4050a6 <_vfprintf_r+0x40a>
  4055dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055de:	9914      	ldr	r1, [sp, #80]	; 0x50
  4055e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4055e2:	f8c8 2000 	str.w	r2, [r8]
  4055e6:	3301      	adds	r3, #1
  4055e8:	440c      	add	r4, r1
  4055ea:	2b07      	cmp	r3, #7
  4055ec:	f8c8 1004 	str.w	r1, [r8, #4]
  4055f0:	9425      	str	r4, [sp, #148]	; 0x94
  4055f2:	9324      	str	r3, [sp, #144]	; 0x90
  4055f4:	f300 83f8 	bgt.w	405de8 <_vfprintf_r+0x114c>
  4055f8:	f108 0808 	add.w	r8, r8, #8
  4055fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055fe:	1e5e      	subs	r6, r3, #1
  405600:	2e00      	cmp	r6, #0
  405602:	f77f ad50 	ble.w	4050a6 <_vfprintf_r+0x40a>
  405606:	2e10      	cmp	r6, #16
  405608:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40560a:	4d24      	ldr	r5, [pc, #144]	; (40569c <_vfprintf_r+0xa00>)
  40560c:	f340 81dd 	ble.w	4059ca <_vfprintf_r+0xd2e>
  405610:	2710      	movs	r7, #16
  405612:	f8dd a020 	ldr.w	sl, [sp, #32]
  405616:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40561a:	e005      	b.n	405628 <_vfprintf_r+0x98c>
  40561c:	f108 0808 	add.w	r8, r8, #8
  405620:	3e10      	subs	r6, #16
  405622:	2e10      	cmp	r6, #16
  405624:	f340 81d1 	ble.w	4059ca <_vfprintf_r+0xd2e>
  405628:	3301      	adds	r3, #1
  40562a:	3410      	adds	r4, #16
  40562c:	2b07      	cmp	r3, #7
  40562e:	9425      	str	r4, [sp, #148]	; 0x94
  405630:	9324      	str	r3, [sp, #144]	; 0x90
  405632:	e888 00a0 	stmia.w	r8, {r5, r7}
  405636:	ddf1      	ble.n	40561c <_vfprintf_r+0x980>
  405638:	aa23      	add	r2, sp, #140	; 0x8c
  40563a:	4659      	mov	r1, fp
  40563c:	4650      	mov	r0, sl
  40563e:	f003 f8d7 	bl	4087f0 <__sprint_r>
  405642:	2800      	cmp	r0, #0
  405644:	f040 83cd 	bne.w	405de2 <_vfprintf_r+0x1146>
  405648:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40564a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40564c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405650:	e7e6      	b.n	405620 <_vfprintf_r+0x984>
  405652:	46aa      	mov	sl, r5
  405654:	e78c      	b.n	405570 <_vfprintf_r+0x8d4>
  405656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405658:	9a07      	ldr	r2, [sp, #28]
  40565a:	eba3 0a02 	sub.w	sl, r3, r2
  40565e:	f1ba 0f00 	cmp.w	sl, #0
  405662:	f77f acca 	ble.w	404ffa <_vfprintf_r+0x35e>
  405666:	f1ba 0f10 	cmp.w	sl, #16
  40566a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40566c:	4d0b      	ldr	r5, [pc, #44]	; (40569c <_vfprintf_r+0xa00>)
  40566e:	dd39      	ble.n	4056e4 <_vfprintf_r+0xa48>
  405670:	4642      	mov	r2, r8
  405672:	4621      	mov	r1, r4
  405674:	46b0      	mov	r8, r6
  405676:	f04f 0b10 	mov.w	fp, #16
  40567a:	462e      	mov	r6, r5
  40567c:	9c08      	ldr	r4, [sp, #32]
  40567e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405680:	e015      	b.n	4056ae <_vfprintf_r+0xa12>
  405682:	bf00      	nop
  405684:	00409348 	.word	0x00409348
  405688:	00409334 	.word	0x00409334
  40568c:	7fefffff 	.word	0x7fefffff
  405690:	00409328 	.word	0x00409328
  405694:	00409324 	.word	0x00409324
  405698:	00409364 	.word	0x00409364
  40569c:	00409378 	.word	0x00409378
  4056a0:	f1aa 0a10 	sub.w	sl, sl, #16
  4056a4:	f1ba 0f10 	cmp.w	sl, #16
  4056a8:	f102 0208 	add.w	r2, r2, #8
  4056ac:	dd16      	ble.n	4056dc <_vfprintf_r+0xa40>
  4056ae:	3301      	adds	r3, #1
  4056b0:	3110      	adds	r1, #16
  4056b2:	2b07      	cmp	r3, #7
  4056b4:	9125      	str	r1, [sp, #148]	; 0x94
  4056b6:	9324      	str	r3, [sp, #144]	; 0x90
  4056b8:	e882 0840 	stmia.w	r2, {r6, fp}
  4056bc:	ddf0      	ble.n	4056a0 <_vfprintf_r+0xa04>
  4056be:	aa23      	add	r2, sp, #140	; 0x8c
  4056c0:	4629      	mov	r1, r5
  4056c2:	4620      	mov	r0, r4
  4056c4:	f003 f894 	bl	4087f0 <__sprint_r>
  4056c8:	2800      	cmp	r0, #0
  4056ca:	d1c2      	bne.n	405652 <_vfprintf_r+0x9b6>
  4056cc:	f1aa 0a10 	sub.w	sl, sl, #16
  4056d0:	f1ba 0f10 	cmp.w	sl, #16
  4056d4:	9925      	ldr	r1, [sp, #148]	; 0x94
  4056d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4056d8:	aa30      	add	r2, sp, #192	; 0xc0
  4056da:	dce8      	bgt.n	4056ae <_vfprintf_r+0xa12>
  4056dc:	4635      	mov	r5, r6
  4056de:	460c      	mov	r4, r1
  4056e0:	4646      	mov	r6, r8
  4056e2:	4690      	mov	r8, r2
  4056e4:	3301      	adds	r3, #1
  4056e6:	4454      	add	r4, sl
  4056e8:	2b07      	cmp	r3, #7
  4056ea:	9425      	str	r4, [sp, #148]	; 0x94
  4056ec:	9324      	str	r3, [sp, #144]	; 0x90
  4056ee:	e888 0420 	stmia.w	r8, {r5, sl}
  4056f2:	f300 8264 	bgt.w	405bbe <_vfprintf_r+0xf22>
  4056f6:	f108 0808 	add.w	r8, r8, #8
  4056fa:	e47e      	b.n	404ffa <_vfprintf_r+0x35e>
  4056fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4056fe:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405700:	2b01      	cmp	r3, #1
  405702:	f340 81fd 	ble.w	405b00 <_vfprintf_r+0xe64>
  405706:	3601      	adds	r6, #1
  405708:	3401      	adds	r4, #1
  40570a:	2301      	movs	r3, #1
  40570c:	2e07      	cmp	r6, #7
  40570e:	9425      	str	r4, [sp, #148]	; 0x94
  405710:	9624      	str	r6, [sp, #144]	; 0x90
  405712:	f8c8 7000 	str.w	r7, [r8]
  405716:	f8c8 3004 	str.w	r3, [r8, #4]
  40571a:	f300 820e 	bgt.w	405b3a <_vfprintf_r+0xe9e>
  40571e:	f108 0808 	add.w	r8, r8, #8
  405722:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405724:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405726:	f8c8 3000 	str.w	r3, [r8]
  40572a:	3601      	adds	r6, #1
  40572c:	4414      	add	r4, r2
  40572e:	2e07      	cmp	r6, #7
  405730:	9425      	str	r4, [sp, #148]	; 0x94
  405732:	9624      	str	r6, [sp, #144]	; 0x90
  405734:	f8c8 2004 	str.w	r2, [r8, #4]
  405738:	f300 822e 	bgt.w	405b98 <_vfprintf_r+0xefc>
  40573c:	f108 0808 	add.w	r8, r8, #8
  405740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405742:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405744:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405746:	9912      	ldr	r1, [sp, #72]	; 0x48
  405748:	f003 fb58 	bl	408dfc <__aeabi_dcmpeq>
  40574c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40574e:	2800      	cmp	r0, #0
  405750:	f040 8106 	bne.w	405960 <_vfprintf_r+0xcc4>
  405754:	3b01      	subs	r3, #1
  405756:	3601      	adds	r6, #1
  405758:	3701      	adds	r7, #1
  40575a:	441c      	add	r4, r3
  40575c:	2e07      	cmp	r6, #7
  40575e:	9624      	str	r6, [sp, #144]	; 0x90
  405760:	9425      	str	r4, [sp, #148]	; 0x94
  405762:	f8c8 7000 	str.w	r7, [r8]
  405766:	f8c8 3004 	str.w	r3, [r8, #4]
  40576a:	f300 81d9 	bgt.w	405b20 <_vfprintf_r+0xe84>
  40576e:	f108 0808 	add.w	r8, r8, #8
  405772:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405774:	f8c8 2004 	str.w	r2, [r8, #4]
  405778:	3601      	adds	r6, #1
  40577a:	4414      	add	r4, r2
  40577c:	ab1f      	add	r3, sp, #124	; 0x7c
  40577e:	2e07      	cmp	r6, #7
  405780:	9425      	str	r4, [sp, #148]	; 0x94
  405782:	9624      	str	r6, [sp, #144]	; 0x90
  405784:	f8c8 3000 	str.w	r3, [r8]
  405788:	f77f ac8b 	ble.w	4050a2 <_vfprintf_r+0x406>
  40578c:	aa23      	add	r2, sp, #140	; 0x8c
  40578e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405790:	9808      	ldr	r0, [sp, #32]
  405792:	f003 f82d 	bl	4087f0 <__sprint_r>
  405796:	b958      	cbnz	r0, 4057b0 <_vfprintf_r+0xb14>
  405798:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40579a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40579e:	e482      	b.n	4050a6 <_vfprintf_r+0x40a>
  4057a0:	aa23      	add	r2, sp, #140	; 0x8c
  4057a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4057a4:	9808      	ldr	r0, [sp, #32]
  4057a6:	f003 f823 	bl	4087f0 <__sprint_r>
  4057aa:	2800      	cmp	r0, #0
  4057ac:	f43f acc5 	beq.w	40513a <_vfprintf_r+0x49e>
  4057b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4057b4:	e6dc      	b.n	405570 <_vfprintf_r+0x8d4>
  4057b6:	f8dd b018 	ldr.w	fp, [sp, #24]
  4057ba:	2b01      	cmp	r3, #1
  4057bc:	f000 8121 	beq.w	405a02 <_vfprintf_r+0xd66>
  4057c0:	2b02      	cmp	r3, #2
  4057c2:	d127      	bne.n	405814 <_vfprintf_r+0xb78>
  4057c4:	f8cd b018 	str.w	fp, [sp, #24]
  4057c8:	2400      	movs	r4, #0
  4057ca:	2500      	movs	r5, #0
  4057cc:	e591      	b.n	4052f2 <_vfprintf_r+0x656>
  4057ce:	aa23      	add	r2, sp, #140	; 0x8c
  4057d0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4057d2:	9808      	ldr	r0, [sp, #32]
  4057d4:	f003 f80c 	bl	4087f0 <__sprint_r>
  4057d8:	2800      	cmp	r0, #0
  4057da:	d1e9      	bne.n	4057b0 <_vfprintf_r+0xb14>
  4057dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4057de:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4057e2:	e44d      	b.n	405080 <_vfprintf_r+0x3e4>
  4057e4:	aa23      	add	r2, sp, #140	; 0x8c
  4057e6:	990a      	ldr	r1, [sp, #40]	; 0x28
  4057e8:	9808      	ldr	r0, [sp, #32]
  4057ea:	f003 f801 	bl	4087f0 <__sprint_r>
  4057ee:	2800      	cmp	r0, #0
  4057f0:	d1de      	bne.n	4057b0 <_vfprintf_r+0xb14>
  4057f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4057f4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4057f8:	f7ff bbec 	b.w	404fd4 <_vfprintf_r+0x338>
  4057fc:	aa23      	add	r2, sp, #140	; 0x8c
  4057fe:	990a      	ldr	r1, [sp, #40]	; 0x28
  405800:	9808      	ldr	r0, [sp, #32]
  405802:	f002 fff5 	bl	4087f0 <__sprint_r>
  405806:	2800      	cmp	r0, #0
  405808:	d1d2      	bne.n	4057b0 <_vfprintf_r+0xb14>
  40580a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40580c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405810:	f7ff bbf0 	b.w	404ff4 <_vfprintf_r+0x358>
  405814:	f8cd b018 	str.w	fp, [sp, #24]
  405818:	2400      	movs	r4, #0
  40581a:	2500      	movs	r5, #0
  40581c:	a930      	add	r1, sp, #192	; 0xc0
  40581e:	e000      	b.n	405822 <_vfprintf_r+0xb86>
  405820:	4639      	mov	r1, r7
  405822:	08e2      	lsrs	r2, r4, #3
  405824:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405828:	08e8      	lsrs	r0, r5, #3
  40582a:	f004 0307 	and.w	r3, r4, #7
  40582e:	4605      	mov	r5, r0
  405830:	4614      	mov	r4, r2
  405832:	3330      	adds	r3, #48	; 0x30
  405834:	ea54 0205 	orrs.w	r2, r4, r5
  405838:	f801 3c01 	strb.w	r3, [r1, #-1]
  40583c:	f101 37ff 	add.w	r7, r1, #4294967295
  405840:	d1ee      	bne.n	405820 <_vfprintf_r+0xb84>
  405842:	9a06      	ldr	r2, [sp, #24]
  405844:	07d2      	lsls	r2, r2, #31
  405846:	f57f ad64 	bpl.w	405312 <_vfprintf_r+0x676>
  40584a:	2b30      	cmp	r3, #48	; 0x30
  40584c:	f43f ad61 	beq.w	405312 <_vfprintf_r+0x676>
  405850:	2330      	movs	r3, #48	; 0x30
  405852:	3902      	subs	r1, #2
  405854:	f807 3c01 	strb.w	r3, [r7, #-1]
  405858:	ab30      	add	r3, sp, #192	; 0xc0
  40585a:	1a5b      	subs	r3, r3, r1
  40585c:	930d      	str	r3, [sp, #52]	; 0x34
  40585e:	460f      	mov	r7, r1
  405860:	f7ff bb46 	b.w	404ef0 <_vfprintf_r+0x254>
  405864:	2302      	movs	r3, #2
  405866:	f7ff bb25 	b.w	404eb4 <_vfprintf_r+0x218>
  40586a:	991d      	ldr	r1, [sp, #116]	; 0x74
  40586c:	2900      	cmp	r1, #0
  40586e:	f340 8274 	ble.w	405d5a <_vfprintf_r+0x10be>
  405872:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405874:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405876:	4293      	cmp	r3, r2
  405878:	bfa8      	it	ge
  40587a:	4613      	movge	r3, r2
  40587c:	2b00      	cmp	r3, #0
  40587e:	461e      	mov	r6, r3
  405880:	dd0d      	ble.n	40589e <_vfprintf_r+0xc02>
  405882:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405884:	f8c8 7000 	str.w	r7, [r8]
  405888:	3301      	adds	r3, #1
  40588a:	4434      	add	r4, r6
  40588c:	2b07      	cmp	r3, #7
  40588e:	9425      	str	r4, [sp, #148]	; 0x94
  405890:	f8c8 6004 	str.w	r6, [r8, #4]
  405894:	9324      	str	r3, [sp, #144]	; 0x90
  405896:	f300 8324 	bgt.w	405ee2 <_vfprintf_r+0x1246>
  40589a:	f108 0808 	add.w	r8, r8, #8
  40589e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4058a0:	2e00      	cmp	r6, #0
  4058a2:	bfa8      	it	ge
  4058a4:	1b9b      	subge	r3, r3, r6
  4058a6:	2b00      	cmp	r3, #0
  4058a8:	461e      	mov	r6, r3
  4058aa:	f340 80d0 	ble.w	405a4e <_vfprintf_r+0xdb2>
  4058ae:	2e10      	cmp	r6, #16
  4058b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058b2:	4dc0      	ldr	r5, [pc, #768]	; (405bb4 <_vfprintf_r+0xf18>)
  4058b4:	f340 80b7 	ble.w	405a26 <_vfprintf_r+0xd8a>
  4058b8:	4622      	mov	r2, r4
  4058ba:	f04f 0a10 	mov.w	sl, #16
  4058be:	f8dd b020 	ldr.w	fp, [sp, #32]
  4058c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4058c4:	e005      	b.n	4058d2 <_vfprintf_r+0xc36>
  4058c6:	f108 0808 	add.w	r8, r8, #8
  4058ca:	3e10      	subs	r6, #16
  4058cc:	2e10      	cmp	r6, #16
  4058ce:	f340 80a9 	ble.w	405a24 <_vfprintf_r+0xd88>
  4058d2:	3301      	adds	r3, #1
  4058d4:	3210      	adds	r2, #16
  4058d6:	2b07      	cmp	r3, #7
  4058d8:	9225      	str	r2, [sp, #148]	; 0x94
  4058da:	9324      	str	r3, [sp, #144]	; 0x90
  4058dc:	e888 0420 	stmia.w	r8, {r5, sl}
  4058e0:	ddf1      	ble.n	4058c6 <_vfprintf_r+0xc2a>
  4058e2:	aa23      	add	r2, sp, #140	; 0x8c
  4058e4:	4621      	mov	r1, r4
  4058e6:	4658      	mov	r0, fp
  4058e8:	f002 ff82 	bl	4087f0 <__sprint_r>
  4058ec:	2800      	cmp	r0, #0
  4058ee:	f040 8324 	bne.w	405f3a <_vfprintf_r+0x129e>
  4058f2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4058f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058f6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4058fa:	e7e6      	b.n	4058ca <_vfprintf_r+0xc2e>
  4058fc:	2d00      	cmp	r5, #0
  4058fe:	bf08      	it	eq
  405900:	2c0a      	cmpeq	r4, #10
  405902:	d37c      	bcc.n	4059fe <_vfprintf_r+0xd62>
  405904:	af30      	add	r7, sp, #192	; 0xc0
  405906:	4620      	mov	r0, r4
  405908:	4629      	mov	r1, r5
  40590a:	220a      	movs	r2, #10
  40590c:	2300      	movs	r3, #0
  40590e:	f003 fae5 	bl	408edc <__aeabi_uldivmod>
  405912:	3230      	adds	r2, #48	; 0x30
  405914:	f807 2d01 	strb.w	r2, [r7, #-1]!
  405918:	4620      	mov	r0, r4
  40591a:	4629      	mov	r1, r5
  40591c:	2300      	movs	r3, #0
  40591e:	220a      	movs	r2, #10
  405920:	f003 fadc 	bl	408edc <__aeabi_uldivmod>
  405924:	4604      	mov	r4, r0
  405926:	460d      	mov	r5, r1
  405928:	ea54 0305 	orrs.w	r3, r4, r5
  40592c:	d1eb      	bne.n	405906 <_vfprintf_r+0xc6a>
  40592e:	ab30      	add	r3, sp, #192	; 0xc0
  405930:	1bdb      	subs	r3, r3, r7
  405932:	930d      	str	r3, [sp, #52]	; 0x34
  405934:	f7ff badc 	b.w	404ef0 <_vfprintf_r+0x254>
  405938:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40593a:	930d      	str	r3, [sp, #52]	; 0x34
  40593c:	af30      	add	r7, sp, #192	; 0xc0
  40593e:	f7ff bad7 	b.w	404ef0 <_vfprintf_r+0x254>
  405942:	aa23      	add	r2, sp, #140	; 0x8c
  405944:	990a      	ldr	r1, [sp, #40]	; 0x28
  405946:	9808      	ldr	r0, [sp, #32]
  405948:	f002 ff52 	bl	4087f0 <__sprint_r>
  40594c:	2800      	cmp	r0, #0
  40594e:	f47f af2f 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405952:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405956:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405958:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40595c:	f7ff bb28 	b.w	404fb0 <_vfprintf_r+0x314>
  405960:	1e5f      	subs	r7, r3, #1
  405962:	2f00      	cmp	r7, #0
  405964:	f77f af05 	ble.w	405772 <_vfprintf_r+0xad6>
  405968:	2f10      	cmp	r7, #16
  40596a:	4d92      	ldr	r5, [pc, #584]	; (405bb4 <_vfprintf_r+0xf18>)
  40596c:	f340 810a 	ble.w	405b84 <_vfprintf_r+0xee8>
  405970:	f04f 0a10 	mov.w	sl, #16
  405974:	f8dd b020 	ldr.w	fp, [sp, #32]
  405978:	e005      	b.n	405986 <_vfprintf_r+0xcea>
  40597a:	f108 0808 	add.w	r8, r8, #8
  40597e:	3f10      	subs	r7, #16
  405980:	2f10      	cmp	r7, #16
  405982:	f340 80ff 	ble.w	405b84 <_vfprintf_r+0xee8>
  405986:	3601      	adds	r6, #1
  405988:	3410      	adds	r4, #16
  40598a:	2e07      	cmp	r6, #7
  40598c:	9425      	str	r4, [sp, #148]	; 0x94
  40598e:	9624      	str	r6, [sp, #144]	; 0x90
  405990:	e888 0420 	stmia.w	r8, {r5, sl}
  405994:	ddf1      	ble.n	40597a <_vfprintf_r+0xcde>
  405996:	aa23      	add	r2, sp, #140	; 0x8c
  405998:	990a      	ldr	r1, [sp, #40]	; 0x28
  40599a:	4658      	mov	r0, fp
  40599c:	f002 ff28 	bl	4087f0 <__sprint_r>
  4059a0:	2800      	cmp	r0, #0
  4059a2:	f47f af05 	bne.w	4057b0 <_vfprintf_r+0xb14>
  4059a6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4059a8:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4059aa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4059ae:	e7e6      	b.n	40597e <_vfprintf_r+0xce2>
  4059b0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4059b2:	460a      	mov	r2, r1
  4059b4:	3204      	adds	r2, #4
  4059b6:	680c      	ldr	r4, [r1, #0]
  4059b8:	920e      	str	r2, [sp, #56]	; 0x38
  4059ba:	2500      	movs	r5, #0
  4059bc:	f7ff ba7a 	b.w	404eb4 <_vfprintf_r+0x218>
  4059c0:	681c      	ldr	r4, [r3, #0]
  4059c2:	3304      	adds	r3, #4
  4059c4:	930e      	str	r3, [sp, #56]	; 0x38
  4059c6:	2500      	movs	r5, #0
  4059c8:	e426      	b.n	405218 <_vfprintf_r+0x57c>
  4059ca:	3301      	adds	r3, #1
  4059cc:	4434      	add	r4, r6
  4059ce:	2b07      	cmp	r3, #7
  4059d0:	9425      	str	r4, [sp, #148]	; 0x94
  4059d2:	9324      	str	r3, [sp, #144]	; 0x90
  4059d4:	e888 0060 	stmia.w	r8, {r5, r6}
  4059d8:	f77f ab63 	ble.w	4050a2 <_vfprintf_r+0x406>
  4059dc:	e6d6      	b.n	40578c <_vfprintf_r+0xaf0>
  4059de:	3204      	adds	r2, #4
  4059e0:	681c      	ldr	r4, [r3, #0]
  4059e2:	920e      	str	r2, [sp, #56]	; 0x38
  4059e4:	2301      	movs	r3, #1
  4059e6:	2500      	movs	r5, #0
  4059e8:	f7ff ba64 	b.w	404eb4 <_vfprintf_r+0x218>
  4059ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4059ee:	6814      	ldr	r4, [r2, #0]
  4059f0:	4613      	mov	r3, r2
  4059f2:	3304      	adds	r3, #4
  4059f4:	17e5      	asrs	r5, r4, #31
  4059f6:	930e      	str	r3, [sp, #56]	; 0x38
  4059f8:	4622      	mov	r2, r4
  4059fa:	462b      	mov	r3, r5
  4059fc:	e460      	b.n	4052c0 <_vfprintf_r+0x624>
  4059fe:	f8dd b018 	ldr.w	fp, [sp, #24]
  405a02:	f8cd b018 	str.w	fp, [sp, #24]
  405a06:	af40      	add	r7, sp, #256	; 0x100
  405a08:	3430      	adds	r4, #48	; 0x30
  405a0a:	2301      	movs	r3, #1
  405a0c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  405a10:	930d      	str	r3, [sp, #52]	; 0x34
  405a12:	f7ff ba6d 	b.w	404ef0 <_vfprintf_r+0x254>
  405a16:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  405a1a:	f002 f895 	bl	407b48 <__retarget_lock_release_recursive>
  405a1e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  405a22:	e5af      	b.n	405584 <_vfprintf_r+0x8e8>
  405a24:	4614      	mov	r4, r2
  405a26:	3301      	adds	r3, #1
  405a28:	4434      	add	r4, r6
  405a2a:	2b07      	cmp	r3, #7
  405a2c:	9425      	str	r4, [sp, #148]	; 0x94
  405a2e:	9324      	str	r3, [sp, #144]	; 0x90
  405a30:	e888 0060 	stmia.w	r8, {r5, r6}
  405a34:	f340 816d 	ble.w	405d12 <_vfprintf_r+0x1076>
  405a38:	aa23      	add	r2, sp, #140	; 0x8c
  405a3a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405a3c:	9808      	ldr	r0, [sp, #32]
  405a3e:	f002 fed7 	bl	4087f0 <__sprint_r>
  405a42:	2800      	cmp	r0, #0
  405a44:	f47f aeb4 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405a48:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405a4a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405a4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405a50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a52:	4293      	cmp	r3, r2
  405a54:	f280 8158 	bge.w	405d08 <_vfprintf_r+0x106c>
  405a58:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405a5a:	9814      	ldr	r0, [sp, #80]	; 0x50
  405a5c:	9915      	ldr	r1, [sp, #84]	; 0x54
  405a5e:	f8c8 1000 	str.w	r1, [r8]
  405a62:	3201      	adds	r2, #1
  405a64:	4404      	add	r4, r0
  405a66:	2a07      	cmp	r2, #7
  405a68:	9425      	str	r4, [sp, #148]	; 0x94
  405a6a:	f8c8 0004 	str.w	r0, [r8, #4]
  405a6e:	9224      	str	r2, [sp, #144]	; 0x90
  405a70:	f300 8152 	bgt.w	405d18 <_vfprintf_r+0x107c>
  405a74:	f108 0808 	add.w	r8, r8, #8
  405a78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405a7a:	9910      	ldr	r1, [sp, #64]	; 0x40
  405a7c:	1ad3      	subs	r3, r2, r3
  405a7e:	1a56      	subs	r6, r2, r1
  405a80:	429e      	cmp	r6, r3
  405a82:	bfa8      	it	ge
  405a84:	461e      	movge	r6, r3
  405a86:	2e00      	cmp	r6, #0
  405a88:	dd0e      	ble.n	405aa8 <_vfprintf_r+0xe0c>
  405a8a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405a8c:	f8c8 6004 	str.w	r6, [r8, #4]
  405a90:	3201      	adds	r2, #1
  405a92:	440f      	add	r7, r1
  405a94:	4434      	add	r4, r6
  405a96:	2a07      	cmp	r2, #7
  405a98:	f8c8 7000 	str.w	r7, [r8]
  405a9c:	9425      	str	r4, [sp, #148]	; 0x94
  405a9e:	9224      	str	r2, [sp, #144]	; 0x90
  405aa0:	f300 823c 	bgt.w	405f1c <_vfprintf_r+0x1280>
  405aa4:	f108 0808 	add.w	r8, r8, #8
  405aa8:	2e00      	cmp	r6, #0
  405aaa:	bfac      	ite	ge
  405aac:	1b9e      	subge	r6, r3, r6
  405aae:	461e      	movlt	r6, r3
  405ab0:	2e00      	cmp	r6, #0
  405ab2:	f77f aaf8 	ble.w	4050a6 <_vfprintf_r+0x40a>
  405ab6:	2e10      	cmp	r6, #16
  405ab8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405aba:	4d3e      	ldr	r5, [pc, #248]	; (405bb4 <_vfprintf_r+0xf18>)
  405abc:	dd85      	ble.n	4059ca <_vfprintf_r+0xd2e>
  405abe:	2710      	movs	r7, #16
  405ac0:	f8dd a020 	ldr.w	sl, [sp, #32]
  405ac4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405ac8:	e005      	b.n	405ad6 <_vfprintf_r+0xe3a>
  405aca:	f108 0808 	add.w	r8, r8, #8
  405ace:	3e10      	subs	r6, #16
  405ad0:	2e10      	cmp	r6, #16
  405ad2:	f77f af7a 	ble.w	4059ca <_vfprintf_r+0xd2e>
  405ad6:	3301      	adds	r3, #1
  405ad8:	3410      	adds	r4, #16
  405ada:	2b07      	cmp	r3, #7
  405adc:	9425      	str	r4, [sp, #148]	; 0x94
  405ade:	9324      	str	r3, [sp, #144]	; 0x90
  405ae0:	e888 00a0 	stmia.w	r8, {r5, r7}
  405ae4:	ddf1      	ble.n	405aca <_vfprintf_r+0xe2e>
  405ae6:	aa23      	add	r2, sp, #140	; 0x8c
  405ae8:	4659      	mov	r1, fp
  405aea:	4650      	mov	r0, sl
  405aec:	f002 fe80 	bl	4087f0 <__sprint_r>
  405af0:	2800      	cmp	r0, #0
  405af2:	f040 8176 	bne.w	405de2 <_vfprintf_r+0x1146>
  405af6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405af8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405afa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405afe:	e7e6      	b.n	405ace <_vfprintf_r+0xe32>
  405b00:	9b06      	ldr	r3, [sp, #24]
  405b02:	07d8      	lsls	r0, r3, #31
  405b04:	f53f adff 	bmi.w	405706 <_vfprintf_r+0xa6a>
  405b08:	3601      	adds	r6, #1
  405b0a:	3401      	adds	r4, #1
  405b0c:	2301      	movs	r3, #1
  405b0e:	2e07      	cmp	r6, #7
  405b10:	9425      	str	r4, [sp, #148]	; 0x94
  405b12:	9624      	str	r6, [sp, #144]	; 0x90
  405b14:	f8c8 7000 	str.w	r7, [r8]
  405b18:	f8c8 3004 	str.w	r3, [r8, #4]
  405b1c:	f77f ae27 	ble.w	40576e <_vfprintf_r+0xad2>
  405b20:	aa23      	add	r2, sp, #140	; 0x8c
  405b22:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b24:	9808      	ldr	r0, [sp, #32]
  405b26:	f002 fe63 	bl	4087f0 <__sprint_r>
  405b2a:	2800      	cmp	r0, #0
  405b2c:	f47f ae40 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405b30:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b32:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405b34:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405b38:	e61b      	b.n	405772 <_vfprintf_r+0xad6>
  405b3a:	aa23      	add	r2, sp, #140	; 0x8c
  405b3c:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b3e:	9808      	ldr	r0, [sp, #32]
  405b40:	f002 fe56 	bl	4087f0 <__sprint_r>
  405b44:	2800      	cmp	r0, #0
  405b46:	f47f ae33 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405b4a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405b4c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405b4e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405b52:	e5e6      	b.n	405722 <_vfprintf_r+0xa86>
  405b54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405b56:	3507      	adds	r5, #7
  405b58:	f025 0507 	bic.w	r5, r5, #7
  405b5c:	e9d5 2300 	ldrd	r2, r3, [r5]
  405b60:	f105 0108 	add.w	r1, r5, #8
  405b64:	910e      	str	r1, [sp, #56]	; 0x38
  405b66:	4614      	mov	r4, r2
  405b68:	461d      	mov	r5, r3
  405b6a:	f7ff bba9 	b.w	4052c0 <_vfprintf_r+0x624>
  405b6e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405b70:	3507      	adds	r5, #7
  405b72:	f025 0307 	bic.w	r3, r5, #7
  405b76:	f103 0208 	add.w	r2, r3, #8
  405b7a:	920e      	str	r2, [sp, #56]	; 0x38
  405b7c:	e9d3 4500 	ldrd	r4, r5, [r3]
  405b80:	f7ff bb4a 	b.w	405218 <_vfprintf_r+0x57c>
  405b84:	3601      	adds	r6, #1
  405b86:	443c      	add	r4, r7
  405b88:	2e07      	cmp	r6, #7
  405b8a:	9425      	str	r4, [sp, #148]	; 0x94
  405b8c:	9624      	str	r6, [sp, #144]	; 0x90
  405b8e:	e888 00a0 	stmia.w	r8, {r5, r7}
  405b92:	f77f adec 	ble.w	40576e <_vfprintf_r+0xad2>
  405b96:	e7c3      	b.n	405b20 <_vfprintf_r+0xe84>
  405b98:	aa23      	add	r2, sp, #140	; 0x8c
  405b9a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b9c:	9808      	ldr	r0, [sp, #32]
  405b9e:	f002 fe27 	bl	4087f0 <__sprint_r>
  405ba2:	2800      	cmp	r0, #0
  405ba4:	f47f ae04 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405ba8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405baa:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405bac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405bb0:	e5c6      	b.n	405740 <_vfprintf_r+0xaa4>
  405bb2:	bf00      	nop
  405bb4:	00409378 	.word	0x00409378
  405bb8:	af30      	add	r7, sp, #192	; 0xc0
  405bba:	f7ff b999 	b.w	404ef0 <_vfprintf_r+0x254>
  405bbe:	aa23      	add	r2, sp, #140	; 0x8c
  405bc0:	990a      	ldr	r1, [sp, #40]	; 0x28
  405bc2:	9808      	ldr	r0, [sp, #32]
  405bc4:	f002 fe14 	bl	4087f0 <__sprint_r>
  405bc8:	2800      	cmp	r0, #0
  405bca:	f47f adf1 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405bce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405bd0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405bd4:	f7ff ba11 	b.w	404ffa <_vfprintf_r+0x35e>
  405bd8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405bdc:	4264      	negs	r4, r4
  405bde:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405be2:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405be6:	2301      	movs	r3, #1
  405be8:	f7ff b968 	b.w	404ebc <_vfprintf_r+0x220>
  405bec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  405bee:	4622      	mov	r2, r4
  405bf0:	4620      	mov	r0, r4
  405bf2:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405bf4:	4623      	mov	r3, r4
  405bf6:	4621      	mov	r1, r4
  405bf8:	f003 f932 	bl	408e60 <__aeabi_dcmpun>
  405bfc:	2800      	cmp	r0, #0
  405bfe:	f040 828c 	bne.w	40611a <_vfprintf_r+0x147e>
  405c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405c04:	3301      	adds	r3, #1
  405c06:	f026 0320 	bic.w	r3, r6, #32
  405c0a:	930d      	str	r3, [sp, #52]	; 0x34
  405c0c:	f000 8091 	beq.w	405d32 <_vfprintf_r+0x1096>
  405c10:	2b47      	cmp	r3, #71	; 0x47
  405c12:	d104      	bne.n	405c1e <_vfprintf_r+0xf82>
  405c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405c16:	2b00      	cmp	r3, #0
  405c18:	bf08      	it	eq
  405c1a:	2301      	moveq	r3, #1
  405c1c:	9309      	str	r3, [sp, #36]	; 0x24
  405c1e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405c22:	9306      	str	r3, [sp, #24]
  405c24:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c26:	f1b3 0a00 	subs.w	sl, r3, #0
  405c2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405c2c:	9307      	str	r3, [sp, #28]
  405c2e:	bfbb      	ittet	lt
  405c30:	4653      	movlt	r3, sl
  405c32:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  405c36:	2300      	movge	r3, #0
  405c38:	232d      	movlt	r3, #45	; 0x2d
  405c3a:	2e66      	cmp	r6, #102	; 0x66
  405c3c:	930f      	str	r3, [sp, #60]	; 0x3c
  405c3e:	f000 817f 	beq.w	405f40 <_vfprintf_r+0x12a4>
  405c42:	2e46      	cmp	r6, #70	; 0x46
  405c44:	f000 81d4 	beq.w	405ff0 <_vfprintf_r+0x1354>
  405c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405c4a:	9a07      	ldr	r2, [sp, #28]
  405c4c:	2b45      	cmp	r3, #69	; 0x45
  405c4e:	bf0c      	ite	eq
  405c50:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  405c52:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  405c54:	a821      	add	r0, sp, #132	; 0x84
  405c56:	a91e      	add	r1, sp, #120	; 0x78
  405c58:	bf08      	it	eq
  405c5a:	1c5d      	addeq	r5, r3, #1
  405c5c:	9004      	str	r0, [sp, #16]
  405c5e:	9103      	str	r1, [sp, #12]
  405c60:	a81d      	add	r0, sp, #116	; 0x74
  405c62:	2102      	movs	r1, #2
  405c64:	9002      	str	r0, [sp, #8]
  405c66:	4653      	mov	r3, sl
  405c68:	9501      	str	r5, [sp, #4]
  405c6a:	9100      	str	r1, [sp, #0]
  405c6c:	9808      	ldr	r0, [sp, #32]
  405c6e:	f000 fc0b 	bl	406488 <_dtoa_r>
  405c72:	2e67      	cmp	r6, #103	; 0x67
  405c74:	4607      	mov	r7, r0
  405c76:	f040 81af 	bne.w	405fd8 <_vfprintf_r+0x133c>
  405c7a:	f01b 0f01 	tst.w	fp, #1
  405c7e:	f000 8213 	beq.w	4060a8 <_vfprintf_r+0x140c>
  405c82:	197c      	adds	r4, r7, r5
  405c84:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405c86:	9807      	ldr	r0, [sp, #28]
  405c88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405c8a:	4651      	mov	r1, sl
  405c8c:	f003 f8b6 	bl	408dfc <__aeabi_dcmpeq>
  405c90:	2800      	cmp	r0, #0
  405c92:	f040 8132 	bne.w	405efa <_vfprintf_r+0x125e>
  405c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405c98:	42a3      	cmp	r3, r4
  405c9a:	d206      	bcs.n	405caa <_vfprintf_r+0x100e>
  405c9c:	2130      	movs	r1, #48	; 0x30
  405c9e:	1c5a      	adds	r2, r3, #1
  405ca0:	9221      	str	r2, [sp, #132]	; 0x84
  405ca2:	7019      	strb	r1, [r3, #0]
  405ca4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405ca6:	429c      	cmp	r4, r3
  405ca8:	d8f9      	bhi.n	405c9e <_vfprintf_r+0x1002>
  405caa:	1bdb      	subs	r3, r3, r7
  405cac:	9311      	str	r3, [sp, #68]	; 0x44
  405cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405cb0:	2b47      	cmp	r3, #71	; 0x47
  405cb2:	f000 80b9 	beq.w	405e28 <_vfprintf_r+0x118c>
  405cb6:	2e65      	cmp	r6, #101	; 0x65
  405cb8:	f340 8276 	ble.w	4061a8 <_vfprintf_r+0x150c>
  405cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405cbe:	9310      	str	r3, [sp, #64]	; 0x40
  405cc0:	2e66      	cmp	r6, #102	; 0x66
  405cc2:	f000 8162 	beq.w	405f8a <_vfprintf_r+0x12ee>
  405cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405cc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405cca:	4619      	mov	r1, r3
  405ccc:	4291      	cmp	r1, r2
  405cce:	f300 814f 	bgt.w	405f70 <_vfprintf_r+0x12d4>
  405cd2:	f01b 0f01 	tst.w	fp, #1
  405cd6:	f040 8209 	bne.w	4060ec <_vfprintf_r+0x1450>
  405cda:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405cde:	9307      	str	r3, [sp, #28]
  405ce0:	920d      	str	r2, [sp, #52]	; 0x34
  405ce2:	2667      	movs	r6, #103	; 0x67
  405ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405ce6:	2b00      	cmp	r3, #0
  405ce8:	f040 8096 	bne.w	405e18 <_vfprintf_r+0x117c>
  405cec:	9309      	str	r3, [sp, #36]	; 0x24
  405cee:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405cf2:	f7ff b905 	b.w	404f00 <_vfprintf_r+0x264>
  405cf6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  405cfa:	f001 ff25 	bl	407b48 <__retarget_lock_release_recursive>
  405cfe:	f04f 33ff 	mov.w	r3, #4294967295
  405d02:	930b      	str	r3, [sp, #44]	; 0x2c
  405d04:	f7ff ba30 	b.w	405168 <_vfprintf_r+0x4cc>
  405d08:	9a06      	ldr	r2, [sp, #24]
  405d0a:	07d5      	lsls	r5, r2, #31
  405d0c:	f57f aeb4 	bpl.w	405a78 <_vfprintf_r+0xddc>
  405d10:	e6a2      	b.n	405a58 <_vfprintf_r+0xdbc>
  405d12:	f108 0808 	add.w	r8, r8, #8
  405d16:	e69a      	b.n	405a4e <_vfprintf_r+0xdb2>
  405d18:	aa23      	add	r2, sp, #140	; 0x8c
  405d1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405d1c:	9808      	ldr	r0, [sp, #32]
  405d1e:	f002 fd67 	bl	4087f0 <__sprint_r>
  405d22:	2800      	cmp	r0, #0
  405d24:	f47f ad44 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405d28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405d2a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405d2c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405d30:	e6a2      	b.n	405a78 <_vfprintf_r+0xddc>
  405d32:	2306      	movs	r3, #6
  405d34:	9309      	str	r3, [sp, #36]	; 0x24
  405d36:	e772      	b.n	405c1e <_vfprintf_r+0xf82>
  405d38:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405d3c:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405d40:	f7ff bbc7 	b.w	4054d2 <_vfprintf_r+0x836>
  405d44:	aa23      	add	r2, sp, #140	; 0x8c
  405d46:	990a      	ldr	r1, [sp, #40]	; 0x28
  405d48:	9808      	ldr	r0, [sp, #32]
  405d4a:	f002 fd51 	bl	4087f0 <__sprint_r>
  405d4e:	2800      	cmp	r0, #0
  405d50:	f47f ad2e 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405d54:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405d58:	e437      	b.n	4055ca <_vfprintf_r+0x92e>
  405d5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405d5c:	4ab4      	ldr	r2, [pc, #720]	; (406030 <_vfprintf_r+0x1394>)
  405d5e:	f8c8 2000 	str.w	r2, [r8]
  405d62:	3301      	adds	r3, #1
  405d64:	3401      	adds	r4, #1
  405d66:	2201      	movs	r2, #1
  405d68:	2b07      	cmp	r3, #7
  405d6a:	9425      	str	r4, [sp, #148]	; 0x94
  405d6c:	9324      	str	r3, [sp, #144]	; 0x90
  405d6e:	f8c8 2004 	str.w	r2, [r8, #4]
  405d72:	f300 8124 	bgt.w	405fbe <_vfprintf_r+0x1322>
  405d76:	f108 0808 	add.w	r8, r8, #8
  405d7a:	b929      	cbnz	r1, 405d88 <_vfprintf_r+0x10ec>
  405d7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405d7e:	b91b      	cbnz	r3, 405d88 <_vfprintf_r+0x10ec>
  405d80:	9b06      	ldr	r3, [sp, #24]
  405d82:	07de      	lsls	r6, r3, #31
  405d84:	f57f a98f 	bpl.w	4050a6 <_vfprintf_r+0x40a>
  405d88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405d8a:	9814      	ldr	r0, [sp, #80]	; 0x50
  405d8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405d8e:	f8c8 2000 	str.w	r2, [r8]
  405d92:	3301      	adds	r3, #1
  405d94:	4602      	mov	r2, r0
  405d96:	4422      	add	r2, r4
  405d98:	2b07      	cmp	r3, #7
  405d9a:	9225      	str	r2, [sp, #148]	; 0x94
  405d9c:	f8c8 0004 	str.w	r0, [r8, #4]
  405da0:	9324      	str	r3, [sp, #144]	; 0x90
  405da2:	f300 8169 	bgt.w	406078 <_vfprintf_r+0x13dc>
  405da6:	f108 0808 	add.w	r8, r8, #8
  405daa:	2900      	cmp	r1, #0
  405dac:	f2c0 8136 	blt.w	40601c <_vfprintf_r+0x1380>
  405db0:	9911      	ldr	r1, [sp, #68]	; 0x44
  405db2:	f8c8 7000 	str.w	r7, [r8]
  405db6:	3301      	adds	r3, #1
  405db8:	188c      	adds	r4, r1, r2
  405dba:	2b07      	cmp	r3, #7
  405dbc:	9425      	str	r4, [sp, #148]	; 0x94
  405dbe:	9324      	str	r3, [sp, #144]	; 0x90
  405dc0:	f8c8 1004 	str.w	r1, [r8, #4]
  405dc4:	f77f a96d 	ble.w	4050a2 <_vfprintf_r+0x406>
  405dc8:	e4e0      	b.n	40578c <_vfprintf_r+0xaf0>
  405dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405dce:	6813      	ldr	r3, [r2, #0]
  405dd0:	17cd      	asrs	r5, r1, #31
  405dd2:	4608      	mov	r0, r1
  405dd4:	3204      	adds	r2, #4
  405dd6:	4629      	mov	r1, r5
  405dd8:	920e      	str	r2, [sp, #56]	; 0x38
  405dda:	e9c3 0100 	strd	r0, r1, [r3]
  405dde:	f7fe bfa9 	b.w	404d34 <_vfprintf_r+0x98>
  405de2:	46da      	mov	sl, fp
  405de4:	f7ff bbc4 	b.w	405570 <_vfprintf_r+0x8d4>
  405de8:	aa23      	add	r2, sp, #140	; 0x8c
  405dea:	990a      	ldr	r1, [sp, #40]	; 0x28
  405dec:	9808      	ldr	r0, [sp, #32]
  405dee:	f002 fcff 	bl	4087f0 <__sprint_r>
  405df2:	2800      	cmp	r0, #0
  405df4:	f47f acdc 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405df8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405dfa:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405dfe:	f7ff bbfd 	b.w	4055fc <_vfprintf_r+0x960>
  405e02:	4638      	mov	r0, r7
  405e04:	9409      	str	r4, [sp, #36]	; 0x24
  405e06:	f7fe fedb 	bl	404bc0 <strlen>
  405e0a:	950e      	str	r5, [sp, #56]	; 0x38
  405e0c:	900d      	str	r0, [sp, #52]	; 0x34
  405e0e:	f8cd b018 	str.w	fp, [sp, #24]
  405e12:	4603      	mov	r3, r0
  405e14:	f7ff ba36 	b.w	405284 <_vfprintf_r+0x5e8>
  405e18:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405e1c:	2300      	movs	r3, #0
  405e1e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405e22:	9309      	str	r3, [sp, #36]	; 0x24
  405e24:	f7ff b86f 	b.w	404f06 <_vfprintf_r+0x26a>
  405e28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405e2a:	9310      	str	r3, [sp, #64]	; 0x40
  405e2c:	461a      	mov	r2, r3
  405e2e:	3303      	adds	r3, #3
  405e30:	db04      	blt.n	405e3c <_vfprintf_r+0x11a0>
  405e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405e34:	4619      	mov	r1, r3
  405e36:	4291      	cmp	r1, r2
  405e38:	f6bf af45 	bge.w	405cc6 <_vfprintf_r+0x102a>
  405e3c:	3e02      	subs	r6, #2
  405e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405e40:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  405e44:	3b01      	subs	r3, #1
  405e46:	2b00      	cmp	r3, #0
  405e48:	931d      	str	r3, [sp, #116]	; 0x74
  405e4a:	bfbd      	ittte	lt
  405e4c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  405e4e:	f1c3 0301 	rsblt	r3, r3, #1
  405e52:	222d      	movlt	r2, #45	; 0x2d
  405e54:	222b      	movge	r2, #43	; 0x2b
  405e56:	2b09      	cmp	r3, #9
  405e58:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405e5c:	f340 813e 	ble.w	4060dc <_vfprintf_r+0x1440>
  405e60:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  405e64:	4620      	mov	r0, r4
  405e66:	4d73      	ldr	r5, [pc, #460]	; (406034 <_vfprintf_r+0x1398>)
  405e68:	e000      	b.n	405e6c <_vfprintf_r+0x11d0>
  405e6a:	4610      	mov	r0, r2
  405e6c:	fb85 1203 	smull	r1, r2, r5, r3
  405e70:	17d9      	asrs	r1, r3, #31
  405e72:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405e76:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405e7a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405e7e:	3230      	adds	r2, #48	; 0x30
  405e80:	2909      	cmp	r1, #9
  405e82:	f800 2c01 	strb.w	r2, [r0, #-1]
  405e86:	460b      	mov	r3, r1
  405e88:	f100 32ff 	add.w	r2, r0, #4294967295
  405e8c:	dced      	bgt.n	405e6a <_vfprintf_r+0x11ce>
  405e8e:	3330      	adds	r3, #48	; 0x30
  405e90:	3802      	subs	r0, #2
  405e92:	b2d9      	uxtb	r1, r3
  405e94:	4284      	cmp	r4, r0
  405e96:	f802 1c01 	strb.w	r1, [r2, #-1]
  405e9a:	f240 8190 	bls.w	4061be <_vfprintf_r+0x1522>
  405e9e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  405ea2:	4613      	mov	r3, r2
  405ea4:	e001      	b.n	405eaa <_vfprintf_r+0x120e>
  405ea6:	f813 1b01 	ldrb.w	r1, [r3], #1
  405eaa:	f800 1b01 	strb.w	r1, [r0], #1
  405eae:	42a3      	cmp	r3, r4
  405eb0:	d1f9      	bne.n	405ea6 <_vfprintf_r+0x120a>
  405eb2:	3301      	adds	r3, #1
  405eb4:	1a9b      	subs	r3, r3, r2
  405eb6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  405eba:	4413      	add	r3, r2
  405ebc:	aa1f      	add	r2, sp, #124	; 0x7c
  405ebe:	1a9b      	subs	r3, r3, r2
  405ec0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ec2:	9319      	str	r3, [sp, #100]	; 0x64
  405ec4:	2a01      	cmp	r2, #1
  405ec6:	4413      	add	r3, r2
  405ec8:	930d      	str	r3, [sp, #52]	; 0x34
  405eca:	f340 8145 	ble.w	406158 <_vfprintf_r+0x14bc>
  405ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405ed0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405ed2:	4413      	add	r3, r2
  405ed4:	930d      	str	r3, [sp, #52]	; 0x34
  405ed6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405eda:	9307      	str	r3, [sp, #28]
  405edc:	2300      	movs	r3, #0
  405ede:	9310      	str	r3, [sp, #64]	; 0x40
  405ee0:	e700      	b.n	405ce4 <_vfprintf_r+0x1048>
  405ee2:	aa23      	add	r2, sp, #140	; 0x8c
  405ee4:	990a      	ldr	r1, [sp, #40]	; 0x28
  405ee6:	9808      	ldr	r0, [sp, #32]
  405ee8:	f002 fc82 	bl	4087f0 <__sprint_r>
  405eec:	2800      	cmp	r0, #0
  405eee:	f47f ac5f 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405ef2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405ef4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405ef8:	e4d1      	b.n	40589e <_vfprintf_r+0xc02>
  405efa:	4623      	mov	r3, r4
  405efc:	e6d5      	b.n	405caa <_vfprintf_r+0x100e>
  405efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f00:	9710      	str	r7, [sp, #64]	; 0x40
  405f02:	2b06      	cmp	r3, #6
  405f04:	bf28      	it	cs
  405f06:	2306      	movcs	r3, #6
  405f08:	9709      	str	r7, [sp, #36]	; 0x24
  405f0a:	46ba      	mov	sl, r7
  405f0c:	9307      	str	r3, [sp, #28]
  405f0e:	950e      	str	r5, [sp, #56]	; 0x38
  405f10:	f8cd b018 	str.w	fp, [sp, #24]
  405f14:	930d      	str	r3, [sp, #52]	; 0x34
  405f16:	4f48      	ldr	r7, [pc, #288]	; (406038 <_vfprintf_r+0x139c>)
  405f18:	f7fe bff2 	b.w	404f00 <_vfprintf_r+0x264>
  405f1c:	aa23      	add	r2, sp, #140	; 0x8c
  405f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405f20:	9808      	ldr	r0, [sp, #32]
  405f22:	f002 fc65 	bl	4087f0 <__sprint_r>
  405f26:	2800      	cmp	r0, #0
  405f28:	f47f ac42 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405f2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405f2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405f30:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405f32:	1ad3      	subs	r3, r2, r3
  405f34:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405f38:	e5b6      	b.n	405aa8 <_vfprintf_r+0xe0c>
  405f3a:	46a2      	mov	sl, r4
  405f3c:	f7ff bb18 	b.w	405570 <_vfprintf_r+0x8d4>
  405f40:	a821      	add	r0, sp, #132	; 0x84
  405f42:	a91e      	add	r1, sp, #120	; 0x78
  405f44:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405f46:	9004      	str	r0, [sp, #16]
  405f48:	9103      	str	r1, [sp, #12]
  405f4a:	a81d      	add	r0, sp, #116	; 0x74
  405f4c:	2103      	movs	r1, #3
  405f4e:	9002      	str	r0, [sp, #8]
  405f50:	9a07      	ldr	r2, [sp, #28]
  405f52:	9501      	str	r5, [sp, #4]
  405f54:	4653      	mov	r3, sl
  405f56:	9100      	str	r1, [sp, #0]
  405f58:	9808      	ldr	r0, [sp, #32]
  405f5a:	f000 fa95 	bl	406488 <_dtoa_r>
  405f5e:	4607      	mov	r7, r0
  405f60:	1944      	adds	r4, r0, r5
  405f62:	783b      	ldrb	r3, [r7, #0]
  405f64:	2b30      	cmp	r3, #48	; 0x30
  405f66:	f000 80ca 	beq.w	4060fe <_vfprintf_r+0x1462>
  405f6a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405f6c:	442c      	add	r4, r5
  405f6e:	e689      	b.n	405c84 <_vfprintf_r+0xfe8>
  405f70:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405f74:	4413      	add	r3, r2
  405f76:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405f78:	930d      	str	r3, [sp, #52]	; 0x34
  405f7a:	2a00      	cmp	r2, #0
  405f7c:	f340 80e4 	ble.w	406148 <_vfprintf_r+0x14ac>
  405f80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405f84:	9307      	str	r3, [sp, #28]
  405f86:	2667      	movs	r6, #103	; 0x67
  405f88:	e6ac      	b.n	405ce4 <_vfprintf_r+0x1048>
  405f8a:	2b00      	cmp	r3, #0
  405f8c:	f340 80fb 	ble.w	406186 <_vfprintf_r+0x14ea>
  405f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405f92:	2a00      	cmp	r2, #0
  405f94:	f040 80ce 	bne.w	406134 <_vfprintf_r+0x1498>
  405f98:	f01b 0f01 	tst.w	fp, #1
  405f9c:	f040 80ca 	bne.w	406134 <_vfprintf_r+0x1498>
  405fa0:	9307      	str	r3, [sp, #28]
  405fa2:	930d      	str	r3, [sp, #52]	; 0x34
  405fa4:	e69e      	b.n	405ce4 <_vfprintf_r+0x1048>
  405fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405fa8:	9307      	str	r3, [sp, #28]
  405faa:	930d      	str	r3, [sp, #52]	; 0x34
  405fac:	9009      	str	r0, [sp, #36]	; 0x24
  405fae:	950e      	str	r5, [sp, #56]	; 0x38
  405fb0:	f8cd b018 	str.w	fp, [sp, #24]
  405fb4:	9010      	str	r0, [sp, #64]	; 0x40
  405fb6:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405fba:	f7fe bfa1 	b.w	404f00 <_vfprintf_r+0x264>
  405fbe:	aa23      	add	r2, sp, #140	; 0x8c
  405fc0:	990a      	ldr	r1, [sp, #40]	; 0x28
  405fc2:	9808      	ldr	r0, [sp, #32]
  405fc4:	f002 fc14 	bl	4087f0 <__sprint_r>
  405fc8:	2800      	cmp	r0, #0
  405fca:	f47f abf1 	bne.w	4057b0 <_vfprintf_r+0xb14>
  405fce:	991d      	ldr	r1, [sp, #116]	; 0x74
  405fd0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405fd2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405fd6:	e6d0      	b.n	405d7a <_vfprintf_r+0x10de>
  405fd8:	2e47      	cmp	r6, #71	; 0x47
  405fda:	f47f ae52 	bne.w	405c82 <_vfprintf_r+0xfe6>
  405fde:	f01b 0f01 	tst.w	fp, #1
  405fe2:	f000 80da 	beq.w	40619a <_vfprintf_r+0x14fe>
  405fe6:	2e46      	cmp	r6, #70	; 0x46
  405fe8:	eb07 0405 	add.w	r4, r7, r5
  405fec:	d0b9      	beq.n	405f62 <_vfprintf_r+0x12c6>
  405fee:	e649      	b.n	405c84 <_vfprintf_r+0xfe8>
  405ff0:	a821      	add	r0, sp, #132	; 0x84
  405ff2:	a91e      	add	r1, sp, #120	; 0x78
  405ff4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405ff6:	9004      	str	r0, [sp, #16]
  405ff8:	9103      	str	r1, [sp, #12]
  405ffa:	a81d      	add	r0, sp, #116	; 0x74
  405ffc:	2103      	movs	r1, #3
  405ffe:	9002      	str	r0, [sp, #8]
  406000:	9a07      	ldr	r2, [sp, #28]
  406002:	9401      	str	r4, [sp, #4]
  406004:	4653      	mov	r3, sl
  406006:	9100      	str	r1, [sp, #0]
  406008:	9808      	ldr	r0, [sp, #32]
  40600a:	f000 fa3d 	bl	406488 <_dtoa_r>
  40600e:	4625      	mov	r5, r4
  406010:	4607      	mov	r7, r0
  406012:	e7e8      	b.n	405fe6 <_vfprintf_r+0x134a>
  406014:	2300      	movs	r3, #0
  406016:	9309      	str	r3, [sp, #36]	; 0x24
  406018:	f7fe bec1 	b.w	404d9e <_vfprintf_r+0x102>
  40601c:	424e      	negs	r6, r1
  40601e:	3110      	adds	r1, #16
  406020:	4d06      	ldr	r5, [pc, #24]	; (40603c <_vfprintf_r+0x13a0>)
  406022:	da43      	bge.n	4060ac <_vfprintf_r+0x1410>
  406024:	2410      	movs	r4, #16
  406026:	f8dd a020 	ldr.w	sl, [sp, #32]
  40602a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40602e:	e00c      	b.n	40604a <_vfprintf_r+0x13ae>
  406030:	00409364 	.word	0x00409364
  406034:	66666667 	.word	0x66666667
  406038:	0040935c 	.word	0x0040935c
  40603c:	00409378 	.word	0x00409378
  406040:	f108 0808 	add.w	r8, r8, #8
  406044:	3e10      	subs	r6, #16
  406046:	2e10      	cmp	r6, #16
  406048:	dd30      	ble.n	4060ac <_vfprintf_r+0x1410>
  40604a:	3301      	adds	r3, #1
  40604c:	3210      	adds	r2, #16
  40604e:	2b07      	cmp	r3, #7
  406050:	9225      	str	r2, [sp, #148]	; 0x94
  406052:	9324      	str	r3, [sp, #144]	; 0x90
  406054:	f8c8 5000 	str.w	r5, [r8]
  406058:	f8c8 4004 	str.w	r4, [r8, #4]
  40605c:	ddf0      	ble.n	406040 <_vfprintf_r+0x13a4>
  40605e:	aa23      	add	r2, sp, #140	; 0x8c
  406060:	4659      	mov	r1, fp
  406062:	4650      	mov	r0, sl
  406064:	f002 fbc4 	bl	4087f0 <__sprint_r>
  406068:	2800      	cmp	r0, #0
  40606a:	f47f aeba 	bne.w	405de2 <_vfprintf_r+0x1146>
  40606e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406070:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406072:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406076:	e7e5      	b.n	406044 <_vfprintf_r+0x13a8>
  406078:	aa23      	add	r2, sp, #140	; 0x8c
  40607a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40607c:	9808      	ldr	r0, [sp, #32]
  40607e:	f002 fbb7 	bl	4087f0 <__sprint_r>
  406082:	2800      	cmp	r0, #0
  406084:	f47f ab94 	bne.w	4057b0 <_vfprintf_r+0xb14>
  406088:	991d      	ldr	r1, [sp, #116]	; 0x74
  40608a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40608c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40608e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  406092:	e68a      	b.n	405daa <_vfprintf_r+0x110e>
  406094:	9808      	ldr	r0, [sp, #32]
  406096:	aa23      	add	r2, sp, #140	; 0x8c
  406098:	4651      	mov	r1, sl
  40609a:	f002 fba9 	bl	4087f0 <__sprint_r>
  40609e:	2800      	cmp	r0, #0
  4060a0:	f43f aa64 	beq.w	40556c <_vfprintf_r+0x8d0>
  4060a4:	f7ff ba64 	b.w	405570 <_vfprintf_r+0x8d4>
  4060a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4060aa:	e5fe      	b.n	405caa <_vfprintf_r+0x100e>
  4060ac:	3301      	adds	r3, #1
  4060ae:	4432      	add	r2, r6
  4060b0:	2b07      	cmp	r3, #7
  4060b2:	e888 0060 	stmia.w	r8, {r5, r6}
  4060b6:	9225      	str	r2, [sp, #148]	; 0x94
  4060b8:	9324      	str	r3, [sp, #144]	; 0x90
  4060ba:	f108 0808 	add.w	r8, r8, #8
  4060be:	f77f ae77 	ble.w	405db0 <_vfprintf_r+0x1114>
  4060c2:	aa23      	add	r2, sp, #140	; 0x8c
  4060c4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4060c6:	9808      	ldr	r0, [sp, #32]
  4060c8:	f002 fb92 	bl	4087f0 <__sprint_r>
  4060cc:	2800      	cmp	r0, #0
  4060ce:	f47f ab6f 	bne.w	4057b0 <_vfprintf_r+0xb14>
  4060d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4060d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060d6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4060da:	e669      	b.n	405db0 <_vfprintf_r+0x1114>
  4060dc:	3330      	adds	r3, #48	; 0x30
  4060de:	2230      	movs	r2, #48	; 0x30
  4060e0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4060e4:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4060e8:	ab20      	add	r3, sp, #128	; 0x80
  4060ea:	e6e7      	b.n	405ebc <_vfprintf_r+0x1220>
  4060ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4060ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4060f0:	4413      	add	r3, r2
  4060f2:	930d      	str	r3, [sp, #52]	; 0x34
  4060f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4060f8:	9307      	str	r3, [sp, #28]
  4060fa:	2667      	movs	r6, #103	; 0x67
  4060fc:	e5f2      	b.n	405ce4 <_vfprintf_r+0x1048>
  4060fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406100:	9807      	ldr	r0, [sp, #28]
  406102:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406104:	4651      	mov	r1, sl
  406106:	f002 fe79 	bl	408dfc <__aeabi_dcmpeq>
  40610a:	2800      	cmp	r0, #0
  40610c:	f47f af2d 	bne.w	405f6a <_vfprintf_r+0x12ce>
  406110:	f1c5 0501 	rsb	r5, r5, #1
  406114:	951d      	str	r5, [sp, #116]	; 0x74
  406116:	442c      	add	r4, r5
  406118:	e5b4      	b.n	405c84 <_vfprintf_r+0xfe8>
  40611a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40611c:	4f33      	ldr	r7, [pc, #204]	; (4061ec <_vfprintf_r+0x1550>)
  40611e:	2b00      	cmp	r3, #0
  406120:	bfb6      	itet	lt
  406122:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  406126:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  40612a:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40612e:	4b30      	ldr	r3, [pc, #192]	; (4061f0 <_vfprintf_r+0x1554>)
  406130:	f7ff b9d1 	b.w	4054d6 <_vfprintf_r+0x83a>
  406134:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406136:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406138:	4413      	add	r3, r2
  40613a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40613c:	441a      	add	r2, r3
  40613e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406142:	920d      	str	r2, [sp, #52]	; 0x34
  406144:	9307      	str	r3, [sp, #28]
  406146:	e5cd      	b.n	405ce4 <_vfprintf_r+0x1048>
  406148:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40614a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40614c:	f1c3 0301 	rsb	r3, r3, #1
  406150:	441a      	add	r2, r3
  406152:	4613      	mov	r3, r2
  406154:	920d      	str	r2, [sp, #52]	; 0x34
  406156:	e713      	b.n	405f80 <_vfprintf_r+0x12e4>
  406158:	f01b 0301 	ands.w	r3, fp, #1
  40615c:	9310      	str	r3, [sp, #64]	; 0x40
  40615e:	f47f aeb6 	bne.w	405ece <_vfprintf_r+0x1232>
  406162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406164:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406168:	9307      	str	r3, [sp, #28]
  40616a:	e5bb      	b.n	405ce4 <_vfprintf_r+0x1048>
  40616c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40616e:	f899 6001 	ldrb.w	r6, [r9, #1]
  406172:	6823      	ldr	r3, [r4, #0]
  406174:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  406178:	9309      	str	r3, [sp, #36]	; 0x24
  40617a:	4623      	mov	r3, r4
  40617c:	3304      	adds	r3, #4
  40617e:	4681      	mov	r9, r0
  406180:	930e      	str	r3, [sp, #56]	; 0x38
  406182:	f7fe be0a 	b.w	404d9a <_vfprintf_r+0xfe>
  406186:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406188:	b913      	cbnz	r3, 406190 <_vfprintf_r+0x14f4>
  40618a:	f01b 0f01 	tst.w	fp, #1
  40618e:	d002      	beq.n	406196 <_vfprintf_r+0x14fa>
  406190:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406192:	3301      	adds	r3, #1
  406194:	e7d1      	b.n	40613a <_vfprintf_r+0x149e>
  406196:	2301      	movs	r3, #1
  406198:	e702      	b.n	405fa0 <_vfprintf_r+0x1304>
  40619a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40619c:	1bdb      	subs	r3, r3, r7
  40619e:	9311      	str	r3, [sp, #68]	; 0x44
  4061a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4061a2:	2b47      	cmp	r3, #71	; 0x47
  4061a4:	f43f ae40 	beq.w	405e28 <_vfprintf_r+0x118c>
  4061a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4061aa:	9310      	str	r3, [sp, #64]	; 0x40
  4061ac:	e647      	b.n	405e3e <_vfprintf_r+0x11a2>
  4061ae:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4061b2:	f7ff b81d 	b.w	4051f0 <_vfprintf_r+0x554>
  4061b6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4061ba:	f7ff b918 	b.w	4053ee <_vfprintf_r+0x752>
  4061be:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4061c2:	e67b      	b.n	405ebc <_vfprintf_r+0x1220>
  4061c4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4061c8:	f7ff b866 	b.w	405298 <_vfprintf_r+0x5fc>
  4061cc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4061d0:	f7ff b9ac 	b.w	40552c <_vfprintf_r+0x890>
  4061d4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4061d8:	f7ff b934 	b.w	405444 <_vfprintf_r+0x7a8>
  4061dc:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4061e0:	f7ff b8b0 	b.w	405344 <_vfprintf_r+0x6a8>
  4061e4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4061e8:	f7ff b945 	b.w	405476 <_vfprintf_r+0x7da>
  4061ec:	00409330 	.word	0x00409330
  4061f0:	0040932c 	.word	0x0040932c

004061f4 <__sbprintf>:
  4061f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4061f8:	460c      	mov	r4, r1
  4061fa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4061fe:	8989      	ldrh	r1, [r1, #12]
  406200:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406202:	89e5      	ldrh	r5, [r4, #14]
  406204:	9619      	str	r6, [sp, #100]	; 0x64
  406206:	f021 0102 	bic.w	r1, r1, #2
  40620a:	4606      	mov	r6, r0
  40620c:	69e0      	ldr	r0, [r4, #28]
  40620e:	f8ad 100c 	strh.w	r1, [sp, #12]
  406212:	4617      	mov	r7, r2
  406214:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406218:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40621a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40621e:	4698      	mov	r8, r3
  406220:	ad1a      	add	r5, sp, #104	; 0x68
  406222:	2300      	movs	r3, #0
  406224:	9007      	str	r0, [sp, #28]
  406226:	a816      	add	r0, sp, #88	; 0x58
  406228:	9209      	str	r2, [sp, #36]	; 0x24
  40622a:	9306      	str	r3, [sp, #24]
  40622c:	9500      	str	r5, [sp, #0]
  40622e:	9504      	str	r5, [sp, #16]
  406230:	9102      	str	r1, [sp, #8]
  406232:	9105      	str	r1, [sp, #20]
  406234:	f001 fc82 	bl	407b3c <__retarget_lock_init_recursive>
  406238:	4643      	mov	r3, r8
  40623a:	463a      	mov	r2, r7
  40623c:	4669      	mov	r1, sp
  40623e:	4630      	mov	r0, r6
  406240:	f7fe fd2c 	bl	404c9c <_vfprintf_r>
  406244:	1e05      	subs	r5, r0, #0
  406246:	db07      	blt.n	406258 <__sbprintf+0x64>
  406248:	4630      	mov	r0, r6
  40624a:	4669      	mov	r1, sp
  40624c:	f001 f8e6 	bl	40741c <_fflush_r>
  406250:	2800      	cmp	r0, #0
  406252:	bf18      	it	ne
  406254:	f04f 35ff 	movne.w	r5, #4294967295
  406258:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40625c:	065b      	lsls	r3, r3, #25
  40625e:	d503      	bpl.n	406268 <__sbprintf+0x74>
  406260:	89a3      	ldrh	r3, [r4, #12]
  406262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406266:	81a3      	strh	r3, [r4, #12]
  406268:	9816      	ldr	r0, [sp, #88]	; 0x58
  40626a:	f001 fc69 	bl	407b40 <__retarget_lock_close_recursive>
  40626e:	4628      	mov	r0, r5
  406270:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406278 <__swsetup_r>:
  406278:	b538      	push	{r3, r4, r5, lr}
  40627a:	4b30      	ldr	r3, [pc, #192]	; (40633c <__swsetup_r+0xc4>)
  40627c:	681b      	ldr	r3, [r3, #0]
  40627e:	4605      	mov	r5, r0
  406280:	460c      	mov	r4, r1
  406282:	b113      	cbz	r3, 40628a <__swsetup_r+0x12>
  406284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406286:	2a00      	cmp	r2, #0
  406288:	d038      	beq.n	4062fc <__swsetup_r+0x84>
  40628a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40628e:	b293      	uxth	r3, r2
  406290:	0718      	lsls	r0, r3, #28
  406292:	d50c      	bpl.n	4062ae <__swsetup_r+0x36>
  406294:	6920      	ldr	r0, [r4, #16]
  406296:	b1a8      	cbz	r0, 4062c4 <__swsetup_r+0x4c>
  406298:	f013 0201 	ands.w	r2, r3, #1
  40629c:	d01e      	beq.n	4062dc <__swsetup_r+0x64>
  40629e:	6963      	ldr	r3, [r4, #20]
  4062a0:	2200      	movs	r2, #0
  4062a2:	425b      	negs	r3, r3
  4062a4:	61a3      	str	r3, [r4, #24]
  4062a6:	60a2      	str	r2, [r4, #8]
  4062a8:	b1f0      	cbz	r0, 4062e8 <__swsetup_r+0x70>
  4062aa:	2000      	movs	r0, #0
  4062ac:	bd38      	pop	{r3, r4, r5, pc}
  4062ae:	06d9      	lsls	r1, r3, #27
  4062b0:	d53c      	bpl.n	40632c <__swsetup_r+0xb4>
  4062b2:	0758      	lsls	r0, r3, #29
  4062b4:	d426      	bmi.n	406304 <__swsetup_r+0x8c>
  4062b6:	6920      	ldr	r0, [r4, #16]
  4062b8:	f042 0308 	orr.w	r3, r2, #8
  4062bc:	81a3      	strh	r3, [r4, #12]
  4062be:	b29b      	uxth	r3, r3
  4062c0:	2800      	cmp	r0, #0
  4062c2:	d1e9      	bne.n	406298 <__swsetup_r+0x20>
  4062c4:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4062c8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4062cc:	d0e4      	beq.n	406298 <__swsetup_r+0x20>
  4062ce:	4628      	mov	r0, r5
  4062d0:	4621      	mov	r1, r4
  4062d2:	f001 fc69 	bl	407ba8 <__smakebuf_r>
  4062d6:	89a3      	ldrh	r3, [r4, #12]
  4062d8:	6920      	ldr	r0, [r4, #16]
  4062da:	e7dd      	b.n	406298 <__swsetup_r+0x20>
  4062dc:	0799      	lsls	r1, r3, #30
  4062de:	bf58      	it	pl
  4062e0:	6962      	ldrpl	r2, [r4, #20]
  4062e2:	60a2      	str	r2, [r4, #8]
  4062e4:	2800      	cmp	r0, #0
  4062e6:	d1e0      	bne.n	4062aa <__swsetup_r+0x32>
  4062e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062ec:	061a      	lsls	r2, r3, #24
  4062ee:	d5dd      	bpl.n	4062ac <__swsetup_r+0x34>
  4062f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4062f4:	81a3      	strh	r3, [r4, #12]
  4062f6:	f04f 30ff 	mov.w	r0, #4294967295
  4062fa:	bd38      	pop	{r3, r4, r5, pc}
  4062fc:	4618      	mov	r0, r3
  4062fe:	f001 f8e5 	bl	4074cc <__sinit>
  406302:	e7c2      	b.n	40628a <__swsetup_r+0x12>
  406304:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406306:	b151      	cbz	r1, 40631e <__swsetup_r+0xa6>
  406308:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40630c:	4299      	cmp	r1, r3
  40630e:	d004      	beq.n	40631a <__swsetup_r+0xa2>
  406310:	4628      	mov	r0, r5
  406312:	f001 f97d 	bl	407610 <_free_r>
  406316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40631a:	2300      	movs	r3, #0
  40631c:	6323      	str	r3, [r4, #48]	; 0x30
  40631e:	2300      	movs	r3, #0
  406320:	6920      	ldr	r0, [r4, #16]
  406322:	6063      	str	r3, [r4, #4]
  406324:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406328:	6020      	str	r0, [r4, #0]
  40632a:	e7c5      	b.n	4062b8 <__swsetup_r+0x40>
  40632c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406330:	2309      	movs	r3, #9
  406332:	602b      	str	r3, [r5, #0]
  406334:	f04f 30ff 	mov.w	r0, #4294967295
  406338:	81a2      	strh	r2, [r4, #12]
  40633a:	bd38      	pop	{r3, r4, r5, pc}
  40633c:	2040000c 	.word	0x2040000c

00406340 <register_fini>:
  406340:	4b02      	ldr	r3, [pc, #8]	; (40634c <register_fini+0xc>)
  406342:	b113      	cbz	r3, 40634a <register_fini+0xa>
  406344:	4802      	ldr	r0, [pc, #8]	; (406350 <register_fini+0x10>)
  406346:	f000 b805 	b.w	406354 <atexit>
  40634a:	4770      	bx	lr
  40634c:	00000000 	.word	0x00000000
  406350:	0040753d 	.word	0x0040753d

00406354 <atexit>:
  406354:	2300      	movs	r3, #0
  406356:	4601      	mov	r1, r0
  406358:	461a      	mov	r2, r3
  40635a:	4618      	mov	r0, r3
  40635c:	f002 ba68 	b.w	408830 <__register_exitproc>

00406360 <quorem>:
  406360:	6902      	ldr	r2, [r0, #16]
  406362:	690b      	ldr	r3, [r1, #16]
  406364:	4293      	cmp	r3, r2
  406366:	f300 808d 	bgt.w	406484 <quorem+0x124>
  40636a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40636e:	f103 38ff 	add.w	r8, r3, #4294967295
  406372:	f101 0714 	add.w	r7, r1, #20
  406376:	f100 0b14 	add.w	fp, r0, #20
  40637a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40637e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406382:	ea4f 0488 	mov.w	r4, r8, lsl #2
  406386:	b083      	sub	sp, #12
  406388:	3201      	adds	r2, #1
  40638a:	fbb3 f9f2 	udiv	r9, r3, r2
  40638e:	eb0b 0304 	add.w	r3, fp, r4
  406392:	9400      	str	r4, [sp, #0]
  406394:	eb07 0a04 	add.w	sl, r7, r4
  406398:	9301      	str	r3, [sp, #4]
  40639a:	f1b9 0f00 	cmp.w	r9, #0
  40639e:	d039      	beq.n	406414 <quorem+0xb4>
  4063a0:	2500      	movs	r5, #0
  4063a2:	462e      	mov	r6, r5
  4063a4:	46bc      	mov	ip, r7
  4063a6:	46de      	mov	lr, fp
  4063a8:	f85c 4b04 	ldr.w	r4, [ip], #4
  4063ac:	f8de 3000 	ldr.w	r3, [lr]
  4063b0:	b2a2      	uxth	r2, r4
  4063b2:	fb09 5502 	mla	r5, r9, r2, r5
  4063b6:	0c22      	lsrs	r2, r4, #16
  4063b8:	0c2c      	lsrs	r4, r5, #16
  4063ba:	fb09 4202 	mla	r2, r9, r2, r4
  4063be:	b2ad      	uxth	r5, r5
  4063c0:	1b75      	subs	r5, r6, r5
  4063c2:	b296      	uxth	r6, r2
  4063c4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4063c8:	fa15 f383 	uxtah	r3, r5, r3
  4063cc:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4063d0:	b29b      	uxth	r3, r3
  4063d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4063d6:	45e2      	cmp	sl, ip
  4063d8:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4063dc:	f84e 3b04 	str.w	r3, [lr], #4
  4063e0:	ea4f 4626 	mov.w	r6, r6, asr #16
  4063e4:	d2e0      	bcs.n	4063a8 <quorem+0x48>
  4063e6:	9b00      	ldr	r3, [sp, #0]
  4063e8:	f85b 3003 	ldr.w	r3, [fp, r3]
  4063ec:	b993      	cbnz	r3, 406414 <quorem+0xb4>
  4063ee:	9c01      	ldr	r4, [sp, #4]
  4063f0:	1f23      	subs	r3, r4, #4
  4063f2:	459b      	cmp	fp, r3
  4063f4:	d20c      	bcs.n	406410 <quorem+0xb0>
  4063f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4063fa:	b94b      	cbnz	r3, 406410 <quorem+0xb0>
  4063fc:	f1a4 0308 	sub.w	r3, r4, #8
  406400:	e002      	b.n	406408 <quorem+0xa8>
  406402:	681a      	ldr	r2, [r3, #0]
  406404:	3b04      	subs	r3, #4
  406406:	b91a      	cbnz	r2, 406410 <quorem+0xb0>
  406408:	459b      	cmp	fp, r3
  40640a:	f108 38ff 	add.w	r8, r8, #4294967295
  40640e:	d3f8      	bcc.n	406402 <quorem+0xa2>
  406410:	f8c0 8010 	str.w	r8, [r0, #16]
  406414:	4604      	mov	r4, r0
  406416:	f001 fec5 	bl	4081a4 <__mcmp>
  40641a:	2800      	cmp	r0, #0
  40641c:	db2e      	blt.n	40647c <quorem+0x11c>
  40641e:	f109 0901 	add.w	r9, r9, #1
  406422:	465d      	mov	r5, fp
  406424:	2300      	movs	r3, #0
  406426:	f857 1b04 	ldr.w	r1, [r7], #4
  40642a:	6828      	ldr	r0, [r5, #0]
  40642c:	b28a      	uxth	r2, r1
  40642e:	1a9a      	subs	r2, r3, r2
  406430:	0c0b      	lsrs	r3, r1, #16
  406432:	fa12 f280 	uxtah	r2, r2, r0
  406436:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40643a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40643e:	b292      	uxth	r2, r2
  406440:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406444:	45ba      	cmp	sl, r7
  406446:	f845 2b04 	str.w	r2, [r5], #4
  40644a:	ea4f 4323 	mov.w	r3, r3, asr #16
  40644e:	d2ea      	bcs.n	406426 <quorem+0xc6>
  406450:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  406454:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  406458:	b982      	cbnz	r2, 40647c <quorem+0x11c>
  40645a:	1f1a      	subs	r2, r3, #4
  40645c:	4593      	cmp	fp, r2
  40645e:	d20b      	bcs.n	406478 <quorem+0x118>
  406460:	f853 2c04 	ldr.w	r2, [r3, #-4]
  406464:	b942      	cbnz	r2, 406478 <quorem+0x118>
  406466:	3b08      	subs	r3, #8
  406468:	e002      	b.n	406470 <quorem+0x110>
  40646a:	681a      	ldr	r2, [r3, #0]
  40646c:	3b04      	subs	r3, #4
  40646e:	b91a      	cbnz	r2, 406478 <quorem+0x118>
  406470:	459b      	cmp	fp, r3
  406472:	f108 38ff 	add.w	r8, r8, #4294967295
  406476:	d3f8      	bcc.n	40646a <quorem+0x10a>
  406478:	f8c4 8010 	str.w	r8, [r4, #16]
  40647c:	4648      	mov	r0, r9
  40647e:	b003      	add	sp, #12
  406480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406484:	2000      	movs	r0, #0
  406486:	4770      	bx	lr

00406488 <_dtoa_r>:
  406488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40648c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40648e:	b09b      	sub	sp, #108	; 0x6c
  406490:	4604      	mov	r4, r0
  406492:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  406494:	4692      	mov	sl, r2
  406496:	469b      	mov	fp, r3
  406498:	b141      	cbz	r1, 4064ac <_dtoa_r+0x24>
  40649a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40649c:	604a      	str	r2, [r1, #4]
  40649e:	2301      	movs	r3, #1
  4064a0:	4093      	lsls	r3, r2
  4064a2:	608b      	str	r3, [r1, #8]
  4064a4:	f001 fca6 	bl	407df4 <_Bfree>
  4064a8:	2300      	movs	r3, #0
  4064aa:	6423      	str	r3, [r4, #64]	; 0x40
  4064ac:	f1bb 0f00 	cmp.w	fp, #0
  4064b0:	465d      	mov	r5, fp
  4064b2:	db35      	blt.n	406520 <_dtoa_r+0x98>
  4064b4:	2300      	movs	r3, #0
  4064b6:	6033      	str	r3, [r6, #0]
  4064b8:	4b9d      	ldr	r3, [pc, #628]	; (406730 <_dtoa_r+0x2a8>)
  4064ba:	43ab      	bics	r3, r5
  4064bc:	d015      	beq.n	4064ea <_dtoa_r+0x62>
  4064be:	4650      	mov	r0, sl
  4064c0:	4659      	mov	r1, fp
  4064c2:	2200      	movs	r2, #0
  4064c4:	2300      	movs	r3, #0
  4064c6:	f002 fc99 	bl	408dfc <__aeabi_dcmpeq>
  4064ca:	4680      	mov	r8, r0
  4064cc:	2800      	cmp	r0, #0
  4064ce:	d02d      	beq.n	40652c <_dtoa_r+0xa4>
  4064d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4064d2:	2301      	movs	r3, #1
  4064d4:	6013      	str	r3, [r2, #0]
  4064d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4064d8:	2b00      	cmp	r3, #0
  4064da:	f000 80bd 	beq.w	406658 <_dtoa_r+0x1d0>
  4064de:	4895      	ldr	r0, [pc, #596]	; (406734 <_dtoa_r+0x2ac>)
  4064e0:	6018      	str	r0, [r3, #0]
  4064e2:	3801      	subs	r0, #1
  4064e4:	b01b      	add	sp, #108	; 0x6c
  4064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4064ec:	f242 730f 	movw	r3, #9999	; 0x270f
  4064f0:	6013      	str	r3, [r2, #0]
  4064f2:	f1ba 0f00 	cmp.w	sl, #0
  4064f6:	d10d      	bne.n	406514 <_dtoa_r+0x8c>
  4064f8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4064fc:	b955      	cbnz	r5, 406514 <_dtoa_r+0x8c>
  4064fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406500:	488d      	ldr	r0, [pc, #564]	; (406738 <_dtoa_r+0x2b0>)
  406502:	2b00      	cmp	r3, #0
  406504:	d0ee      	beq.n	4064e4 <_dtoa_r+0x5c>
  406506:	f100 0308 	add.w	r3, r0, #8
  40650a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40650c:	6013      	str	r3, [r2, #0]
  40650e:	b01b      	add	sp, #108	; 0x6c
  406510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406514:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406516:	4889      	ldr	r0, [pc, #548]	; (40673c <_dtoa_r+0x2b4>)
  406518:	2b00      	cmp	r3, #0
  40651a:	d0e3      	beq.n	4064e4 <_dtoa_r+0x5c>
  40651c:	1cc3      	adds	r3, r0, #3
  40651e:	e7f4      	b.n	40650a <_dtoa_r+0x82>
  406520:	2301      	movs	r3, #1
  406522:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  406526:	6033      	str	r3, [r6, #0]
  406528:	46ab      	mov	fp, r5
  40652a:	e7c5      	b.n	4064b8 <_dtoa_r+0x30>
  40652c:	aa18      	add	r2, sp, #96	; 0x60
  40652e:	ab19      	add	r3, sp, #100	; 0x64
  406530:	9201      	str	r2, [sp, #4]
  406532:	9300      	str	r3, [sp, #0]
  406534:	4652      	mov	r2, sl
  406536:	465b      	mov	r3, fp
  406538:	4620      	mov	r0, r4
  40653a:	f001 fed3 	bl	4082e4 <__d2b>
  40653e:	0d2b      	lsrs	r3, r5, #20
  406540:	4681      	mov	r9, r0
  406542:	d071      	beq.n	406628 <_dtoa_r+0x1a0>
  406544:	f3cb 0213 	ubfx	r2, fp, #0, #20
  406548:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40654c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40654e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  406552:	4650      	mov	r0, sl
  406554:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  406558:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40655c:	2200      	movs	r2, #0
  40655e:	4b78      	ldr	r3, [pc, #480]	; (406740 <_dtoa_r+0x2b8>)
  406560:	f7fd f9e6 	bl	403930 <__aeabi_dsub>
  406564:	a36c      	add	r3, pc, #432	; (adr r3, 406718 <_dtoa_r+0x290>)
  406566:	e9d3 2300 	ldrd	r2, r3, [r3]
  40656a:	f7fd fb95 	bl	403c98 <__aeabi_dmul>
  40656e:	a36c      	add	r3, pc, #432	; (adr r3, 406720 <_dtoa_r+0x298>)
  406570:	e9d3 2300 	ldrd	r2, r3, [r3]
  406574:	f7fd f9de 	bl	403934 <__adddf3>
  406578:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40657c:	4630      	mov	r0, r6
  40657e:	f7fd fb25 	bl	403bcc <__aeabi_i2d>
  406582:	a369      	add	r3, pc, #420	; (adr r3, 406728 <_dtoa_r+0x2a0>)
  406584:	e9d3 2300 	ldrd	r2, r3, [r3]
  406588:	f7fd fb86 	bl	403c98 <__aeabi_dmul>
  40658c:	4602      	mov	r2, r0
  40658e:	460b      	mov	r3, r1
  406590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406594:	f7fd f9ce 	bl	403934 <__adddf3>
  406598:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40659c:	f002 fc76 	bl	408e8c <__aeabi_d2iz>
  4065a0:	2200      	movs	r2, #0
  4065a2:	9002      	str	r0, [sp, #8]
  4065a4:	2300      	movs	r3, #0
  4065a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4065aa:	f002 fc31 	bl	408e10 <__aeabi_dcmplt>
  4065ae:	2800      	cmp	r0, #0
  4065b0:	f040 8173 	bne.w	40689a <_dtoa_r+0x412>
  4065b4:	9d02      	ldr	r5, [sp, #8]
  4065b6:	2d16      	cmp	r5, #22
  4065b8:	f200 815d 	bhi.w	406876 <_dtoa_r+0x3ee>
  4065bc:	4b61      	ldr	r3, [pc, #388]	; (406744 <_dtoa_r+0x2bc>)
  4065be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4065c2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4065c6:	4652      	mov	r2, sl
  4065c8:	465b      	mov	r3, fp
  4065ca:	f002 fc3f 	bl	408e4c <__aeabi_dcmpgt>
  4065ce:	2800      	cmp	r0, #0
  4065d0:	f000 81c5 	beq.w	40695e <_dtoa_r+0x4d6>
  4065d4:	1e6b      	subs	r3, r5, #1
  4065d6:	9302      	str	r3, [sp, #8]
  4065d8:	2300      	movs	r3, #0
  4065da:	930e      	str	r3, [sp, #56]	; 0x38
  4065dc:	1bbf      	subs	r7, r7, r6
  4065de:	1e7b      	subs	r3, r7, #1
  4065e0:	9306      	str	r3, [sp, #24]
  4065e2:	f100 8154 	bmi.w	40688e <_dtoa_r+0x406>
  4065e6:	2300      	movs	r3, #0
  4065e8:	9308      	str	r3, [sp, #32]
  4065ea:	9b02      	ldr	r3, [sp, #8]
  4065ec:	2b00      	cmp	r3, #0
  4065ee:	f2c0 8145 	blt.w	40687c <_dtoa_r+0x3f4>
  4065f2:	9a06      	ldr	r2, [sp, #24]
  4065f4:	930d      	str	r3, [sp, #52]	; 0x34
  4065f6:	4611      	mov	r1, r2
  4065f8:	4419      	add	r1, r3
  4065fa:	2300      	movs	r3, #0
  4065fc:	9106      	str	r1, [sp, #24]
  4065fe:	930c      	str	r3, [sp, #48]	; 0x30
  406600:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406602:	2b09      	cmp	r3, #9
  406604:	d82a      	bhi.n	40665c <_dtoa_r+0x1d4>
  406606:	2b05      	cmp	r3, #5
  406608:	f340 865b 	ble.w	4072c2 <_dtoa_r+0xe3a>
  40660c:	3b04      	subs	r3, #4
  40660e:	9324      	str	r3, [sp, #144]	; 0x90
  406610:	2500      	movs	r5, #0
  406612:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406614:	3b02      	subs	r3, #2
  406616:	2b03      	cmp	r3, #3
  406618:	f200 8642 	bhi.w	4072a0 <_dtoa_r+0xe18>
  40661c:	e8df f013 	tbh	[pc, r3, lsl #1]
  406620:	02c903d4 	.word	0x02c903d4
  406624:	046103df 	.word	0x046103df
  406628:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40662a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40662c:	443e      	add	r6, r7
  40662e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  406632:	2b20      	cmp	r3, #32
  406634:	f340 818e 	ble.w	406954 <_dtoa_r+0x4cc>
  406638:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40663c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  406640:	409d      	lsls	r5, r3
  406642:	fa2a f000 	lsr.w	r0, sl, r0
  406646:	4328      	orrs	r0, r5
  406648:	f7fd fab0 	bl	403bac <__aeabi_ui2d>
  40664c:	2301      	movs	r3, #1
  40664e:	3e01      	subs	r6, #1
  406650:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406654:	9314      	str	r3, [sp, #80]	; 0x50
  406656:	e781      	b.n	40655c <_dtoa_r+0xd4>
  406658:	483b      	ldr	r0, [pc, #236]	; (406748 <_dtoa_r+0x2c0>)
  40665a:	e743      	b.n	4064e4 <_dtoa_r+0x5c>
  40665c:	2100      	movs	r1, #0
  40665e:	6461      	str	r1, [r4, #68]	; 0x44
  406660:	4620      	mov	r0, r4
  406662:	9125      	str	r1, [sp, #148]	; 0x94
  406664:	f001 fba0 	bl	407da8 <_Balloc>
  406668:	f04f 33ff 	mov.w	r3, #4294967295
  40666c:	930a      	str	r3, [sp, #40]	; 0x28
  40666e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406670:	930f      	str	r3, [sp, #60]	; 0x3c
  406672:	2301      	movs	r3, #1
  406674:	9004      	str	r0, [sp, #16]
  406676:	6420      	str	r0, [r4, #64]	; 0x40
  406678:	9224      	str	r2, [sp, #144]	; 0x90
  40667a:	930b      	str	r3, [sp, #44]	; 0x2c
  40667c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40667e:	2b00      	cmp	r3, #0
  406680:	f2c0 80d9 	blt.w	406836 <_dtoa_r+0x3ae>
  406684:	9a02      	ldr	r2, [sp, #8]
  406686:	2a0e      	cmp	r2, #14
  406688:	f300 80d5 	bgt.w	406836 <_dtoa_r+0x3ae>
  40668c:	4b2d      	ldr	r3, [pc, #180]	; (406744 <_dtoa_r+0x2bc>)
  40668e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406692:	e9d3 2300 	ldrd	r2, r3, [r3]
  406696:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40669a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40669c:	2b00      	cmp	r3, #0
  40669e:	f2c0 83ba 	blt.w	406e16 <_dtoa_r+0x98e>
  4066a2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4066a6:	4650      	mov	r0, sl
  4066a8:	462a      	mov	r2, r5
  4066aa:	4633      	mov	r3, r6
  4066ac:	4659      	mov	r1, fp
  4066ae:	f7fd fc1d 	bl	403eec <__aeabi_ddiv>
  4066b2:	f002 fbeb 	bl	408e8c <__aeabi_d2iz>
  4066b6:	4680      	mov	r8, r0
  4066b8:	f7fd fa88 	bl	403bcc <__aeabi_i2d>
  4066bc:	462a      	mov	r2, r5
  4066be:	4633      	mov	r3, r6
  4066c0:	f7fd faea 	bl	403c98 <__aeabi_dmul>
  4066c4:	460b      	mov	r3, r1
  4066c6:	4602      	mov	r2, r0
  4066c8:	4659      	mov	r1, fp
  4066ca:	4650      	mov	r0, sl
  4066cc:	f7fd f930 	bl	403930 <__aeabi_dsub>
  4066d0:	9d04      	ldr	r5, [sp, #16]
  4066d2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4066d6:	702b      	strb	r3, [r5, #0]
  4066d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4066da:	2b01      	cmp	r3, #1
  4066dc:	4606      	mov	r6, r0
  4066de:	460f      	mov	r7, r1
  4066e0:	f105 0501 	add.w	r5, r5, #1
  4066e4:	d068      	beq.n	4067b8 <_dtoa_r+0x330>
  4066e6:	2200      	movs	r2, #0
  4066e8:	4b18      	ldr	r3, [pc, #96]	; (40674c <_dtoa_r+0x2c4>)
  4066ea:	f7fd fad5 	bl	403c98 <__aeabi_dmul>
  4066ee:	2200      	movs	r2, #0
  4066f0:	2300      	movs	r3, #0
  4066f2:	4606      	mov	r6, r0
  4066f4:	460f      	mov	r7, r1
  4066f6:	f002 fb81 	bl	408dfc <__aeabi_dcmpeq>
  4066fa:	2800      	cmp	r0, #0
  4066fc:	f040 8088 	bne.w	406810 <_dtoa_r+0x388>
  406700:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406704:	f04f 0a00 	mov.w	sl, #0
  406708:	f8df b040 	ldr.w	fp, [pc, #64]	; 40674c <_dtoa_r+0x2c4>
  40670c:	940c      	str	r4, [sp, #48]	; 0x30
  40670e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406712:	e028      	b.n	406766 <_dtoa_r+0x2de>
  406714:	f3af 8000 	nop.w
  406718:	636f4361 	.word	0x636f4361
  40671c:	3fd287a7 	.word	0x3fd287a7
  406720:	8b60c8b3 	.word	0x8b60c8b3
  406724:	3fc68a28 	.word	0x3fc68a28
  406728:	509f79fb 	.word	0x509f79fb
  40672c:	3fd34413 	.word	0x3fd34413
  406730:	7ff00000 	.word	0x7ff00000
  406734:	00409365 	.word	0x00409365
  406738:	00409388 	.word	0x00409388
  40673c:	00409394 	.word	0x00409394
  406740:	3ff80000 	.word	0x3ff80000
  406744:	004093c0 	.word	0x004093c0
  406748:	00409364 	.word	0x00409364
  40674c:	40240000 	.word	0x40240000
  406750:	f7fd faa2 	bl	403c98 <__aeabi_dmul>
  406754:	2200      	movs	r2, #0
  406756:	2300      	movs	r3, #0
  406758:	4606      	mov	r6, r0
  40675a:	460f      	mov	r7, r1
  40675c:	f002 fb4e 	bl	408dfc <__aeabi_dcmpeq>
  406760:	2800      	cmp	r0, #0
  406762:	f040 83c1 	bne.w	406ee8 <_dtoa_r+0xa60>
  406766:	4642      	mov	r2, r8
  406768:	464b      	mov	r3, r9
  40676a:	4630      	mov	r0, r6
  40676c:	4639      	mov	r1, r7
  40676e:	f7fd fbbd 	bl	403eec <__aeabi_ddiv>
  406772:	f002 fb8b 	bl	408e8c <__aeabi_d2iz>
  406776:	4604      	mov	r4, r0
  406778:	f7fd fa28 	bl	403bcc <__aeabi_i2d>
  40677c:	4642      	mov	r2, r8
  40677e:	464b      	mov	r3, r9
  406780:	f7fd fa8a 	bl	403c98 <__aeabi_dmul>
  406784:	4602      	mov	r2, r0
  406786:	460b      	mov	r3, r1
  406788:	4630      	mov	r0, r6
  40678a:	4639      	mov	r1, r7
  40678c:	f7fd f8d0 	bl	403930 <__aeabi_dsub>
  406790:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406794:	9e04      	ldr	r6, [sp, #16]
  406796:	f805 eb01 	strb.w	lr, [r5], #1
  40679a:	eba5 0e06 	sub.w	lr, r5, r6
  40679e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4067a0:	45b6      	cmp	lr, r6
  4067a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4067a6:	4652      	mov	r2, sl
  4067a8:	465b      	mov	r3, fp
  4067aa:	d1d1      	bne.n	406750 <_dtoa_r+0x2c8>
  4067ac:	46a0      	mov	r8, r4
  4067ae:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4067b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4067b4:	4606      	mov	r6, r0
  4067b6:	460f      	mov	r7, r1
  4067b8:	4632      	mov	r2, r6
  4067ba:	463b      	mov	r3, r7
  4067bc:	4630      	mov	r0, r6
  4067be:	4639      	mov	r1, r7
  4067c0:	f7fd f8b8 	bl	403934 <__adddf3>
  4067c4:	4606      	mov	r6, r0
  4067c6:	460f      	mov	r7, r1
  4067c8:	4602      	mov	r2, r0
  4067ca:	460b      	mov	r3, r1
  4067cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4067d0:	f002 fb1e 	bl	408e10 <__aeabi_dcmplt>
  4067d4:	b948      	cbnz	r0, 4067ea <_dtoa_r+0x362>
  4067d6:	4632      	mov	r2, r6
  4067d8:	463b      	mov	r3, r7
  4067da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4067de:	f002 fb0d 	bl	408dfc <__aeabi_dcmpeq>
  4067e2:	b1a8      	cbz	r0, 406810 <_dtoa_r+0x388>
  4067e4:	f018 0f01 	tst.w	r8, #1
  4067e8:	d012      	beq.n	406810 <_dtoa_r+0x388>
  4067ea:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4067ee:	9a04      	ldr	r2, [sp, #16]
  4067f0:	1e6b      	subs	r3, r5, #1
  4067f2:	e004      	b.n	4067fe <_dtoa_r+0x376>
  4067f4:	429a      	cmp	r2, r3
  4067f6:	f000 8401 	beq.w	406ffc <_dtoa_r+0xb74>
  4067fa:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4067fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406802:	f103 0501 	add.w	r5, r3, #1
  406806:	d0f5      	beq.n	4067f4 <_dtoa_r+0x36c>
  406808:	f108 0801 	add.w	r8, r8, #1
  40680c:	f883 8000 	strb.w	r8, [r3]
  406810:	4649      	mov	r1, r9
  406812:	4620      	mov	r0, r4
  406814:	f001 faee 	bl	407df4 <_Bfree>
  406818:	2200      	movs	r2, #0
  40681a:	9b02      	ldr	r3, [sp, #8]
  40681c:	702a      	strb	r2, [r5, #0]
  40681e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406820:	3301      	adds	r3, #1
  406822:	6013      	str	r3, [r2, #0]
  406824:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406826:	2b00      	cmp	r3, #0
  406828:	f000 839e 	beq.w	406f68 <_dtoa_r+0xae0>
  40682c:	9804      	ldr	r0, [sp, #16]
  40682e:	601d      	str	r5, [r3, #0]
  406830:	b01b      	add	sp, #108	; 0x6c
  406832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406836:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406838:	2a00      	cmp	r2, #0
  40683a:	d03e      	beq.n	4068ba <_dtoa_r+0x432>
  40683c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40683e:	2a01      	cmp	r2, #1
  406840:	f340 8311 	ble.w	406e66 <_dtoa_r+0x9de>
  406844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406848:	1e5f      	subs	r7, r3, #1
  40684a:	42ba      	cmp	r2, r7
  40684c:	f2c0 838f 	blt.w	406f6e <_dtoa_r+0xae6>
  406850:	1bd7      	subs	r7, r2, r7
  406852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406854:	2b00      	cmp	r3, #0
  406856:	f2c0 848b 	blt.w	407170 <_dtoa_r+0xce8>
  40685a:	9d08      	ldr	r5, [sp, #32]
  40685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40685e:	9a08      	ldr	r2, [sp, #32]
  406860:	441a      	add	r2, r3
  406862:	9208      	str	r2, [sp, #32]
  406864:	9a06      	ldr	r2, [sp, #24]
  406866:	2101      	movs	r1, #1
  406868:	441a      	add	r2, r3
  40686a:	4620      	mov	r0, r4
  40686c:	9206      	str	r2, [sp, #24]
  40686e:	f001 fb5b 	bl	407f28 <__i2b>
  406872:	4606      	mov	r6, r0
  406874:	e024      	b.n	4068c0 <_dtoa_r+0x438>
  406876:	2301      	movs	r3, #1
  406878:	930e      	str	r3, [sp, #56]	; 0x38
  40687a:	e6af      	b.n	4065dc <_dtoa_r+0x154>
  40687c:	9a08      	ldr	r2, [sp, #32]
  40687e:	9b02      	ldr	r3, [sp, #8]
  406880:	1ad2      	subs	r2, r2, r3
  406882:	425b      	negs	r3, r3
  406884:	930c      	str	r3, [sp, #48]	; 0x30
  406886:	2300      	movs	r3, #0
  406888:	9208      	str	r2, [sp, #32]
  40688a:	930d      	str	r3, [sp, #52]	; 0x34
  40688c:	e6b8      	b.n	406600 <_dtoa_r+0x178>
  40688e:	f1c7 0301 	rsb	r3, r7, #1
  406892:	9308      	str	r3, [sp, #32]
  406894:	2300      	movs	r3, #0
  406896:	9306      	str	r3, [sp, #24]
  406898:	e6a7      	b.n	4065ea <_dtoa_r+0x162>
  40689a:	9d02      	ldr	r5, [sp, #8]
  40689c:	4628      	mov	r0, r5
  40689e:	f7fd f995 	bl	403bcc <__aeabi_i2d>
  4068a2:	4602      	mov	r2, r0
  4068a4:	460b      	mov	r3, r1
  4068a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4068aa:	f002 faa7 	bl	408dfc <__aeabi_dcmpeq>
  4068ae:	2800      	cmp	r0, #0
  4068b0:	f47f ae80 	bne.w	4065b4 <_dtoa_r+0x12c>
  4068b4:	1e6b      	subs	r3, r5, #1
  4068b6:	9302      	str	r3, [sp, #8]
  4068b8:	e67c      	b.n	4065b4 <_dtoa_r+0x12c>
  4068ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4068bc:	9d08      	ldr	r5, [sp, #32]
  4068be:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4068c0:	2d00      	cmp	r5, #0
  4068c2:	dd0c      	ble.n	4068de <_dtoa_r+0x456>
  4068c4:	9906      	ldr	r1, [sp, #24]
  4068c6:	2900      	cmp	r1, #0
  4068c8:	460b      	mov	r3, r1
  4068ca:	dd08      	ble.n	4068de <_dtoa_r+0x456>
  4068cc:	42a9      	cmp	r1, r5
  4068ce:	9a08      	ldr	r2, [sp, #32]
  4068d0:	bfa8      	it	ge
  4068d2:	462b      	movge	r3, r5
  4068d4:	1ad2      	subs	r2, r2, r3
  4068d6:	1aed      	subs	r5, r5, r3
  4068d8:	1acb      	subs	r3, r1, r3
  4068da:	9208      	str	r2, [sp, #32]
  4068dc:	9306      	str	r3, [sp, #24]
  4068de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4068e0:	b1d3      	cbz	r3, 406918 <_dtoa_r+0x490>
  4068e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4068e4:	2b00      	cmp	r3, #0
  4068e6:	f000 82b7 	beq.w	406e58 <_dtoa_r+0x9d0>
  4068ea:	2f00      	cmp	r7, #0
  4068ec:	dd10      	ble.n	406910 <_dtoa_r+0x488>
  4068ee:	4631      	mov	r1, r6
  4068f0:	463a      	mov	r2, r7
  4068f2:	4620      	mov	r0, r4
  4068f4:	f001 fbb4 	bl	408060 <__pow5mult>
  4068f8:	464a      	mov	r2, r9
  4068fa:	4601      	mov	r1, r0
  4068fc:	4606      	mov	r6, r0
  4068fe:	4620      	mov	r0, r4
  406900:	f001 fb1c 	bl	407f3c <__multiply>
  406904:	4649      	mov	r1, r9
  406906:	4680      	mov	r8, r0
  406908:	4620      	mov	r0, r4
  40690a:	f001 fa73 	bl	407df4 <_Bfree>
  40690e:	46c1      	mov	r9, r8
  406910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406912:	1bda      	subs	r2, r3, r7
  406914:	f040 82a1 	bne.w	406e5a <_dtoa_r+0x9d2>
  406918:	2101      	movs	r1, #1
  40691a:	4620      	mov	r0, r4
  40691c:	f001 fb04 	bl	407f28 <__i2b>
  406920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406922:	2b00      	cmp	r3, #0
  406924:	4680      	mov	r8, r0
  406926:	dd1c      	ble.n	406962 <_dtoa_r+0x4da>
  406928:	4601      	mov	r1, r0
  40692a:	461a      	mov	r2, r3
  40692c:	4620      	mov	r0, r4
  40692e:	f001 fb97 	bl	408060 <__pow5mult>
  406932:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406934:	2b01      	cmp	r3, #1
  406936:	4680      	mov	r8, r0
  406938:	f340 8254 	ble.w	406de4 <_dtoa_r+0x95c>
  40693c:	2300      	movs	r3, #0
  40693e:	930c      	str	r3, [sp, #48]	; 0x30
  406940:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406944:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406948:	6918      	ldr	r0, [r3, #16]
  40694a:	f001 fa9d 	bl	407e88 <__hi0bits>
  40694e:	f1c0 0020 	rsb	r0, r0, #32
  406952:	e010      	b.n	406976 <_dtoa_r+0x4ee>
  406954:	f1c3 0520 	rsb	r5, r3, #32
  406958:	fa0a f005 	lsl.w	r0, sl, r5
  40695c:	e674      	b.n	406648 <_dtoa_r+0x1c0>
  40695e:	900e      	str	r0, [sp, #56]	; 0x38
  406960:	e63c      	b.n	4065dc <_dtoa_r+0x154>
  406962:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406964:	2b01      	cmp	r3, #1
  406966:	f340 8287 	ble.w	406e78 <_dtoa_r+0x9f0>
  40696a:	2300      	movs	r3, #0
  40696c:	930c      	str	r3, [sp, #48]	; 0x30
  40696e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406970:	2001      	movs	r0, #1
  406972:	2b00      	cmp	r3, #0
  406974:	d1e4      	bne.n	406940 <_dtoa_r+0x4b8>
  406976:	9a06      	ldr	r2, [sp, #24]
  406978:	4410      	add	r0, r2
  40697a:	f010 001f 	ands.w	r0, r0, #31
  40697e:	f000 80a1 	beq.w	406ac4 <_dtoa_r+0x63c>
  406982:	f1c0 0320 	rsb	r3, r0, #32
  406986:	2b04      	cmp	r3, #4
  406988:	f340 849e 	ble.w	4072c8 <_dtoa_r+0xe40>
  40698c:	9b08      	ldr	r3, [sp, #32]
  40698e:	f1c0 001c 	rsb	r0, r0, #28
  406992:	4403      	add	r3, r0
  406994:	9308      	str	r3, [sp, #32]
  406996:	4613      	mov	r3, r2
  406998:	4403      	add	r3, r0
  40699a:	4405      	add	r5, r0
  40699c:	9306      	str	r3, [sp, #24]
  40699e:	9b08      	ldr	r3, [sp, #32]
  4069a0:	2b00      	cmp	r3, #0
  4069a2:	dd05      	ble.n	4069b0 <_dtoa_r+0x528>
  4069a4:	4649      	mov	r1, r9
  4069a6:	461a      	mov	r2, r3
  4069a8:	4620      	mov	r0, r4
  4069aa:	f001 fba9 	bl	408100 <__lshift>
  4069ae:	4681      	mov	r9, r0
  4069b0:	9b06      	ldr	r3, [sp, #24]
  4069b2:	2b00      	cmp	r3, #0
  4069b4:	dd05      	ble.n	4069c2 <_dtoa_r+0x53a>
  4069b6:	4641      	mov	r1, r8
  4069b8:	461a      	mov	r2, r3
  4069ba:	4620      	mov	r0, r4
  4069bc:	f001 fba0 	bl	408100 <__lshift>
  4069c0:	4680      	mov	r8, r0
  4069c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4069c4:	2b00      	cmp	r3, #0
  4069c6:	f040 8086 	bne.w	406ad6 <_dtoa_r+0x64e>
  4069ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4069cc:	2b00      	cmp	r3, #0
  4069ce:	f340 8266 	ble.w	406e9e <_dtoa_r+0xa16>
  4069d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4069d4:	2b00      	cmp	r3, #0
  4069d6:	f000 8098 	beq.w	406b0a <_dtoa_r+0x682>
  4069da:	2d00      	cmp	r5, #0
  4069dc:	dd05      	ble.n	4069ea <_dtoa_r+0x562>
  4069de:	4631      	mov	r1, r6
  4069e0:	462a      	mov	r2, r5
  4069e2:	4620      	mov	r0, r4
  4069e4:	f001 fb8c 	bl	408100 <__lshift>
  4069e8:	4606      	mov	r6, r0
  4069ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4069ec:	2b00      	cmp	r3, #0
  4069ee:	f040 8337 	bne.w	407060 <_dtoa_r+0xbd8>
  4069f2:	9606      	str	r6, [sp, #24]
  4069f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4069f6:	9a04      	ldr	r2, [sp, #16]
  4069f8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4069fc:	3b01      	subs	r3, #1
  4069fe:	18d3      	adds	r3, r2, r3
  406a00:	930b      	str	r3, [sp, #44]	; 0x2c
  406a02:	f00a 0301 	and.w	r3, sl, #1
  406a06:	930c      	str	r3, [sp, #48]	; 0x30
  406a08:	4617      	mov	r7, r2
  406a0a:	46c2      	mov	sl, r8
  406a0c:	4651      	mov	r1, sl
  406a0e:	4648      	mov	r0, r9
  406a10:	f7ff fca6 	bl	406360 <quorem>
  406a14:	4631      	mov	r1, r6
  406a16:	4605      	mov	r5, r0
  406a18:	4648      	mov	r0, r9
  406a1a:	f001 fbc3 	bl	4081a4 <__mcmp>
  406a1e:	465a      	mov	r2, fp
  406a20:	900a      	str	r0, [sp, #40]	; 0x28
  406a22:	4651      	mov	r1, sl
  406a24:	4620      	mov	r0, r4
  406a26:	f001 fbd9 	bl	4081dc <__mdiff>
  406a2a:	68c2      	ldr	r2, [r0, #12]
  406a2c:	4680      	mov	r8, r0
  406a2e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406a32:	2a00      	cmp	r2, #0
  406a34:	f040 822b 	bne.w	406e8e <_dtoa_r+0xa06>
  406a38:	4601      	mov	r1, r0
  406a3a:	4648      	mov	r0, r9
  406a3c:	9308      	str	r3, [sp, #32]
  406a3e:	f001 fbb1 	bl	4081a4 <__mcmp>
  406a42:	4641      	mov	r1, r8
  406a44:	9006      	str	r0, [sp, #24]
  406a46:	4620      	mov	r0, r4
  406a48:	f001 f9d4 	bl	407df4 <_Bfree>
  406a4c:	9a06      	ldr	r2, [sp, #24]
  406a4e:	9b08      	ldr	r3, [sp, #32]
  406a50:	b932      	cbnz	r2, 406a60 <_dtoa_r+0x5d8>
  406a52:	9924      	ldr	r1, [sp, #144]	; 0x90
  406a54:	b921      	cbnz	r1, 406a60 <_dtoa_r+0x5d8>
  406a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406a58:	2a00      	cmp	r2, #0
  406a5a:	f000 83ef 	beq.w	40723c <_dtoa_r+0xdb4>
  406a5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406a60:	990a      	ldr	r1, [sp, #40]	; 0x28
  406a62:	2900      	cmp	r1, #0
  406a64:	f2c0 829f 	blt.w	406fa6 <_dtoa_r+0xb1e>
  406a68:	d105      	bne.n	406a76 <_dtoa_r+0x5ee>
  406a6a:	9924      	ldr	r1, [sp, #144]	; 0x90
  406a6c:	b919      	cbnz	r1, 406a76 <_dtoa_r+0x5ee>
  406a6e:	990c      	ldr	r1, [sp, #48]	; 0x30
  406a70:	2900      	cmp	r1, #0
  406a72:	f000 8298 	beq.w	406fa6 <_dtoa_r+0xb1e>
  406a76:	2a00      	cmp	r2, #0
  406a78:	f300 8306 	bgt.w	407088 <_dtoa_r+0xc00>
  406a7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406a7e:	703b      	strb	r3, [r7, #0]
  406a80:	f107 0801 	add.w	r8, r7, #1
  406a84:	4297      	cmp	r7, r2
  406a86:	4645      	mov	r5, r8
  406a88:	f000 830c 	beq.w	4070a4 <_dtoa_r+0xc1c>
  406a8c:	4649      	mov	r1, r9
  406a8e:	2300      	movs	r3, #0
  406a90:	220a      	movs	r2, #10
  406a92:	4620      	mov	r0, r4
  406a94:	f001 f9b8 	bl	407e08 <__multadd>
  406a98:	455e      	cmp	r6, fp
  406a9a:	4681      	mov	r9, r0
  406a9c:	4631      	mov	r1, r6
  406a9e:	f04f 0300 	mov.w	r3, #0
  406aa2:	f04f 020a 	mov.w	r2, #10
  406aa6:	4620      	mov	r0, r4
  406aa8:	f000 81eb 	beq.w	406e82 <_dtoa_r+0x9fa>
  406aac:	f001 f9ac 	bl	407e08 <__multadd>
  406ab0:	4659      	mov	r1, fp
  406ab2:	4606      	mov	r6, r0
  406ab4:	2300      	movs	r3, #0
  406ab6:	220a      	movs	r2, #10
  406ab8:	4620      	mov	r0, r4
  406aba:	f001 f9a5 	bl	407e08 <__multadd>
  406abe:	4647      	mov	r7, r8
  406ac0:	4683      	mov	fp, r0
  406ac2:	e7a3      	b.n	406a0c <_dtoa_r+0x584>
  406ac4:	201c      	movs	r0, #28
  406ac6:	9b08      	ldr	r3, [sp, #32]
  406ac8:	4403      	add	r3, r0
  406aca:	9308      	str	r3, [sp, #32]
  406acc:	9b06      	ldr	r3, [sp, #24]
  406ace:	4403      	add	r3, r0
  406ad0:	4405      	add	r5, r0
  406ad2:	9306      	str	r3, [sp, #24]
  406ad4:	e763      	b.n	40699e <_dtoa_r+0x516>
  406ad6:	4641      	mov	r1, r8
  406ad8:	4648      	mov	r0, r9
  406ada:	f001 fb63 	bl	4081a4 <__mcmp>
  406ade:	2800      	cmp	r0, #0
  406ae0:	f6bf af73 	bge.w	4069ca <_dtoa_r+0x542>
  406ae4:	9f02      	ldr	r7, [sp, #8]
  406ae6:	4649      	mov	r1, r9
  406ae8:	2300      	movs	r3, #0
  406aea:	220a      	movs	r2, #10
  406aec:	4620      	mov	r0, r4
  406aee:	3f01      	subs	r7, #1
  406af0:	9702      	str	r7, [sp, #8]
  406af2:	f001 f989 	bl	407e08 <__multadd>
  406af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406af8:	4681      	mov	r9, r0
  406afa:	2b00      	cmp	r3, #0
  406afc:	f040 83b6 	bne.w	40726c <_dtoa_r+0xde4>
  406b00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406b02:	2b00      	cmp	r3, #0
  406b04:	f340 83bf 	ble.w	407286 <_dtoa_r+0xdfe>
  406b08:	930a      	str	r3, [sp, #40]	; 0x28
  406b0a:	f8dd b010 	ldr.w	fp, [sp, #16]
  406b0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406b10:	465d      	mov	r5, fp
  406b12:	e002      	b.n	406b1a <_dtoa_r+0x692>
  406b14:	f001 f978 	bl	407e08 <__multadd>
  406b18:	4681      	mov	r9, r0
  406b1a:	4641      	mov	r1, r8
  406b1c:	4648      	mov	r0, r9
  406b1e:	f7ff fc1f 	bl	406360 <quorem>
  406b22:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  406b26:	f805 ab01 	strb.w	sl, [r5], #1
  406b2a:	eba5 030b 	sub.w	r3, r5, fp
  406b2e:	42bb      	cmp	r3, r7
  406b30:	f04f 020a 	mov.w	r2, #10
  406b34:	f04f 0300 	mov.w	r3, #0
  406b38:	4649      	mov	r1, r9
  406b3a:	4620      	mov	r0, r4
  406b3c:	dbea      	blt.n	406b14 <_dtoa_r+0x68c>
  406b3e:	9b04      	ldr	r3, [sp, #16]
  406b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406b42:	2a01      	cmp	r2, #1
  406b44:	bfac      	ite	ge
  406b46:	189b      	addge	r3, r3, r2
  406b48:	3301      	addlt	r3, #1
  406b4a:	461d      	mov	r5, r3
  406b4c:	f04f 0b00 	mov.w	fp, #0
  406b50:	4649      	mov	r1, r9
  406b52:	2201      	movs	r2, #1
  406b54:	4620      	mov	r0, r4
  406b56:	f001 fad3 	bl	408100 <__lshift>
  406b5a:	4641      	mov	r1, r8
  406b5c:	4681      	mov	r9, r0
  406b5e:	f001 fb21 	bl	4081a4 <__mcmp>
  406b62:	2800      	cmp	r0, #0
  406b64:	f340 823d 	ble.w	406fe2 <_dtoa_r+0xb5a>
  406b68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406b6c:	9904      	ldr	r1, [sp, #16]
  406b6e:	1e6b      	subs	r3, r5, #1
  406b70:	e004      	b.n	406b7c <_dtoa_r+0x6f4>
  406b72:	428b      	cmp	r3, r1
  406b74:	f000 81ae 	beq.w	406ed4 <_dtoa_r+0xa4c>
  406b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406b7c:	2a39      	cmp	r2, #57	; 0x39
  406b7e:	f103 0501 	add.w	r5, r3, #1
  406b82:	d0f6      	beq.n	406b72 <_dtoa_r+0x6ea>
  406b84:	3201      	adds	r2, #1
  406b86:	701a      	strb	r2, [r3, #0]
  406b88:	4641      	mov	r1, r8
  406b8a:	4620      	mov	r0, r4
  406b8c:	f001 f932 	bl	407df4 <_Bfree>
  406b90:	2e00      	cmp	r6, #0
  406b92:	f43f ae3d 	beq.w	406810 <_dtoa_r+0x388>
  406b96:	f1bb 0f00 	cmp.w	fp, #0
  406b9a:	d005      	beq.n	406ba8 <_dtoa_r+0x720>
  406b9c:	45b3      	cmp	fp, r6
  406b9e:	d003      	beq.n	406ba8 <_dtoa_r+0x720>
  406ba0:	4659      	mov	r1, fp
  406ba2:	4620      	mov	r0, r4
  406ba4:	f001 f926 	bl	407df4 <_Bfree>
  406ba8:	4631      	mov	r1, r6
  406baa:	4620      	mov	r0, r4
  406bac:	f001 f922 	bl	407df4 <_Bfree>
  406bb0:	e62e      	b.n	406810 <_dtoa_r+0x388>
  406bb2:	2300      	movs	r3, #0
  406bb4:	930b      	str	r3, [sp, #44]	; 0x2c
  406bb6:	9b02      	ldr	r3, [sp, #8]
  406bb8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406bba:	4413      	add	r3, r2
  406bbc:	930f      	str	r3, [sp, #60]	; 0x3c
  406bbe:	3301      	adds	r3, #1
  406bc0:	2b01      	cmp	r3, #1
  406bc2:	461f      	mov	r7, r3
  406bc4:	461e      	mov	r6, r3
  406bc6:	930a      	str	r3, [sp, #40]	; 0x28
  406bc8:	bfb8      	it	lt
  406bca:	2701      	movlt	r7, #1
  406bcc:	2100      	movs	r1, #0
  406bce:	2f17      	cmp	r7, #23
  406bd0:	6461      	str	r1, [r4, #68]	; 0x44
  406bd2:	d90a      	bls.n	406bea <_dtoa_r+0x762>
  406bd4:	2201      	movs	r2, #1
  406bd6:	2304      	movs	r3, #4
  406bd8:	005b      	lsls	r3, r3, #1
  406bda:	f103 0014 	add.w	r0, r3, #20
  406bde:	4287      	cmp	r7, r0
  406be0:	4611      	mov	r1, r2
  406be2:	f102 0201 	add.w	r2, r2, #1
  406be6:	d2f7      	bcs.n	406bd8 <_dtoa_r+0x750>
  406be8:	6461      	str	r1, [r4, #68]	; 0x44
  406bea:	4620      	mov	r0, r4
  406bec:	f001 f8dc 	bl	407da8 <_Balloc>
  406bf0:	2e0e      	cmp	r6, #14
  406bf2:	9004      	str	r0, [sp, #16]
  406bf4:	6420      	str	r0, [r4, #64]	; 0x40
  406bf6:	f63f ad41 	bhi.w	40667c <_dtoa_r+0x1f4>
  406bfa:	2d00      	cmp	r5, #0
  406bfc:	f43f ad3e 	beq.w	40667c <_dtoa_r+0x1f4>
  406c00:	9902      	ldr	r1, [sp, #8]
  406c02:	2900      	cmp	r1, #0
  406c04:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406c08:	f340 8202 	ble.w	407010 <_dtoa_r+0xb88>
  406c0c:	4bb8      	ldr	r3, [pc, #736]	; (406ef0 <_dtoa_r+0xa68>)
  406c0e:	f001 020f 	and.w	r2, r1, #15
  406c12:	110d      	asrs	r5, r1, #4
  406c14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406c18:	06e9      	lsls	r1, r5, #27
  406c1a:	e9d3 6700 	ldrd	r6, r7, [r3]
  406c1e:	f140 81ae 	bpl.w	406f7e <_dtoa_r+0xaf6>
  406c22:	4bb4      	ldr	r3, [pc, #720]	; (406ef4 <_dtoa_r+0xa6c>)
  406c24:	4650      	mov	r0, sl
  406c26:	4659      	mov	r1, fp
  406c28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406c2c:	f7fd f95e 	bl	403eec <__aeabi_ddiv>
  406c30:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406c34:	f005 050f 	and.w	r5, r5, #15
  406c38:	f04f 0a03 	mov.w	sl, #3
  406c3c:	b18d      	cbz	r5, 406c62 <_dtoa_r+0x7da>
  406c3e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 406ef4 <_dtoa_r+0xa6c>
  406c42:	07ea      	lsls	r2, r5, #31
  406c44:	d509      	bpl.n	406c5a <_dtoa_r+0x7d2>
  406c46:	4630      	mov	r0, r6
  406c48:	4639      	mov	r1, r7
  406c4a:	e9d8 2300 	ldrd	r2, r3, [r8]
  406c4e:	f7fd f823 	bl	403c98 <__aeabi_dmul>
  406c52:	f10a 0a01 	add.w	sl, sl, #1
  406c56:	4606      	mov	r6, r0
  406c58:	460f      	mov	r7, r1
  406c5a:	106d      	asrs	r5, r5, #1
  406c5c:	f108 0808 	add.w	r8, r8, #8
  406c60:	d1ef      	bne.n	406c42 <_dtoa_r+0x7ba>
  406c62:	463b      	mov	r3, r7
  406c64:	4632      	mov	r2, r6
  406c66:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406c6a:	f7fd f93f 	bl	403eec <__aeabi_ddiv>
  406c6e:	4607      	mov	r7, r0
  406c70:	4688      	mov	r8, r1
  406c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406c74:	b143      	cbz	r3, 406c88 <_dtoa_r+0x800>
  406c76:	2200      	movs	r2, #0
  406c78:	4b9f      	ldr	r3, [pc, #636]	; (406ef8 <_dtoa_r+0xa70>)
  406c7a:	4638      	mov	r0, r7
  406c7c:	4641      	mov	r1, r8
  406c7e:	f002 f8c7 	bl	408e10 <__aeabi_dcmplt>
  406c82:	2800      	cmp	r0, #0
  406c84:	f040 8286 	bne.w	407194 <_dtoa_r+0xd0c>
  406c88:	4650      	mov	r0, sl
  406c8a:	f7fc ff9f 	bl	403bcc <__aeabi_i2d>
  406c8e:	463a      	mov	r2, r7
  406c90:	4643      	mov	r3, r8
  406c92:	f7fd f801 	bl	403c98 <__aeabi_dmul>
  406c96:	4b99      	ldr	r3, [pc, #612]	; (406efc <_dtoa_r+0xa74>)
  406c98:	2200      	movs	r2, #0
  406c9a:	f7fc fe4b 	bl	403934 <__adddf3>
  406c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ca0:	4605      	mov	r5, r0
  406ca2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406ca6:	2b00      	cmp	r3, #0
  406ca8:	f000 813e 	beq.w	406f28 <_dtoa_r+0xaa0>
  406cac:	9b02      	ldr	r3, [sp, #8]
  406cae:	9315      	str	r3, [sp, #84]	; 0x54
  406cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406cb2:	9312      	str	r3, [sp, #72]	; 0x48
  406cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406cb6:	2b00      	cmp	r3, #0
  406cb8:	f000 81fa 	beq.w	4070b0 <_dtoa_r+0xc28>
  406cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406cbe:	4b8c      	ldr	r3, [pc, #560]	; (406ef0 <_dtoa_r+0xa68>)
  406cc0:	498f      	ldr	r1, [pc, #572]	; (406f00 <_dtoa_r+0xa78>)
  406cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406cc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406cca:	2000      	movs	r0, #0
  406ccc:	f7fd f90e 	bl	403eec <__aeabi_ddiv>
  406cd0:	462a      	mov	r2, r5
  406cd2:	4633      	mov	r3, r6
  406cd4:	f7fc fe2c 	bl	403930 <__aeabi_dsub>
  406cd8:	4682      	mov	sl, r0
  406cda:	468b      	mov	fp, r1
  406cdc:	4638      	mov	r0, r7
  406cde:	4641      	mov	r1, r8
  406ce0:	f002 f8d4 	bl	408e8c <__aeabi_d2iz>
  406ce4:	4605      	mov	r5, r0
  406ce6:	f7fc ff71 	bl	403bcc <__aeabi_i2d>
  406cea:	4602      	mov	r2, r0
  406cec:	460b      	mov	r3, r1
  406cee:	4638      	mov	r0, r7
  406cf0:	4641      	mov	r1, r8
  406cf2:	f7fc fe1d 	bl	403930 <__aeabi_dsub>
  406cf6:	3530      	adds	r5, #48	; 0x30
  406cf8:	fa5f f885 	uxtb.w	r8, r5
  406cfc:	9d04      	ldr	r5, [sp, #16]
  406cfe:	4606      	mov	r6, r0
  406d00:	460f      	mov	r7, r1
  406d02:	f885 8000 	strb.w	r8, [r5]
  406d06:	4602      	mov	r2, r0
  406d08:	460b      	mov	r3, r1
  406d0a:	4650      	mov	r0, sl
  406d0c:	4659      	mov	r1, fp
  406d0e:	3501      	adds	r5, #1
  406d10:	f002 f89c 	bl	408e4c <__aeabi_dcmpgt>
  406d14:	2800      	cmp	r0, #0
  406d16:	d154      	bne.n	406dc2 <_dtoa_r+0x93a>
  406d18:	4632      	mov	r2, r6
  406d1a:	463b      	mov	r3, r7
  406d1c:	2000      	movs	r0, #0
  406d1e:	4976      	ldr	r1, [pc, #472]	; (406ef8 <_dtoa_r+0xa70>)
  406d20:	f7fc fe06 	bl	403930 <__aeabi_dsub>
  406d24:	4602      	mov	r2, r0
  406d26:	460b      	mov	r3, r1
  406d28:	4650      	mov	r0, sl
  406d2a:	4659      	mov	r1, fp
  406d2c:	f002 f88e 	bl	408e4c <__aeabi_dcmpgt>
  406d30:	2800      	cmp	r0, #0
  406d32:	f040 8270 	bne.w	407216 <_dtoa_r+0xd8e>
  406d36:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406d38:	2a01      	cmp	r2, #1
  406d3a:	f000 8111 	beq.w	406f60 <_dtoa_r+0xad8>
  406d3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406d40:	9a04      	ldr	r2, [sp, #16]
  406d42:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406d46:	4413      	add	r3, r2
  406d48:	4699      	mov	r9, r3
  406d4a:	e00d      	b.n	406d68 <_dtoa_r+0x8e0>
  406d4c:	2000      	movs	r0, #0
  406d4e:	496a      	ldr	r1, [pc, #424]	; (406ef8 <_dtoa_r+0xa70>)
  406d50:	f7fc fdee 	bl	403930 <__aeabi_dsub>
  406d54:	4652      	mov	r2, sl
  406d56:	465b      	mov	r3, fp
  406d58:	f002 f85a 	bl	408e10 <__aeabi_dcmplt>
  406d5c:	2800      	cmp	r0, #0
  406d5e:	f040 8258 	bne.w	407212 <_dtoa_r+0xd8a>
  406d62:	454d      	cmp	r5, r9
  406d64:	f000 80fa 	beq.w	406f5c <_dtoa_r+0xad4>
  406d68:	4650      	mov	r0, sl
  406d6a:	4659      	mov	r1, fp
  406d6c:	2200      	movs	r2, #0
  406d6e:	4b65      	ldr	r3, [pc, #404]	; (406f04 <_dtoa_r+0xa7c>)
  406d70:	f7fc ff92 	bl	403c98 <__aeabi_dmul>
  406d74:	2200      	movs	r2, #0
  406d76:	4b63      	ldr	r3, [pc, #396]	; (406f04 <_dtoa_r+0xa7c>)
  406d78:	4682      	mov	sl, r0
  406d7a:	468b      	mov	fp, r1
  406d7c:	4630      	mov	r0, r6
  406d7e:	4639      	mov	r1, r7
  406d80:	f7fc ff8a 	bl	403c98 <__aeabi_dmul>
  406d84:	460f      	mov	r7, r1
  406d86:	4606      	mov	r6, r0
  406d88:	f002 f880 	bl	408e8c <__aeabi_d2iz>
  406d8c:	4680      	mov	r8, r0
  406d8e:	f7fc ff1d 	bl	403bcc <__aeabi_i2d>
  406d92:	4602      	mov	r2, r0
  406d94:	460b      	mov	r3, r1
  406d96:	4630      	mov	r0, r6
  406d98:	4639      	mov	r1, r7
  406d9a:	f7fc fdc9 	bl	403930 <__aeabi_dsub>
  406d9e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406da2:	fa5f f888 	uxtb.w	r8, r8
  406da6:	4652      	mov	r2, sl
  406da8:	465b      	mov	r3, fp
  406daa:	f805 8b01 	strb.w	r8, [r5], #1
  406dae:	4606      	mov	r6, r0
  406db0:	460f      	mov	r7, r1
  406db2:	f002 f82d 	bl	408e10 <__aeabi_dcmplt>
  406db6:	4632      	mov	r2, r6
  406db8:	463b      	mov	r3, r7
  406dba:	2800      	cmp	r0, #0
  406dbc:	d0c6      	beq.n	406d4c <_dtoa_r+0x8c4>
  406dbe:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406dc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406dc4:	9302      	str	r3, [sp, #8]
  406dc6:	e523      	b.n	406810 <_dtoa_r+0x388>
  406dc8:	2300      	movs	r3, #0
  406dca:	930b      	str	r3, [sp, #44]	; 0x2c
  406dcc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406dce:	2b00      	cmp	r3, #0
  406dd0:	f340 80dc 	ble.w	406f8c <_dtoa_r+0xb04>
  406dd4:	461f      	mov	r7, r3
  406dd6:	461e      	mov	r6, r3
  406dd8:	930f      	str	r3, [sp, #60]	; 0x3c
  406dda:	930a      	str	r3, [sp, #40]	; 0x28
  406ddc:	e6f6      	b.n	406bcc <_dtoa_r+0x744>
  406dde:	2301      	movs	r3, #1
  406de0:	930b      	str	r3, [sp, #44]	; 0x2c
  406de2:	e7f3      	b.n	406dcc <_dtoa_r+0x944>
  406de4:	f1ba 0f00 	cmp.w	sl, #0
  406de8:	f47f ada8 	bne.w	40693c <_dtoa_r+0x4b4>
  406dec:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406df0:	2b00      	cmp	r3, #0
  406df2:	f47f adba 	bne.w	40696a <_dtoa_r+0x4e2>
  406df6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406dfa:	0d3f      	lsrs	r7, r7, #20
  406dfc:	053f      	lsls	r7, r7, #20
  406dfe:	2f00      	cmp	r7, #0
  406e00:	f000 820d 	beq.w	40721e <_dtoa_r+0xd96>
  406e04:	9b08      	ldr	r3, [sp, #32]
  406e06:	3301      	adds	r3, #1
  406e08:	9308      	str	r3, [sp, #32]
  406e0a:	9b06      	ldr	r3, [sp, #24]
  406e0c:	3301      	adds	r3, #1
  406e0e:	9306      	str	r3, [sp, #24]
  406e10:	2301      	movs	r3, #1
  406e12:	930c      	str	r3, [sp, #48]	; 0x30
  406e14:	e5ab      	b.n	40696e <_dtoa_r+0x4e6>
  406e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406e18:	2b00      	cmp	r3, #0
  406e1a:	f73f ac42 	bgt.w	4066a2 <_dtoa_r+0x21a>
  406e1e:	f040 8221 	bne.w	407264 <_dtoa_r+0xddc>
  406e22:	2200      	movs	r2, #0
  406e24:	4b38      	ldr	r3, [pc, #224]	; (406f08 <_dtoa_r+0xa80>)
  406e26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406e2a:	f7fc ff35 	bl	403c98 <__aeabi_dmul>
  406e2e:	4652      	mov	r2, sl
  406e30:	465b      	mov	r3, fp
  406e32:	f002 f801 	bl	408e38 <__aeabi_dcmpge>
  406e36:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  406e3a:	4646      	mov	r6, r8
  406e3c:	2800      	cmp	r0, #0
  406e3e:	d041      	beq.n	406ec4 <_dtoa_r+0xa3c>
  406e40:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406e42:	9d04      	ldr	r5, [sp, #16]
  406e44:	43db      	mvns	r3, r3
  406e46:	9302      	str	r3, [sp, #8]
  406e48:	4641      	mov	r1, r8
  406e4a:	4620      	mov	r0, r4
  406e4c:	f000 ffd2 	bl	407df4 <_Bfree>
  406e50:	2e00      	cmp	r6, #0
  406e52:	f43f acdd 	beq.w	406810 <_dtoa_r+0x388>
  406e56:	e6a7      	b.n	406ba8 <_dtoa_r+0x720>
  406e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406e5a:	4649      	mov	r1, r9
  406e5c:	4620      	mov	r0, r4
  406e5e:	f001 f8ff 	bl	408060 <__pow5mult>
  406e62:	4681      	mov	r9, r0
  406e64:	e558      	b.n	406918 <_dtoa_r+0x490>
  406e66:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406e68:	2a00      	cmp	r2, #0
  406e6a:	f000 8187 	beq.w	40717c <_dtoa_r+0xcf4>
  406e6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406e72:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406e74:	9d08      	ldr	r5, [sp, #32]
  406e76:	e4f2      	b.n	40685e <_dtoa_r+0x3d6>
  406e78:	f1ba 0f00 	cmp.w	sl, #0
  406e7c:	f47f ad75 	bne.w	40696a <_dtoa_r+0x4e2>
  406e80:	e7b4      	b.n	406dec <_dtoa_r+0x964>
  406e82:	f000 ffc1 	bl	407e08 <__multadd>
  406e86:	4647      	mov	r7, r8
  406e88:	4606      	mov	r6, r0
  406e8a:	4683      	mov	fp, r0
  406e8c:	e5be      	b.n	406a0c <_dtoa_r+0x584>
  406e8e:	4601      	mov	r1, r0
  406e90:	4620      	mov	r0, r4
  406e92:	9306      	str	r3, [sp, #24]
  406e94:	f000 ffae 	bl	407df4 <_Bfree>
  406e98:	2201      	movs	r2, #1
  406e9a:	9b06      	ldr	r3, [sp, #24]
  406e9c:	e5e0      	b.n	406a60 <_dtoa_r+0x5d8>
  406e9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406ea0:	2b02      	cmp	r3, #2
  406ea2:	f77f ad96 	ble.w	4069d2 <_dtoa_r+0x54a>
  406ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ea8:	2b00      	cmp	r3, #0
  406eaa:	d1c9      	bne.n	406e40 <_dtoa_r+0x9b8>
  406eac:	4641      	mov	r1, r8
  406eae:	2205      	movs	r2, #5
  406eb0:	4620      	mov	r0, r4
  406eb2:	f000 ffa9 	bl	407e08 <__multadd>
  406eb6:	4601      	mov	r1, r0
  406eb8:	4680      	mov	r8, r0
  406eba:	4648      	mov	r0, r9
  406ebc:	f001 f972 	bl	4081a4 <__mcmp>
  406ec0:	2800      	cmp	r0, #0
  406ec2:	ddbd      	ble.n	406e40 <_dtoa_r+0x9b8>
  406ec4:	9a02      	ldr	r2, [sp, #8]
  406ec6:	9904      	ldr	r1, [sp, #16]
  406ec8:	2331      	movs	r3, #49	; 0x31
  406eca:	3201      	adds	r2, #1
  406ecc:	9202      	str	r2, [sp, #8]
  406ece:	700b      	strb	r3, [r1, #0]
  406ed0:	1c4d      	adds	r5, r1, #1
  406ed2:	e7b9      	b.n	406e48 <_dtoa_r+0x9c0>
  406ed4:	9a02      	ldr	r2, [sp, #8]
  406ed6:	3201      	adds	r2, #1
  406ed8:	9202      	str	r2, [sp, #8]
  406eda:	9a04      	ldr	r2, [sp, #16]
  406edc:	2331      	movs	r3, #49	; 0x31
  406ede:	7013      	strb	r3, [r2, #0]
  406ee0:	e652      	b.n	406b88 <_dtoa_r+0x700>
  406ee2:	2301      	movs	r3, #1
  406ee4:	930b      	str	r3, [sp, #44]	; 0x2c
  406ee6:	e666      	b.n	406bb6 <_dtoa_r+0x72e>
  406ee8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406eec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406eee:	e48f      	b.n	406810 <_dtoa_r+0x388>
  406ef0:	004093c0 	.word	0x004093c0
  406ef4:	00409398 	.word	0x00409398
  406ef8:	3ff00000 	.word	0x3ff00000
  406efc:	401c0000 	.word	0x401c0000
  406f00:	3fe00000 	.word	0x3fe00000
  406f04:	40240000 	.word	0x40240000
  406f08:	40140000 	.word	0x40140000
  406f0c:	4650      	mov	r0, sl
  406f0e:	f7fc fe5d 	bl	403bcc <__aeabi_i2d>
  406f12:	463a      	mov	r2, r7
  406f14:	4643      	mov	r3, r8
  406f16:	f7fc febf 	bl	403c98 <__aeabi_dmul>
  406f1a:	2200      	movs	r2, #0
  406f1c:	4bc1      	ldr	r3, [pc, #772]	; (407224 <_dtoa_r+0xd9c>)
  406f1e:	f7fc fd09 	bl	403934 <__adddf3>
  406f22:	4605      	mov	r5, r0
  406f24:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406f28:	4641      	mov	r1, r8
  406f2a:	2200      	movs	r2, #0
  406f2c:	4bbe      	ldr	r3, [pc, #760]	; (407228 <_dtoa_r+0xda0>)
  406f2e:	4638      	mov	r0, r7
  406f30:	f7fc fcfe 	bl	403930 <__aeabi_dsub>
  406f34:	462a      	mov	r2, r5
  406f36:	4633      	mov	r3, r6
  406f38:	4682      	mov	sl, r0
  406f3a:	468b      	mov	fp, r1
  406f3c:	f001 ff86 	bl	408e4c <__aeabi_dcmpgt>
  406f40:	4680      	mov	r8, r0
  406f42:	2800      	cmp	r0, #0
  406f44:	f040 8110 	bne.w	407168 <_dtoa_r+0xce0>
  406f48:	462a      	mov	r2, r5
  406f4a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  406f4e:	4650      	mov	r0, sl
  406f50:	4659      	mov	r1, fp
  406f52:	f001 ff5d 	bl	408e10 <__aeabi_dcmplt>
  406f56:	b118      	cbz	r0, 406f60 <_dtoa_r+0xad8>
  406f58:	4646      	mov	r6, r8
  406f5a:	e771      	b.n	406e40 <_dtoa_r+0x9b8>
  406f5c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406f60:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  406f64:	f7ff bb8a 	b.w	40667c <_dtoa_r+0x1f4>
  406f68:	9804      	ldr	r0, [sp, #16]
  406f6a:	f7ff babb 	b.w	4064e4 <_dtoa_r+0x5c>
  406f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406f70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406f72:	970c      	str	r7, [sp, #48]	; 0x30
  406f74:	1afb      	subs	r3, r7, r3
  406f76:	441a      	add	r2, r3
  406f78:	920d      	str	r2, [sp, #52]	; 0x34
  406f7a:	2700      	movs	r7, #0
  406f7c:	e469      	b.n	406852 <_dtoa_r+0x3ca>
  406f7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  406f82:	f04f 0a02 	mov.w	sl, #2
  406f86:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  406f8a:	e657      	b.n	406c3c <_dtoa_r+0x7b4>
  406f8c:	2100      	movs	r1, #0
  406f8e:	2301      	movs	r3, #1
  406f90:	6461      	str	r1, [r4, #68]	; 0x44
  406f92:	4620      	mov	r0, r4
  406f94:	9325      	str	r3, [sp, #148]	; 0x94
  406f96:	f000 ff07 	bl	407da8 <_Balloc>
  406f9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406f9c:	9004      	str	r0, [sp, #16]
  406f9e:	6420      	str	r0, [r4, #64]	; 0x40
  406fa0:	930a      	str	r3, [sp, #40]	; 0x28
  406fa2:	930f      	str	r3, [sp, #60]	; 0x3c
  406fa4:	e629      	b.n	406bfa <_dtoa_r+0x772>
  406fa6:	2a00      	cmp	r2, #0
  406fa8:	46d0      	mov	r8, sl
  406faa:	f8cd b018 	str.w	fp, [sp, #24]
  406fae:	469a      	mov	sl, r3
  406fb0:	dd11      	ble.n	406fd6 <_dtoa_r+0xb4e>
  406fb2:	4649      	mov	r1, r9
  406fb4:	2201      	movs	r2, #1
  406fb6:	4620      	mov	r0, r4
  406fb8:	f001 f8a2 	bl	408100 <__lshift>
  406fbc:	4641      	mov	r1, r8
  406fbe:	4681      	mov	r9, r0
  406fc0:	f001 f8f0 	bl	4081a4 <__mcmp>
  406fc4:	2800      	cmp	r0, #0
  406fc6:	f340 8146 	ble.w	407256 <_dtoa_r+0xdce>
  406fca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406fce:	f000 8106 	beq.w	4071de <_dtoa_r+0xd56>
  406fd2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406fd6:	46b3      	mov	fp, r6
  406fd8:	f887 a000 	strb.w	sl, [r7]
  406fdc:	1c7d      	adds	r5, r7, #1
  406fde:	9e06      	ldr	r6, [sp, #24]
  406fe0:	e5d2      	b.n	406b88 <_dtoa_r+0x700>
  406fe2:	d104      	bne.n	406fee <_dtoa_r+0xb66>
  406fe4:	f01a 0f01 	tst.w	sl, #1
  406fe8:	d001      	beq.n	406fee <_dtoa_r+0xb66>
  406fea:	e5bd      	b.n	406b68 <_dtoa_r+0x6e0>
  406fec:	4615      	mov	r5, r2
  406fee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406ff2:	2b30      	cmp	r3, #48	; 0x30
  406ff4:	f105 32ff 	add.w	r2, r5, #4294967295
  406ff8:	d0f8      	beq.n	406fec <_dtoa_r+0xb64>
  406ffa:	e5c5      	b.n	406b88 <_dtoa_r+0x700>
  406ffc:	9904      	ldr	r1, [sp, #16]
  406ffe:	2230      	movs	r2, #48	; 0x30
  407000:	700a      	strb	r2, [r1, #0]
  407002:	9a02      	ldr	r2, [sp, #8]
  407004:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407008:	3201      	adds	r2, #1
  40700a:	9202      	str	r2, [sp, #8]
  40700c:	f7ff bbfc 	b.w	406808 <_dtoa_r+0x380>
  407010:	f000 80bb 	beq.w	40718a <_dtoa_r+0xd02>
  407014:	9b02      	ldr	r3, [sp, #8]
  407016:	425d      	negs	r5, r3
  407018:	4b84      	ldr	r3, [pc, #528]	; (40722c <_dtoa_r+0xda4>)
  40701a:	f005 020f 	and.w	r2, r5, #15
  40701e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407022:	e9d3 2300 	ldrd	r2, r3, [r3]
  407026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40702a:	f7fc fe35 	bl	403c98 <__aeabi_dmul>
  40702e:	112d      	asrs	r5, r5, #4
  407030:	4607      	mov	r7, r0
  407032:	4688      	mov	r8, r1
  407034:	f000 812c 	beq.w	407290 <_dtoa_r+0xe08>
  407038:	4e7d      	ldr	r6, [pc, #500]	; (407230 <_dtoa_r+0xda8>)
  40703a:	f04f 0a02 	mov.w	sl, #2
  40703e:	07eb      	lsls	r3, r5, #31
  407040:	d509      	bpl.n	407056 <_dtoa_r+0xbce>
  407042:	4638      	mov	r0, r7
  407044:	4641      	mov	r1, r8
  407046:	e9d6 2300 	ldrd	r2, r3, [r6]
  40704a:	f7fc fe25 	bl	403c98 <__aeabi_dmul>
  40704e:	f10a 0a01 	add.w	sl, sl, #1
  407052:	4607      	mov	r7, r0
  407054:	4688      	mov	r8, r1
  407056:	106d      	asrs	r5, r5, #1
  407058:	f106 0608 	add.w	r6, r6, #8
  40705c:	d1ef      	bne.n	40703e <_dtoa_r+0xbb6>
  40705e:	e608      	b.n	406c72 <_dtoa_r+0x7ea>
  407060:	6871      	ldr	r1, [r6, #4]
  407062:	4620      	mov	r0, r4
  407064:	f000 fea0 	bl	407da8 <_Balloc>
  407068:	6933      	ldr	r3, [r6, #16]
  40706a:	3302      	adds	r3, #2
  40706c:	009a      	lsls	r2, r3, #2
  40706e:	4605      	mov	r5, r0
  407070:	f106 010c 	add.w	r1, r6, #12
  407074:	300c      	adds	r0, #12
  407076:	f7fd fb59 	bl	40472c <memcpy>
  40707a:	4629      	mov	r1, r5
  40707c:	2201      	movs	r2, #1
  40707e:	4620      	mov	r0, r4
  407080:	f001 f83e 	bl	408100 <__lshift>
  407084:	9006      	str	r0, [sp, #24]
  407086:	e4b5      	b.n	4069f4 <_dtoa_r+0x56c>
  407088:	2b39      	cmp	r3, #57	; 0x39
  40708a:	f8cd b018 	str.w	fp, [sp, #24]
  40708e:	46d0      	mov	r8, sl
  407090:	f000 80a5 	beq.w	4071de <_dtoa_r+0xd56>
  407094:	f103 0a01 	add.w	sl, r3, #1
  407098:	46b3      	mov	fp, r6
  40709a:	f887 a000 	strb.w	sl, [r7]
  40709e:	1c7d      	adds	r5, r7, #1
  4070a0:	9e06      	ldr	r6, [sp, #24]
  4070a2:	e571      	b.n	406b88 <_dtoa_r+0x700>
  4070a4:	465a      	mov	r2, fp
  4070a6:	46d0      	mov	r8, sl
  4070a8:	46b3      	mov	fp, r6
  4070aa:	469a      	mov	sl, r3
  4070ac:	4616      	mov	r6, r2
  4070ae:	e54f      	b.n	406b50 <_dtoa_r+0x6c8>
  4070b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4070b2:	495e      	ldr	r1, [pc, #376]	; (40722c <_dtoa_r+0xda4>)
  4070b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4070b8:	462a      	mov	r2, r5
  4070ba:	4633      	mov	r3, r6
  4070bc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4070c0:	f7fc fdea 	bl	403c98 <__aeabi_dmul>
  4070c4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4070c8:	4638      	mov	r0, r7
  4070ca:	4641      	mov	r1, r8
  4070cc:	f001 fede 	bl	408e8c <__aeabi_d2iz>
  4070d0:	4605      	mov	r5, r0
  4070d2:	f7fc fd7b 	bl	403bcc <__aeabi_i2d>
  4070d6:	460b      	mov	r3, r1
  4070d8:	4602      	mov	r2, r0
  4070da:	4641      	mov	r1, r8
  4070dc:	4638      	mov	r0, r7
  4070de:	f7fc fc27 	bl	403930 <__aeabi_dsub>
  4070e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4070e4:	460f      	mov	r7, r1
  4070e6:	9904      	ldr	r1, [sp, #16]
  4070e8:	3530      	adds	r5, #48	; 0x30
  4070ea:	2b01      	cmp	r3, #1
  4070ec:	700d      	strb	r5, [r1, #0]
  4070ee:	4606      	mov	r6, r0
  4070f0:	f101 0501 	add.w	r5, r1, #1
  4070f4:	d026      	beq.n	407144 <_dtoa_r+0xcbc>
  4070f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4070f8:	9a04      	ldr	r2, [sp, #16]
  4070fa:	f8df b13c 	ldr.w	fp, [pc, #316]	; 407238 <_dtoa_r+0xdb0>
  4070fe:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407102:	4413      	add	r3, r2
  407104:	f04f 0a00 	mov.w	sl, #0
  407108:	4699      	mov	r9, r3
  40710a:	4652      	mov	r2, sl
  40710c:	465b      	mov	r3, fp
  40710e:	4630      	mov	r0, r6
  407110:	4639      	mov	r1, r7
  407112:	f7fc fdc1 	bl	403c98 <__aeabi_dmul>
  407116:	460f      	mov	r7, r1
  407118:	4606      	mov	r6, r0
  40711a:	f001 feb7 	bl	408e8c <__aeabi_d2iz>
  40711e:	4680      	mov	r8, r0
  407120:	f7fc fd54 	bl	403bcc <__aeabi_i2d>
  407124:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407128:	4602      	mov	r2, r0
  40712a:	460b      	mov	r3, r1
  40712c:	4630      	mov	r0, r6
  40712e:	4639      	mov	r1, r7
  407130:	f7fc fbfe 	bl	403930 <__aeabi_dsub>
  407134:	f805 8b01 	strb.w	r8, [r5], #1
  407138:	454d      	cmp	r5, r9
  40713a:	4606      	mov	r6, r0
  40713c:	460f      	mov	r7, r1
  40713e:	d1e4      	bne.n	40710a <_dtoa_r+0xc82>
  407140:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407144:	4b3b      	ldr	r3, [pc, #236]	; (407234 <_dtoa_r+0xdac>)
  407146:	2200      	movs	r2, #0
  407148:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40714c:	f7fc fbf2 	bl	403934 <__adddf3>
  407150:	4632      	mov	r2, r6
  407152:	463b      	mov	r3, r7
  407154:	f001 fe5c 	bl	408e10 <__aeabi_dcmplt>
  407158:	2800      	cmp	r0, #0
  40715a:	d046      	beq.n	4071ea <_dtoa_r+0xd62>
  40715c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40715e:	9302      	str	r3, [sp, #8]
  407160:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407164:	f7ff bb43 	b.w	4067ee <_dtoa_r+0x366>
  407168:	f04f 0800 	mov.w	r8, #0
  40716c:	4646      	mov	r6, r8
  40716e:	e6a9      	b.n	406ec4 <_dtoa_r+0xa3c>
  407170:	9b08      	ldr	r3, [sp, #32]
  407172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407174:	1a9d      	subs	r5, r3, r2
  407176:	2300      	movs	r3, #0
  407178:	f7ff bb71 	b.w	40685e <_dtoa_r+0x3d6>
  40717c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40717e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407180:	9d08      	ldr	r5, [sp, #32]
  407182:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407186:	f7ff bb6a 	b.w	40685e <_dtoa_r+0x3d6>
  40718a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40718e:	f04f 0a02 	mov.w	sl, #2
  407192:	e56e      	b.n	406c72 <_dtoa_r+0x7ea>
  407194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407196:	2b00      	cmp	r3, #0
  407198:	f43f aeb8 	beq.w	406f0c <_dtoa_r+0xa84>
  40719c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40719e:	2b00      	cmp	r3, #0
  4071a0:	f77f aede 	ble.w	406f60 <_dtoa_r+0xad8>
  4071a4:	2200      	movs	r2, #0
  4071a6:	4b24      	ldr	r3, [pc, #144]	; (407238 <_dtoa_r+0xdb0>)
  4071a8:	4638      	mov	r0, r7
  4071aa:	4641      	mov	r1, r8
  4071ac:	f7fc fd74 	bl	403c98 <__aeabi_dmul>
  4071b0:	4607      	mov	r7, r0
  4071b2:	4688      	mov	r8, r1
  4071b4:	f10a 0001 	add.w	r0, sl, #1
  4071b8:	f7fc fd08 	bl	403bcc <__aeabi_i2d>
  4071bc:	463a      	mov	r2, r7
  4071be:	4643      	mov	r3, r8
  4071c0:	f7fc fd6a 	bl	403c98 <__aeabi_dmul>
  4071c4:	2200      	movs	r2, #0
  4071c6:	4b17      	ldr	r3, [pc, #92]	; (407224 <_dtoa_r+0xd9c>)
  4071c8:	f7fc fbb4 	bl	403934 <__adddf3>
  4071cc:	9a02      	ldr	r2, [sp, #8]
  4071ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4071d0:	9312      	str	r3, [sp, #72]	; 0x48
  4071d2:	3a01      	subs	r2, #1
  4071d4:	4605      	mov	r5, r0
  4071d6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4071da:	9215      	str	r2, [sp, #84]	; 0x54
  4071dc:	e56a      	b.n	406cb4 <_dtoa_r+0x82c>
  4071de:	2239      	movs	r2, #57	; 0x39
  4071e0:	46b3      	mov	fp, r6
  4071e2:	703a      	strb	r2, [r7, #0]
  4071e4:	9e06      	ldr	r6, [sp, #24]
  4071e6:	1c7d      	adds	r5, r7, #1
  4071e8:	e4c0      	b.n	406b6c <_dtoa_r+0x6e4>
  4071ea:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4071ee:	2000      	movs	r0, #0
  4071f0:	4910      	ldr	r1, [pc, #64]	; (407234 <_dtoa_r+0xdac>)
  4071f2:	f7fc fb9d 	bl	403930 <__aeabi_dsub>
  4071f6:	4632      	mov	r2, r6
  4071f8:	463b      	mov	r3, r7
  4071fa:	f001 fe27 	bl	408e4c <__aeabi_dcmpgt>
  4071fe:	b908      	cbnz	r0, 407204 <_dtoa_r+0xd7c>
  407200:	e6ae      	b.n	406f60 <_dtoa_r+0xad8>
  407202:	4615      	mov	r5, r2
  407204:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407208:	2b30      	cmp	r3, #48	; 0x30
  40720a:	f105 32ff 	add.w	r2, r5, #4294967295
  40720e:	d0f8      	beq.n	407202 <_dtoa_r+0xd7a>
  407210:	e5d7      	b.n	406dc2 <_dtoa_r+0x93a>
  407212:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407216:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407218:	9302      	str	r3, [sp, #8]
  40721a:	f7ff bae8 	b.w	4067ee <_dtoa_r+0x366>
  40721e:	970c      	str	r7, [sp, #48]	; 0x30
  407220:	f7ff bba5 	b.w	40696e <_dtoa_r+0x4e6>
  407224:	401c0000 	.word	0x401c0000
  407228:	40140000 	.word	0x40140000
  40722c:	004093c0 	.word	0x004093c0
  407230:	00409398 	.word	0x00409398
  407234:	3fe00000 	.word	0x3fe00000
  407238:	40240000 	.word	0x40240000
  40723c:	2b39      	cmp	r3, #57	; 0x39
  40723e:	f8cd b018 	str.w	fp, [sp, #24]
  407242:	46d0      	mov	r8, sl
  407244:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407248:	469a      	mov	sl, r3
  40724a:	d0c8      	beq.n	4071de <_dtoa_r+0xd56>
  40724c:	f1bb 0f00 	cmp.w	fp, #0
  407250:	f73f aebf 	bgt.w	406fd2 <_dtoa_r+0xb4a>
  407254:	e6bf      	b.n	406fd6 <_dtoa_r+0xb4e>
  407256:	f47f aebe 	bne.w	406fd6 <_dtoa_r+0xb4e>
  40725a:	f01a 0f01 	tst.w	sl, #1
  40725e:	f43f aeba 	beq.w	406fd6 <_dtoa_r+0xb4e>
  407262:	e6b2      	b.n	406fca <_dtoa_r+0xb42>
  407264:	f04f 0800 	mov.w	r8, #0
  407268:	4646      	mov	r6, r8
  40726a:	e5e9      	b.n	406e40 <_dtoa_r+0x9b8>
  40726c:	4631      	mov	r1, r6
  40726e:	2300      	movs	r3, #0
  407270:	220a      	movs	r2, #10
  407272:	4620      	mov	r0, r4
  407274:	f000 fdc8 	bl	407e08 <__multadd>
  407278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40727a:	2b00      	cmp	r3, #0
  40727c:	4606      	mov	r6, r0
  40727e:	dd0a      	ble.n	407296 <_dtoa_r+0xe0e>
  407280:	930a      	str	r3, [sp, #40]	; 0x28
  407282:	f7ff bbaa 	b.w	4069da <_dtoa_r+0x552>
  407286:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407288:	2b02      	cmp	r3, #2
  40728a:	dc23      	bgt.n	4072d4 <_dtoa_r+0xe4c>
  40728c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40728e:	e43b      	b.n	406b08 <_dtoa_r+0x680>
  407290:	f04f 0a02 	mov.w	sl, #2
  407294:	e4ed      	b.n	406c72 <_dtoa_r+0x7ea>
  407296:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407298:	2b02      	cmp	r3, #2
  40729a:	dc1b      	bgt.n	4072d4 <_dtoa_r+0xe4c>
  40729c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40729e:	e7ef      	b.n	407280 <_dtoa_r+0xdf8>
  4072a0:	2500      	movs	r5, #0
  4072a2:	6465      	str	r5, [r4, #68]	; 0x44
  4072a4:	4629      	mov	r1, r5
  4072a6:	4620      	mov	r0, r4
  4072a8:	f000 fd7e 	bl	407da8 <_Balloc>
  4072ac:	f04f 33ff 	mov.w	r3, #4294967295
  4072b0:	930a      	str	r3, [sp, #40]	; 0x28
  4072b2:	930f      	str	r3, [sp, #60]	; 0x3c
  4072b4:	2301      	movs	r3, #1
  4072b6:	9004      	str	r0, [sp, #16]
  4072b8:	9525      	str	r5, [sp, #148]	; 0x94
  4072ba:	6420      	str	r0, [r4, #64]	; 0x40
  4072bc:	930b      	str	r3, [sp, #44]	; 0x2c
  4072be:	f7ff b9dd 	b.w	40667c <_dtoa_r+0x1f4>
  4072c2:	2501      	movs	r5, #1
  4072c4:	f7ff b9a5 	b.w	406612 <_dtoa_r+0x18a>
  4072c8:	f43f ab69 	beq.w	40699e <_dtoa_r+0x516>
  4072cc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4072d0:	f7ff bbf9 	b.w	406ac6 <_dtoa_r+0x63e>
  4072d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4072d6:	930a      	str	r3, [sp, #40]	; 0x28
  4072d8:	e5e5      	b.n	406ea6 <_dtoa_r+0xa1e>
  4072da:	bf00      	nop

004072dc <__sflush_r>:
  4072dc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4072e0:	b29a      	uxth	r2, r3
  4072e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4072e6:	460d      	mov	r5, r1
  4072e8:	0711      	lsls	r1, r2, #28
  4072ea:	4680      	mov	r8, r0
  4072ec:	d43a      	bmi.n	407364 <__sflush_r+0x88>
  4072ee:	686a      	ldr	r2, [r5, #4]
  4072f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4072f4:	2a00      	cmp	r2, #0
  4072f6:	81ab      	strh	r3, [r5, #12]
  4072f8:	dd6f      	ble.n	4073da <__sflush_r+0xfe>
  4072fa:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4072fc:	2c00      	cmp	r4, #0
  4072fe:	d049      	beq.n	407394 <__sflush_r+0xb8>
  407300:	2200      	movs	r2, #0
  407302:	b29b      	uxth	r3, r3
  407304:	f8d8 6000 	ldr.w	r6, [r8]
  407308:	f8c8 2000 	str.w	r2, [r8]
  40730c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407310:	d067      	beq.n	4073e2 <__sflush_r+0x106>
  407312:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407314:	075f      	lsls	r7, r3, #29
  407316:	d505      	bpl.n	407324 <__sflush_r+0x48>
  407318:	6869      	ldr	r1, [r5, #4]
  40731a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40731c:	1a52      	subs	r2, r2, r1
  40731e:	b10b      	cbz	r3, 407324 <__sflush_r+0x48>
  407320:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407322:	1ad2      	subs	r2, r2, r3
  407324:	2300      	movs	r3, #0
  407326:	69e9      	ldr	r1, [r5, #28]
  407328:	4640      	mov	r0, r8
  40732a:	47a0      	blx	r4
  40732c:	1c44      	adds	r4, r0, #1
  40732e:	d03c      	beq.n	4073aa <__sflush_r+0xce>
  407330:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407334:	692a      	ldr	r2, [r5, #16]
  407336:	602a      	str	r2, [r5, #0]
  407338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40733c:	2200      	movs	r2, #0
  40733e:	81ab      	strh	r3, [r5, #12]
  407340:	04db      	lsls	r3, r3, #19
  407342:	606a      	str	r2, [r5, #4]
  407344:	d447      	bmi.n	4073d6 <__sflush_r+0xfa>
  407346:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407348:	f8c8 6000 	str.w	r6, [r8]
  40734c:	b311      	cbz	r1, 407394 <__sflush_r+0xb8>
  40734e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407352:	4299      	cmp	r1, r3
  407354:	d002      	beq.n	40735c <__sflush_r+0x80>
  407356:	4640      	mov	r0, r8
  407358:	f000 f95a 	bl	407610 <_free_r>
  40735c:	2000      	movs	r0, #0
  40735e:	6328      	str	r0, [r5, #48]	; 0x30
  407360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407364:	692e      	ldr	r6, [r5, #16]
  407366:	b1ae      	cbz	r6, 407394 <__sflush_r+0xb8>
  407368:	682c      	ldr	r4, [r5, #0]
  40736a:	602e      	str	r6, [r5, #0]
  40736c:	0791      	lsls	r1, r2, #30
  40736e:	bf0c      	ite	eq
  407370:	696b      	ldreq	r3, [r5, #20]
  407372:	2300      	movne	r3, #0
  407374:	1ba4      	subs	r4, r4, r6
  407376:	60ab      	str	r3, [r5, #8]
  407378:	e00a      	b.n	407390 <__sflush_r+0xb4>
  40737a:	4623      	mov	r3, r4
  40737c:	4632      	mov	r2, r6
  40737e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407380:	69e9      	ldr	r1, [r5, #28]
  407382:	4640      	mov	r0, r8
  407384:	47b8      	blx	r7
  407386:	2800      	cmp	r0, #0
  407388:	eba4 0400 	sub.w	r4, r4, r0
  40738c:	4406      	add	r6, r0
  40738e:	dd04      	ble.n	40739a <__sflush_r+0xbe>
  407390:	2c00      	cmp	r4, #0
  407392:	dcf2      	bgt.n	40737a <__sflush_r+0x9e>
  407394:	2000      	movs	r0, #0
  407396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40739a:	89ab      	ldrh	r3, [r5, #12]
  40739c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4073a0:	81ab      	strh	r3, [r5, #12]
  4073a2:	f04f 30ff 	mov.w	r0, #4294967295
  4073a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073aa:	f8d8 4000 	ldr.w	r4, [r8]
  4073ae:	2c1d      	cmp	r4, #29
  4073b0:	d8f3      	bhi.n	40739a <__sflush_r+0xbe>
  4073b2:	4b19      	ldr	r3, [pc, #100]	; (407418 <__sflush_r+0x13c>)
  4073b4:	40e3      	lsrs	r3, r4
  4073b6:	43db      	mvns	r3, r3
  4073b8:	f013 0301 	ands.w	r3, r3, #1
  4073bc:	d1ed      	bne.n	40739a <__sflush_r+0xbe>
  4073be:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4073c2:	606b      	str	r3, [r5, #4]
  4073c4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4073c8:	6929      	ldr	r1, [r5, #16]
  4073ca:	81ab      	strh	r3, [r5, #12]
  4073cc:	04da      	lsls	r2, r3, #19
  4073ce:	6029      	str	r1, [r5, #0]
  4073d0:	d5b9      	bpl.n	407346 <__sflush_r+0x6a>
  4073d2:	2c00      	cmp	r4, #0
  4073d4:	d1b7      	bne.n	407346 <__sflush_r+0x6a>
  4073d6:	6528      	str	r0, [r5, #80]	; 0x50
  4073d8:	e7b5      	b.n	407346 <__sflush_r+0x6a>
  4073da:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4073dc:	2a00      	cmp	r2, #0
  4073de:	dc8c      	bgt.n	4072fa <__sflush_r+0x1e>
  4073e0:	e7d8      	b.n	407394 <__sflush_r+0xb8>
  4073e2:	2301      	movs	r3, #1
  4073e4:	69e9      	ldr	r1, [r5, #28]
  4073e6:	4640      	mov	r0, r8
  4073e8:	47a0      	blx	r4
  4073ea:	1c43      	adds	r3, r0, #1
  4073ec:	4602      	mov	r2, r0
  4073ee:	d002      	beq.n	4073f6 <__sflush_r+0x11a>
  4073f0:	89ab      	ldrh	r3, [r5, #12]
  4073f2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4073f4:	e78e      	b.n	407314 <__sflush_r+0x38>
  4073f6:	f8d8 3000 	ldr.w	r3, [r8]
  4073fa:	2b00      	cmp	r3, #0
  4073fc:	d0f8      	beq.n	4073f0 <__sflush_r+0x114>
  4073fe:	2b1d      	cmp	r3, #29
  407400:	d001      	beq.n	407406 <__sflush_r+0x12a>
  407402:	2b16      	cmp	r3, #22
  407404:	d102      	bne.n	40740c <__sflush_r+0x130>
  407406:	f8c8 6000 	str.w	r6, [r8]
  40740a:	e7c3      	b.n	407394 <__sflush_r+0xb8>
  40740c:	89ab      	ldrh	r3, [r5, #12]
  40740e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407412:	81ab      	strh	r3, [r5, #12]
  407414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407418:	20400001 	.word	0x20400001

0040741c <_fflush_r>:
  40741c:	b538      	push	{r3, r4, r5, lr}
  40741e:	460d      	mov	r5, r1
  407420:	4604      	mov	r4, r0
  407422:	b108      	cbz	r0, 407428 <_fflush_r+0xc>
  407424:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407426:	b1bb      	cbz	r3, 407458 <_fflush_r+0x3c>
  407428:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40742c:	b188      	cbz	r0, 407452 <_fflush_r+0x36>
  40742e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407430:	07db      	lsls	r3, r3, #31
  407432:	d401      	bmi.n	407438 <_fflush_r+0x1c>
  407434:	0581      	lsls	r1, r0, #22
  407436:	d517      	bpl.n	407468 <_fflush_r+0x4c>
  407438:	4620      	mov	r0, r4
  40743a:	4629      	mov	r1, r5
  40743c:	f7ff ff4e 	bl	4072dc <__sflush_r>
  407440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407442:	07da      	lsls	r2, r3, #31
  407444:	4604      	mov	r4, r0
  407446:	d402      	bmi.n	40744e <_fflush_r+0x32>
  407448:	89ab      	ldrh	r3, [r5, #12]
  40744a:	059b      	lsls	r3, r3, #22
  40744c:	d507      	bpl.n	40745e <_fflush_r+0x42>
  40744e:	4620      	mov	r0, r4
  407450:	bd38      	pop	{r3, r4, r5, pc}
  407452:	4604      	mov	r4, r0
  407454:	4620      	mov	r0, r4
  407456:	bd38      	pop	{r3, r4, r5, pc}
  407458:	f000 f838 	bl	4074cc <__sinit>
  40745c:	e7e4      	b.n	407428 <_fflush_r+0xc>
  40745e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407460:	f000 fb72 	bl	407b48 <__retarget_lock_release_recursive>
  407464:	4620      	mov	r0, r4
  407466:	bd38      	pop	{r3, r4, r5, pc}
  407468:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40746a:	f000 fb6b 	bl	407b44 <__retarget_lock_acquire_recursive>
  40746e:	e7e3      	b.n	407438 <_fflush_r+0x1c>

00407470 <_cleanup_r>:
  407470:	4901      	ldr	r1, [pc, #4]	; (407478 <_cleanup_r+0x8>)
  407472:	f000 bb2b 	b.w	407acc <_fwalk_reent>
  407476:	bf00      	nop
  407478:	00408979 	.word	0x00408979

0040747c <std.isra.0>:
  40747c:	b510      	push	{r4, lr}
  40747e:	2300      	movs	r3, #0
  407480:	4604      	mov	r4, r0
  407482:	8181      	strh	r1, [r0, #12]
  407484:	81c2      	strh	r2, [r0, #14]
  407486:	6003      	str	r3, [r0, #0]
  407488:	6043      	str	r3, [r0, #4]
  40748a:	6083      	str	r3, [r0, #8]
  40748c:	6643      	str	r3, [r0, #100]	; 0x64
  40748e:	6103      	str	r3, [r0, #16]
  407490:	6143      	str	r3, [r0, #20]
  407492:	6183      	str	r3, [r0, #24]
  407494:	4619      	mov	r1, r3
  407496:	2208      	movs	r2, #8
  407498:	305c      	adds	r0, #92	; 0x5c
  40749a:	f7fd f9e1 	bl	404860 <memset>
  40749e:	4807      	ldr	r0, [pc, #28]	; (4074bc <std.isra.0+0x40>)
  4074a0:	4907      	ldr	r1, [pc, #28]	; (4074c0 <std.isra.0+0x44>)
  4074a2:	4a08      	ldr	r2, [pc, #32]	; (4074c4 <std.isra.0+0x48>)
  4074a4:	4b08      	ldr	r3, [pc, #32]	; (4074c8 <std.isra.0+0x4c>)
  4074a6:	6220      	str	r0, [r4, #32]
  4074a8:	61e4      	str	r4, [r4, #28]
  4074aa:	6261      	str	r1, [r4, #36]	; 0x24
  4074ac:	62a2      	str	r2, [r4, #40]	; 0x28
  4074ae:	62e3      	str	r3, [r4, #44]	; 0x2c
  4074b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4074b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4074b8:	f000 bb40 	b.w	407b3c <__retarget_lock_init_recursive>
  4074bc:	004086e9 	.word	0x004086e9
  4074c0:	0040870d 	.word	0x0040870d
  4074c4:	00408749 	.word	0x00408749
  4074c8:	00408769 	.word	0x00408769

004074cc <__sinit>:
  4074cc:	b510      	push	{r4, lr}
  4074ce:	4604      	mov	r4, r0
  4074d0:	4812      	ldr	r0, [pc, #72]	; (40751c <__sinit+0x50>)
  4074d2:	f000 fb37 	bl	407b44 <__retarget_lock_acquire_recursive>
  4074d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4074d8:	b9d2      	cbnz	r2, 407510 <__sinit+0x44>
  4074da:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4074de:	4810      	ldr	r0, [pc, #64]	; (407520 <__sinit+0x54>)
  4074e0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4074e4:	2103      	movs	r1, #3
  4074e6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4074ea:	63e0      	str	r0, [r4, #60]	; 0x3c
  4074ec:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4074f0:	6860      	ldr	r0, [r4, #4]
  4074f2:	2104      	movs	r1, #4
  4074f4:	f7ff ffc2 	bl	40747c <std.isra.0>
  4074f8:	2201      	movs	r2, #1
  4074fa:	2109      	movs	r1, #9
  4074fc:	68a0      	ldr	r0, [r4, #8]
  4074fe:	f7ff ffbd 	bl	40747c <std.isra.0>
  407502:	2202      	movs	r2, #2
  407504:	2112      	movs	r1, #18
  407506:	68e0      	ldr	r0, [r4, #12]
  407508:	f7ff ffb8 	bl	40747c <std.isra.0>
  40750c:	2301      	movs	r3, #1
  40750e:	63a3      	str	r3, [r4, #56]	; 0x38
  407510:	4802      	ldr	r0, [pc, #8]	; (40751c <__sinit+0x50>)
  407512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407516:	f000 bb17 	b.w	407b48 <__retarget_lock_release_recursive>
  40751a:	bf00      	nop
  40751c:	20400cb8 	.word	0x20400cb8
  407520:	00407471 	.word	0x00407471

00407524 <__sfp_lock_acquire>:
  407524:	4801      	ldr	r0, [pc, #4]	; (40752c <__sfp_lock_acquire+0x8>)
  407526:	f000 bb0d 	b.w	407b44 <__retarget_lock_acquire_recursive>
  40752a:	bf00      	nop
  40752c:	20400ccc 	.word	0x20400ccc

00407530 <__sfp_lock_release>:
  407530:	4801      	ldr	r0, [pc, #4]	; (407538 <__sfp_lock_release+0x8>)
  407532:	f000 bb09 	b.w	407b48 <__retarget_lock_release_recursive>
  407536:	bf00      	nop
  407538:	20400ccc 	.word	0x20400ccc

0040753c <__libc_fini_array>:
  40753c:	b538      	push	{r3, r4, r5, lr}
  40753e:	4c0a      	ldr	r4, [pc, #40]	; (407568 <__libc_fini_array+0x2c>)
  407540:	4d0a      	ldr	r5, [pc, #40]	; (40756c <__libc_fini_array+0x30>)
  407542:	1b64      	subs	r4, r4, r5
  407544:	10a4      	asrs	r4, r4, #2
  407546:	d00a      	beq.n	40755e <__libc_fini_array+0x22>
  407548:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40754c:	3b01      	subs	r3, #1
  40754e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407552:	3c01      	subs	r4, #1
  407554:	f855 3904 	ldr.w	r3, [r5], #-4
  407558:	4798      	blx	r3
  40755a:	2c00      	cmp	r4, #0
  40755c:	d1f9      	bne.n	407552 <__libc_fini_array+0x16>
  40755e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407562:	f002 b82b 	b.w	4095bc <_fini>
  407566:	bf00      	nop
  407568:	004095cc 	.word	0x004095cc
  40756c:	004095c8 	.word	0x004095c8

00407570 <_malloc_trim_r>:
  407570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407572:	4f24      	ldr	r7, [pc, #144]	; (407604 <_malloc_trim_r+0x94>)
  407574:	460c      	mov	r4, r1
  407576:	4606      	mov	r6, r0
  407578:	f7fd f9c0 	bl	4048fc <__malloc_lock>
  40757c:	68bb      	ldr	r3, [r7, #8]
  40757e:	685d      	ldr	r5, [r3, #4]
  407580:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407584:	310f      	adds	r1, #15
  407586:	f025 0503 	bic.w	r5, r5, #3
  40758a:	4429      	add	r1, r5
  40758c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407590:	f021 010f 	bic.w	r1, r1, #15
  407594:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407598:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40759c:	db07      	blt.n	4075ae <_malloc_trim_r+0x3e>
  40759e:	2100      	movs	r1, #0
  4075a0:	4630      	mov	r0, r6
  4075a2:	f7fd fa21 	bl	4049e8 <_sbrk_r>
  4075a6:	68bb      	ldr	r3, [r7, #8]
  4075a8:	442b      	add	r3, r5
  4075aa:	4298      	cmp	r0, r3
  4075ac:	d004      	beq.n	4075b8 <_malloc_trim_r+0x48>
  4075ae:	4630      	mov	r0, r6
  4075b0:	f7fd f9aa 	bl	404908 <__malloc_unlock>
  4075b4:	2000      	movs	r0, #0
  4075b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4075b8:	4261      	negs	r1, r4
  4075ba:	4630      	mov	r0, r6
  4075bc:	f7fd fa14 	bl	4049e8 <_sbrk_r>
  4075c0:	3001      	adds	r0, #1
  4075c2:	d00d      	beq.n	4075e0 <_malloc_trim_r+0x70>
  4075c4:	4b10      	ldr	r3, [pc, #64]	; (407608 <_malloc_trim_r+0x98>)
  4075c6:	68ba      	ldr	r2, [r7, #8]
  4075c8:	6819      	ldr	r1, [r3, #0]
  4075ca:	1b2d      	subs	r5, r5, r4
  4075cc:	f045 0501 	orr.w	r5, r5, #1
  4075d0:	4630      	mov	r0, r6
  4075d2:	1b09      	subs	r1, r1, r4
  4075d4:	6055      	str	r5, [r2, #4]
  4075d6:	6019      	str	r1, [r3, #0]
  4075d8:	f7fd f996 	bl	404908 <__malloc_unlock>
  4075dc:	2001      	movs	r0, #1
  4075de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4075e0:	2100      	movs	r1, #0
  4075e2:	4630      	mov	r0, r6
  4075e4:	f7fd fa00 	bl	4049e8 <_sbrk_r>
  4075e8:	68ba      	ldr	r2, [r7, #8]
  4075ea:	1a83      	subs	r3, r0, r2
  4075ec:	2b0f      	cmp	r3, #15
  4075ee:	ddde      	ble.n	4075ae <_malloc_trim_r+0x3e>
  4075f0:	4c06      	ldr	r4, [pc, #24]	; (40760c <_malloc_trim_r+0x9c>)
  4075f2:	4905      	ldr	r1, [pc, #20]	; (407608 <_malloc_trim_r+0x98>)
  4075f4:	6824      	ldr	r4, [r4, #0]
  4075f6:	f043 0301 	orr.w	r3, r3, #1
  4075fa:	1b00      	subs	r0, r0, r4
  4075fc:	6053      	str	r3, [r2, #4]
  4075fe:	6008      	str	r0, [r1, #0]
  407600:	e7d5      	b.n	4075ae <_malloc_trim_r+0x3e>
  407602:	bf00      	nop
  407604:	20400438 	.word	0x20400438
  407608:	20400b8c 	.word	0x20400b8c
  40760c:	20400840 	.word	0x20400840

00407610 <_free_r>:
  407610:	2900      	cmp	r1, #0
  407612:	d044      	beq.n	40769e <_free_r+0x8e>
  407614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407618:	460d      	mov	r5, r1
  40761a:	4680      	mov	r8, r0
  40761c:	f7fd f96e 	bl	4048fc <__malloc_lock>
  407620:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407624:	4969      	ldr	r1, [pc, #420]	; (4077cc <_free_r+0x1bc>)
  407626:	f027 0301 	bic.w	r3, r7, #1
  40762a:	f1a5 0408 	sub.w	r4, r5, #8
  40762e:	18e2      	adds	r2, r4, r3
  407630:	688e      	ldr	r6, [r1, #8]
  407632:	6850      	ldr	r0, [r2, #4]
  407634:	42b2      	cmp	r2, r6
  407636:	f020 0003 	bic.w	r0, r0, #3
  40763a:	d05e      	beq.n	4076fa <_free_r+0xea>
  40763c:	07fe      	lsls	r6, r7, #31
  40763e:	6050      	str	r0, [r2, #4]
  407640:	d40b      	bmi.n	40765a <_free_r+0x4a>
  407642:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407646:	1be4      	subs	r4, r4, r7
  407648:	f101 0e08 	add.w	lr, r1, #8
  40764c:	68a5      	ldr	r5, [r4, #8]
  40764e:	4575      	cmp	r5, lr
  407650:	443b      	add	r3, r7
  407652:	d06d      	beq.n	407730 <_free_r+0x120>
  407654:	68e7      	ldr	r7, [r4, #12]
  407656:	60ef      	str	r7, [r5, #12]
  407658:	60bd      	str	r5, [r7, #8]
  40765a:	1815      	adds	r5, r2, r0
  40765c:	686d      	ldr	r5, [r5, #4]
  40765e:	07ed      	lsls	r5, r5, #31
  407660:	d53e      	bpl.n	4076e0 <_free_r+0xd0>
  407662:	f043 0201 	orr.w	r2, r3, #1
  407666:	6062      	str	r2, [r4, #4]
  407668:	50e3      	str	r3, [r4, r3]
  40766a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40766e:	d217      	bcs.n	4076a0 <_free_r+0x90>
  407670:	08db      	lsrs	r3, r3, #3
  407672:	1c58      	adds	r0, r3, #1
  407674:	109a      	asrs	r2, r3, #2
  407676:	684d      	ldr	r5, [r1, #4]
  407678:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40767c:	60a7      	str	r7, [r4, #8]
  40767e:	2301      	movs	r3, #1
  407680:	4093      	lsls	r3, r2
  407682:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407686:	432b      	orrs	r3, r5
  407688:	3a08      	subs	r2, #8
  40768a:	60e2      	str	r2, [r4, #12]
  40768c:	604b      	str	r3, [r1, #4]
  40768e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407692:	60fc      	str	r4, [r7, #12]
  407694:	4640      	mov	r0, r8
  407696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40769a:	f7fd b935 	b.w	404908 <__malloc_unlock>
  40769e:	4770      	bx	lr
  4076a0:	0a5a      	lsrs	r2, r3, #9
  4076a2:	2a04      	cmp	r2, #4
  4076a4:	d852      	bhi.n	40774c <_free_r+0x13c>
  4076a6:	099a      	lsrs	r2, r3, #6
  4076a8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4076ac:	00ff      	lsls	r7, r7, #3
  4076ae:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4076b2:	19c8      	adds	r0, r1, r7
  4076b4:	59ca      	ldr	r2, [r1, r7]
  4076b6:	3808      	subs	r0, #8
  4076b8:	4290      	cmp	r0, r2
  4076ba:	d04f      	beq.n	40775c <_free_r+0x14c>
  4076bc:	6851      	ldr	r1, [r2, #4]
  4076be:	f021 0103 	bic.w	r1, r1, #3
  4076c2:	428b      	cmp	r3, r1
  4076c4:	d232      	bcs.n	40772c <_free_r+0x11c>
  4076c6:	6892      	ldr	r2, [r2, #8]
  4076c8:	4290      	cmp	r0, r2
  4076ca:	d1f7      	bne.n	4076bc <_free_r+0xac>
  4076cc:	68c3      	ldr	r3, [r0, #12]
  4076ce:	60a0      	str	r0, [r4, #8]
  4076d0:	60e3      	str	r3, [r4, #12]
  4076d2:	609c      	str	r4, [r3, #8]
  4076d4:	60c4      	str	r4, [r0, #12]
  4076d6:	4640      	mov	r0, r8
  4076d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4076dc:	f7fd b914 	b.w	404908 <__malloc_unlock>
  4076e0:	6895      	ldr	r5, [r2, #8]
  4076e2:	4f3b      	ldr	r7, [pc, #236]	; (4077d0 <_free_r+0x1c0>)
  4076e4:	42bd      	cmp	r5, r7
  4076e6:	4403      	add	r3, r0
  4076e8:	d040      	beq.n	40776c <_free_r+0x15c>
  4076ea:	68d0      	ldr	r0, [r2, #12]
  4076ec:	60e8      	str	r0, [r5, #12]
  4076ee:	f043 0201 	orr.w	r2, r3, #1
  4076f2:	6085      	str	r5, [r0, #8]
  4076f4:	6062      	str	r2, [r4, #4]
  4076f6:	50e3      	str	r3, [r4, r3]
  4076f8:	e7b7      	b.n	40766a <_free_r+0x5a>
  4076fa:	07ff      	lsls	r7, r7, #31
  4076fc:	4403      	add	r3, r0
  4076fe:	d407      	bmi.n	407710 <_free_r+0x100>
  407700:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407704:	1aa4      	subs	r4, r4, r2
  407706:	4413      	add	r3, r2
  407708:	68a0      	ldr	r0, [r4, #8]
  40770a:	68e2      	ldr	r2, [r4, #12]
  40770c:	60c2      	str	r2, [r0, #12]
  40770e:	6090      	str	r0, [r2, #8]
  407710:	4a30      	ldr	r2, [pc, #192]	; (4077d4 <_free_r+0x1c4>)
  407712:	6812      	ldr	r2, [r2, #0]
  407714:	f043 0001 	orr.w	r0, r3, #1
  407718:	4293      	cmp	r3, r2
  40771a:	6060      	str	r0, [r4, #4]
  40771c:	608c      	str	r4, [r1, #8]
  40771e:	d3b9      	bcc.n	407694 <_free_r+0x84>
  407720:	4b2d      	ldr	r3, [pc, #180]	; (4077d8 <_free_r+0x1c8>)
  407722:	4640      	mov	r0, r8
  407724:	6819      	ldr	r1, [r3, #0]
  407726:	f7ff ff23 	bl	407570 <_malloc_trim_r>
  40772a:	e7b3      	b.n	407694 <_free_r+0x84>
  40772c:	4610      	mov	r0, r2
  40772e:	e7cd      	b.n	4076cc <_free_r+0xbc>
  407730:	1811      	adds	r1, r2, r0
  407732:	6849      	ldr	r1, [r1, #4]
  407734:	07c9      	lsls	r1, r1, #31
  407736:	d444      	bmi.n	4077c2 <_free_r+0x1b2>
  407738:	6891      	ldr	r1, [r2, #8]
  40773a:	68d2      	ldr	r2, [r2, #12]
  40773c:	60ca      	str	r2, [r1, #12]
  40773e:	4403      	add	r3, r0
  407740:	f043 0001 	orr.w	r0, r3, #1
  407744:	6091      	str	r1, [r2, #8]
  407746:	6060      	str	r0, [r4, #4]
  407748:	50e3      	str	r3, [r4, r3]
  40774a:	e7a3      	b.n	407694 <_free_r+0x84>
  40774c:	2a14      	cmp	r2, #20
  40774e:	d816      	bhi.n	40777e <_free_r+0x16e>
  407750:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407754:	00ff      	lsls	r7, r7, #3
  407756:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40775a:	e7aa      	b.n	4076b2 <_free_r+0xa2>
  40775c:	10aa      	asrs	r2, r5, #2
  40775e:	2301      	movs	r3, #1
  407760:	684d      	ldr	r5, [r1, #4]
  407762:	4093      	lsls	r3, r2
  407764:	432b      	orrs	r3, r5
  407766:	604b      	str	r3, [r1, #4]
  407768:	4603      	mov	r3, r0
  40776a:	e7b0      	b.n	4076ce <_free_r+0xbe>
  40776c:	f043 0201 	orr.w	r2, r3, #1
  407770:	614c      	str	r4, [r1, #20]
  407772:	610c      	str	r4, [r1, #16]
  407774:	60e5      	str	r5, [r4, #12]
  407776:	60a5      	str	r5, [r4, #8]
  407778:	6062      	str	r2, [r4, #4]
  40777a:	50e3      	str	r3, [r4, r3]
  40777c:	e78a      	b.n	407694 <_free_r+0x84>
  40777e:	2a54      	cmp	r2, #84	; 0x54
  407780:	d806      	bhi.n	407790 <_free_r+0x180>
  407782:	0b1a      	lsrs	r2, r3, #12
  407784:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407788:	00ff      	lsls	r7, r7, #3
  40778a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40778e:	e790      	b.n	4076b2 <_free_r+0xa2>
  407790:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407794:	d806      	bhi.n	4077a4 <_free_r+0x194>
  407796:	0bda      	lsrs	r2, r3, #15
  407798:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40779c:	00ff      	lsls	r7, r7, #3
  40779e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4077a2:	e786      	b.n	4076b2 <_free_r+0xa2>
  4077a4:	f240 5054 	movw	r0, #1364	; 0x554
  4077a8:	4282      	cmp	r2, r0
  4077aa:	d806      	bhi.n	4077ba <_free_r+0x1aa>
  4077ac:	0c9a      	lsrs	r2, r3, #18
  4077ae:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4077b2:	00ff      	lsls	r7, r7, #3
  4077b4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4077b8:	e77b      	b.n	4076b2 <_free_r+0xa2>
  4077ba:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4077be:	257e      	movs	r5, #126	; 0x7e
  4077c0:	e777      	b.n	4076b2 <_free_r+0xa2>
  4077c2:	f043 0101 	orr.w	r1, r3, #1
  4077c6:	6061      	str	r1, [r4, #4]
  4077c8:	6013      	str	r3, [r2, #0]
  4077ca:	e763      	b.n	407694 <_free_r+0x84>
  4077cc:	20400438 	.word	0x20400438
  4077d0:	20400440 	.word	0x20400440
  4077d4:	20400844 	.word	0x20400844
  4077d8:	20400bbc 	.word	0x20400bbc

004077dc <__sfvwrite_r>:
  4077dc:	6893      	ldr	r3, [r2, #8]
  4077de:	2b00      	cmp	r3, #0
  4077e0:	d073      	beq.n	4078ca <__sfvwrite_r+0xee>
  4077e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4077e6:	898b      	ldrh	r3, [r1, #12]
  4077e8:	b083      	sub	sp, #12
  4077ea:	460c      	mov	r4, r1
  4077ec:	0719      	lsls	r1, r3, #28
  4077ee:	9000      	str	r0, [sp, #0]
  4077f0:	4616      	mov	r6, r2
  4077f2:	d526      	bpl.n	407842 <__sfvwrite_r+0x66>
  4077f4:	6922      	ldr	r2, [r4, #16]
  4077f6:	b322      	cbz	r2, 407842 <__sfvwrite_r+0x66>
  4077f8:	f013 0002 	ands.w	r0, r3, #2
  4077fc:	6835      	ldr	r5, [r6, #0]
  4077fe:	d02c      	beq.n	40785a <__sfvwrite_r+0x7e>
  407800:	f04f 0900 	mov.w	r9, #0
  407804:	4fb0      	ldr	r7, [pc, #704]	; (407ac8 <__sfvwrite_r+0x2ec>)
  407806:	46c8      	mov	r8, r9
  407808:	46b2      	mov	sl, r6
  40780a:	45b8      	cmp	r8, r7
  40780c:	4643      	mov	r3, r8
  40780e:	464a      	mov	r2, r9
  407810:	bf28      	it	cs
  407812:	463b      	movcs	r3, r7
  407814:	9800      	ldr	r0, [sp, #0]
  407816:	f1b8 0f00 	cmp.w	r8, #0
  40781a:	d050      	beq.n	4078be <__sfvwrite_r+0xe2>
  40781c:	69e1      	ldr	r1, [r4, #28]
  40781e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407820:	47b0      	blx	r6
  407822:	2800      	cmp	r0, #0
  407824:	dd58      	ble.n	4078d8 <__sfvwrite_r+0xfc>
  407826:	f8da 3008 	ldr.w	r3, [sl, #8]
  40782a:	1a1b      	subs	r3, r3, r0
  40782c:	4481      	add	r9, r0
  40782e:	eba8 0800 	sub.w	r8, r8, r0
  407832:	f8ca 3008 	str.w	r3, [sl, #8]
  407836:	2b00      	cmp	r3, #0
  407838:	d1e7      	bne.n	40780a <__sfvwrite_r+0x2e>
  40783a:	2000      	movs	r0, #0
  40783c:	b003      	add	sp, #12
  40783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407842:	4621      	mov	r1, r4
  407844:	9800      	ldr	r0, [sp, #0]
  407846:	f7fe fd17 	bl	406278 <__swsetup_r>
  40784a:	2800      	cmp	r0, #0
  40784c:	f040 8133 	bne.w	407ab6 <__sfvwrite_r+0x2da>
  407850:	89a3      	ldrh	r3, [r4, #12]
  407852:	6835      	ldr	r5, [r6, #0]
  407854:	f013 0002 	ands.w	r0, r3, #2
  407858:	d1d2      	bne.n	407800 <__sfvwrite_r+0x24>
  40785a:	f013 0901 	ands.w	r9, r3, #1
  40785e:	d145      	bne.n	4078ec <__sfvwrite_r+0x110>
  407860:	464f      	mov	r7, r9
  407862:	9601      	str	r6, [sp, #4]
  407864:	b337      	cbz	r7, 4078b4 <__sfvwrite_r+0xd8>
  407866:	059a      	lsls	r2, r3, #22
  407868:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40786c:	f140 8083 	bpl.w	407976 <__sfvwrite_r+0x19a>
  407870:	4547      	cmp	r7, r8
  407872:	46c3      	mov	fp, r8
  407874:	f0c0 80ab 	bcc.w	4079ce <__sfvwrite_r+0x1f2>
  407878:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40787c:	f040 80ac 	bne.w	4079d8 <__sfvwrite_r+0x1fc>
  407880:	6820      	ldr	r0, [r4, #0]
  407882:	46ba      	mov	sl, r7
  407884:	465a      	mov	r2, fp
  407886:	4649      	mov	r1, r9
  407888:	f000 fa2a 	bl	407ce0 <memmove>
  40788c:	68a2      	ldr	r2, [r4, #8]
  40788e:	6823      	ldr	r3, [r4, #0]
  407890:	eba2 0208 	sub.w	r2, r2, r8
  407894:	445b      	add	r3, fp
  407896:	60a2      	str	r2, [r4, #8]
  407898:	6023      	str	r3, [r4, #0]
  40789a:	9a01      	ldr	r2, [sp, #4]
  40789c:	6893      	ldr	r3, [r2, #8]
  40789e:	eba3 030a 	sub.w	r3, r3, sl
  4078a2:	44d1      	add	r9, sl
  4078a4:	eba7 070a 	sub.w	r7, r7, sl
  4078a8:	6093      	str	r3, [r2, #8]
  4078aa:	2b00      	cmp	r3, #0
  4078ac:	d0c5      	beq.n	40783a <__sfvwrite_r+0x5e>
  4078ae:	89a3      	ldrh	r3, [r4, #12]
  4078b0:	2f00      	cmp	r7, #0
  4078b2:	d1d8      	bne.n	407866 <__sfvwrite_r+0x8a>
  4078b4:	f8d5 9000 	ldr.w	r9, [r5]
  4078b8:	686f      	ldr	r7, [r5, #4]
  4078ba:	3508      	adds	r5, #8
  4078bc:	e7d2      	b.n	407864 <__sfvwrite_r+0x88>
  4078be:	f8d5 9000 	ldr.w	r9, [r5]
  4078c2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4078c6:	3508      	adds	r5, #8
  4078c8:	e79f      	b.n	40780a <__sfvwrite_r+0x2e>
  4078ca:	2000      	movs	r0, #0
  4078cc:	4770      	bx	lr
  4078ce:	4621      	mov	r1, r4
  4078d0:	9800      	ldr	r0, [sp, #0]
  4078d2:	f7ff fda3 	bl	40741c <_fflush_r>
  4078d6:	b370      	cbz	r0, 407936 <__sfvwrite_r+0x15a>
  4078d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4078dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4078e0:	f04f 30ff 	mov.w	r0, #4294967295
  4078e4:	81a3      	strh	r3, [r4, #12]
  4078e6:	b003      	add	sp, #12
  4078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4078ec:	4681      	mov	r9, r0
  4078ee:	4633      	mov	r3, r6
  4078f0:	464e      	mov	r6, r9
  4078f2:	46a8      	mov	r8, r5
  4078f4:	469a      	mov	sl, r3
  4078f6:	464d      	mov	r5, r9
  4078f8:	b34e      	cbz	r6, 40794e <__sfvwrite_r+0x172>
  4078fa:	b380      	cbz	r0, 40795e <__sfvwrite_r+0x182>
  4078fc:	6820      	ldr	r0, [r4, #0]
  4078fe:	6923      	ldr	r3, [r4, #16]
  407900:	6962      	ldr	r2, [r4, #20]
  407902:	45b1      	cmp	r9, r6
  407904:	46cb      	mov	fp, r9
  407906:	bf28      	it	cs
  407908:	46b3      	movcs	fp, r6
  40790a:	4298      	cmp	r0, r3
  40790c:	465f      	mov	r7, fp
  40790e:	d904      	bls.n	40791a <__sfvwrite_r+0x13e>
  407910:	68a3      	ldr	r3, [r4, #8]
  407912:	4413      	add	r3, r2
  407914:	459b      	cmp	fp, r3
  407916:	f300 80a6 	bgt.w	407a66 <__sfvwrite_r+0x28a>
  40791a:	4593      	cmp	fp, r2
  40791c:	db4b      	blt.n	4079b6 <__sfvwrite_r+0x1da>
  40791e:	4613      	mov	r3, r2
  407920:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407922:	69e1      	ldr	r1, [r4, #28]
  407924:	9800      	ldr	r0, [sp, #0]
  407926:	462a      	mov	r2, r5
  407928:	47b8      	blx	r7
  40792a:	1e07      	subs	r7, r0, #0
  40792c:	ddd4      	ble.n	4078d8 <__sfvwrite_r+0xfc>
  40792e:	ebb9 0907 	subs.w	r9, r9, r7
  407932:	d0cc      	beq.n	4078ce <__sfvwrite_r+0xf2>
  407934:	2001      	movs	r0, #1
  407936:	f8da 3008 	ldr.w	r3, [sl, #8]
  40793a:	1bdb      	subs	r3, r3, r7
  40793c:	443d      	add	r5, r7
  40793e:	1bf6      	subs	r6, r6, r7
  407940:	f8ca 3008 	str.w	r3, [sl, #8]
  407944:	2b00      	cmp	r3, #0
  407946:	f43f af78 	beq.w	40783a <__sfvwrite_r+0x5e>
  40794a:	2e00      	cmp	r6, #0
  40794c:	d1d5      	bne.n	4078fa <__sfvwrite_r+0x11e>
  40794e:	f108 0308 	add.w	r3, r8, #8
  407952:	e913 0060 	ldmdb	r3, {r5, r6}
  407956:	4698      	mov	r8, r3
  407958:	3308      	adds	r3, #8
  40795a:	2e00      	cmp	r6, #0
  40795c:	d0f9      	beq.n	407952 <__sfvwrite_r+0x176>
  40795e:	4632      	mov	r2, r6
  407960:	210a      	movs	r1, #10
  407962:	4628      	mov	r0, r5
  407964:	f000 f96c 	bl	407c40 <memchr>
  407968:	2800      	cmp	r0, #0
  40796a:	f000 80a1 	beq.w	407ab0 <__sfvwrite_r+0x2d4>
  40796e:	3001      	adds	r0, #1
  407970:	eba0 0905 	sub.w	r9, r0, r5
  407974:	e7c2      	b.n	4078fc <__sfvwrite_r+0x120>
  407976:	6820      	ldr	r0, [r4, #0]
  407978:	6923      	ldr	r3, [r4, #16]
  40797a:	4298      	cmp	r0, r3
  40797c:	d802      	bhi.n	407984 <__sfvwrite_r+0x1a8>
  40797e:	6963      	ldr	r3, [r4, #20]
  407980:	429f      	cmp	r7, r3
  407982:	d25d      	bcs.n	407a40 <__sfvwrite_r+0x264>
  407984:	45b8      	cmp	r8, r7
  407986:	bf28      	it	cs
  407988:	46b8      	movcs	r8, r7
  40798a:	4642      	mov	r2, r8
  40798c:	4649      	mov	r1, r9
  40798e:	f000 f9a7 	bl	407ce0 <memmove>
  407992:	68a3      	ldr	r3, [r4, #8]
  407994:	6822      	ldr	r2, [r4, #0]
  407996:	eba3 0308 	sub.w	r3, r3, r8
  40799a:	4442      	add	r2, r8
  40799c:	60a3      	str	r3, [r4, #8]
  40799e:	6022      	str	r2, [r4, #0]
  4079a0:	b10b      	cbz	r3, 4079a6 <__sfvwrite_r+0x1ca>
  4079a2:	46c2      	mov	sl, r8
  4079a4:	e779      	b.n	40789a <__sfvwrite_r+0xbe>
  4079a6:	4621      	mov	r1, r4
  4079a8:	9800      	ldr	r0, [sp, #0]
  4079aa:	f7ff fd37 	bl	40741c <_fflush_r>
  4079ae:	2800      	cmp	r0, #0
  4079b0:	d192      	bne.n	4078d8 <__sfvwrite_r+0xfc>
  4079b2:	46c2      	mov	sl, r8
  4079b4:	e771      	b.n	40789a <__sfvwrite_r+0xbe>
  4079b6:	465a      	mov	r2, fp
  4079b8:	4629      	mov	r1, r5
  4079ba:	f000 f991 	bl	407ce0 <memmove>
  4079be:	68a2      	ldr	r2, [r4, #8]
  4079c0:	6823      	ldr	r3, [r4, #0]
  4079c2:	eba2 020b 	sub.w	r2, r2, fp
  4079c6:	445b      	add	r3, fp
  4079c8:	60a2      	str	r2, [r4, #8]
  4079ca:	6023      	str	r3, [r4, #0]
  4079cc:	e7af      	b.n	40792e <__sfvwrite_r+0x152>
  4079ce:	6820      	ldr	r0, [r4, #0]
  4079d0:	46b8      	mov	r8, r7
  4079d2:	46ba      	mov	sl, r7
  4079d4:	46bb      	mov	fp, r7
  4079d6:	e755      	b.n	407884 <__sfvwrite_r+0xa8>
  4079d8:	6962      	ldr	r2, [r4, #20]
  4079da:	6820      	ldr	r0, [r4, #0]
  4079dc:	6921      	ldr	r1, [r4, #16]
  4079de:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4079e2:	eba0 0a01 	sub.w	sl, r0, r1
  4079e6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4079ea:	f10a 0001 	add.w	r0, sl, #1
  4079ee:	ea4f 0868 	mov.w	r8, r8, asr #1
  4079f2:	4438      	add	r0, r7
  4079f4:	4540      	cmp	r0, r8
  4079f6:	4642      	mov	r2, r8
  4079f8:	bf84      	itt	hi
  4079fa:	4680      	movhi	r8, r0
  4079fc:	4642      	movhi	r2, r8
  4079fe:	055b      	lsls	r3, r3, #21
  407a00:	d544      	bpl.n	407a8c <__sfvwrite_r+0x2b0>
  407a02:	4611      	mov	r1, r2
  407a04:	9800      	ldr	r0, [sp, #0]
  407a06:	f7fc fbe1 	bl	4041cc <_malloc_r>
  407a0a:	4683      	mov	fp, r0
  407a0c:	2800      	cmp	r0, #0
  407a0e:	d055      	beq.n	407abc <__sfvwrite_r+0x2e0>
  407a10:	4652      	mov	r2, sl
  407a12:	6921      	ldr	r1, [r4, #16]
  407a14:	f7fc fe8a 	bl	40472c <memcpy>
  407a18:	89a3      	ldrh	r3, [r4, #12]
  407a1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407a22:	81a3      	strh	r3, [r4, #12]
  407a24:	eb0b 000a 	add.w	r0, fp, sl
  407a28:	eba8 030a 	sub.w	r3, r8, sl
  407a2c:	f8c4 b010 	str.w	fp, [r4, #16]
  407a30:	f8c4 8014 	str.w	r8, [r4, #20]
  407a34:	6020      	str	r0, [r4, #0]
  407a36:	60a3      	str	r3, [r4, #8]
  407a38:	46b8      	mov	r8, r7
  407a3a:	46ba      	mov	sl, r7
  407a3c:	46bb      	mov	fp, r7
  407a3e:	e721      	b.n	407884 <__sfvwrite_r+0xa8>
  407a40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407a44:	42b9      	cmp	r1, r7
  407a46:	bf28      	it	cs
  407a48:	4639      	movcs	r1, r7
  407a4a:	464a      	mov	r2, r9
  407a4c:	fb91 f1f3 	sdiv	r1, r1, r3
  407a50:	9800      	ldr	r0, [sp, #0]
  407a52:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407a54:	fb03 f301 	mul.w	r3, r3, r1
  407a58:	69e1      	ldr	r1, [r4, #28]
  407a5a:	47b0      	blx	r6
  407a5c:	f1b0 0a00 	subs.w	sl, r0, #0
  407a60:	f73f af1b 	bgt.w	40789a <__sfvwrite_r+0xbe>
  407a64:	e738      	b.n	4078d8 <__sfvwrite_r+0xfc>
  407a66:	461a      	mov	r2, r3
  407a68:	4629      	mov	r1, r5
  407a6a:	9301      	str	r3, [sp, #4]
  407a6c:	f000 f938 	bl	407ce0 <memmove>
  407a70:	6822      	ldr	r2, [r4, #0]
  407a72:	9b01      	ldr	r3, [sp, #4]
  407a74:	9800      	ldr	r0, [sp, #0]
  407a76:	441a      	add	r2, r3
  407a78:	6022      	str	r2, [r4, #0]
  407a7a:	4621      	mov	r1, r4
  407a7c:	f7ff fcce 	bl	40741c <_fflush_r>
  407a80:	9b01      	ldr	r3, [sp, #4]
  407a82:	2800      	cmp	r0, #0
  407a84:	f47f af28 	bne.w	4078d8 <__sfvwrite_r+0xfc>
  407a88:	461f      	mov	r7, r3
  407a8a:	e750      	b.n	40792e <__sfvwrite_r+0x152>
  407a8c:	9800      	ldr	r0, [sp, #0]
  407a8e:	f000 fc85 	bl	40839c <_realloc_r>
  407a92:	4683      	mov	fp, r0
  407a94:	2800      	cmp	r0, #0
  407a96:	d1c5      	bne.n	407a24 <__sfvwrite_r+0x248>
  407a98:	9d00      	ldr	r5, [sp, #0]
  407a9a:	6921      	ldr	r1, [r4, #16]
  407a9c:	4628      	mov	r0, r5
  407a9e:	f7ff fdb7 	bl	407610 <_free_r>
  407aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407aa6:	220c      	movs	r2, #12
  407aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407aac:	602a      	str	r2, [r5, #0]
  407aae:	e715      	b.n	4078dc <__sfvwrite_r+0x100>
  407ab0:	f106 0901 	add.w	r9, r6, #1
  407ab4:	e722      	b.n	4078fc <__sfvwrite_r+0x120>
  407ab6:	f04f 30ff 	mov.w	r0, #4294967295
  407aba:	e6bf      	b.n	40783c <__sfvwrite_r+0x60>
  407abc:	9a00      	ldr	r2, [sp, #0]
  407abe:	230c      	movs	r3, #12
  407ac0:	6013      	str	r3, [r2, #0]
  407ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407ac6:	e709      	b.n	4078dc <__sfvwrite_r+0x100>
  407ac8:	7ffffc00 	.word	0x7ffffc00

00407acc <_fwalk_reent>:
  407acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407ad0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407ad4:	d01f      	beq.n	407b16 <_fwalk_reent+0x4a>
  407ad6:	4688      	mov	r8, r1
  407ad8:	4606      	mov	r6, r0
  407ada:	f04f 0900 	mov.w	r9, #0
  407ade:	687d      	ldr	r5, [r7, #4]
  407ae0:	68bc      	ldr	r4, [r7, #8]
  407ae2:	3d01      	subs	r5, #1
  407ae4:	d411      	bmi.n	407b0a <_fwalk_reent+0x3e>
  407ae6:	89a3      	ldrh	r3, [r4, #12]
  407ae8:	2b01      	cmp	r3, #1
  407aea:	f105 35ff 	add.w	r5, r5, #4294967295
  407aee:	d908      	bls.n	407b02 <_fwalk_reent+0x36>
  407af0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407af4:	3301      	adds	r3, #1
  407af6:	4621      	mov	r1, r4
  407af8:	4630      	mov	r0, r6
  407afa:	d002      	beq.n	407b02 <_fwalk_reent+0x36>
  407afc:	47c0      	blx	r8
  407afe:	ea49 0900 	orr.w	r9, r9, r0
  407b02:	1c6b      	adds	r3, r5, #1
  407b04:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407b08:	d1ed      	bne.n	407ae6 <_fwalk_reent+0x1a>
  407b0a:	683f      	ldr	r7, [r7, #0]
  407b0c:	2f00      	cmp	r7, #0
  407b0e:	d1e6      	bne.n	407ade <_fwalk_reent+0x12>
  407b10:	4648      	mov	r0, r9
  407b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b16:	46b9      	mov	r9, r7
  407b18:	4648      	mov	r0, r9
  407b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b1e:	bf00      	nop

00407b20 <_localeconv_r>:
  407b20:	4a04      	ldr	r2, [pc, #16]	; (407b34 <_localeconv_r+0x14>)
  407b22:	4b05      	ldr	r3, [pc, #20]	; (407b38 <_localeconv_r+0x18>)
  407b24:	6812      	ldr	r2, [r2, #0]
  407b26:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407b28:	2800      	cmp	r0, #0
  407b2a:	bf08      	it	eq
  407b2c:	4618      	moveq	r0, r3
  407b2e:	30f0      	adds	r0, #240	; 0xf0
  407b30:	4770      	bx	lr
  407b32:	bf00      	nop
  407b34:	2040000c 	.word	0x2040000c
  407b38:	2040084c 	.word	0x2040084c

00407b3c <__retarget_lock_init_recursive>:
  407b3c:	4770      	bx	lr
  407b3e:	bf00      	nop

00407b40 <__retarget_lock_close_recursive>:
  407b40:	4770      	bx	lr
  407b42:	bf00      	nop

00407b44 <__retarget_lock_acquire_recursive>:
  407b44:	4770      	bx	lr
  407b46:	bf00      	nop

00407b48 <__retarget_lock_release_recursive>:
  407b48:	4770      	bx	lr
  407b4a:	bf00      	nop

00407b4c <__swhatbuf_r>:
  407b4c:	b570      	push	{r4, r5, r6, lr}
  407b4e:	460c      	mov	r4, r1
  407b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407b54:	2900      	cmp	r1, #0
  407b56:	b090      	sub	sp, #64	; 0x40
  407b58:	4615      	mov	r5, r2
  407b5a:	461e      	mov	r6, r3
  407b5c:	db14      	blt.n	407b88 <__swhatbuf_r+0x3c>
  407b5e:	aa01      	add	r2, sp, #4
  407b60:	f000 fff0 	bl	408b44 <_fstat_r>
  407b64:	2800      	cmp	r0, #0
  407b66:	db0f      	blt.n	407b88 <__swhatbuf_r+0x3c>
  407b68:	9a02      	ldr	r2, [sp, #8]
  407b6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407b6e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407b72:	fab2 f282 	clz	r2, r2
  407b76:	0952      	lsrs	r2, r2, #5
  407b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407b7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407b80:	6032      	str	r2, [r6, #0]
  407b82:	602b      	str	r3, [r5, #0]
  407b84:	b010      	add	sp, #64	; 0x40
  407b86:	bd70      	pop	{r4, r5, r6, pc}
  407b88:	89a2      	ldrh	r2, [r4, #12]
  407b8a:	2300      	movs	r3, #0
  407b8c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407b90:	6033      	str	r3, [r6, #0]
  407b92:	d004      	beq.n	407b9e <__swhatbuf_r+0x52>
  407b94:	2240      	movs	r2, #64	; 0x40
  407b96:	4618      	mov	r0, r3
  407b98:	602a      	str	r2, [r5, #0]
  407b9a:	b010      	add	sp, #64	; 0x40
  407b9c:	bd70      	pop	{r4, r5, r6, pc}
  407b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407ba2:	602b      	str	r3, [r5, #0]
  407ba4:	b010      	add	sp, #64	; 0x40
  407ba6:	bd70      	pop	{r4, r5, r6, pc}

00407ba8 <__smakebuf_r>:
  407ba8:	898a      	ldrh	r2, [r1, #12]
  407baa:	0792      	lsls	r2, r2, #30
  407bac:	460b      	mov	r3, r1
  407bae:	d506      	bpl.n	407bbe <__smakebuf_r+0x16>
  407bb0:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407bb4:	2101      	movs	r1, #1
  407bb6:	601a      	str	r2, [r3, #0]
  407bb8:	611a      	str	r2, [r3, #16]
  407bba:	6159      	str	r1, [r3, #20]
  407bbc:	4770      	bx	lr
  407bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  407bc0:	b083      	sub	sp, #12
  407bc2:	ab01      	add	r3, sp, #4
  407bc4:	466a      	mov	r2, sp
  407bc6:	460c      	mov	r4, r1
  407bc8:	4606      	mov	r6, r0
  407bca:	f7ff ffbf 	bl	407b4c <__swhatbuf_r>
  407bce:	9900      	ldr	r1, [sp, #0]
  407bd0:	4605      	mov	r5, r0
  407bd2:	4630      	mov	r0, r6
  407bd4:	f7fc fafa 	bl	4041cc <_malloc_r>
  407bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407bdc:	b1d8      	cbz	r0, 407c16 <__smakebuf_r+0x6e>
  407bde:	9a01      	ldr	r2, [sp, #4]
  407be0:	4f15      	ldr	r7, [pc, #84]	; (407c38 <__smakebuf_r+0x90>)
  407be2:	9900      	ldr	r1, [sp, #0]
  407be4:	63f7      	str	r7, [r6, #60]	; 0x3c
  407be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407bea:	81a3      	strh	r3, [r4, #12]
  407bec:	6020      	str	r0, [r4, #0]
  407bee:	6120      	str	r0, [r4, #16]
  407bf0:	6161      	str	r1, [r4, #20]
  407bf2:	b91a      	cbnz	r2, 407bfc <__smakebuf_r+0x54>
  407bf4:	432b      	orrs	r3, r5
  407bf6:	81a3      	strh	r3, [r4, #12]
  407bf8:	b003      	add	sp, #12
  407bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407bfc:	4630      	mov	r0, r6
  407bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407c02:	f000 ffb3 	bl	408b6c <_isatty_r>
  407c06:	b1a0      	cbz	r0, 407c32 <__smakebuf_r+0x8a>
  407c08:	89a3      	ldrh	r3, [r4, #12]
  407c0a:	f023 0303 	bic.w	r3, r3, #3
  407c0e:	f043 0301 	orr.w	r3, r3, #1
  407c12:	b21b      	sxth	r3, r3
  407c14:	e7ee      	b.n	407bf4 <__smakebuf_r+0x4c>
  407c16:	059a      	lsls	r2, r3, #22
  407c18:	d4ee      	bmi.n	407bf8 <__smakebuf_r+0x50>
  407c1a:	f023 0303 	bic.w	r3, r3, #3
  407c1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407c22:	f043 0302 	orr.w	r3, r3, #2
  407c26:	2101      	movs	r1, #1
  407c28:	81a3      	strh	r3, [r4, #12]
  407c2a:	6022      	str	r2, [r4, #0]
  407c2c:	6122      	str	r2, [r4, #16]
  407c2e:	6161      	str	r1, [r4, #20]
  407c30:	e7e2      	b.n	407bf8 <__smakebuf_r+0x50>
  407c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c36:	e7dd      	b.n	407bf4 <__smakebuf_r+0x4c>
  407c38:	00407471 	.word	0x00407471
  407c3c:	00000000 	.word	0x00000000

00407c40 <memchr>:
  407c40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407c44:	2a10      	cmp	r2, #16
  407c46:	db2b      	blt.n	407ca0 <memchr+0x60>
  407c48:	f010 0f07 	tst.w	r0, #7
  407c4c:	d008      	beq.n	407c60 <memchr+0x20>
  407c4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407c52:	3a01      	subs	r2, #1
  407c54:	428b      	cmp	r3, r1
  407c56:	d02d      	beq.n	407cb4 <memchr+0x74>
  407c58:	f010 0f07 	tst.w	r0, #7
  407c5c:	b342      	cbz	r2, 407cb0 <memchr+0x70>
  407c5e:	d1f6      	bne.n	407c4e <memchr+0xe>
  407c60:	b4f0      	push	{r4, r5, r6, r7}
  407c62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407c66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  407c6a:	f022 0407 	bic.w	r4, r2, #7
  407c6e:	f07f 0700 	mvns.w	r7, #0
  407c72:	2300      	movs	r3, #0
  407c74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407c78:	3c08      	subs	r4, #8
  407c7a:	ea85 0501 	eor.w	r5, r5, r1
  407c7e:	ea86 0601 	eor.w	r6, r6, r1
  407c82:	fa85 f547 	uadd8	r5, r5, r7
  407c86:	faa3 f587 	sel	r5, r3, r7
  407c8a:	fa86 f647 	uadd8	r6, r6, r7
  407c8e:	faa5 f687 	sel	r6, r5, r7
  407c92:	b98e      	cbnz	r6, 407cb8 <memchr+0x78>
  407c94:	d1ee      	bne.n	407c74 <memchr+0x34>
  407c96:	bcf0      	pop	{r4, r5, r6, r7}
  407c98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407c9c:	f002 0207 	and.w	r2, r2, #7
  407ca0:	b132      	cbz	r2, 407cb0 <memchr+0x70>
  407ca2:	f810 3b01 	ldrb.w	r3, [r0], #1
  407ca6:	3a01      	subs	r2, #1
  407ca8:	ea83 0301 	eor.w	r3, r3, r1
  407cac:	b113      	cbz	r3, 407cb4 <memchr+0x74>
  407cae:	d1f8      	bne.n	407ca2 <memchr+0x62>
  407cb0:	2000      	movs	r0, #0
  407cb2:	4770      	bx	lr
  407cb4:	3801      	subs	r0, #1
  407cb6:	4770      	bx	lr
  407cb8:	2d00      	cmp	r5, #0
  407cba:	bf06      	itte	eq
  407cbc:	4635      	moveq	r5, r6
  407cbe:	3803      	subeq	r0, #3
  407cc0:	3807      	subne	r0, #7
  407cc2:	f015 0f01 	tst.w	r5, #1
  407cc6:	d107      	bne.n	407cd8 <memchr+0x98>
  407cc8:	3001      	adds	r0, #1
  407cca:	f415 7f80 	tst.w	r5, #256	; 0x100
  407cce:	bf02      	ittt	eq
  407cd0:	3001      	addeq	r0, #1
  407cd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407cd6:	3001      	addeq	r0, #1
  407cd8:	bcf0      	pop	{r4, r5, r6, r7}
  407cda:	3801      	subs	r0, #1
  407cdc:	4770      	bx	lr
  407cde:	bf00      	nop

00407ce0 <memmove>:
  407ce0:	4288      	cmp	r0, r1
  407ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
  407ce4:	d90d      	bls.n	407d02 <memmove+0x22>
  407ce6:	188b      	adds	r3, r1, r2
  407ce8:	4298      	cmp	r0, r3
  407cea:	d20a      	bcs.n	407d02 <memmove+0x22>
  407cec:	1884      	adds	r4, r0, r2
  407cee:	2a00      	cmp	r2, #0
  407cf0:	d051      	beq.n	407d96 <memmove+0xb6>
  407cf2:	4622      	mov	r2, r4
  407cf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407cf8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407cfc:	4299      	cmp	r1, r3
  407cfe:	d1f9      	bne.n	407cf4 <memmove+0x14>
  407d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d02:	2a0f      	cmp	r2, #15
  407d04:	d948      	bls.n	407d98 <memmove+0xb8>
  407d06:	ea41 0300 	orr.w	r3, r1, r0
  407d0a:	079b      	lsls	r3, r3, #30
  407d0c:	d146      	bne.n	407d9c <memmove+0xbc>
  407d0e:	f100 0410 	add.w	r4, r0, #16
  407d12:	f101 0310 	add.w	r3, r1, #16
  407d16:	4615      	mov	r5, r2
  407d18:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407d1c:	f844 6c10 	str.w	r6, [r4, #-16]
  407d20:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407d24:	f844 6c0c 	str.w	r6, [r4, #-12]
  407d28:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407d2c:	f844 6c08 	str.w	r6, [r4, #-8]
  407d30:	3d10      	subs	r5, #16
  407d32:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407d36:	f844 6c04 	str.w	r6, [r4, #-4]
  407d3a:	2d0f      	cmp	r5, #15
  407d3c:	f103 0310 	add.w	r3, r3, #16
  407d40:	f104 0410 	add.w	r4, r4, #16
  407d44:	d8e8      	bhi.n	407d18 <memmove+0x38>
  407d46:	f1a2 0310 	sub.w	r3, r2, #16
  407d4a:	f023 030f 	bic.w	r3, r3, #15
  407d4e:	f002 0e0f 	and.w	lr, r2, #15
  407d52:	3310      	adds	r3, #16
  407d54:	f1be 0f03 	cmp.w	lr, #3
  407d58:	4419      	add	r1, r3
  407d5a:	4403      	add	r3, r0
  407d5c:	d921      	bls.n	407da2 <memmove+0xc2>
  407d5e:	1f1e      	subs	r6, r3, #4
  407d60:	460d      	mov	r5, r1
  407d62:	4674      	mov	r4, lr
  407d64:	3c04      	subs	r4, #4
  407d66:	f855 7b04 	ldr.w	r7, [r5], #4
  407d6a:	f846 7f04 	str.w	r7, [r6, #4]!
  407d6e:	2c03      	cmp	r4, #3
  407d70:	d8f8      	bhi.n	407d64 <memmove+0x84>
  407d72:	f1ae 0404 	sub.w	r4, lr, #4
  407d76:	f024 0403 	bic.w	r4, r4, #3
  407d7a:	3404      	adds	r4, #4
  407d7c:	4421      	add	r1, r4
  407d7e:	4423      	add	r3, r4
  407d80:	f002 0203 	and.w	r2, r2, #3
  407d84:	b162      	cbz	r2, 407da0 <memmove+0xc0>
  407d86:	3b01      	subs	r3, #1
  407d88:	440a      	add	r2, r1
  407d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
  407d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407d92:	428a      	cmp	r2, r1
  407d94:	d1f9      	bne.n	407d8a <memmove+0xaa>
  407d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d98:	4603      	mov	r3, r0
  407d9a:	e7f3      	b.n	407d84 <memmove+0xa4>
  407d9c:	4603      	mov	r3, r0
  407d9e:	e7f2      	b.n	407d86 <memmove+0xa6>
  407da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407da2:	4672      	mov	r2, lr
  407da4:	e7ee      	b.n	407d84 <memmove+0xa4>
  407da6:	bf00      	nop

00407da8 <_Balloc>:
  407da8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407daa:	b570      	push	{r4, r5, r6, lr}
  407dac:	4605      	mov	r5, r0
  407dae:	460c      	mov	r4, r1
  407db0:	b14b      	cbz	r3, 407dc6 <_Balloc+0x1e>
  407db2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407db6:	b180      	cbz	r0, 407dda <_Balloc+0x32>
  407db8:	6802      	ldr	r2, [r0, #0]
  407dba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  407dbe:	2300      	movs	r3, #0
  407dc0:	6103      	str	r3, [r0, #16]
  407dc2:	60c3      	str	r3, [r0, #12]
  407dc4:	bd70      	pop	{r4, r5, r6, pc}
  407dc6:	2221      	movs	r2, #33	; 0x21
  407dc8:	2104      	movs	r1, #4
  407dca:	f000 fd93 	bl	4088f4 <_calloc_r>
  407dce:	64e8      	str	r0, [r5, #76]	; 0x4c
  407dd0:	4603      	mov	r3, r0
  407dd2:	2800      	cmp	r0, #0
  407dd4:	d1ed      	bne.n	407db2 <_Balloc+0xa>
  407dd6:	2000      	movs	r0, #0
  407dd8:	bd70      	pop	{r4, r5, r6, pc}
  407dda:	2101      	movs	r1, #1
  407ddc:	fa01 f604 	lsl.w	r6, r1, r4
  407de0:	1d72      	adds	r2, r6, #5
  407de2:	4628      	mov	r0, r5
  407de4:	0092      	lsls	r2, r2, #2
  407de6:	f000 fd85 	bl	4088f4 <_calloc_r>
  407dea:	2800      	cmp	r0, #0
  407dec:	d0f3      	beq.n	407dd6 <_Balloc+0x2e>
  407dee:	6044      	str	r4, [r0, #4]
  407df0:	6086      	str	r6, [r0, #8]
  407df2:	e7e4      	b.n	407dbe <_Balloc+0x16>

00407df4 <_Bfree>:
  407df4:	b131      	cbz	r1, 407e04 <_Bfree+0x10>
  407df6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407df8:	684a      	ldr	r2, [r1, #4]
  407dfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407dfe:	6008      	str	r0, [r1, #0]
  407e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407e04:	4770      	bx	lr
  407e06:	bf00      	nop

00407e08 <__multadd>:
  407e08:	b5f0      	push	{r4, r5, r6, r7, lr}
  407e0a:	690c      	ldr	r4, [r1, #16]
  407e0c:	b083      	sub	sp, #12
  407e0e:	460d      	mov	r5, r1
  407e10:	4606      	mov	r6, r0
  407e12:	f101 0e14 	add.w	lr, r1, #20
  407e16:	2700      	movs	r7, #0
  407e18:	f8de 0000 	ldr.w	r0, [lr]
  407e1c:	b281      	uxth	r1, r0
  407e1e:	fb02 3301 	mla	r3, r2, r1, r3
  407e22:	0c01      	lsrs	r1, r0, #16
  407e24:	0c18      	lsrs	r0, r3, #16
  407e26:	fb02 0101 	mla	r1, r2, r1, r0
  407e2a:	b29b      	uxth	r3, r3
  407e2c:	3701      	adds	r7, #1
  407e2e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407e32:	42bc      	cmp	r4, r7
  407e34:	f84e 3b04 	str.w	r3, [lr], #4
  407e38:	ea4f 4311 	mov.w	r3, r1, lsr #16
  407e3c:	dcec      	bgt.n	407e18 <__multadd+0x10>
  407e3e:	b13b      	cbz	r3, 407e50 <__multadd+0x48>
  407e40:	68aa      	ldr	r2, [r5, #8]
  407e42:	4294      	cmp	r4, r2
  407e44:	da07      	bge.n	407e56 <__multadd+0x4e>
  407e46:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  407e4a:	3401      	adds	r4, #1
  407e4c:	6153      	str	r3, [r2, #20]
  407e4e:	612c      	str	r4, [r5, #16]
  407e50:	4628      	mov	r0, r5
  407e52:	b003      	add	sp, #12
  407e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407e56:	6869      	ldr	r1, [r5, #4]
  407e58:	9301      	str	r3, [sp, #4]
  407e5a:	3101      	adds	r1, #1
  407e5c:	4630      	mov	r0, r6
  407e5e:	f7ff ffa3 	bl	407da8 <_Balloc>
  407e62:	692a      	ldr	r2, [r5, #16]
  407e64:	3202      	adds	r2, #2
  407e66:	f105 010c 	add.w	r1, r5, #12
  407e6a:	4607      	mov	r7, r0
  407e6c:	0092      	lsls	r2, r2, #2
  407e6e:	300c      	adds	r0, #12
  407e70:	f7fc fc5c 	bl	40472c <memcpy>
  407e74:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407e76:	6869      	ldr	r1, [r5, #4]
  407e78:	9b01      	ldr	r3, [sp, #4]
  407e7a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407e7e:	6028      	str	r0, [r5, #0]
  407e80:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407e84:	463d      	mov	r5, r7
  407e86:	e7de      	b.n	407e46 <__multadd+0x3e>

00407e88 <__hi0bits>:
  407e88:	0c02      	lsrs	r2, r0, #16
  407e8a:	0412      	lsls	r2, r2, #16
  407e8c:	4603      	mov	r3, r0
  407e8e:	b9b2      	cbnz	r2, 407ebe <__hi0bits+0x36>
  407e90:	0403      	lsls	r3, r0, #16
  407e92:	2010      	movs	r0, #16
  407e94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407e98:	bf04      	itt	eq
  407e9a:	021b      	lsleq	r3, r3, #8
  407e9c:	3008      	addeq	r0, #8
  407e9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407ea2:	bf04      	itt	eq
  407ea4:	011b      	lsleq	r3, r3, #4
  407ea6:	3004      	addeq	r0, #4
  407ea8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407eac:	bf04      	itt	eq
  407eae:	009b      	lsleq	r3, r3, #2
  407eb0:	3002      	addeq	r0, #2
  407eb2:	2b00      	cmp	r3, #0
  407eb4:	db02      	blt.n	407ebc <__hi0bits+0x34>
  407eb6:	005b      	lsls	r3, r3, #1
  407eb8:	d403      	bmi.n	407ec2 <__hi0bits+0x3a>
  407eba:	2020      	movs	r0, #32
  407ebc:	4770      	bx	lr
  407ebe:	2000      	movs	r0, #0
  407ec0:	e7e8      	b.n	407e94 <__hi0bits+0xc>
  407ec2:	3001      	adds	r0, #1
  407ec4:	4770      	bx	lr
  407ec6:	bf00      	nop

00407ec8 <__lo0bits>:
  407ec8:	6803      	ldr	r3, [r0, #0]
  407eca:	f013 0207 	ands.w	r2, r3, #7
  407ece:	4601      	mov	r1, r0
  407ed0:	d007      	beq.n	407ee2 <__lo0bits+0x1a>
  407ed2:	07da      	lsls	r2, r3, #31
  407ed4:	d421      	bmi.n	407f1a <__lo0bits+0x52>
  407ed6:	0798      	lsls	r0, r3, #30
  407ed8:	d421      	bmi.n	407f1e <__lo0bits+0x56>
  407eda:	089b      	lsrs	r3, r3, #2
  407edc:	600b      	str	r3, [r1, #0]
  407ede:	2002      	movs	r0, #2
  407ee0:	4770      	bx	lr
  407ee2:	b298      	uxth	r0, r3
  407ee4:	b198      	cbz	r0, 407f0e <__lo0bits+0x46>
  407ee6:	4610      	mov	r0, r2
  407ee8:	f013 0fff 	tst.w	r3, #255	; 0xff
  407eec:	bf04      	itt	eq
  407eee:	0a1b      	lsreq	r3, r3, #8
  407ef0:	3008      	addeq	r0, #8
  407ef2:	071a      	lsls	r2, r3, #28
  407ef4:	bf04      	itt	eq
  407ef6:	091b      	lsreq	r3, r3, #4
  407ef8:	3004      	addeq	r0, #4
  407efa:	079a      	lsls	r2, r3, #30
  407efc:	bf04      	itt	eq
  407efe:	089b      	lsreq	r3, r3, #2
  407f00:	3002      	addeq	r0, #2
  407f02:	07da      	lsls	r2, r3, #31
  407f04:	d407      	bmi.n	407f16 <__lo0bits+0x4e>
  407f06:	085b      	lsrs	r3, r3, #1
  407f08:	d104      	bne.n	407f14 <__lo0bits+0x4c>
  407f0a:	2020      	movs	r0, #32
  407f0c:	4770      	bx	lr
  407f0e:	0c1b      	lsrs	r3, r3, #16
  407f10:	2010      	movs	r0, #16
  407f12:	e7e9      	b.n	407ee8 <__lo0bits+0x20>
  407f14:	3001      	adds	r0, #1
  407f16:	600b      	str	r3, [r1, #0]
  407f18:	4770      	bx	lr
  407f1a:	2000      	movs	r0, #0
  407f1c:	4770      	bx	lr
  407f1e:	085b      	lsrs	r3, r3, #1
  407f20:	600b      	str	r3, [r1, #0]
  407f22:	2001      	movs	r0, #1
  407f24:	4770      	bx	lr
  407f26:	bf00      	nop

00407f28 <__i2b>:
  407f28:	b510      	push	{r4, lr}
  407f2a:	460c      	mov	r4, r1
  407f2c:	2101      	movs	r1, #1
  407f2e:	f7ff ff3b 	bl	407da8 <_Balloc>
  407f32:	2201      	movs	r2, #1
  407f34:	6144      	str	r4, [r0, #20]
  407f36:	6102      	str	r2, [r0, #16]
  407f38:	bd10      	pop	{r4, pc}
  407f3a:	bf00      	nop

00407f3c <__multiply>:
  407f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f40:	690c      	ldr	r4, [r1, #16]
  407f42:	6915      	ldr	r5, [r2, #16]
  407f44:	42ac      	cmp	r4, r5
  407f46:	b083      	sub	sp, #12
  407f48:	468b      	mov	fp, r1
  407f4a:	4616      	mov	r6, r2
  407f4c:	da04      	bge.n	407f58 <__multiply+0x1c>
  407f4e:	4622      	mov	r2, r4
  407f50:	46b3      	mov	fp, r6
  407f52:	462c      	mov	r4, r5
  407f54:	460e      	mov	r6, r1
  407f56:	4615      	mov	r5, r2
  407f58:	f8db 3008 	ldr.w	r3, [fp, #8]
  407f5c:	f8db 1004 	ldr.w	r1, [fp, #4]
  407f60:	eb04 0805 	add.w	r8, r4, r5
  407f64:	4598      	cmp	r8, r3
  407f66:	bfc8      	it	gt
  407f68:	3101      	addgt	r1, #1
  407f6a:	f7ff ff1d 	bl	407da8 <_Balloc>
  407f6e:	f100 0914 	add.w	r9, r0, #20
  407f72:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  407f76:	45d1      	cmp	r9, sl
  407f78:	9000      	str	r0, [sp, #0]
  407f7a:	d205      	bcs.n	407f88 <__multiply+0x4c>
  407f7c:	464b      	mov	r3, r9
  407f7e:	2100      	movs	r1, #0
  407f80:	f843 1b04 	str.w	r1, [r3], #4
  407f84:	459a      	cmp	sl, r3
  407f86:	d8fb      	bhi.n	407f80 <__multiply+0x44>
  407f88:	f106 0c14 	add.w	ip, r6, #20
  407f8c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407f90:	f10b 0b14 	add.w	fp, fp, #20
  407f94:	459c      	cmp	ip, r3
  407f96:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  407f9a:	d24c      	bcs.n	408036 <__multiply+0xfa>
  407f9c:	f8cd a004 	str.w	sl, [sp, #4]
  407fa0:	469a      	mov	sl, r3
  407fa2:	f8dc 5000 	ldr.w	r5, [ip]
  407fa6:	b2af      	uxth	r7, r5
  407fa8:	b1ef      	cbz	r7, 407fe6 <__multiply+0xaa>
  407faa:	2100      	movs	r1, #0
  407fac:	464d      	mov	r5, r9
  407fae:	465e      	mov	r6, fp
  407fb0:	460c      	mov	r4, r1
  407fb2:	f856 2b04 	ldr.w	r2, [r6], #4
  407fb6:	6828      	ldr	r0, [r5, #0]
  407fb8:	b293      	uxth	r3, r2
  407fba:	b281      	uxth	r1, r0
  407fbc:	fb07 1303 	mla	r3, r7, r3, r1
  407fc0:	0c12      	lsrs	r2, r2, #16
  407fc2:	0c01      	lsrs	r1, r0, #16
  407fc4:	4423      	add	r3, r4
  407fc6:	fb07 1102 	mla	r1, r7, r2, r1
  407fca:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  407fce:	b29b      	uxth	r3, r3
  407fd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407fd4:	45b6      	cmp	lr, r6
  407fd6:	f845 3b04 	str.w	r3, [r5], #4
  407fda:	ea4f 4411 	mov.w	r4, r1, lsr #16
  407fde:	d8e8      	bhi.n	407fb2 <__multiply+0x76>
  407fe0:	602c      	str	r4, [r5, #0]
  407fe2:	f8dc 5000 	ldr.w	r5, [ip]
  407fe6:	0c2d      	lsrs	r5, r5, #16
  407fe8:	d01d      	beq.n	408026 <__multiply+0xea>
  407fea:	f8d9 3000 	ldr.w	r3, [r9]
  407fee:	4648      	mov	r0, r9
  407ff0:	461c      	mov	r4, r3
  407ff2:	4659      	mov	r1, fp
  407ff4:	2200      	movs	r2, #0
  407ff6:	880e      	ldrh	r6, [r1, #0]
  407ff8:	0c24      	lsrs	r4, r4, #16
  407ffa:	fb05 4406 	mla	r4, r5, r6, r4
  407ffe:	4422      	add	r2, r4
  408000:	b29b      	uxth	r3, r3
  408002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408006:	f840 3b04 	str.w	r3, [r0], #4
  40800a:	f851 3b04 	ldr.w	r3, [r1], #4
  40800e:	6804      	ldr	r4, [r0, #0]
  408010:	0c1b      	lsrs	r3, r3, #16
  408012:	b2a6      	uxth	r6, r4
  408014:	fb05 6303 	mla	r3, r5, r3, r6
  408018:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40801c:	458e      	cmp	lr, r1
  40801e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408022:	d8e8      	bhi.n	407ff6 <__multiply+0xba>
  408024:	6003      	str	r3, [r0, #0]
  408026:	f10c 0c04 	add.w	ip, ip, #4
  40802a:	45e2      	cmp	sl, ip
  40802c:	f109 0904 	add.w	r9, r9, #4
  408030:	d8b7      	bhi.n	407fa2 <__multiply+0x66>
  408032:	f8dd a004 	ldr.w	sl, [sp, #4]
  408036:	f1b8 0f00 	cmp.w	r8, #0
  40803a:	dd0b      	ble.n	408054 <__multiply+0x118>
  40803c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  408040:	f1aa 0a04 	sub.w	sl, sl, #4
  408044:	b11b      	cbz	r3, 40804e <__multiply+0x112>
  408046:	e005      	b.n	408054 <__multiply+0x118>
  408048:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40804c:	b913      	cbnz	r3, 408054 <__multiply+0x118>
  40804e:	f1b8 0801 	subs.w	r8, r8, #1
  408052:	d1f9      	bne.n	408048 <__multiply+0x10c>
  408054:	9800      	ldr	r0, [sp, #0]
  408056:	f8c0 8010 	str.w	r8, [r0, #16]
  40805a:	b003      	add	sp, #12
  40805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408060 <__pow5mult>:
  408060:	f012 0303 	ands.w	r3, r2, #3
  408064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408068:	4614      	mov	r4, r2
  40806a:	4607      	mov	r7, r0
  40806c:	d12e      	bne.n	4080cc <__pow5mult+0x6c>
  40806e:	460d      	mov	r5, r1
  408070:	10a4      	asrs	r4, r4, #2
  408072:	d01c      	beq.n	4080ae <__pow5mult+0x4e>
  408074:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  408076:	b396      	cbz	r6, 4080de <__pow5mult+0x7e>
  408078:	07e3      	lsls	r3, r4, #31
  40807a:	f04f 0800 	mov.w	r8, #0
  40807e:	d406      	bmi.n	40808e <__pow5mult+0x2e>
  408080:	1064      	asrs	r4, r4, #1
  408082:	d014      	beq.n	4080ae <__pow5mult+0x4e>
  408084:	6830      	ldr	r0, [r6, #0]
  408086:	b1a8      	cbz	r0, 4080b4 <__pow5mult+0x54>
  408088:	4606      	mov	r6, r0
  40808a:	07e3      	lsls	r3, r4, #31
  40808c:	d5f8      	bpl.n	408080 <__pow5mult+0x20>
  40808e:	4632      	mov	r2, r6
  408090:	4629      	mov	r1, r5
  408092:	4638      	mov	r0, r7
  408094:	f7ff ff52 	bl	407f3c <__multiply>
  408098:	b1b5      	cbz	r5, 4080c8 <__pow5mult+0x68>
  40809a:	686a      	ldr	r2, [r5, #4]
  40809c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40809e:	1064      	asrs	r4, r4, #1
  4080a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4080a4:	6029      	str	r1, [r5, #0]
  4080a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4080aa:	4605      	mov	r5, r0
  4080ac:	d1ea      	bne.n	408084 <__pow5mult+0x24>
  4080ae:	4628      	mov	r0, r5
  4080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4080b4:	4632      	mov	r2, r6
  4080b6:	4631      	mov	r1, r6
  4080b8:	4638      	mov	r0, r7
  4080ba:	f7ff ff3f 	bl	407f3c <__multiply>
  4080be:	6030      	str	r0, [r6, #0]
  4080c0:	f8c0 8000 	str.w	r8, [r0]
  4080c4:	4606      	mov	r6, r0
  4080c6:	e7e0      	b.n	40808a <__pow5mult+0x2a>
  4080c8:	4605      	mov	r5, r0
  4080ca:	e7d9      	b.n	408080 <__pow5mult+0x20>
  4080cc:	1e5a      	subs	r2, r3, #1
  4080ce:	4d0b      	ldr	r5, [pc, #44]	; (4080fc <__pow5mult+0x9c>)
  4080d0:	2300      	movs	r3, #0
  4080d2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4080d6:	f7ff fe97 	bl	407e08 <__multadd>
  4080da:	4605      	mov	r5, r0
  4080dc:	e7c8      	b.n	408070 <__pow5mult+0x10>
  4080de:	2101      	movs	r1, #1
  4080e0:	4638      	mov	r0, r7
  4080e2:	f7ff fe61 	bl	407da8 <_Balloc>
  4080e6:	f240 2171 	movw	r1, #625	; 0x271
  4080ea:	2201      	movs	r2, #1
  4080ec:	2300      	movs	r3, #0
  4080ee:	6141      	str	r1, [r0, #20]
  4080f0:	6102      	str	r2, [r0, #16]
  4080f2:	4606      	mov	r6, r0
  4080f4:	64b8      	str	r0, [r7, #72]	; 0x48
  4080f6:	6003      	str	r3, [r0, #0]
  4080f8:	e7be      	b.n	408078 <__pow5mult+0x18>
  4080fa:	bf00      	nop
  4080fc:	00409488 	.word	0x00409488

00408100 <__lshift>:
  408100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408104:	4691      	mov	r9, r2
  408106:	690a      	ldr	r2, [r1, #16]
  408108:	688b      	ldr	r3, [r1, #8]
  40810a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40810e:	eb04 0802 	add.w	r8, r4, r2
  408112:	f108 0501 	add.w	r5, r8, #1
  408116:	429d      	cmp	r5, r3
  408118:	460e      	mov	r6, r1
  40811a:	4607      	mov	r7, r0
  40811c:	6849      	ldr	r1, [r1, #4]
  40811e:	dd04      	ble.n	40812a <__lshift+0x2a>
  408120:	005b      	lsls	r3, r3, #1
  408122:	429d      	cmp	r5, r3
  408124:	f101 0101 	add.w	r1, r1, #1
  408128:	dcfa      	bgt.n	408120 <__lshift+0x20>
  40812a:	4638      	mov	r0, r7
  40812c:	f7ff fe3c 	bl	407da8 <_Balloc>
  408130:	2c00      	cmp	r4, #0
  408132:	f100 0314 	add.w	r3, r0, #20
  408136:	dd06      	ble.n	408146 <__lshift+0x46>
  408138:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40813c:	2100      	movs	r1, #0
  40813e:	f843 1b04 	str.w	r1, [r3], #4
  408142:	429a      	cmp	r2, r3
  408144:	d1fb      	bne.n	40813e <__lshift+0x3e>
  408146:	6934      	ldr	r4, [r6, #16]
  408148:	f106 0114 	add.w	r1, r6, #20
  40814c:	f019 091f 	ands.w	r9, r9, #31
  408150:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  408154:	d01d      	beq.n	408192 <__lshift+0x92>
  408156:	f1c9 0c20 	rsb	ip, r9, #32
  40815a:	2200      	movs	r2, #0
  40815c:	680c      	ldr	r4, [r1, #0]
  40815e:	fa04 f409 	lsl.w	r4, r4, r9
  408162:	4314      	orrs	r4, r2
  408164:	f843 4b04 	str.w	r4, [r3], #4
  408168:	f851 2b04 	ldr.w	r2, [r1], #4
  40816c:	458e      	cmp	lr, r1
  40816e:	fa22 f20c 	lsr.w	r2, r2, ip
  408172:	d8f3      	bhi.n	40815c <__lshift+0x5c>
  408174:	601a      	str	r2, [r3, #0]
  408176:	b10a      	cbz	r2, 40817c <__lshift+0x7c>
  408178:	f108 0502 	add.w	r5, r8, #2
  40817c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40817e:	6872      	ldr	r2, [r6, #4]
  408180:	3d01      	subs	r5, #1
  408182:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408186:	6105      	str	r5, [r0, #16]
  408188:	6031      	str	r1, [r6, #0]
  40818a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40818e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408192:	3b04      	subs	r3, #4
  408194:	f851 2b04 	ldr.w	r2, [r1], #4
  408198:	f843 2f04 	str.w	r2, [r3, #4]!
  40819c:	458e      	cmp	lr, r1
  40819e:	d8f9      	bhi.n	408194 <__lshift+0x94>
  4081a0:	e7ec      	b.n	40817c <__lshift+0x7c>
  4081a2:	bf00      	nop

004081a4 <__mcmp>:
  4081a4:	b430      	push	{r4, r5}
  4081a6:	690b      	ldr	r3, [r1, #16]
  4081a8:	4605      	mov	r5, r0
  4081aa:	6900      	ldr	r0, [r0, #16]
  4081ac:	1ac0      	subs	r0, r0, r3
  4081ae:	d10f      	bne.n	4081d0 <__mcmp+0x2c>
  4081b0:	009b      	lsls	r3, r3, #2
  4081b2:	3514      	adds	r5, #20
  4081b4:	3114      	adds	r1, #20
  4081b6:	4419      	add	r1, r3
  4081b8:	442b      	add	r3, r5
  4081ba:	e001      	b.n	4081c0 <__mcmp+0x1c>
  4081bc:	429d      	cmp	r5, r3
  4081be:	d207      	bcs.n	4081d0 <__mcmp+0x2c>
  4081c0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4081c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4081c8:	4294      	cmp	r4, r2
  4081ca:	d0f7      	beq.n	4081bc <__mcmp+0x18>
  4081cc:	d302      	bcc.n	4081d4 <__mcmp+0x30>
  4081ce:	2001      	movs	r0, #1
  4081d0:	bc30      	pop	{r4, r5}
  4081d2:	4770      	bx	lr
  4081d4:	f04f 30ff 	mov.w	r0, #4294967295
  4081d8:	e7fa      	b.n	4081d0 <__mcmp+0x2c>
  4081da:	bf00      	nop

004081dc <__mdiff>:
  4081dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4081e0:	690f      	ldr	r7, [r1, #16]
  4081e2:	460e      	mov	r6, r1
  4081e4:	6911      	ldr	r1, [r2, #16]
  4081e6:	1a7f      	subs	r7, r7, r1
  4081e8:	2f00      	cmp	r7, #0
  4081ea:	4690      	mov	r8, r2
  4081ec:	d117      	bne.n	40821e <__mdiff+0x42>
  4081ee:	0089      	lsls	r1, r1, #2
  4081f0:	f106 0514 	add.w	r5, r6, #20
  4081f4:	f102 0e14 	add.w	lr, r2, #20
  4081f8:	186b      	adds	r3, r5, r1
  4081fa:	4471      	add	r1, lr
  4081fc:	e001      	b.n	408202 <__mdiff+0x26>
  4081fe:	429d      	cmp	r5, r3
  408200:	d25c      	bcs.n	4082bc <__mdiff+0xe0>
  408202:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408206:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40820a:	42a2      	cmp	r2, r4
  40820c:	d0f7      	beq.n	4081fe <__mdiff+0x22>
  40820e:	d25e      	bcs.n	4082ce <__mdiff+0xf2>
  408210:	4633      	mov	r3, r6
  408212:	462c      	mov	r4, r5
  408214:	4646      	mov	r6, r8
  408216:	4675      	mov	r5, lr
  408218:	4698      	mov	r8, r3
  40821a:	2701      	movs	r7, #1
  40821c:	e005      	b.n	40822a <__mdiff+0x4e>
  40821e:	db58      	blt.n	4082d2 <__mdiff+0xf6>
  408220:	f106 0514 	add.w	r5, r6, #20
  408224:	f108 0414 	add.w	r4, r8, #20
  408228:	2700      	movs	r7, #0
  40822a:	6871      	ldr	r1, [r6, #4]
  40822c:	f7ff fdbc 	bl	407da8 <_Balloc>
  408230:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408234:	6936      	ldr	r6, [r6, #16]
  408236:	60c7      	str	r7, [r0, #12]
  408238:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40823c:	46a6      	mov	lr, r4
  40823e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  408242:	f100 0414 	add.w	r4, r0, #20
  408246:	2300      	movs	r3, #0
  408248:	f85e 1b04 	ldr.w	r1, [lr], #4
  40824c:	f855 8b04 	ldr.w	r8, [r5], #4
  408250:	b28a      	uxth	r2, r1
  408252:	fa13 f388 	uxtah	r3, r3, r8
  408256:	0c09      	lsrs	r1, r1, #16
  408258:	1a9a      	subs	r2, r3, r2
  40825a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40825e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408262:	b292      	uxth	r2, r2
  408264:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408268:	45f4      	cmp	ip, lr
  40826a:	f844 2b04 	str.w	r2, [r4], #4
  40826e:	ea4f 4323 	mov.w	r3, r3, asr #16
  408272:	d8e9      	bhi.n	408248 <__mdiff+0x6c>
  408274:	42af      	cmp	r7, r5
  408276:	d917      	bls.n	4082a8 <__mdiff+0xcc>
  408278:	46a4      	mov	ip, r4
  40827a:	46ae      	mov	lr, r5
  40827c:	f85e 2b04 	ldr.w	r2, [lr], #4
  408280:	fa13 f382 	uxtah	r3, r3, r2
  408284:	1419      	asrs	r1, r3, #16
  408286:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40828a:	b29b      	uxth	r3, r3
  40828c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408290:	4577      	cmp	r7, lr
  408292:	f84c 2b04 	str.w	r2, [ip], #4
  408296:	ea4f 4321 	mov.w	r3, r1, asr #16
  40829a:	d8ef      	bhi.n	40827c <__mdiff+0xa0>
  40829c:	43ed      	mvns	r5, r5
  40829e:	442f      	add	r7, r5
  4082a0:	f027 0703 	bic.w	r7, r7, #3
  4082a4:	3704      	adds	r7, #4
  4082a6:	443c      	add	r4, r7
  4082a8:	3c04      	subs	r4, #4
  4082aa:	b922      	cbnz	r2, 4082b6 <__mdiff+0xda>
  4082ac:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4082b0:	3e01      	subs	r6, #1
  4082b2:	2b00      	cmp	r3, #0
  4082b4:	d0fa      	beq.n	4082ac <__mdiff+0xd0>
  4082b6:	6106      	str	r6, [r0, #16]
  4082b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4082bc:	2100      	movs	r1, #0
  4082be:	f7ff fd73 	bl	407da8 <_Balloc>
  4082c2:	2201      	movs	r2, #1
  4082c4:	2300      	movs	r3, #0
  4082c6:	6102      	str	r2, [r0, #16]
  4082c8:	6143      	str	r3, [r0, #20]
  4082ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4082ce:	4674      	mov	r4, lr
  4082d0:	e7ab      	b.n	40822a <__mdiff+0x4e>
  4082d2:	4633      	mov	r3, r6
  4082d4:	f106 0414 	add.w	r4, r6, #20
  4082d8:	f102 0514 	add.w	r5, r2, #20
  4082dc:	4616      	mov	r6, r2
  4082de:	2701      	movs	r7, #1
  4082e0:	4698      	mov	r8, r3
  4082e2:	e7a2      	b.n	40822a <__mdiff+0x4e>

004082e4 <__d2b>:
  4082e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4082e8:	b082      	sub	sp, #8
  4082ea:	2101      	movs	r1, #1
  4082ec:	461c      	mov	r4, r3
  4082ee:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4082f2:	4615      	mov	r5, r2
  4082f4:	9e08      	ldr	r6, [sp, #32]
  4082f6:	f7ff fd57 	bl	407da8 <_Balloc>
  4082fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4082fe:	4680      	mov	r8, r0
  408300:	b10f      	cbz	r7, 408306 <__d2b+0x22>
  408302:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408306:	9401      	str	r4, [sp, #4]
  408308:	b31d      	cbz	r5, 408352 <__d2b+0x6e>
  40830a:	a802      	add	r0, sp, #8
  40830c:	f840 5d08 	str.w	r5, [r0, #-8]!
  408310:	f7ff fdda 	bl	407ec8 <__lo0bits>
  408314:	2800      	cmp	r0, #0
  408316:	d134      	bne.n	408382 <__d2b+0x9e>
  408318:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40831c:	f8c8 2014 	str.w	r2, [r8, #20]
  408320:	2b00      	cmp	r3, #0
  408322:	bf0c      	ite	eq
  408324:	2101      	moveq	r1, #1
  408326:	2102      	movne	r1, #2
  408328:	f8c8 3018 	str.w	r3, [r8, #24]
  40832c:	f8c8 1010 	str.w	r1, [r8, #16]
  408330:	b9df      	cbnz	r7, 40836a <__d2b+0x86>
  408332:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  408336:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40833a:	6030      	str	r0, [r6, #0]
  40833c:	6918      	ldr	r0, [r3, #16]
  40833e:	f7ff fda3 	bl	407e88 <__hi0bits>
  408342:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408344:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  408348:	6018      	str	r0, [r3, #0]
  40834a:	4640      	mov	r0, r8
  40834c:	b002      	add	sp, #8
  40834e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408352:	a801      	add	r0, sp, #4
  408354:	f7ff fdb8 	bl	407ec8 <__lo0bits>
  408358:	9b01      	ldr	r3, [sp, #4]
  40835a:	f8c8 3014 	str.w	r3, [r8, #20]
  40835e:	2101      	movs	r1, #1
  408360:	3020      	adds	r0, #32
  408362:	f8c8 1010 	str.w	r1, [r8, #16]
  408366:	2f00      	cmp	r7, #0
  408368:	d0e3      	beq.n	408332 <__d2b+0x4e>
  40836a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40836c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  408370:	4407      	add	r7, r0
  408372:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  408376:	6037      	str	r7, [r6, #0]
  408378:	6018      	str	r0, [r3, #0]
  40837a:	4640      	mov	r0, r8
  40837c:	b002      	add	sp, #8
  40837e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408382:	e89d 000a 	ldmia.w	sp, {r1, r3}
  408386:	f1c0 0220 	rsb	r2, r0, #32
  40838a:	fa03 f202 	lsl.w	r2, r3, r2
  40838e:	430a      	orrs	r2, r1
  408390:	40c3      	lsrs	r3, r0
  408392:	9301      	str	r3, [sp, #4]
  408394:	f8c8 2014 	str.w	r2, [r8, #20]
  408398:	e7c2      	b.n	408320 <__d2b+0x3c>
  40839a:	bf00      	nop

0040839c <_realloc_r>:
  40839c:	2900      	cmp	r1, #0
  40839e:	f000 8095 	beq.w	4084cc <_realloc_r+0x130>
  4083a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083a6:	460d      	mov	r5, r1
  4083a8:	4616      	mov	r6, r2
  4083aa:	b083      	sub	sp, #12
  4083ac:	4680      	mov	r8, r0
  4083ae:	f106 070b 	add.w	r7, r6, #11
  4083b2:	f7fc faa3 	bl	4048fc <__malloc_lock>
  4083b6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4083ba:	2f16      	cmp	r7, #22
  4083bc:	f02e 0403 	bic.w	r4, lr, #3
  4083c0:	f1a5 0908 	sub.w	r9, r5, #8
  4083c4:	d83c      	bhi.n	408440 <_realloc_r+0xa4>
  4083c6:	2210      	movs	r2, #16
  4083c8:	4617      	mov	r7, r2
  4083ca:	42be      	cmp	r6, r7
  4083cc:	d83d      	bhi.n	40844a <_realloc_r+0xae>
  4083ce:	4294      	cmp	r4, r2
  4083d0:	da43      	bge.n	40845a <_realloc_r+0xbe>
  4083d2:	4bc4      	ldr	r3, [pc, #784]	; (4086e4 <_realloc_r+0x348>)
  4083d4:	6899      	ldr	r1, [r3, #8]
  4083d6:	eb09 0004 	add.w	r0, r9, r4
  4083da:	4288      	cmp	r0, r1
  4083dc:	f000 80b4 	beq.w	408548 <_realloc_r+0x1ac>
  4083e0:	6843      	ldr	r3, [r0, #4]
  4083e2:	f023 0101 	bic.w	r1, r3, #1
  4083e6:	4401      	add	r1, r0
  4083e8:	6849      	ldr	r1, [r1, #4]
  4083ea:	07c9      	lsls	r1, r1, #31
  4083ec:	d54c      	bpl.n	408488 <_realloc_r+0xec>
  4083ee:	f01e 0f01 	tst.w	lr, #1
  4083f2:	f000 809b 	beq.w	40852c <_realloc_r+0x190>
  4083f6:	4631      	mov	r1, r6
  4083f8:	4640      	mov	r0, r8
  4083fa:	f7fb fee7 	bl	4041cc <_malloc_r>
  4083fe:	4606      	mov	r6, r0
  408400:	2800      	cmp	r0, #0
  408402:	d03a      	beq.n	40847a <_realloc_r+0xde>
  408404:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408408:	f023 0301 	bic.w	r3, r3, #1
  40840c:	444b      	add	r3, r9
  40840e:	f1a0 0208 	sub.w	r2, r0, #8
  408412:	429a      	cmp	r2, r3
  408414:	f000 8121 	beq.w	40865a <_realloc_r+0x2be>
  408418:	1f22      	subs	r2, r4, #4
  40841a:	2a24      	cmp	r2, #36	; 0x24
  40841c:	f200 8107 	bhi.w	40862e <_realloc_r+0x292>
  408420:	2a13      	cmp	r2, #19
  408422:	f200 80db 	bhi.w	4085dc <_realloc_r+0x240>
  408426:	4603      	mov	r3, r0
  408428:	462a      	mov	r2, r5
  40842a:	6811      	ldr	r1, [r2, #0]
  40842c:	6019      	str	r1, [r3, #0]
  40842e:	6851      	ldr	r1, [r2, #4]
  408430:	6059      	str	r1, [r3, #4]
  408432:	6892      	ldr	r2, [r2, #8]
  408434:	609a      	str	r2, [r3, #8]
  408436:	4629      	mov	r1, r5
  408438:	4640      	mov	r0, r8
  40843a:	f7ff f8e9 	bl	407610 <_free_r>
  40843e:	e01c      	b.n	40847a <_realloc_r+0xde>
  408440:	f027 0707 	bic.w	r7, r7, #7
  408444:	2f00      	cmp	r7, #0
  408446:	463a      	mov	r2, r7
  408448:	dabf      	bge.n	4083ca <_realloc_r+0x2e>
  40844a:	2600      	movs	r6, #0
  40844c:	230c      	movs	r3, #12
  40844e:	4630      	mov	r0, r6
  408450:	f8c8 3000 	str.w	r3, [r8]
  408454:	b003      	add	sp, #12
  408456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40845a:	462e      	mov	r6, r5
  40845c:	1be3      	subs	r3, r4, r7
  40845e:	2b0f      	cmp	r3, #15
  408460:	d81e      	bhi.n	4084a0 <_realloc_r+0x104>
  408462:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408466:	f003 0301 	and.w	r3, r3, #1
  40846a:	4323      	orrs	r3, r4
  40846c:	444c      	add	r4, r9
  40846e:	f8c9 3004 	str.w	r3, [r9, #4]
  408472:	6863      	ldr	r3, [r4, #4]
  408474:	f043 0301 	orr.w	r3, r3, #1
  408478:	6063      	str	r3, [r4, #4]
  40847a:	4640      	mov	r0, r8
  40847c:	f7fc fa44 	bl	404908 <__malloc_unlock>
  408480:	4630      	mov	r0, r6
  408482:	b003      	add	sp, #12
  408484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408488:	f023 0303 	bic.w	r3, r3, #3
  40848c:	18e1      	adds	r1, r4, r3
  40848e:	4291      	cmp	r1, r2
  408490:	db1f      	blt.n	4084d2 <_realloc_r+0x136>
  408492:	68c3      	ldr	r3, [r0, #12]
  408494:	6882      	ldr	r2, [r0, #8]
  408496:	462e      	mov	r6, r5
  408498:	60d3      	str	r3, [r2, #12]
  40849a:	460c      	mov	r4, r1
  40849c:	609a      	str	r2, [r3, #8]
  40849e:	e7dd      	b.n	40845c <_realloc_r+0xc0>
  4084a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4084a4:	eb09 0107 	add.w	r1, r9, r7
  4084a8:	f002 0201 	and.w	r2, r2, #1
  4084ac:	444c      	add	r4, r9
  4084ae:	f043 0301 	orr.w	r3, r3, #1
  4084b2:	4317      	orrs	r7, r2
  4084b4:	f8c9 7004 	str.w	r7, [r9, #4]
  4084b8:	604b      	str	r3, [r1, #4]
  4084ba:	6863      	ldr	r3, [r4, #4]
  4084bc:	f043 0301 	orr.w	r3, r3, #1
  4084c0:	3108      	adds	r1, #8
  4084c2:	6063      	str	r3, [r4, #4]
  4084c4:	4640      	mov	r0, r8
  4084c6:	f7ff f8a3 	bl	407610 <_free_r>
  4084ca:	e7d6      	b.n	40847a <_realloc_r+0xde>
  4084cc:	4611      	mov	r1, r2
  4084ce:	f7fb be7d 	b.w	4041cc <_malloc_r>
  4084d2:	f01e 0f01 	tst.w	lr, #1
  4084d6:	d18e      	bne.n	4083f6 <_realloc_r+0x5a>
  4084d8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4084dc:	eba9 0a01 	sub.w	sl, r9, r1
  4084e0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4084e4:	f021 0103 	bic.w	r1, r1, #3
  4084e8:	440b      	add	r3, r1
  4084ea:	4423      	add	r3, r4
  4084ec:	4293      	cmp	r3, r2
  4084ee:	db25      	blt.n	40853c <_realloc_r+0x1a0>
  4084f0:	68c2      	ldr	r2, [r0, #12]
  4084f2:	6881      	ldr	r1, [r0, #8]
  4084f4:	4656      	mov	r6, sl
  4084f6:	60ca      	str	r2, [r1, #12]
  4084f8:	6091      	str	r1, [r2, #8]
  4084fa:	f8da 100c 	ldr.w	r1, [sl, #12]
  4084fe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408502:	1f22      	subs	r2, r4, #4
  408504:	2a24      	cmp	r2, #36	; 0x24
  408506:	60c1      	str	r1, [r0, #12]
  408508:	6088      	str	r0, [r1, #8]
  40850a:	f200 8094 	bhi.w	408636 <_realloc_r+0x29a>
  40850e:	2a13      	cmp	r2, #19
  408510:	d96f      	bls.n	4085f2 <_realloc_r+0x256>
  408512:	6829      	ldr	r1, [r5, #0]
  408514:	f8ca 1008 	str.w	r1, [sl, #8]
  408518:	6869      	ldr	r1, [r5, #4]
  40851a:	f8ca 100c 	str.w	r1, [sl, #12]
  40851e:	2a1b      	cmp	r2, #27
  408520:	f200 80a2 	bhi.w	408668 <_realloc_r+0x2cc>
  408524:	3508      	adds	r5, #8
  408526:	f10a 0210 	add.w	r2, sl, #16
  40852a:	e063      	b.n	4085f4 <_realloc_r+0x258>
  40852c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408530:	eba9 0a03 	sub.w	sl, r9, r3
  408534:	f8da 1004 	ldr.w	r1, [sl, #4]
  408538:	f021 0103 	bic.w	r1, r1, #3
  40853c:	1863      	adds	r3, r4, r1
  40853e:	4293      	cmp	r3, r2
  408540:	f6ff af59 	blt.w	4083f6 <_realloc_r+0x5a>
  408544:	4656      	mov	r6, sl
  408546:	e7d8      	b.n	4084fa <_realloc_r+0x15e>
  408548:	6841      	ldr	r1, [r0, #4]
  40854a:	f021 0b03 	bic.w	fp, r1, #3
  40854e:	44a3      	add	fp, r4
  408550:	f107 0010 	add.w	r0, r7, #16
  408554:	4583      	cmp	fp, r0
  408556:	da56      	bge.n	408606 <_realloc_r+0x26a>
  408558:	f01e 0f01 	tst.w	lr, #1
  40855c:	f47f af4b 	bne.w	4083f6 <_realloc_r+0x5a>
  408560:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408564:	eba9 0a01 	sub.w	sl, r9, r1
  408568:	f8da 1004 	ldr.w	r1, [sl, #4]
  40856c:	f021 0103 	bic.w	r1, r1, #3
  408570:	448b      	add	fp, r1
  408572:	4558      	cmp	r0, fp
  408574:	dce2      	bgt.n	40853c <_realloc_r+0x1a0>
  408576:	4656      	mov	r6, sl
  408578:	f8da 100c 	ldr.w	r1, [sl, #12]
  40857c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408580:	1f22      	subs	r2, r4, #4
  408582:	2a24      	cmp	r2, #36	; 0x24
  408584:	60c1      	str	r1, [r0, #12]
  408586:	6088      	str	r0, [r1, #8]
  408588:	f200 808f 	bhi.w	4086aa <_realloc_r+0x30e>
  40858c:	2a13      	cmp	r2, #19
  40858e:	f240 808a 	bls.w	4086a6 <_realloc_r+0x30a>
  408592:	6829      	ldr	r1, [r5, #0]
  408594:	f8ca 1008 	str.w	r1, [sl, #8]
  408598:	6869      	ldr	r1, [r5, #4]
  40859a:	f8ca 100c 	str.w	r1, [sl, #12]
  40859e:	2a1b      	cmp	r2, #27
  4085a0:	f200 808a 	bhi.w	4086b8 <_realloc_r+0x31c>
  4085a4:	3508      	adds	r5, #8
  4085a6:	f10a 0210 	add.w	r2, sl, #16
  4085aa:	6829      	ldr	r1, [r5, #0]
  4085ac:	6011      	str	r1, [r2, #0]
  4085ae:	6869      	ldr	r1, [r5, #4]
  4085b0:	6051      	str	r1, [r2, #4]
  4085b2:	68a9      	ldr	r1, [r5, #8]
  4085b4:	6091      	str	r1, [r2, #8]
  4085b6:	eb0a 0107 	add.w	r1, sl, r7
  4085ba:	ebab 0207 	sub.w	r2, fp, r7
  4085be:	f042 0201 	orr.w	r2, r2, #1
  4085c2:	6099      	str	r1, [r3, #8]
  4085c4:	604a      	str	r2, [r1, #4]
  4085c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4085ca:	f003 0301 	and.w	r3, r3, #1
  4085ce:	431f      	orrs	r7, r3
  4085d0:	4640      	mov	r0, r8
  4085d2:	f8ca 7004 	str.w	r7, [sl, #4]
  4085d6:	f7fc f997 	bl	404908 <__malloc_unlock>
  4085da:	e751      	b.n	408480 <_realloc_r+0xe4>
  4085dc:	682b      	ldr	r3, [r5, #0]
  4085de:	6003      	str	r3, [r0, #0]
  4085e0:	686b      	ldr	r3, [r5, #4]
  4085e2:	6043      	str	r3, [r0, #4]
  4085e4:	2a1b      	cmp	r2, #27
  4085e6:	d82d      	bhi.n	408644 <_realloc_r+0x2a8>
  4085e8:	f100 0308 	add.w	r3, r0, #8
  4085ec:	f105 0208 	add.w	r2, r5, #8
  4085f0:	e71b      	b.n	40842a <_realloc_r+0x8e>
  4085f2:	4632      	mov	r2, r6
  4085f4:	6829      	ldr	r1, [r5, #0]
  4085f6:	6011      	str	r1, [r2, #0]
  4085f8:	6869      	ldr	r1, [r5, #4]
  4085fa:	6051      	str	r1, [r2, #4]
  4085fc:	68a9      	ldr	r1, [r5, #8]
  4085fe:	6091      	str	r1, [r2, #8]
  408600:	461c      	mov	r4, r3
  408602:	46d1      	mov	r9, sl
  408604:	e72a      	b.n	40845c <_realloc_r+0xc0>
  408606:	eb09 0107 	add.w	r1, r9, r7
  40860a:	ebab 0b07 	sub.w	fp, fp, r7
  40860e:	f04b 0201 	orr.w	r2, fp, #1
  408612:	6099      	str	r1, [r3, #8]
  408614:	604a      	str	r2, [r1, #4]
  408616:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40861a:	f003 0301 	and.w	r3, r3, #1
  40861e:	431f      	orrs	r7, r3
  408620:	4640      	mov	r0, r8
  408622:	f845 7c04 	str.w	r7, [r5, #-4]
  408626:	f7fc f96f 	bl	404908 <__malloc_unlock>
  40862a:	462e      	mov	r6, r5
  40862c:	e728      	b.n	408480 <_realloc_r+0xe4>
  40862e:	4629      	mov	r1, r5
  408630:	f7ff fb56 	bl	407ce0 <memmove>
  408634:	e6ff      	b.n	408436 <_realloc_r+0x9a>
  408636:	4629      	mov	r1, r5
  408638:	4630      	mov	r0, r6
  40863a:	461c      	mov	r4, r3
  40863c:	46d1      	mov	r9, sl
  40863e:	f7ff fb4f 	bl	407ce0 <memmove>
  408642:	e70b      	b.n	40845c <_realloc_r+0xc0>
  408644:	68ab      	ldr	r3, [r5, #8]
  408646:	6083      	str	r3, [r0, #8]
  408648:	68eb      	ldr	r3, [r5, #12]
  40864a:	60c3      	str	r3, [r0, #12]
  40864c:	2a24      	cmp	r2, #36	; 0x24
  40864e:	d017      	beq.n	408680 <_realloc_r+0x2e4>
  408650:	f100 0310 	add.w	r3, r0, #16
  408654:	f105 0210 	add.w	r2, r5, #16
  408658:	e6e7      	b.n	40842a <_realloc_r+0x8e>
  40865a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40865e:	f023 0303 	bic.w	r3, r3, #3
  408662:	441c      	add	r4, r3
  408664:	462e      	mov	r6, r5
  408666:	e6f9      	b.n	40845c <_realloc_r+0xc0>
  408668:	68a9      	ldr	r1, [r5, #8]
  40866a:	f8ca 1010 	str.w	r1, [sl, #16]
  40866e:	68e9      	ldr	r1, [r5, #12]
  408670:	f8ca 1014 	str.w	r1, [sl, #20]
  408674:	2a24      	cmp	r2, #36	; 0x24
  408676:	d00c      	beq.n	408692 <_realloc_r+0x2f6>
  408678:	3510      	adds	r5, #16
  40867a:	f10a 0218 	add.w	r2, sl, #24
  40867e:	e7b9      	b.n	4085f4 <_realloc_r+0x258>
  408680:	692b      	ldr	r3, [r5, #16]
  408682:	6103      	str	r3, [r0, #16]
  408684:	696b      	ldr	r3, [r5, #20]
  408686:	6143      	str	r3, [r0, #20]
  408688:	f105 0218 	add.w	r2, r5, #24
  40868c:	f100 0318 	add.w	r3, r0, #24
  408690:	e6cb      	b.n	40842a <_realloc_r+0x8e>
  408692:	692a      	ldr	r2, [r5, #16]
  408694:	f8ca 2018 	str.w	r2, [sl, #24]
  408698:	696a      	ldr	r2, [r5, #20]
  40869a:	f8ca 201c 	str.w	r2, [sl, #28]
  40869e:	3518      	adds	r5, #24
  4086a0:	f10a 0220 	add.w	r2, sl, #32
  4086a4:	e7a6      	b.n	4085f4 <_realloc_r+0x258>
  4086a6:	4632      	mov	r2, r6
  4086a8:	e77f      	b.n	4085aa <_realloc_r+0x20e>
  4086aa:	4629      	mov	r1, r5
  4086ac:	4630      	mov	r0, r6
  4086ae:	9301      	str	r3, [sp, #4]
  4086b0:	f7ff fb16 	bl	407ce0 <memmove>
  4086b4:	9b01      	ldr	r3, [sp, #4]
  4086b6:	e77e      	b.n	4085b6 <_realloc_r+0x21a>
  4086b8:	68a9      	ldr	r1, [r5, #8]
  4086ba:	f8ca 1010 	str.w	r1, [sl, #16]
  4086be:	68e9      	ldr	r1, [r5, #12]
  4086c0:	f8ca 1014 	str.w	r1, [sl, #20]
  4086c4:	2a24      	cmp	r2, #36	; 0x24
  4086c6:	d003      	beq.n	4086d0 <_realloc_r+0x334>
  4086c8:	3510      	adds	r5, #16
  4086ca:	f10a 0218 	add.w	r2, sl, #24
  4086ce:	e76c      	b.n	4085aa <_realloc_r+0x20e>
  4086d0:	692a      	ldr	r2, [r5, #16]
  4086d2:	f8ca 2018 	str.w	r2, [sl, #24]
  4086d6:	696a      	ldr	r2, [r5, #20]
  4086d8:	f8ca 201c 	str.w	r2, [sl, #28]
  4086dc:	3518      	adds	r5, #24
  4086de:	f10a 0220 	add.w	r2, sl, #32
  4086e2:	e762      	b.n	4085aa <_realloc_r+0x20e>
  4086e4:	20400438 	.word	0x20400438

004086e8 <__sread>:
  4086e8:	b510      	push	{r4, lr}
  4086ea:	460c      	mov	r4, r1
  4086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4086f0:	f000 fa88 	bl	408c04 <_read_r>
  4086f4:	2800      	cmp	r0, #0
  4086f6:	db03      	blt.n	408700 <__sread+0x18>
  4086f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4086fa:	4403      	add	r3, r0
  4086fc:	6523      	str	r3, [r4, #80]	; 0x50
  4086fe:	bd10      	pop	{r4, pc}
  408700:	89a3      	ldrh	r3, [r4, #12]
  408702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408706:	81a3      	strh	r3, [r4, #12]
  408708:	bd10      	pop	{r4, pc}
  40870a:	bf00      	nop

0040870c <__swrite>:
  40870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408710:	4616      	mov	r6, r2
  408712:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408716:	461f      	mov	r7, r3
  408718:	05d3      	lsls	r3, r2, #23
  40871a:	460c      	mov	r4, r1
  40871c:	4605      	mov	r5, r0
  40871e:	d507      	bpl.n	408730 <__swrite+0x24>
  408720:	2200      	movs	r2, #0
  408722:	2302      	movs	r3, #2
  408724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408728:	f000 fa40 	bl	408bac <_lseek_r>
  40872c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408734:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408738:	81a2      	strh	r2, [r4, #12]
  40873a:	463b      	mov	r3, r7
  40873c:	4632      	mov	r2, r6
  40873e:	4628      	mov	r0, r5
  408740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408744:	f000 b85e 	b.w	408804 <_write_r>

00408748 <__sseek>:
  408748:	b510      	push	{r4, lr}
  40874a:	460c      	mov	r4, r1
  40874c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408750:	f000 fa2c 	bl	408bac <_lseek_r>
  408754:	89a3      	ldrh	r3, [r4, #12]
  408756:	1c42      	adds	r2, r0, #1
  408758:	bf0e      	itee	eq
  40875a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40875e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408762:	6520      	strne	r0, [r4, #80]	; 0x50
  408764:	81a3      	strh	r3, [r4, #12]
  408766:	bd10      	pop	{r4, pc}

00408768 <__sclose>:
  408768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40876c:	f000 b8f2 	b.w	408954 <_close_r>

00408770 <__sprint_r.part.0>:
  408770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408774:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  408776:	049c      	lsls	r4, r3, #18
  408778:	4693      	mov	fp, r2
  40877a:	d52f      	bpl.n	4087dc <__sprint_r.part.0+0x6c>
  40877c:	6893      	ldr	r3, [r2, #8]
  40877e:	6812      	ldr	r2, [r2, #0]
  408780:	b353      	cbz	r3, 4087d8 <__sprint_r.part.0+0x68>
  408782:	460e      	mov	r6, r1
  408784:	4607      	mov	r7, r0
  408786:	f102 0908 	add.w	r9, r2, #8
  40878a:	e919 0420 	ldmdb	r9, {r5, sl}
  40878e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  408792:	d017      	beq.n	4087c4 <__sprint_r.part.0+0x54>
  408794:	3d04      	subs	r5, #4
  408796:	2400      	movs	r4, #0
  408798:	e001      	b.n	40879e <__sprint_r.part.0+0x2e>
  40879a:	45a0      	cmp	r8, r4
  40879c:	d010      	beq.n	4087c0 <__sprint_r.part.0+0x50>
  40879e:	4632      	mov	r2, r6
  4087a0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4087a4:	4638      	mov	r0, r7
  4087a6:	f000 f999 	bl	408adc <_fputwc_r>
  4087aa:	1c43      	adds	r3, r0, #1
  4087ac:	f104 0401 	add.w	r4, r4, #1
  4087b0:	d1f3      	bne.n	40879a <__sprint_r.part.0+0x2a>
  4087b2:	2300      	movs	r3, #0
  4087b4:	f8cb 3008 	str.w	r3, [fp, #8]
  4087b8:	f8cb 3004 	str.w	r3, [fp, #4]
  4087bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087c0:	f8db 3008 	ldr.w	r3, [fp, #8]
  4087c4:	f02a 0a03 	bic.w	sl, sl, #3
  4087c8:	eba3 030a 	sub.w	r3, r3, sl
  4087cc:	f8cb 3008 	str.w	r3, [fp, #8]
  4087d0:	f109 0908 	add.w	r9, r9, #8
  4087d4:	2b00      	cmp	r3, #0
  4087d6:	d1d8      	bne.n	40878a <__sprint_r.part.0+0x1a>
  4087d8:	2000      	movs	r0, #0
  4087da:	e7ea      	b.n	4087b2 <__sprint_r.part.0+0x42>
  4087dc:	f7fe fffe 	bl	4077dc <__sfvwrite_r>
  4087e0:	2300      	movs	r3, #0
  4087e2:	f8cb 3008 	str.w	r3, [fp, #8]
  4087e6:	f8cb 3004 	str.w	r3, [fp, #4]
  4087ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4087ee:	bf00      	nop

004087f0 <__sprint_r>:
  4087f0:	6893      	ldr	r3, [r2, #8]
  4087f2:	b10b      	cbz	r3, 4087f8 <__sprint_r+0x8>
  4087f4:	f7ff bfbc 	b.w	408770 <__sprint_r.part.0>
  4087f8:	b410      	push	{r4}
  4087fa:	4618      	mov	r0, r3
  4087fc:	6053      	str	r3, [r2, #4]
  4087fe:	bc10      	pop	{r4}
  408800:	4770      	bx	lr
  408802:	bf00      	nop

00408804 <_write_r>:
  408804:	b570      	push	{r4, r5, r6, lr}
  408806:	460d      	mov	r5, r1
  408808:	4c08      	ldr	r4, [pc, #32]	; (40882c <_write_r+0x28>)
  40880a:	4611      	mov	r1, r2
  40880c:	4606      	mov	r6, r0
  40880e:	461a      	mov	r2, r3
  408810:	4628      	mov	r0, r5
  408812:	2300      	movs	r3, #0
  408814:	6023      	str	r3, [r4, #0]
  408816:	f7f7 fd8b 	bl	400330 <_write>
  40881a:	1c43      	adds	r3, r0, #1
  40881c:	d000      	beq.n	408820 <_write_r+0x1c>
  40881e:	bd70      	pop	{r4, r5, r6, pc}
  408820:	6823      	ldr	r3, [r4, #0]
  408822:	2b00      	cmp	r3, #0
  408824:	d0fb      	beq.n	40881e <_write_r+0x1a>
  408826:	6033      	str	r3, [r6, #0]
  408828:	bd70      	pop	{r4, r5, r6, pc}
  40882a:	bf00      	nop
  40882c:	20400cd0 	.word	0x20400cd0

00408830 <__register_exitproc>:
  408830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408834:	4d2c      	ldr	r5, [pc, #176]	; (4088e8 <__register_exitproc+0xb8>)
  408836:	4606      	mov	r6, r0
  408838:	6828      	ldr	r0, [r5, #0]
  40883a:	4698      	mov	r8, r3
  40883c:	460f      	mov	r7, r1
  40883e:	4691      	mov	r9, r2
  408840:	f7ff f980 	bl	407b44 <__retarget_lock_acquire_recursive>
  408844:	4b29      	ldr	r3, [pc, #164]	; (4088ec <__register_exitproc+0xbc>)
  408846:	681c      	ldr	r4, [r3, #0]
  408848:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40884c:	2b00      	cmp	r3, #0
  40884e:	d03e      	beq.n	4088ce <__register_exitproc+0x9e>
  408850:	685a      	ldr	r2, [r3, #4]
  408852:	2a1f      	cmp	r2, #31
  408854:	dc1c      	bgt.n	408890 <__register_exitproc+0x60>
  408856:	f102 0e01 	add.w	lr, r2, #1
  40885a:	b176      	cbz	r6, 40887a <__register_exitproc+0x4a>
  40885c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408860:	2401      	movs	r4, #1
  408862:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408866:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40886a:	4094      	lsls	r4, r2
  40886c:	4320      	orrs	r0, r4
  40886e:	2e02      	cmp	r6, #2
  408870:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408874:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408878:	d023      	beq.n	4088c2 <__register_exitproc+0x92>
  40887a:	3202      	adds	r2, #2
  40887c:	f8c3 e004 	str.w	lr, [r3, #4]
  408880:	6828      	ldr	r0, [r5, #0]
  408882:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408886:	f7ff f95f 	bl	407b48 <__retarget_lock_release_recursive>
  40888a:	2000      	movs	r0, #0
  40888c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408890:	4b17      	ldr	r3, [pc, #92]	; (4088f0 <__register_exitproc+0xc0>)
  408892:	b30b      	cbz	r3, 4088d8 <__register_exitproc+0xa8>
  408894:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408898:	f7fb fc88 	bl	4041ac <malloc>
  40889c:	4603      	mov	r3, r0
  40889e:	b1d8      	cbz	r0, 4088d8 <__register_exitproc+0xa8>
  4088a0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4088a4:	6002      	str	r2, [r0, #0]
  4088a6:	2100      	movs	r1, #0
  4088a8:	6041      	str	r1, [r0, #4]
  4088aa:	460a      	mov	r2, r1
  4088ac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4088b0:	f04f 0e01 	mov.w	lr, #1
  4088b4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4088b8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4088bc:	2e00      	cmp	r6, #0
  4088be:	d0dc      	beq.n	40887a <__register_exitproc+0x4a>
  4088c0:	e7cc      	b.n	40885c <__register_exitproc+0x2c>
  4088c2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4088c6:	430c      	orrs	r4, r1
  4088c8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4088cc:	e7d5      	b.n	40887a <__register_exitproc+0x4a>
  4088ce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4088d2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4088d6:	e7bb      	b.n	408850 <__register_exitproc+0x20>
  4088d8:	6828      	ldr	r0, [r5, #0]
  4088da:	f7ff f935 	bl	407b48 <__retarget_lock_release_recursive>
  4088de:	f04f 30ff 	mov.w	r0, #4294967295
  4088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4088e6:	bf00      	nop
  4088e8:	20400848 	.word	0x20400848
  4088ec:	0040931c 	.word	0x0040931c
  4088f0:	004041ad 	.word	0x004041ad

004088f4 <_calloc_r>:
  4088f4:	b510      	push	{r4, lr}
  4088f6:	fb02 f101 	mul.w	r1, r2, r1
  4088fa:	f7fb fc67 	bl	4041cc <_malloc_r>
  4088fe:	4604      	mov	r4, r0
  408900:	b1d8      	cbz	r0, 40893a <_calloc_r+0x46>
  408902:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408906:	f022 0203 	bic.w	r2, r2, #3
  40890a:	3a04      	subs	r2, #4
  40890c:	2a24      	cmp	r2, #36	; 0x24
  40890e:	d818      	bhi.n	408942 <_calloc_r+0x4e>
  408910:	2a13      	cmp	r2, #19
  408912:	d914      	bls.n	40893e <_calloc_r+0x4a>
  408914:	2300      	movs	r3, #0
  408916:	2a1b      	cmp	r2, #27
  408918:	6003      	str	r3, [r0, #0]
  40891a:	6043      	str	r3, [r0, #4]
  40891c:	d916      	bls.n	40894c <_calloc_r+0x58>
  40891e:	2a24      	cmp	r2, #36	; 0x24
  408920:	6083      	str	r3, [r0, #8]
  408922:	60c3      	str	r3, [r0, #12]
  408924:	bf11      	iteee	ne
  408926:	f100 0210 	addne.w	r2, r0, #16
  40892a:	6103      	streq	r3, [r0, #16]
  40892c:	6143      	streq	r3, [r0, #20]
  40892e:	f100 0218 	addeq.w	r2, r0, #24
  408932:	2300      	movs	r3, #0
  408934:	6013      	str	r3, [r2, #0]
  408936:	6053      	str	r3, [r2, #4]
  408938:	6093      	str	r3, [r2, #8]
  40893a:	4620      	mov	r0, r4
  40893c:	bd10      	pop	{r4, pc}
  40893e:	4602      	mov	r2, r0
  408940:	e7f7      	b.n	408932 <_calloc_r+0x3e>
  408942:	2100      	movs	r1, #0
  408944:	f7fb ff8c 	bl	404860 <memset>
  408948:	4620      	mov	r0, r4
  40894a:	bd10      	pop	{r4, pc}
  40894c:	f100 0208 	add.w	r2, r0, #8
  408950:	e7ef      	b.n	408932 <_calloc_r+0x3e>
  408952:	bf00      	nop

00408954 <_close_r>:
  408954:	b538      	push	{r3, r4, r5, lr}
  408956:	4c07      	ldr	r4, [pc, #28]	; (408974 <_close_r+0x20>)
  408958:	2300      	movs	r3, #0
  40895a:	4605      	mov	r5, r0
  40895c:	4608      	mov	r0, r1
  40895e:	6023      	str	r3, [r4, #0]
  408960:	f7f8 fb82 	bl	401068 <_close>
  408964:	1c43      	adds	r3, r0, #1
  408966:	d000      	beq.n	40896a <_close_r+0x16>
  408968:	bd38      	pop	{r3, r4, r5, pc}
  40896a:	6823      	ldr	r3, [r4, #0]
  40896c:	2b00      	cmp	r3, #0
  40896e:	d0fb      	beq.n	408968 <_close_r+0x14>
  408970:	602b      	str	r3, [r5, #0]
  408972:	bd38      	pop	{r3, r4, r5, pc}
  408974:	20400cd0 	.word	0x20400cd0

00408978 <_fclose_r>:
  408978:	b570      	push	{r4, r5, r6, lr}
  40897a:	b159      	cbz	r1, 408994 <_fclose_r+0x1c>
  40897c:	4605      	mov	r5, r0
  40897e:	460c      	mov	r4, r1
  408980:	b110      	cbz	r0, 408988 <_fclose_r+0x10>
  408982:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408984:	2b00      	cmp	r3, #0
  408986:	d03c      	beq.n	408a02 <_fclose_r+0x8a>
  408988:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40898a:	07d8      	lsls	r0, r3, #31
  40898c:	d505      	bpl.n	40899a <_fclose_r+0x22>
  40898e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408992:	b92b      	cbnz	r3, 4089a0 <_fclose_r+0x28>
  408994:	2600      	movs	r6, #0
  408996:	4630      	mov	r0, r6
  408998:	bd70      	pop	{r4, r5, r6, pc}
  40899a:	89a3      	ldrh	r3, [r4, #12]
  40899c:	0599      	lsls	r1, r3, #22
  40899e:	d53c      	bpl.n	408a1a <_fclose_r+0xa2>
  4089a0:	4621      	mov	r1, r4
  4089a2:	4628      	mov	r0, r5
  4089a4:	f7fe fc9a 	bl	4072dc <__sflush_r>
  4089a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4089aa:	4606      	mov	r6, r0
  4089ac:	b133      	cbz	r3, 4089bc <_fclose_r+0x44>
  4089ae:	69e1      	ldr	r1, [r4, #28]
  4089b0:	4628      	mov	r0, r5
  4089b2:	4798      	blx	r3
  4089b4:	2800      	cmp	r0, #0
  4089b6:	bfb8      	it	lt
  4089b8:	f04f 36ff 	movlt.w	r6, #4294967295
  4089bc:	89a3      	ldrh	r3, [r4, #12]
  4089be:	061a      	lsls	r2, r3, #24
  4089c0:	d422      	bmi.n	408a08 <_fclose_r+0x90>
  4089c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4089c4:	b141      	cbz	r1, 4089d8 <_fclose_r+0x60>
  4089c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4089ca:	4299      	cmp	r1, r3
  4089cc:	d002      	beq.n	4089d4 <_fclose_r+0x5c>
  4089ce:	4628      	mov	r0, r5
  4089d0:	f7fe fe1e 	bl	407610 <_free_r>
  4089d4:	2300      	movs	r3, #0
  4089d6:	6323      	str	r3, [r4, #48]	; 0x30
  4089d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4089da:	b121      	cbz	r1, 4089e6 <_fclose_r+0x6e>
  4089dc:	4628      	mov	r0, r5
  4089de:	f7fe fe17 	bl	407610 <_free_r>
  4089e2:	2300      	movs	r3, #0
  4089e4:	6463      	str	r3, [r4, #68]	; 0x44
  4089e6:	f7fe fd9d 	bl	407524 <__sfp_lock_acquire>
  4089ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4089ec:	2200      	movs	r2, #0
  4089ee:	07db      	lsls	r3, r3, #31
  4089f0:	81a2      	strh	r2, [r4, #12]
  4089f2:	d50e      	bpl.n	408a12 <_fclose_r+0x9a>
  4089f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4089f6:	f7ff f8a3 	bl	407b40 <__retarget_lock_close_recursive>
  4089fa:	f7fe fd99 	bl	407530 <__sfp_lock_release>
  4089fe:	4630      	mov	r0, r6
  408a00:	bd70      	pop	{r4, r5, r6, pc}
  408a02:	f7fe fd63 	bl	4074cc <__sinit>
  408a06:	e7bf      	b.n	408988 <_fclose_r+0x10>
  408a08:	6921      	ldr	r1, [r4, #16]
  408a0a:	4628      	mov	r0, r5
  408a0c:	f7fe fe00 	bl	407610 <_free_r>
  408a10:	e7d7      	b.n	4089c2 <_fclose_r+0x4a>
  408a12:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408a14:	f7ff f898 	bl	407b48 <__retarget_lock_release_recursive>
  408a18:	e7ec      	b.n	4089f4 <_fclose_r+0x7c>
  408a1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408a1c:	f7ff f892 	bl	407b44 <__retarget_lock_acquire_recursive>
  408a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408a24:	2b00      	cmp	r3, #0
  408a26:	d1bb      	bne.n	4089a0 <_fclose_r+0x28>
  408a28:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408a2a:	f016 0601 	ands.w	r6, r6, #1
  408a2e:	d1b1      	bne.n	408994 <_fclose_r+0x1c>
  408a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408a32:	f7ff f889 	bl	407b48 <__retarget_lock_release_recursive>
  408a36:	4630      	mov	r0, r6
  408a38:	bd70      	pop	{r4, r5, r6, pc}
  408a3a:	bf00      	nop

00408a3c <__fputwc>:
  408a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408a40:	b082      	sub	sp, #8
  408a42:	4680      	mov	r8, r0
  408a44:	4689      	mov	r9, r1
  408a46:	4614      	mov	r4, r2
  408a48:	f000 f8a2 	bl	408b90 <__locale_mb_cur_max>
  408a4c:	2801      	cmp	r0, #1
  408a4e:	d036      	beq.n	408abe <__fputwc+0x82>
  408a50:	464a      	mov	r2, r9
  408a52:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408a56:	a901      	add	r1, sp, #4
  408a58:	4640      	mov	r0, r8
  408a5a:	f000 f941 	bl	408ce0 <_wcrtomb_r>
  408a5e:	1c42      	adds	r2, r0, #1
  408a60:	4606      	mov	r6, r0
  408a62:	d025      	beq.n	408ab0 <__fputwc+0x74>
  408a64:	b3a8      	cbz	r0, 408ad2 <__fputwc+0x96>
  408a66:	f89d e004 	ldrb.w	lr, [sp, #4]
  408a6a:	2500      	movs	r5, #0
  408a6c:	f10d 0a04 	add.w	sl, sp, #4
  408a70:	e009      	b.n	408a86 <__fputwc+0x4a>
  408a72:	6823      	ldr	r3, [r4, #0]
  408a74:	1c5a      	adds	r2, r3, #1
  408a76:	6022      	str	r2, [r4, #0]
  408a78:	f883 e000 	strb.w	lr, [r3]
  408a7c:	3501      	adds	r5, #1
  408a7e:	42b5      	cmp	r5, r6
  408a80:	d227      	bcs.n	408ad2 <__fputwc+0x96>
  408a82:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408a86:	68a3      	ldr	r3, [r4, #8]
  408a88:	3b01      	subs	r3, #1
  408a8a:	2b00      	cmp	r3, #0
  408a8c:	60a3      	str	r3, [r4, #8]
  408a8e:	daf0      	bge.n	408a72 <__fputwc+0x36>
  408a90:	69a7      	ldr	r7, [r4, #24]
  408a92:	42bb      	cmp	r3, r7
  408a94:	4671      	mov	r1, lr
  408a96:	4622      	mov	r2, r4
  408a98:	4640      	mov	r0, r8
  408a9a:	db02      	blt.n	408aa2 <__fputwc+0x66>
  408a9c:	f1be 0f0a 	cmp.w	lr, #10
  408aa0:	d1e7      	bne.n	408a72 <__fputwc+0x36>
  408aa2:	f000 f8c5 	bl	408c30 <__swbuf_r>
  408aa6:	1c43      	adds	r3, r0, #1
  408aa8:	d1e8      	bne.n	408a7c <__fputwc+0x40>
  408aaa:	b002      	add	sp, #8
  408aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ab0:	89a3      	ldrh	r3, [r4, #12]
  408ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408ab6:	81a3      	strh	r3, [r4, #12]
  408ab8:	b002      	add	sp, #8
  408aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408abe:	f109 33ff 	add.w	r3, r9, #4294967295
  408ac2:	2bfe      	cmp	r3, #254	; 0xfe
  408ac4:	d8c4      	bhi.n	408a50 <__fputwc+0x14>
  408ac6:	fa5f fe89 	uxtb.w	lr, r9
  408aca:	4606      	mov	r6, r0
  408acc:	f88d e004 	strb.w	lr, [sp, #4]
  408ad0:	e7cb      	b.n	408a6a <__fputwc+0x2e>
  408ad2:	4648      	mov	r0, r9
  408ad4:	b002      	add	sp, #8
  408ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ada:	bf00      	nop

00408adc <_fputwc_r>:
  408adc:	b530      	push	{r4, r5, lr}
  408ade:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408ae0:	f013 0f01 	tst.w	r3, #1
  408ae4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408ae8:	4614      	mov	r4, r2
  408aea:	b083      	sub	sp, #12
  408aec:	4605      	mov	r5, r0
  408aee:	b29a      	uxth	r2, r3
  408af0:	d101      	bne.n	408af6 <_fputwc_r+0x1a>
  408af2:	0590      	lsls	r0, r2, #22
  408af4:	d51c      	bpl.n	408b30 <_fputwc_r+0x54>
  408af6:	0490      	lsls	r0, r2, #18
  408af8:	d406      	bmi.n	408b08 <_fputwc_r+0x2c>
  408afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408b04:	81a3      	strh	r3, [r4, #12]
  408b06:	6662      	str	r2, [r4, #100]	; 0x64
  408b08:	4628      	mov	r0, r5
  408b0a:	4622      	mov	r2, r4
  408b0c:	f7ff ff96 	bl	408a3c <__fputwc>
  408b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408b12:	07da      	lsls	r2, r3, #31
  408b14:	4605      	mov	r5, r0
  408b16:	d402      	bmi.n	408b1e <_fputwc_r+0x42>
  408b18:	89a3      	ldrh	r3, [r4, #12]
  408b1a:	059b      	lsls	r3, r3, #22
  408b1c:	d502      	bpl.n	408b24 <_fputwc_r+0x48>
  408b1e:	4628      	mov	r0, r5
  408b20:	b003      	add	sp, #12
  408b22:	bd30      	pop	{r4, r5, pc}
  408b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b26:	f7ff f80f 	bl	407b48 <__retarget_lock_release_recursive>
  408b2a:	4628      	mov	r0, r5
  408b2c:	b003      	add	sp, #12
  408b2e:	bd30      	pop	{r4, r5, pc}
  408b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b32:	9101      	str	r1, [sp, #4]
  408b34:	f7ff f806 	bl	407b44 <__retarget_lock_acquire_recursive>
  408b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b3c:	9901      	ldr	r1, [sp, #4]
  408b3e:	b29a      	uxth	r2, r3
  408b40:	e7d9      	b.n	408af6 <_fputwc_r+0x1a>
  408b42:	bf00      	nop

00408b44 <_fstat_r>:
  408b44:	b538      	push	{r3, r4, r5, lr}
  408b46:	460b      	mov	r3, r1
  408b48:	4c07      	ldr	r4, [pc, #28]	; (408b68 <_fstat_r+0x24>)
  408b4a:	4605      	mov	r5, r0
  408b4c:	4611      	mov	r1, r2
  408b4e:	4618      	mov	r0, r3
  408b50:	2300      	movs	r3, #0
  408b52:	6023      	str	r3, [r4, #0]
  408b54:	f7f8 fa8b 	bl	40106e <_fstat>
  408b58:	1c43      	adds	r3, r0, #1
  408b5a:	d000      	beq.n	408b5e <_fstat_r+0x1a>
  408b5c:	bd38      	pop	{r3, r4, r5, pc}
  408b5e:	6823      	ldr	r3, [r4, #0]
  408b60:	2b00      	cmp	r3, #0
  408b62:	d0fb      	beq.n	408b5c <_fstat_r+0x18>
  408b64:	602b      	str	r3, [r5, #0]
  408b66:	bd38      	pop	{r3, r4, r5, pc}
  408b68:	20400cd0 	.word	0x20400cd0

00408b6c <_isatty_r>:
  408b6c:	b538      	push	{r3, r4, r5, lr}
  408b6e:	4c07      	ldr	r4, [pc, #28]	; (408b8c <_isatty_r+0x20>)
  408b70:	2300      	movs	r3, #0
  408b72:	4605      	mov	r5, r0
  408b74:	4608      	mov	r0, r1
  408b76:	6023      	str	r3, [r4, #0]
  408b78:	f7f8 fa7e 	bl	401078 <_isatty>
  408b7c:	1c43      	adds	r3, r0, #1
  408b7e:	d000      	beq.n	408b82 <_isatty_r+0x16>
  408b80:	bd38      	pop	{r3, r4, r5, pc}
  408b82:	6823      	ldr	r3, [r4, #0]
  408b84:	2b00      	cmp	r3, #0
  408b86:	d0fb      	beq.n	408b80 <_isatty_r+0x14>
  408b88:	602b      	str	r3, [r5, #0]
  408b8a:	bd38      	pop	{r3, r4, r5, pc}
  408b8c:	20400cd0 	.word	0x20400cd0

00408b90 <__locale_mb_cur_max>:
  408b90:	4b04      	ldr	r3, [pc, #16]	; (408ba4 <__locale_mb_cur_max+0x14>)
  408b92:	4a05      	ldr	r2, [pc, #20]	; (408ba8 <__locale_mb_cur_max+0x18>)
  408b94:	681b      	ldr	r3, [r3, #0]
  408b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408b98:	2b00      	cmp	r3, #0
  408b9a:	bf08      	it	eq
  408b9c:	4613      	moveq	r3, r2
  408b9e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408ba2:	4770      	bx	lr
  408ba4:	2040000c 	.word	0x2040000c
  408ba8:	2040084c 	.word	0x2040084c

00408bac <_lseek_r>:
  408bac:	b570      	push	{r4, r5, r6, lr}
  408bae:	460d      	mov	r5, r1
  408bb0:	4c08      	ldr	r4, [pc, #32]	; (408bd4 <_lseek_r+0x28>)
  408bb2:	4611      	mov	r1, r2
  408bb4:	4606      	mov	r6, r0
  408bb6:	461a      	mov	r2, r3
  408bb8:	4628      	mov	r0, r5
  408bba:	2300      	movs	r3, #0
  408bbc:	6023      	str	r3, [r4, #0]
  408bbe:	f7f8 fa5d 	bl	40107c <_lseek>
  408bc2:	1c43      	adds	r3, r0, #1
  408bc4:	d000      	beq.n	408bc8 <_lseek_r+0x1c>
  408bc6:	bd70      	pop	{r4, r5, r6, pc}
  408bc8:	6823      	ldr	r3, [r4, #0]
  408bca:	2b00      	cmp	r3, #0
  408bcc:	d0fb      	beq.n	408bc6 <_lseek_r+0x1a>
  408bce:	6033      	str	r3, [r6, #0]
  408bd0:	bd70      	pop	{r4, r5, r6, pc}
  408bd2:	bf00      	nop
  408bd4:	20400cd0 	.word	0x20400cd0

00408bd8 <__ascii_mbtowc>:
  408bd8:	b082      	sub	sp, #8
  408bda:	b149      	cbz	r1, 408bf0 <__ascii_mbtowc+0x18>
  408bdc:	b15a      	cbz	r2, 408bf6 <__ascii_mbtowc+0x1e>
  408bde:	b16b      	cbz	r3, 408bfc <__ascii_mbtowc+0x24>
  408be0:	7813      	ldrb	r3, [r2, #0]
  408be2:	600b      	str	r3, [r1, #0]
  408be4:	7812      	ldrb	r2, [r2, #0]
  408be6:	1c10      	adds	r0, r2, #0
  408be8:	bf18      	it	ne
  408bea:	2001      	movne	r0, #1
  408bec:	b002      	add	sp, #8
  408bee:	4770      	bx	lr
  408bf0:	a901      	add	r1, sp, #4
  408bf2:	2a00      	cmp	r2, #0
  408bf4:	d1f3      	bne.n	408bde <__ascii_mbtowc+0x6>
  408bf6:	4610      	mov	r0, r2
  408bf8:	b002      	add	sp, #8
  408bfa:	4770      	bx	lr
  408bfc:	f06f 0001 	mvn.w	r0, #1
  408c00:	e7f4      	b.n	408bec <__ascii_mbtowc+0x14>
  408c02:	bf00      	nop

00408c04 <_read_r>:
  408c04:	b570      	push	{r4, r5, r6, lr}
  408c06:	460d      	mov	r5, r1
  408c08:	4c08      	ldr	r4, [pc, #32]	; (408c2c <_read_r+0x28>)
  408c0a:	4611      	mov	r1, r2
  408c0c:	4606      	mov	r6, r0
  408c0e:	461a      	mov	r2, r3
  408c10:	4628      	mov	r0, r5
  408c12:	2300      	movs	r3, #0
  408c14:	6023      	str	r3, [r4, #0]
  408c16:	f7f7 fb6d 	bl	4002f4 <_read>
  408c1a:	1c43      	adds	r3, r0, #1
  408c1c:	d000      	beq.n	408c20 <_read_r+0x1c>
  408c1e:	bd70      	pop	{r4, r5, r6, pc}
  408c20:	6823      	ldr	r3, [r4, #0]
  408c22:	2b00      	cmp	r3, #0
  408c24:	d0fb      	beq.n	408c1e <_read_r+0x1a>
  408c26:	6033      	str	r3, [r6, #0]
  408c28:	bd70      	pop	{r4, r5, r6, pc}
  408c2a:	bf00      	nop
  408c2c:	20400cd0 	.word	0x20400cd0

00408c30 <__swbuf_r>:
  408c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408c32:	460d      	mov	r5, r1
  408c34:	4614      	mov	r4, r2
  408c36:	4606      	mov	r6, r0
  408c38:	b110      	cbz	r0, 408c40 <__swbuf_r+0x10>
  408c3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408c3c:	2b00      	cmp	r3, #0
  408c3e:	d04b      	beq.n	408cd8 <__swbuf_r+0xa8>
  408c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408c44:	69a3      	ldr	r3, [r4, #24]
  408c46:	60a3      	str	r3, [r4, #8]
  408c48:	b291      	uxth	r1, r2
  408c4a:	0708      	lsls	r0, r1, #28
  408c4c:	d539      	bpl.n	408cc2 <__swbuf_r+0x92>
  408c4e:	6923      	ldr	r3, [r4, #16]
  408c50:	2b00      	cmp	r3, #0
  408c52:	d036      	beq.n	408cc2 <__swbuf_r+0x92>
  408c54:	b2ed      	uxtb	r5, r5
  408c56:	0489      	lsls	r1, r1, #18
  408c58:	462f      	mov	r7, r5
  408c5a:	d515      	bpl.n	408c88 <__swbuf_r+0x58>
  408c5c:	6822      	ldr	r2, [r4, #0]
  408c5e:	6961      	ldr	r1, [r4, #20]
  408c60:	1ad3      	subs	r3, r2, r3
  408c62:	428b      	cmp	r3, r1
  408c64:	da1c      	bge.n	408ca0 <__swbuf_r+0x70>
  408c66:	3301      	adds	r3, #1
  408c68:	68a1      	ldr	r1, [r4, #8]
  408c6a:	1c50      	adds	r0, r2, #1
  408c6c:	3901      	subs	r1, #1
  408c6e:	60a1      	str	r1, [r4, #8]
  408c70:	6020      	str	r0, [r4, #0]
  408c72:	7015      	strb	r5, [r2, #0]
  408c74:	6962      	ldr	r2, [r4, #20]
  408c76:	429a      	cmp	r2, r3
  408c78:	d01a      	beq.n	408cb0 <__swbuf_r+0x80>
  408c7a:	89a3      	ldrh	r3, [r4, #12]
  408c7c:	07db      	lsls	r3, r3, #31
  408c7e:	d501      	bpl.n	408c84 <__swbuf_r+0x54>
  408c80:	2d0a      	cmp	r5, #10
  408c82:	d015      	beq.n	408cb0 <__swbuf_r+0x80>
  408c84:	4638      	mov	r0, r7
  408c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408c88:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408c8e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408c92:	81a2      	strh	r2, [r4, #12]
  408c94:	6822      	ldr	r2, [r4, #0]
  408c96:	6661      	str	r1, [r4, #100]	; 0x64
  408c98:	6961      	ldr	r1, [r4, #20]
  408c9a:	1ad3      	subs	r3, r2, r3
  408c9c:	428b      	cmp	r3, r1
  408c9e:	dbe2      	blt.n	408c66 <__swbuf_r+0x36>
  408ca0:	4621      	mov	r1, r4
  408ca2:	4630      	mov	r0, r6
  408ca4:	f7fe fbba 	bl	40741c <_fflush_r>
  408ca8:	b940      	cbnz	r0, 408cbc <__swbuf_r+0x8c>
  408caa:	6822      	ldr	r2, [r4, #0]
  408cac:	2301      	movs	r3, #1
  408cae:	e7db      	b.n	408c68 <__swbuf_r+0x38>
  408cb0:	4621      	mov	r1, r4
  408cb2:	4630      	mov	r0, r6
  408cb4:	f7fe fbb2 	bl	40741c <_fflush_r>
  408cb8:	2800      	cmp	r0, #0
  408cba:	d0e3      	beq.n	408c84 <__swbuf_r+0x54>
  408cbc:	f04f 37ff 	mov.w	r7, #4294967295
  408cc0:	e7e0      	b.n	408c84 <__swbuf_r+0x54>
  408cc2:	4621      	mov	r1, r4
  408cc4:	4630      	mov	r0, r6
  408cc6:	f7fd fad7 	bl	406278 <__swsetup_r>
  408cca:	2800      	cmp	r0, #0
  408ccc:	d1f6      	bne.n	408cbc <__swbuf_r+0x8c>
  408cce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408cd2:	6923      	ldr	r3, [r4, #16]
  408cd4:	b291      	uxth	r1, r2
  408cd6:	e7bd      	b.n	408c54 <__swbuf_r+0x24>
  408cd8:	f7fe fbf8 	bl	4074cc <__sinit>
  408cdc:	e7b0      	b.n	408c40 <__swbuf_r+0x10>
  408cde:	bf00      	nop

00408ce0 <_wcrtomb_r>:
  408ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
  408ce2:	4606      	mov	r6, r0
  408ce4:	b085      	sub	sp, #20
  408ce6:	461f      	mov	r7, r3
  408ce8:	b189      	cbz	r1, 408d0e <_wcrtomb_r+0x2e>
  408cea:	4c10      	ldr	r4, [pc, #64]	; (408d2c <_wcrtomb_r+0x4c>)
  408cec:	4d10      	ldr	r5, [pc, #64]	; (408d30 <_wcrtomb_r+0x50>)
  408cee:	6824      	ldr	r4, [r4, #0]
  408cf0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  408cf2:	2c00      	cmp	r4, #0
  408cf4:	bf08      	it	eq
  408cf6:	462c      	moveq	r4, r5
  408cf8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408cfc:	47a0      	blx	r4
  408cfe:	1c43      	adds	r3, r0, #1
  408d00:	d103      	bne.n	408d0a <_wcrtomb_r+0x2a>
  408d02:	2200      	movs	r2, #0
  408d04:	238a      	movs	r3, #138	; 0x8a
  408d06:	603a      	str	r2, [r7, #0]
  408d08:	6033      	str	r3, [r6, #0]
  408d0a:	b005      	add	sp, #20
  408d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408d0e:	460c      	mov	r4, r1
  408d10:	4906      	ldr	r1, [pc, #24]	; (408d2c <_wcrtomb_r+0x4c>)
  408d12:	4a07      	ldr	r2, [pc, #28]	; (408d30 <_wcrtomb_r+0x50>)
  408d14:	6809      	ldr	r1, [r1, #0]
  408d16:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408d18:	2900      	cmp	r1, #0
  408d1a:	bf08      	it	eq
  408d1c:	4611      	moveq	r1, r2
  408d1e:	4622      	mov	r2, r4
  408d20:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408d24:	a901      	add	r1, sp, #4
  408d26:	47a0      	blx	r4
  408d28:	e7e9      	b.n	408cfe <_wcrtomb_r+0x1e>
  408d2a:	bf00      	nop
  408d2c:	2040000c 	.word	0x2040000c
  408d30:	2040084c 	.word	0x2040084c

00408d34 <__ascii_wctomb>:
  408d34:	b121      	cbz	r1, 408d40 <__ascii_wctomb+0xc>
  408d36:	2aff      	cmp	r2, #255	; 0xff
  408d38:	d804      	bhi.n	408d44 <__ascii_wctomb+0x10>
  408d3a:	700a      	strb	r2, [r1, #0]
  408d3c:	2001      	movs	r0, #1
  408d3e:	4770      	bx	lr
  408d40:	4608      	mov	r0, r1
  408d42:	4770      	bx	lr
  408d44:	238a      	movs	r3, #138	; 0x8a
  408d46:	6003      	str	r3, [r0, #0]
  408d48:	f04f 30ff 	mov.w	r0, #4294967295
  408d4c:	4770      	bx	lr
  408d4e:	bf00      	nop

00408d50 <__gedf2>:
  408d50:	f04f 3cff 	mov.w	ip, #4294967295
  408d54:	e006      	b.n	408d64 <__cmpdf2+0x4>
  408d56:	bf00      	nop

00408d58 <__ledf2>:
  408d58:	f04f 0c01 	mov.w	ip, #1
  408d5c:	e002      	b.n	408d64 <__cmpdf2+0x4>
  408d5e:	bf00      	nop

00408d60 <__cmpdf2>:
  408d60:	f04f 0c01 	mov.w	ip, #1
  408d64:	f84d cd04 	str.w	ip, [sp, #-4]!
  408d68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408d6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408d74:	bf18      	it	ne
  408d76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408d7a:	d01b      	beq.n	408db4 <__cmpdf2+0x54>
  408d7c:	b001      	add	sp, #4
  408d7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408d82:	bf0c      	ite	eq
  408d84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408d88:	ea91 0f03 	teqne	r1, r3
  408d8c:	bf02      	ittt	eq
  408d8e:	ea90 0f02 	teqeq	r0, r2
  408d92:	2000      	moveq	r0, #0
  408d94:	4770      	bxeq	lr
  408d96:	f110 0f00 	cmn.w	r0, #0
  408d9a:	ea91 0f03 	teq	r1, r3
  408d9e:	bf58      	it	pl
  408da0:	4299      	cmppl	r1, r3
  408da2:	bf08      	it	eq
  408da4:	4290      	cmpeq	r0, r2
  408da6:	bf2c      	ite	cs
  408da8:	17d8      	asrcs	r0, r3, #31
  408daa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408dae:	f040 0001 	orr.w	r0, r0, #1
  408db2:	4770      	bx	lr
  408db4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408db8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408dbc:	d102      	bne.n	408dc4 <__cmpdf2+0x64>
  408dbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408dc2:	d107      	bne.n	408dd4 <__cmpdf2+0x74>
  408dc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408dc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408dcc:	d1d6      	bne.n	408d7c <__cmpdf2+0x1c>
  408dce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408dd2:	d0d3      	beq.n	408d7c <__cmpdf2+0x1c>
  408dd4:	f85d 0b04 	ldr.w	r0, [sp], #4
  408dd8:	4770      	bx	lr
  408dda:	bf00      	nop

00408ddc <__aeabi_cdrcmple>:
  408ddc:	4684      	mov	ip, r0
  408dde:	4610      	mov	r0, r2
  408de0:	4662      	mov	r2, ip
  408de2:	468c      	mov	ip, r1
  408de4:	4619      	mov	r1, r3
  408de6:	4663      	mov	r3, ip
  408de8:	e000      	b.n	408dec <__aeabi_cdcmpeq>
  408dea:	bf00      	nop

00408dec <__aeabi_cdcmpeq>:
  408dec:	b501      	push	{r0, lr}
  408dee:	f7ff ffb7 	bl	408d60 <__cmpdf2>
  408df2:	2800      	cmp	r0, #0
  408df4:	bf48      	it	mi
  408df6:	f110 0f00 	cmnmi.w	r0, #0
  408dfa:	bd01      	pop	{r0, pc}

00408dfc <__aeabi_dcmpeq>:
  408dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e00:	f7ff fff4 	bl	408dec <__aeabi_cdcmpeq>
  408e04:	bf0c      	ite	eq
  408e06:	2001      	moveq	r0, #1
  408e08:	2000      	movne	r0, #0
  408e0a:	f85d fb08 	ldr.w	pc, [sp], #8
  408e0e:	bf00      	nop

00408e10 <__aeabi_dcmplt>:
  408e10:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e14:	f7ff ffea 	bl	408dec <__aeabi_cdcmpeq>
  408e18:	bf34      	ite	cc
  408e1a:	2001      	movcc	r0, #1
  408e1c:	2000      	movcs	r0, #0
  408e1e:	f85d fb08 	ldr.w	pc, [sp], #8
  408e22:	bf00      	nop

00408e24 <__aeabi_dcmple>:
  408e24:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e28:	f7ff ffe0 	bl	408dec <__aeabi_cdcmpeq>
  408e2c:	bf94      	ite	ls
  408e2e:	2001      	movls	r0, #1
  408e30:	2000      	movhi	r0, #0
  408e32:	f85d fb08 	ldr.w	pc, [sp], #8
  408e36:	bf00      	nop

00408e38 <__aeabi_dcmpge>:
  408e38:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e3c:	f7ff ffce 	bl	408ddc <__aeabi_cdrcmple>
  408e40:	bf94      	ite	ls
  408e42:	2001      	movls	r0, #1
  408e44:	2000      	movhi	r0, #0
  408e46:	f85d fb08 	ldr.w	pc, [sp], #8
  408e4a:	bf00      	nop

00408e4c <__aeabi_dcmpgt>:
  408e4c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e50:	f7ff ffc4 	bl	408ddc <__aeabi_cdrcmple>
  408e54:	bf34      	ite	cc
  408e56:	2001      	movcc	r0, #1
  408e58:	2000      	movcs	r0, #0
  408e5a:	f85d fb08 	ldr.w	pc, [sp], #8
  408e5e:	bf00      	nop

00408e60 <__aeabi_dcmpun>:
  408e60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408e64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e68:	d102      	bne.n	408e70 <__aeabi_dcmpun+0x10>
  408e6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408e6e:	d10a      	bne.n	408e86 <__aeabi_dcmpun+0x26>
  408e70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e78:	d102      	bne.n	408e80 <__aeabi_dcmpun+0x20>
  408e7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408e7e:	d102      	bne.n	408e86 <__aeabi_dcmpun+0x26>
  408e80:	f04f 0000 	mov.w	r0, #0
  408e84:	4770      	bx	lr
  408e86:	f04f 0001 	mov.w	r0, #1
  408e8a:	4770      	bx	lr

00408e8c <__aeabi_d2iz>:
  408e8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408e90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408e94:	d215      	bcs.n	408ec2 <__aeabi_d2iz+0x36>
  408e96:	d511      	bpl.n	408ebc <__aeabi_d2iz+0x30>
  408e98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408e9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408ea0:	d912      	bls.n	408ec8 <__aeabi_d2iz+0x3c>
  408ea2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408eaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408eae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408eb2:	fa23 f002 	lsr.w	r0, r3, r2
  408eb6:	bf18      	it	ne
  408eb8:	4240      	negne	r0, r0
  408eba:	4770      	bx	lr
  408ebc:	f04f 0000 	mov.w	r0, #0
  408ec0:	4770      	bx	lr
  408ec2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408ec6:	d105      	bne.n	408ed4 <__aeabi_d2iz+0x48>
  408ec8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408ecc:	bf08      	it	eq
  408ece:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408ed2:	4770      	bx	lr
  408ed4:	f04f 0000 	mov.w	r0, #0
  408ed8:	4770      	bx	lr
  408eda:	bf00      	nop

00408edc <__aeabi_uldivmod>:
  408edc:	b953      	cbnz	r3, 408ef4 <__aeabi_uldivmod+0x18>
  408ede:	b94a      	cbnz	r2, 408ef4 <__aeabi_uldivmod+0x18>
  408ee0:	2900      	cmp	r1, #0
  408ee2:	bf08      	it	eq
  408ee4:	2800      	cmpeq	r0, #0
  408ee6:	bf1c      	itt	ne
  408ee8:	f04f 31ff 	movne.w	r1, #4294967295
  408eec:	f04f 30ff 	movne.w	r0, #4294967295
  408ef0:	f000 b97a 	b.w	4091e8 <__aeabi_idiv0>
  408ef4:	f1ad 0c08 	sub.w	ip, sp, #8
  408ef8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408efc:	f000 f806 	bl	408f0c <__udivmoddi4>
  408f00:	f8dd e004 	ldr.w	lr, [sp, #4]
  408f04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408f08:	b004      	add	sp, #16
  408f0a:	4770      	bx	lr

00408f0c <__udivmoddi4>:
  408f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408f10:	468c      	mov	ip, r1
  408f12:	460d      	mov	r5, r1
  408f14:	4604      	mov	r4, r0
  408f16:	9e08      	ldr	r6, [sp, #32]
  408f18:	2b00      	cmp	r3, #0
  408f1a:	d151      	bne.n	408fc0 <__udivmoddi4+0xb4>
  408f1c:	428a      	cmp	r2, r1
  408f1e:	4617      	mov	r7, r2
  408f20:	d96d      	bls.n	408ffe <__udivmoddi4+0xf2>
  408f22:	fab2 fe82 	clz	lr, r2
  408f26:	f1be 0f00 	cmp.w	lr, #0
  408f2a:	d00b      	beq.n	408f44 <__udivmoddi4+0x38>
  408f2c:	f1ce 0c20 	rsb	ip, lr, #32
  408f30:	fa01 f50e 	lsl.w	r5, r1, lr
  408f34:	fa20 fc0c 	lsr.w	ip, r0, ip
  408f38:	fa02 f70e 	lsl.w	r7, r2, lr
  408f3c:	ea4c 0c05 	orr.w	ip, ip, r5
  408f40:	fa00 f40e 	lsl.w	r4, r0, lr
  408f44:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408f48:	0c25      	lsrs	r5, r4, #16
  408f4a:	fbbc f8fa 	udiv	r8, ip, sl
  408f4e:	fa1f f987 	uxth.w	r9, r7
  408f52:	fb0a cc18 	mls	ip, sl, r8, ip
  408f56:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408f5a:	fb08 f309 	mul.w	r3, r8, r9
  408f5e:	42ab      	cmp	r3, r5
  408f60:	d90a      	bls.n	408f78 <__udivmoddi4+0x6c>
  408f62:	19ed      	adds	r5, r5, r7
  408f64:	f108 32ff 	add.w	r2, r8, #4294967295
  408f68:	f080 8123 	bcs.w	4091b2 <__udivmoddi4+0x2a6>
  408f6c:	42ab      	cmp	r3, r5
  408f6e:	f240 8120 	bls.w	4091b2 <__udivmoddi4+0x2a6>
  408f72:	f1a8 0802 	sub.w	r8, r8, #2
  408f76:	443d      	add	r5, r7
  408f78:	1aed      	subs	r5, r5, r3
  408f7a:	b2a4      	uxth	r4, r4
  408f7c:	fbb5 f0fa 	udiv	r0, r5, sl
  408f80:	fb0a 5510 	mls	r5, sl, r0, r5
  408f84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408f88:	fb00 f909 	mul.w	r9, r0, r9
  408f8c:	45a1      	cmp	r9, r4
  408f8e:	d909      	bls.n	408fa4 <__udivmoddi4+0x98>
  408f90:	19e4      	adds	r4, r4, r7
  408f92:	f100 33ff 	add.w	r3, r0, #4294967295
  408f96:	f080 810a 	bcs.w	4091ae <__udivmoddi4+0x2a2>
  408f9a:	45a1      	cmp	r9, r4
  408f9c:	f240 8107 	bls.w	4091ae <__udivmoddi4+0x2a2>
  408fa0:	3802      	subs	r0, #2
  408fa2:	443c      	add	r4, r7
  408fa4:	eba4 0409 	sub.w	r4, r4, r9
  408fa8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408fac:	2100      	movs	r1, #0
  408fae:	2e00      	cmp	r6, #0
  408fb0:	d061      	beq.n	409076 <__udivmoddi4+0x16a>
  408fb2:	fa24 f40e 	lsr.w	r4, r4, lr
  408fb6:	2300      	movs	r3, #0
  408fb8:	6034      	str	r4, [r6, #0]
  408fba:	6073      	str	r3, [r6, #4]
  408fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408fc0:	428b      	cmp	r3, r1
  408fc2:	d907      	bls.n	408fd4 <__udivmoddi4+0xc8>
  408fc4:	2e00      	cmp	r6, #0
  408fc6:	d054      	beq.n	409072 <__udivmoddi4+0x166>
  408fc8:	2100      	movs	r1, #0
  408fca:	e886 0021 	stmia.w	r6, {r0, r5}
  408fce:	4608      	mov	r0, r1
  408fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408fd4:	fab3 f183 	clz	r1, r3
  408fd8:	2900      	cmp	r1, #0
  408fda:	f040 808e 	bne.w	4090fa <__udivmoddi4+0x1ee>
  408fde:	42ab      	cmp	r3, r5
  408fe0:	d302      	bcc.n	408fe8 <__udivmoddi4+0xdc>
  408fe2:	4282      	cmp	r2, r0
  408fe4:	f200 80fa 	bhi.w	4091dc <__udivmoddi4+0x2d0>
  408fe8:	1a84      	subs	r4, r0, r2
  408fea:	eb65 0503 	sbc.w	r5, r5, r3
  408fee:	2001      	movs	r0, #1
  408ff0:	46ac      	mov	ip, r5
  408ff2:	2e00      	cmp	r6, #0
  408ff4:	d03f      	beq.n	409076 <__udivmoddi4+0x16a>
  408ff6:	e886 1010 	stmia.w	r6, {r4, ip}
  408ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ffe:	b912      	cbnz	r2, 409006 <__udivmoddi4+0xfa>
  409000:	2701      	movs	r7, #1
  409002:	fbb7 f7f2 	udiv	r7, r7, r2
  409006:	fab7 fe87 	clz	lr, r7
  40900a:	f1be 0f00 	cmp.w	lr, #0
  40900e:	d134      	bne.n	40907a <__udivmoddi4+0x16e>
  409010:	1beb      	subs	r3, r5, r7
  409012:	0c3a      	lsrs	r2, r7, #16
  409014:	fa1f fc87 	uxth.w	ip, r7
  409018:	2101      	movs	r1, #1
  40901a:	fbb3 f8f2 	udiv	r8, r3, r2
  40901e:	0c25      	lsrs	r5, r4, #16
  409020:	fb02 3318 	mls	r3, r2, r8, r3
  409024:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409028:	fb0c f308 	mul.w	r3, ip, r8
  40902c:	42ab      	cmp	r3, r5
  40902e:	d907      	bls.n	409040 <__udivmoddi4+0x134>
  409030:	19ed      	adds	r5, r5, r7
  409032:	f108 30ff 	add.w	r0, r8, #4294967295
  409036:	d202      	bcs.n	40903e <__udivmoddi4+0x132>
  409038:	42ab      	cmp	r3, r5
  40903a:	f200 80d1 	bhi.w	4091e0 <__udivmoddi4+0x2d4>
  40903e:	4680      	mov	r8, r0
  409040:	1aed      	subs	r5, r5, r3
  409042:	b2a3      	uxth	r3, r4
  409044:	fbb5 f0f2 	udiv	r0, r5, r2
  409048:	fb02 5510 	mls	r5, r2, r0, r5
  40904c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409050:	fb0c fc00 	mul.w	ip, ip, r0
  409054:	45a4      	cmp	ip, r4
  409056:	d907      	bls.n	409068 <__udivmoddi4+0x15c>
  409058:	19e4      	adds	r4, r4, r7
  40905a:	f100 33ff 	add.w	r3, r0, #4294967295
  40905e:	d202      	bcs.n	409066 <__udivmoddi4+0x15a>
  409060:	45a4      	cmp	ip, r4
  409062:	f200 80b8 	bhi.w	4091d6 <__udivmoddi4+0x2ca>
  409066:	4618      	mov	r0, r3
  409068:	eba4 040c 	sub.w	r4, r4, ip
  40906c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409070:	e79d      	b.n	408fae <__udivmoddi4+0xa2>
  409072:	4631      	mov	r1, r6
  409074:	4630      	mov	r0, r6
  409076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40907a:	f1ce 0420 	rsb	r4, lr, #32
  40907e:	fa05 f30e 	lsl.w	r3, r5, lr
  409082:	fa07 f70e 	lsl.w	r7, r7, lr
  409086:	fa20 f804 	lsr.w	r8, r0, r4
  40908a:	0c3a      	lsrs	r2, r7, #16
  40908c:	fa25 f404 	lsr.w	r4, r5, r4
  409090:	ea48 0803 	orr.w	r8, r8, r3
  409094:	fbb4 f1f2 	udiv	r1, r4, r2
  409098:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40909c:	fb02 4411 	mls	r4, r2, r1, r4
  4090a0:	fa1f fc87 	uxth.w	ip, r7
  4090a4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4090a8:	fb01 f30c 	mul.w	r3, r1, ip
  4090ac:	42ab      	cmp	r3, r5
  4090ae:	fa00 f40e 	lsl.w	r4, r0, lr
  4090b2:	d909      	bls.n	4090c8 <__udivmoddi4+0x1bc>
  4090b4:	19ed      	adds	r5, r5, r7
  4090b6:	f101 30ff 	add.w	r0, r1, #4294967295
  4090ba:	f080 808a 	bcs.w	4091d2 <__udivmoddi4+0x2c6>
  4090be:	42ab      	cmp	r3, r5
  4090c0:	f240 8087 	bls.w	4091d2 <__udivmoddi4+0x2c6>
  4090c4:	3902      	subs	r1, #2
  4090c6:	443d      	add	r5, r7
  4090c8:	1aeb      	subs	r3, r5, r3
  4090ca:	fa1f f588 	uxth.w	r5, r8
  4090ce:	fbb3 f0f2 	udiv	r0, r3, r2
  4090d2:	fb02 3310 	mls	r3, r2, r0, r3
  4090d6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4090da:	fb00 f30c 	mul.w	r3, r0, ip
  4090de:	42ab      	cmp	r3, r5
  4090e0:	d907      	bls.n	4090f2 <__udivmoddi4+0x1e6>
  4090e2:	19ed      	adds	r5, r5, r7
  4090e4:	f100 38ff 	add.w	r8, r0, #4294967295
  4090e8:	d26f      	bcs.n	4091ca <__udivmoddi4+0x2be>
  4090ea:	42ab      	cmp	r3, r5
  4090ec:	d96d      	bls.n	4091ca <__udivmoddi4+0x2be>
  4090ee:	3802      	subs	r0, #2
  4090f0:	443d      	add	r5, r7
  4090f2:	1aeb      	subs	r3, r5, r3
  4090f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4090f8:	e78f      	b.n	40901a <__udivmoddi4+0x10e>
  4090fa:	f1c1 0720 	rsb	r7, r1, #32
  4090fe:	fa22 f807 	lsr.w	r8, r2, r7
  409102:	408b      	lsls	r3, r1
  409104:	fa05 f401 	lsl.w	r4, r5, r1
  409108:	ea48 0303 	orr.w	r3, r8, r3
  40910c:	fa20 fe07 	lsr.w	lr, r0, r7
  409110:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409114:	40fd      	lsrs	r5, r7
  409116:	ea4e 0e04 	orr.w	lr, lr, r4
  40911a:	fbb5 f9fc 	udiv	r9, r5, ip
  40911e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409122:	fb0c 5519 	mls	r5, ip, r9, r5
  409126:	fa1f f883 	uxth.w	r8, r3
  40912a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40912e:	fb09 f408 	mul.w	r4, r9, r8
  409132:	42ac      	cmp	r4, r5
  409134:	fa02 f201 	lsl.w	r2, r2, r1
  409138:	fa00 fa01 	lsl.w	sl, r0, r1
  40913c:	d908      	bls.n	409150 <__udivmoddi4+0x244>
  40913e:	18ed      	adds	r5, r5, r3
  409140:	f109 30ff 	add.w	r0, r9, #4294967295
  409144:	d243      	bcs.n	4091ce <__udivmoddi4+0x2c2>
  409146:	42ac      	cmp	r4, r5
  409148:	d941      	bls.n	4091ce <__udivmoddi4+0x2c2>
  40914a:	f1a9 0902 	sub.w	r9, r9, #2
  40914e:	441d      	add	r5, r3
  409150:	1b2d      	subs	r5, r5, r4
  409152:	fa1f fe8e 	uxth.w	lr, lr
  409156:	fbb5 f0fc 	udiv	r0, r5, ip
  40915a:	fb0c 5510 	mls	r5, ip, r0, r5
  40915e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409162:	fb00 f808 	mul.w	r8, r0, r8
  409166:	45a0      	cmp	r8, r4
  409168:	d907      	bls.n	40917a <__udivmoddi4+0x26e>
  40916a:	18e4      	adds	r4, r4, r3
  40916c:	f100 35ff 	add.w	r5, r0, #4294967295
  409170:	d229      	bcs.n	4091c6 <__udivmoddi4+0x2ba>
  409172:	45a0      	cmp	r8, r4
  409174:	d927      	bls.n	4091c6 <__udivmoddi4+0x2ba>
  409176:	3802      	subs	r0, #2
  409178:	441c      	add	r4, r3
  40917a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40917e:	eba4 0408 	sub.w	r4, r4, r8
  409182:	fba0 8902 	umull	r8, r9, r0, r2
  409186:	454c      	cmp	r4, r9
  409188:	46c6      	mov	lr, r8
  40918a:	464d      	mov	r5, r9
  40918c:	d315      	bcc.n	4091ba <__udivmoddi4+0x2ae>
  40918e:	d012      	beq.n	4091b6 <__udivmoddi4+0x2aa>
  409190:	b156      	cbz	r6, 4091a8 <__udivmoddi4+0x29c>
  409192:	ebba 030e 	subs.w	r3, sl, lr
  409196:	eb64 0405 	sbc.w	r4, r4, r5
  40919a:	fa04 f707 	lsl.w	r7, r4, r7
  40919e:	40cb      	lsrs	r3, r1
  4091a0:	431f      	orrs	r7, r3
  4091a2:	40cc      	lsrs	r4, r1
  4091a4:	6037      	str	r7, [r6, #0]
  4091a6:	6074      	str	r4, [r6, #4]
  4091a8:	2100      	movs	r1, #0
  4091aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4091ae:	4618      	mov	r0, r3
  4091b0:	e6f8      	b.n	408fa4 <__udivmoddi4+0x98>
  4091b2:	4690      	mov	r8, r2
  4091b4:	e6e0      	b.n	408f78 <__udivmoddi4+0x6c>
  4091b6:	45c2      	cmp	sl, r8
  4091b8:	d2ea      	bcs.n	409190 <__udivmoddi4+0x284>
  4091ba:	ebb8 0e02 	subs.w	lr, r8, r2
  4091be:	eb69 0503 	sbc.w	r5, r9, r3
  4091c2:	3801      	subs	r0, #1
  4091c4:	e7e4      	b.n	409190 <__udivmoddi4+0x284>
  4091c6:	4628      	mov	r0, r5
  4091c8:	e7d7      	b.n	40917a <__udivmoddi4+0x26e>
  4091ca:	4640      	mov	r0, r8
  4091cc:	e791      	b.n	4090f2 <__udivmoddi4+0x1e6>
  4091ce:	4681      	mov	r9, r0
  4091d0:	e7be      	b.n	409150 <__udivmoddi4+0x244>
  4091d2:	4601      	mov	r1, r0
  4091d4:	e778      	b.n	4090c8 <__udivmoddi4+0x1bc>
  4091d6:	3802      	subs	r0, #2
  4091d8:	443c      	add	r4, r7
  4091da:	e745      	b.n	409068 <__udivmoddi4+0x15c>
  4091dc:	4608      	mov	r0, r1
  4091de:	e708      	b.n	408ff2 <__udivmoddi4+0xe6>
  4091e0:	f1a8 0802 	sub.w	r8, r8, #2
  4091e4:	443d      	add	r5, r7
  4091e6:	e72b      	b.n	409040 <__udivmoddi4+0x134>

004091e8 <__aeabi_idiv0>:
  4091e8:	4770      	bx	lr
  4091ea:	bf00      	nop
  4091ec:	454c4449 	.word	0x454c4449
  4091f0:	00000000 	.word	0x00000000
  4091f4:	51726d54 	.word	0x51726d54
  4091f8:	00000000 	.word	0x00000000
  4091fc:	20726d54 	.word	0x20726d54
  409200:	00637653 	.word	0x00637653
  409204:	00005441 	.word	0x00005441
  409208:	4e2b5441 	.word	0x4e2b5441
  40920c:	47454d41 	.word	0x47454d41
  409210:	72726575 	.word	0x72726575
  409214:	6f726965 	.word	0x6f726965
  409218:	00000073 	.word	0x00000073
  40921c:	502b5441 	.word	0x502b5441
  409220:	32314e49 	.word	0x32314e49
  409224:	00003433 	.word	0x00003433
  409228:	00544c42 	.word	0x00544c42
  40922c:	686c6166 	.word	0x686c6166
  409230:	6d652061 	.word	0x6d652061
  409234:	69726320 	.word	0x69726320
  409238:	61207261 	.word	0x61207261
  40923c:	65757120 	.word	0x65757120
  409240:	78206575 	.word	0x78206575
  409244:	75657551 	.word	0x75657551
  409248:	43444165 	.word	0x43444165
  40924c:	00000020 	.word	0x00000020
  409250:	00434441 	.word	0x00434441
  409254:	6c696146 	.word	0x6c696146
  409258:	74206465 	.word	0x74206465
  40925c:	7263206f 	.word	0x7263206f
  409260:	65746165 	.word	0x65746165
  409264:	73657420 	.word	0x73657420
  409268:	44412074 	.word	0x44412074
  40926c:	61742043 	.word	0x61742043
  409270:	000d6b73 	.word	0x000d6b73
  409274:	636f7270 	.word	0x636f7270
  409278:	00000000 	.word	0x00000000
  40927c:	636f7270 	.word	0x636f7270
  409280:	00000032 	.word	0x00000032
  409284:	58434441 	.word	0x58434441
  409288:	6625203a 	.word	0x6625203a
  40928c:	00000a20 	.word	0x00000a20
  409290:	59434441 	.word	0x59434441
  409294:	6625203a 	.word	0x6625203a
  409298:	00000a20 	.word	0x00000a20
  40929c:	206f614e 	.word	0x206f614e
  4092a0:	67656863 	.word	0x67656863
  4092a4:	7520756f 	.word	0x7520756f
  4092a8:	6f6e206d 	.word	0x6f6e206d
  4092ac:	64206f76 	.word	0x64206f76
  4092b0:	206f6461 	.word	0x206f6461
  4092b4:	31206d65 	.word	0x31206d65
  4092b8:	67657320 	.word	0x67657320
  4092bc:	6f646e75 	.word	0x6f646e75
  4092c0:	20787620 	.word	0x20787620
  4092c4:	00000000 	.word	0x00000000
  4092c8:	6b736154 	.word	0x6b736154
  4092cc:	756c4220 	.word	0x756c4220
  4092d0:	6f6f7465 	.word	0x6f6f7465
  4092d4:	73206874 	.word	0x73206874
  4092d8:	74726174 	.word	0x74726174
  4092dc:	00206465 	.word	0x00206465
  4092e0:	63696e49 	.word	0x63696e49
  4092e4:	696c6169 	.word	0x696c6169
  4092e8:	646e617a 	.word	0x646e617a
  4092ec:	4348206f 	.word	0x4348206f
  4092f0:	00203530 	.word	0x00203530
  4092f4:	25203a58 	.word	0x25203a58
  4092f8:	000a2064 	.word	0x000a2064
  4092fc:	25203a59 	.word	0x25203a59
  409300:	000a2064 	.word	0x000a2064
  409304:	63617473 	.word	0x63617473
  409308:	766f206b 	.word	0x766f206b
  40930c:	6c667265 	.word	0x6c667265
  409310:	2520776f 	.word	0x2520776f
  409314:	73252078 	.word	0x73252078
  409318:	00000a0d 	.word	0x00000a0d

0040931c <_global_impure_ptr>:
  40931c:	20400010 0000000a 00464e49 00666e69     ..@ ....INF.inf.
  40932c:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  40933c:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  40934c:	37363534 62613938 66656463 00000000     456789abcdef....
  40935c:	6c756e28 0000296c 00000030              (null)..0...

00409368 <blanks.7238>:
  409368:	20202020 20202020 20202020 20202020                     

00409378 <zeroes.7239>:
  409378:	30303030 30303030 30303030 30303030     0000000000000000
  409388:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00409398 <__mprec_bigtens>:
  409398:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4093a8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4093b8:	7f73bf3c 75154fdd                       <.s..O.u

004093c0 <__mprec_tens>:
  4093c0:	00000000 3ff00000 00000000 40240000     .......?......$@
  4093d0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4093e0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4093f0:	00000000 412e8480 00000000 416312d0     .......A......cA
  409400:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409410:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409420:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409430:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409440:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409450:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409460:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  409470:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  409480:	79d99db4 44ea7843                       ...yCx.D

00409488 <p05.6055>:
  409488:	00000005 00000019 0000007d 00000043     ........}...C...
  409498:	49534f50 00000058 0000002e              POSIX.......

004094a4 <_ctype_>:
  4094a4:	20202000 20202020 28282020 20282828     .         ((((( 
  4094b4:	20202020 20202020 20202020 20202020                     
  4094c4:	10108820 10101010 10101010 10101010      ...............
  4094d4:	04040410 04040404 10040404 10101010     ................
  4094e4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4094f4:	01010101 01010101 01010101 10101010     ................
  409504:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409514:	02020202 02020202 02020202 10101010     ................
  409524:	00000020 00000000 00000000 00000000      ...............
	...

004095a8 <_init>:
  4095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4095aa:	bf00      	nop
  4095ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4095ae:	bc08      	pop	{r3}
  4095b0:	469e      	mov	lr, r3
  4095b2:	4770      	bx	lr

004095b4 <__init_array_start>:
  4095b4:	00406341 	.word	0x00406341

004095b8 <__frame_dummy_init_array_entry>:
  4095b8:	00400165                                e.@.

004095bc <_fini>:
  4095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4095be:	bf00      	nop
  4095c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4095c2:	bc08      	pop	{r3}
  4095c4:	469e      	mov	lr, r3
  4095c6:	4770      	bx	lr

004095c8 <__fini_array_start>:
  4095c8:	00400141 	.word	0x00400141
