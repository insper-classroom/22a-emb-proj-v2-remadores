
RTOS-BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000951c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040951c  0040951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00409524  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000314  204009b8  00409edc  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400ccc  0040a1f0  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402cd0  0040c1f4  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   000239cb  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004865  00000000  00000000  0004440a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a6dd  00000000  00000000  00048c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001040  00000000  00000000  0005334c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001210  00000000  00000000  0005438c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002318a  00000000  00000000  0005559c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012fdc  00000000  00000000  00078726  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00094d86  00000000  00000000  0008b702  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003a64  00000000  00000000  00120488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d0 2c 40 20 91 0e 40 00 8f 0e 40 00 8f 0e 40 00     .,@ ..@...@...@.
  400010:	8f 0e 40 00 8f 0e 40 00 8f 0e 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	69 12 40 00 8f 0e 40 00 00 00 00 00 09 13 40 00     i.@...@.......@.
  40003c:	71 13 40 00 8f 0e 40 00 8f 0e 40 00 8f 0e 40 00     q.@...@...@...@.
  40004c:	8f 0e 40 00 8f 0e 40 00 8f 0e 40 00 8f 0e 40 00     ..@...@...@...@.
  40005c:	8f 0e 40 00 8f 0e 40 00 00 00 00 00 cd 0a 40 00     ..@...@.......@.
  40006c:	e1 0a 40 00 f5 0a 40 00 8f 0e 40 00 8f 0e 40 00     ..@...@...@...@.
  40007c:	8f 0e 40 00 09 0b 40 00 1d 0b 40 00 8f 0e 40 00     ..@...@...@...@.
  40008c:	8f 0e 40 00 8f 0e 40 00 8f 0e 40 00 8f 0e 40 00     ..@...@...@...@.
  40009c:	8f 0e 40 00 25 34 40 00 8f 0e 40 00 8f 0e 40 00     ..@.%4@...@...@.
  4000ac:	8f 0e 40 00 8f 0e 40 00 8d 07 40 00 8f 0e 40 00     ..@...@...@...@.
  4000bc:	8f 0e 40 00 8f 0e 40 00 8f 0e 40 00 8f 0e 40 00     ..@...@...@...@.
  4000cc:	8f 0e 40 00 00 00 00 00 8f 0e 40 00 00 00 00 00     ..@.......@.....
  4000dc:	8f 0e 40 00 a1 07 40 00 8f 0e 40 00 8f 0e 40 00     ..@...@...@...@.
  4000ec:	8f 0e 40 00 8f 0e 40 00 8f 0e 40 00 8f 0e 40 00     ..@...@...@...@.
  4000fc:	8f 0e 40 00 8f 0e 40 00 8f 0e 40 00 8f 0e 40 00     ..@...@...@...@.
  40010c:	8f 0e 40 00 8f 0e 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 8f 0e 40 00 8f 0e 40 00 8f 0e 40 00     ......@...@...@.
  40012c:	8f 0e 40 00 8f 0e 40 00 00 00 00 00 8f 0e 40 00     ..@...@.......@.
  40013c:	8f 0e 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	00409524 	.word	0x00409524

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409524 	.word	0x00409524
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	00409524 	.word	0x00409524
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00401065 	.word	0x00401065
  4001f8:	00400bcd 	.word	0x00400bcd
  4001fc:	00400c21 	.word	0x00400c21
  400200:	00400c31 	.word	0x00400c31
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400c41 	.word	0x00400c41
  400210:	00400b31 	.word	0x00400b31
  400214:	00400b69 	.word	0x00400b69
  400218:	00400f59 	.word	0x00400f59

0040021c <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  40021c:	2a00      	cmp	r2, #0
  40021e:	d054      	beq.n	4002ca <usart_serial_write_packet+0xae>
{
  400220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400224:	4692      	mov	sl, r2
  400226:	4606      	mov	r6, r0
  400228:	460f      	mov	r7, r1
  40022a:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40022c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4002e8 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  400230:	4d27      	ldr	r5, [pc, #156]	; (4002d0 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400232:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4002ec <usart_serial_write_packet+0xd0>
  400236:	e006      	b.n	400246 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400238:	4621      	mov	r1, r4
  40023a:	4640      	mov	r0, r8
  40023c:	47a8      	blx	r5
  40023e:	2800      	cmp	r0, #0
  400240:	d1fa      	bne.n	400238 <usart_serial_write_packet+0x1c>
	while (len) {
  400242:	45ba      	cmp	sl, r7
  400244:	d03e      	beq.n	4002c4 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  400246:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  40024a:	4546      	cmp	r6, r8
  40024c:	d0f4      	beq.n	400238 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40024e:	454e      	cmp	r6, r9
  400250:	d016      	beq.n	400280 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400252:	4b20      	ldr	r3, [pc, #128]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400254:	429e      	cmp	r6, r3
  400256:	d019      	beq.n	40028c <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400258:	4b1f      	ldr	r3, [pc, #124]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40025a:	429e      	cmp	r6, r3
  40025c:	d01c      	beq.n	400298 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40025e:	4b1f      	ldr	r3, [pc, #124]	; (4002dc <usart_serial_write_packet+0xc0>)
  400260:	429e      	cmp	r6, r3
  400262:	d01f      	beq.n	4002a4 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400264:	4b1e      	ldr	r3, [pc, #120]	; (4002e0 <usart_serial_write_packet+0xc4>)
  400266:	429e      	cmp	r6, r3
  400268:	d024      	beq.n	4002b4 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40026a:	4b1e      	ldr	r3, [pc, #120]	; (4002e4 <usart_serial_write_packet+0xc8>)
  40026c:	429e      	cmp	r6, r3
  40026e:	d1e8      	bne.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400270:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4002f0 <usart_serial_write_packet+0xd4>
  400274:	4621      	mov	r1, r4
  400276:	481b      	ldr	r0, [pc, #108]	; (4002e4 <usart_serial_write_packet+0xc8>)
  400278:	47d8      	blx	fp
  40027a:	2800      	cmp	r0, #0
  40027c:	d1fa      	bne.n	400274 <usart_serial_write_packet+0x58>
  40027e:	e7e0      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400280:	4621      	mov	r1, r4
  400282:	4648      	mov	r0, r9
  400284:	47a8      	blx	r5
  400286:	2800      	cmp	r0, #0
  400288:	d1fa      	bne.n	400280 <usart_serial_write_packet+0x64>
  40028a:	e7da      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40028c:	4621      	mov	r1, r4
  40028e:	4811      	ldr	r0, [pc, #68]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400290:	47a8      	blx	r5
  400292:	2800      	cmp	r0, #0
  400294:	d1fa      	bne.n	40028c <usart_serial_write_packet+0x70>
  400296:	e7d4      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400298:	4621      	mov	r1, r4
  40029a:	480f      	ldr	r0, [pc, #60]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40029c:	47a8      	blx	r5
  40029e:	2800      	cmp	r0, #0
  4002a0:	d1fa      	bne.n	400298 <usart_serial_write_packet+0x7c>
  4002a2:	e7ce      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002a4:	f8df b048 	ldr.w	fp, [pc, #72]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002a8:	4621      	mov	r1, r4
  4002aa:	480c      	ldr	r0, [pc, #48]	; (4002dc <usart_serial_write_packet+0xc0>)
  4002ac:	47d8      	blx	fp
  4002ae:	2800      	cmp	r0, #0
  4002b0:	d1fa      	bne.n	4002a8 <usart_serial_write_packet+0x8c>
  4002b2:	e7c6      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002b4:	f8df b038 	ldr.w	fp, [pc, #56]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002b8:	4621      	mov	r1, r4
  4002ba:	4809      	ldr	r0, [pc, #36]	; (4002e0 <usart_serial_write_packet+0xc4>)
  4002bc:	47d8      	blx	fp
  4002be:	2800      	cmp	r0, #0
  4002c0:	d1fa      	bne.n	4002b8 <usart_serial_write_packet+0x9c>
  4002c2:	e7be      	b.n	400242 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  4002c4:	2000      	movs	r0, #0
  4002c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002ca:	2000      	movs	r0, #0
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop
  4002d0:	00400d4f 	.word	0x00400d4f
  4002d4:	400e1a00 	.word	0x400e1a00
  4002d8:	400e1c00 	.word	0x400e1c00
  4002dc:	40024000 	.word	0x40024000
  4002e0:	40028000 	.word	0x40028000
  4002e4:	4002c000 	.word	0x4002c000
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	400e0a00 	.word	0x400e0a00
  4002f0:	00400e61 	.word	0x00400e61

004002f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4002f8:	b980      	cbnz	r0, 40031c <_read+0x28>
  4002fa:	460c      	mov	r4, r1
  4002fc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4002fe:	2a00      	cmp	r2, #0
  400300:	dd0f      	ble.n	400322 <_read+0x2e>
  400302:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400304:	4e08      	ldr	r6, [pc, #32]	; (400328 <_read+0x34>)
  400306:	4d09      	ldr	r5, [pc, #36]	; (40032c <_read+0x38>)
  400308:	6830      	ldr	r0, [r6, #0]
  40030a:	4621      	mov	r1, r4
  40030c:	682b      	ldr	r3, [r5, #0]
  40030e:	4798      	blx	r3
		ptr++;
  400310:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400312:	42bc      	cmp	r4, r7
  400314:	d1f8      	bne.n	400308 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400316:	4640      	mov	r0, r8
  400318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40031c:	f04f 38ff 	mov.w	r8, #4294967295
  400320:	e7f9      	b.n	400316 <_read+0x22>
	for (; len > 0; --len) {
  400322:	4680      	mov	r8, r0
  400324:	e7f7      	b.n	400316 <_read+0x22>
  400326:	bf00      	nop
  400328:	20400bd4 	.word	0x20400bd4
  40032c:	20400bcc 	.word	0x20400bcc

00400330 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400330:	3801      	subs	r0, #1
  400332:	2802      	cmp	r0, #2
  400334:	d815      	bhi.n	400362 <_write+0x32>
{
  400336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40033a:	460e      	mov	r6, r1
  40033c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40033e:	b19a      	cbz	r2, 400368 <_write+0x38>
  400340:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400342:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40037c <_write+0x4c>
  400346:	4f0c      	ldr	r7, [pc, #48]	; (400378 <_write+0x48>)
  400348:	f8d8 0000 	ldr.w	r0, [r8]
  40034c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400350:	683b      	ldr	r3, [r7, #0]
  400352:	4798      	blx	r3
  400354:	2800      	cmp	r0, #0
  400356:	db0a      	blt.n	40036e <_write+0x3e>
  400358:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40035a:	3c01      	subs	r4, #1
  40035c:	d1f4      	bne.n	400348 <_write+0x18>
  40035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400362:	f04f 30ff 	mov.w	r0, #4294967295
  400366:	4770      	bx	lr
	for (; len != 0; --len) {
  400368:	4610      	mov	r0, r2
  40036a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40036e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400376:	bf00      	nop
  400378:	20400bd0 	.word	0x20400bd0
  40037c:	20400bd4 	.word	0x20400bd4

00400380 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400382:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400386:	4b5c      	ldr	r3, [pc, #368]	; (4004f8 <board_init+0x178>)
  400388:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40038e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400392:	4b5a      	ldr	r3, [pc, #360]	; (4004fc <board_init+0x17c>)
  400394:	2200      	movs	r2, #0
  400396:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40039a:	695a      	ldr	r2, [r3, #20]
  40039c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4003a0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4003a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003a6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4003aa:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4003ae:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4003b2:	f007 0007 	and.w	r0, r7, #7
  4003b6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4003b8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4003bc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4003c0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4003c4:	f3bf 8f4f 	dsb	sy
  4003c8:	f04f 34ff 	mov.w	r4, #4294967295
  4003cc:	fa04 fc00 	lsl.w	ip, r4, r0
  4003d0:	fa06 f000 	lsl.w	r0, r6, r0
  4003d4:	fa04 f40e 	lsl.w	r4, r4, lr
  4003d8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4003dc:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4003de:	463a      	mov	r2, r7
  4003e0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4003e2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4003e6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4003ea:	3a01      	subs	r2, #1
  4003ec:	4423      	add	r3, r4
  4003ee:	f1b2 3fff 	cmp.w	r2, #4294967295
  4003f2:	d1f6      	bne.n	4003e2 <board_init+0x62>
        } while(sets--);
  4003f4:	3e01      	subs	r6, #1
  4003f6:	4460      	add	r0, ip
  4003f8:	f1b6 3fff 	cmp.w	r6, #4294967295
  4003fc:	d1ef      	bne.n	4003de <board_init+0x5e>
  4003fe:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400402:	4b3e      	ldr	r3, [pc, #248]	; (4004fc <board_init+0x17c>)
  400404:	695a      	ldr	r2, [r3, #20]
  400406:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40040a:	615a      	str	r2, [r3, #20]
  40040c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400410:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400414:	4a3a      	ldr	r2, [pc, #232]	; (400500 <board_init+0x180>)
  400416:	493b      	ldr	r1, [pc, #236]	; (400504 <board_init+0x184>)
  400418:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40041a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40041e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400424:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400428:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40042c:	f022 0201 	bic.w	r2, r2, #1
  400430:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400434:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400438:	f022 0201 	bic.w	r2, r2, #1
  40043c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400444:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400448:	200a      	movs	r0, #10
  40044a:	4c2f      	ldr	r4, [pc, #188]	; (400508 <board_init+0x188>)
  40044c:	47a0      	blx	r4
  40044e:	200b      	movs	r0, #11
  400450:	47a0      	blx	r4
  400452:	200c      	movs	r0, #12
  400454:	47a0      	blx	r4
  400456:	2010      	movs	r0, #16
  400458:	47a0      	blx	r4
  40045a:	2011      	movs	r0, #17
  40045c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40045e:	4b2b      	ldr	r3, [pc, #172]	; (40050c <board_init+0x18c>)
  400460:	f44f 7280 	mov.w	r2, #256	; 0x100
  400464:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40046a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40046c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400470:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400474:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400476:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40047a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40047c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400480:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400482:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400488:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40048a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40048e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400490:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400492:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400496:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400498:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40049c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4004a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4004a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004b8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004c0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004c4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004c6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4004c8:	4a11      	ldr	r2, [pc, #68]	; (400510 <board_init+0x190>)
  4004ca:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004ce:	f043 0310 	orr.w	r3, r3, #16
  4004d2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <board_init+0x194>)
  4004d8:	2210      	movs	r2, #16
  4004da:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004e0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004e2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4004e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004ea:	4311      	orrs	r1, r2
  4004ec:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4004ee:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004f0:	4311      	orrs	r1, r2
  4004f2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004f4:	605a      	str	r2, [r3, #4]
  4004f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004f8:	400e1850 	.word	0x400e1850
  4004fc:	e000ed00 	.word	0xe000ed00
  400500:	400e0c00 	.word	0x400e0c00
  400504:	5a00080c 	.word	0x5a00080c
  400508:	00400c51 	.word	0x00400c51
  40050c:	400e1200 	.word	0x400e1200
  400510:	40088000 	.word	0x40088000
  400514:	400e1000 	.word	0x400e1000

00400518 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400518:	b570      	push	{r4, r5, r6, lr}
  40051a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40051c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40051e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400520:	4013      	ands	r3, r2
  400522:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400524:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400526:	4e1c      	ldr	r6, [pc, #112]	; (400598 <afec_process_callback+0x80>)
  400528:	4d1c      	ldr	r5, [pc, #112]	; (40059c <afec_process_callback+0x84>)
  40052a:	42a8      	cmp	r0, r5
  40052c:	bf14      	ite	ne
  40052e:	2000      	movne	r0, #0
  400530:	2001      	moveq	r0, #1
  400532:	0105      	lsls	r5, r0, #4
  400534:	e00b      	b.n	40054e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400536:	2c0e      	cmp	r4, #14
  400538:	d81e      	bhi.n	400578 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40053a:	9a01      	ldr	r2, [sp, #4]
  40053c:	f104 010c 	add.w	r1, r4, #12
  400540:	2301      	movs	r3, #1
  400542:	408b      	lsls	r3, r1
  400544:	4213      	tst	r3, r2
  400546:	d110      	bne.n	40056a <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400548:	3401      	adds	r4, #1
  40054a:	2c10      	cmp	r4, #16
  40054c:	d022      	beq.n	400594 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40054e:	2c0b      	cmp	r4, #11
  400550:	d8f1      	bhi.n	400536 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400552:	9a01      	ldr	r2, [sp, #4]
  400554:	2301      	movs	r3, #1
  400556:	40a3      	lsls	r3, r4
  400558:	4213      	tst	r3, r2
  40055a:	d0f5      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40055c:	192b      	adds	r3, r5, r4
  40055e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400562:	2b00      	cmp	r3, #0
  400564:	d0f0      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400566:	4798      	blx	r3
  400568:	e7ee      	b.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40056a:	192b      	adds	r3, r5, r4
  40056c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400570:	2b00      	cmp	r3, #0
  400572:	d0e9      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400574:	4798      	blx	r3
  400576:	e7e7      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400578:	9a01      	ldr	r2, [sp, #4]
  40057a:	f104 010f 	add.w	r1, r4, #15
  40057e:	2301      	movs	r3, #1
  400580:	408b      	lsls	r3, r1
  400582:	4213      	tst	r3, r2
  400584:	d0e0      	beq.n	400548 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400586:	192b      	adds	r3, r5, r4
  400588:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40058c:	2b00      	cmp	r3, #0
  40058e:	d0db      	beq.n	400548 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400590:	4798      	blx	r3
  400592:	e7d9      	b.n	400548 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400594:	b002      	add	sp, #8
  400596:	bd70      	pop	{r4, r5, r6, pc}
  400598:	20400bd8 	.word	0x20400bd8
  40059c:	40064000 	.word	0x40064000

004005a0 <afec_ch_set_config>:
{
  4005a0:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4005a2:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4005a4:	2301      	movs	r3, #1
  4005a6:	408b      	lsls	r3, r1
  4005a8:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4005ac:	7815      	ldrb	r5, [r2, #0]
  4005ae:	2d00      	cmp	r5, #0
  4005b0:	bf08      	it	eq
  4005b2:	2300      	moveq	r3, #0
  4005b4:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4005b6:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4005b8:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4005ba:	004b      	lsls	r3, r1, #1
  4005bc:	2103      	movs	r1, #3
  4005be:	4099      	lsls	r1, r3
  4005c0:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  4005c4:	7851      	ldrb	r1, [r2, #1]
  4005c6:	4099      	lsls	r1, r3
  4005c8:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4005ca:	6541      	str	r1, [r0, #84]	; 0x54
}
  4005cc:	bc30      	pop	{r4, r5}
  4005ce:	4770      	bx	lr

004005d0 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4005d0:	784b      	ldrb	r3, [r1, #1]
  4005d2:	780a      	ldrb	r2, [r1, #0]
  4005d4:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  4005d6:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4005d8:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4005da:	884b      	ldrh	r3, [r1, #2]
  4005dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4005e0:	6743      	str	r3, [r0, #116]	; 0x74
  4005e2:	4770      	bx	lr

004005e4 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4005e4:	2200      	movs	r2, #0
  4005e6:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4005e8:	4b08      	ldr	r3, [pc, #32]	; (40060c <afec_get_config_defaults+0x28>)
  4005ea:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4005ec:	4b08      	ldr	r3, [pc, #32]	; (400610 <afec_get_config_defaults+0x2c>)
  4005ee:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4005f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4005f4:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4005f6:	2302      	movs	r3, #2
  4005f8:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4005fa:	2301      	movs	r3, #1
  4005fc:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4005fe:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400600:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400602:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400604:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  400606:	7583      	strb	r3, [r0, #22]
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	11e1a300 	.word	0x11e1a300
  400610:	005b8d80 	.word	0x005b8d80

00400614 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400614:	2300      	movs	r3, #0
  400616:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400618:	2301      	movs	r3, #1
  40061a:	7043      	strb	r3, [r0, #1]
  40061c:	4770      	bx	lr

0040061e <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  40061e:	2300      	movs	r3, #0
  400620:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400622:	2320      	movs	r3, #32
  400624:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  400626:	23ff      	movs	r3, #255	; 0xff
  400628:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  40062a:	f640 73ff 	movw	r3, #4095	; 0xfff
  40062e:	8083      	strh	r3, [r0, #4]
  400630:	4770      	bx	lr
	...

00400634 <afec_init>:
	return afec->AFEC_ISR;
  400634:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400636:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  40063a:	d001      	beq.n	400640 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40063c:	2019      	movs	r0, #25
  40063e:	4770      	bx	lr
{
  400640:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400642:	2301      	movs	r3, #1
  400644:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400646:	7ccb      	ldrb	r3, [r1, #19]
  400648:	2b00      	cmp	r3, #0
  40064a:	bf18      	it	ne
  40064c:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  400650:	684b      	ldr	r3, [r1, #4]
  400652:	688c      	ldr	r4, [r1, #8]
  400654:	fbb3 f3f4 	udiv	r3, r3, r4
  400658:	3b01      	subs	r3, #1
  40065a:	021b      	lsls	r3, r3, #8
  40065c:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40065e:	68cc      	ldr	r4, [r1, #12]
  400660:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400664:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400666:	7c0c      	ldrb	r4, [r1, #16]
  400668:	0624      	lsls	r4, r4, #24
  40066a:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40066e:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400670:	7c4c      	ldrb	r4, [r1, #17]
  400672:	0724      	lsls	r4, r4, #28
  400674:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400678:	4323      	orrs	r3, r4
  40067a:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  40067c:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40067e:	7d0b      	ldrb	r3, [r1, #20]
  400680:	2b00      	cmp	r3, #0
  400682:	bf14      	ite	ne
  400684:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400688:	2300      	moveq	r3, #0
  40068a:	680a      	ldr	r2, [r1, #0]
  40068c:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40068e:	7d4a      	ldrb	r2, [r1, #21]
  400690:	2a00      	cmp	r2, #0
  400692:	bf14      	ite	ne
  400694:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400698:	2200      	moveq	r2, #0
			(config->resolution) |
  40069a:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40069c:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40069e:	7d8b      	ldrb	r3, [r1, #22]
  4006a0:	021b      	lsls	r3, r3, #8
  4006a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4006a6:	f043 030c 	orr.w	r3, r3, #12
  4006aa:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4006ae:	4b0f      	ldr	r3, [pc, #60]	; (4006ec <afec_init+0xb8>)
  4006b0:	4298      	cmp	r0, r3
  4006b2:	d006      	beq.n	4006c2 <afec_init+0x8e>
	if(afec == AFEC1) {
  4006b4:	4b0e      	ldr	r3, [pc, #56]	; (4006f0 <afec_init+0xbc>)
  4006b6:	4298      	cmp	r0, r3
  4006b8:	d00d      	beq.n	4006d6 <afec_init+0xa2>
	return STATUS_OK;
  4006ba:	2000      	movs	r0, #0
}
  4006bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006c0:	4770      	bx	lr
  4006c2:	4b0c      	ldr	r3, [pc, #48]	; (4006f4 <afec_init+0xc0>)
  4006c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  4006c8:	2200      	movs	r2, #0
  4006ca:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006ce:	428b      	cmp	r3, r1
  4006d0:	d1fb      	bne.n	4006ca <afec_init+0x96>
	return STATUS_OK;
  4006d2:	2000      	movs	r0, #0
  4006d4:	e7f2      	b.n	4006bc <afec_init+0x88>
  4006d6:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <afec_init+0xc4>)
  4006d8:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  4006dc:	2200      	movs	r2, #0
  4006de:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4006e2:	428b      	cmp	r3, r1
  4006e4:	d1fb      	bne.n	4006de <afec_init+0xaa>
	return STATUS_OK;
  4006e6:	2000      	movs	r0, #0
  4006e8:	e7e8      	b.n	4006bc <afec_init+0x88>
  4006ea:	bf00      	nop
  4006ec:	4003c000 	.word	0x4003c000
  4006f0:	40064000 	.word	0x40064000
  4006f4:	20400bd4 	.word	0x20400bd4
  4006f8:	20400c18 	.word	0x20400c18

004006fc <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4006fc:	4b0c      	ldr	r3, [pc, #48]	; (400730 <afec_enable_interrupt+0x34>)
  4006fe:	4299      	cmp	r1, r3
  400700:	d007      	beq.n	400712 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400702:	290b      	cmp	r1, #11
  400704:	d80b      	bhi.n	40071e <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  400706:	d006      	beq.n	400716 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  400708:	2301      	movs	r3, #1
  40070a:	fa03 f101 	lsl.w	r1, r3, r1
  40070e:	6241      	str	r1, [r0, #36]	; 0x24
  400710:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  400712:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  400714:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  400716:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40071a:	6243      	str	r3, [r0, #36]	; 0x24
  40071c:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  40071e:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  400720:	bf94      	ite	ls
  400722:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  400724:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  400726:	2301      	movs	r3, #1
  400728:	fa03 f101 	lsl.w	r1, r3, r1
  40072c:	6241      	str	r1, [r0, #36]	; 0x24
  40072e:	4770      	bx	lr
  400730:	47000fff 	.word	0x47000fff

00400734 <afec_set_callback>:
{
  400734:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  400736:	4c11      	ldr	r4, [pc, #68]	; (40077c <afec_set_callback+0x48>)
  400738:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  40073a:	bf0c      	ite	eq
  40073c:	2410      	moveq	r4, #16
  40073e:	2400      	movne	r4, #0
  400740:	440c      	add	r4, r1
  400742:	4d0f      	ldr	r5, [pc, #60]	; (400780 <afec_set_callback+0x4c>)
  400744:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400748:	d10a      	bne.n	400760 <afec_set_callback+0x2c>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40074a:	4a0e      	ldr	r2, [pc, #56]	; (400784 <afec_set_callback+0x50>)
  40074c:	f44f 7480 	mov.w	r4, #256	; 0x100
  400750:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400754:	015b      	lsls	r3, r3, #5
  400756:	b2db      	uxtb	r3, r3
  400758:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40075c:	6054      	str	r4, [r2, #4]
  40075e:	e009      	b.n	400774 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400760:	4a08      	ldr	r2, [pc, #32]	; (400784 <afec_set_callback+0x50>)
  400762:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400766:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40076a:	015b      	lsls	r3, r3, #5
  40076c:	b2db      	uxtb	r3, r3
  40076e:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400772:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400774:	4b04      	ldr	r3, [pc, #16]	; (400788 <afec_set_callback+0x54>)
  400776:	4798      	blx	r3
  400778:	bd38      	pop	{r3, r4, r5, pc}
  40077a:	bf00      	nop
  40077c:	40064000 	.word	0x40064000
  400780:	20400bd8 	.word	0x20400bd8
  400784:	e000e100 	.word	0xe000e100
  400788:	004006fd 	.word	0x004006fd

0040078c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40078c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40078e:	4802      	ldr	r0, [pc, #8]	; (400798 <AFEC0_Handler+0xc>)
  400790:	4b02      	ldr	r3, [pc, #8]	; (40079c <AFEC0_Handler+0x10>)
  400792:	4798      	blx	r3
  400794:	bd08      	pop	{r3, pc}
  400796:	bf00      	nop
  400798:	4003c000 	.word	0x4003c000
  40079c:	00400519 	.word	0x00400519

004007a0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4007a0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4007a2:	4802      	ldr	r0, [pc, #8]	; (4007ac <AFEC1_Handler+0xc>)
  4007a4:	4b02      	ldr	r3, [pc, #8]	; (4007b0 <AFEC1_Handler+0x10>)
  4007a6:	4798      	blx	r3
  4007a8:	bd08      	pop	{r3, pc}
  4007aa:	bf00      	nop
  4007ac:	40064000 	.word	0x40064000
  4007b0:	00400519 	.word	0x00400519

004007b4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4007b4:	b500      	push	{lr}
  4007b6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4007b8:	4b13      	ldr	r3, [pc, #76]	; (400808 <afec_enable+0x54>)
  4007ba:	4298      	cmp	r0, r3
  4007bc:	bf0c      	ite	eq
  4007be:	2028      	moveq	r0, #40	; 0x28
  4007c0:	201d      	movne	r0, #29
  4007c2:	4b12      	ldr	r3, [pc, #72]	; (40080c <afec_enable+0x58>)
  4007c4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4007c6:	4b12      	ldr	r3, [pc, #72]	; (400810 <afec_enable+0x5c>)
  4007c8:	789b      	ldrb	r3, [r3, #2]
  4007ca:	2bff      	cmp	r3, #255	; 0xff
  4007cc:	d01a      	beq.n	400804 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4007ce:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4007d2:	fab3 f383 	clz	r3, r3
  4007d6:	095b      	lsrs	r3, r3, #5
  4007d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4007da:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4007dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4007e0:	2200      	movs	r2, #0
  4007e2:	4b0c      	ldr	r3, [pc, #48]	; (400814 <afec_enable+0x60>)
  4007e4:	701a      	strb	r2, [r3, #0]
	return flags;
  4007e6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4007e8:	4a09      	ldr	r2, [pc, #36]	; (400810 <afec_enable+0x5c>)
  4007ea:	7893      	ldrb	r3, [r2, #2]
  4007ec:	3301      	adds	r3, #1
  4007ee:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007f0:	b129      	cbz	r1, 4007fe <afec_enable+0x4a>
		cpu_irq_enable();
  4007f2:	2201      	movs	r2, #1
  4007f4:	4b07      	ldr	r3, [pc, #28]	; (400814 <afec_enable+0x60>)
  4007f6:	701a      	strb	r2, [r3, #0]
  4007f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007fc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4007fe:	b003      	add	sp, #12
  400800:	f85d fb04 	ldr.w	pc, [sp], #4
  400804:	e7fe      	b.n	400804 <afec_enable+0x50>
  400806:	bf00      	nop
  400808:	40064000 	.word	0x40064000
  40080c:	00400c51 	.word	0x00400c51
  400810:	20400bc4 	.word	0x20400bc4
  400814:	20400000 	.word	0x20400000

00400818 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400818:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40081c:	0053      	lsls	r3, r2, #1
  40081e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400822:	fbb2 f2f3 	udiv	r2, r2, r3
  400826:	3a01      	subs	r2, #1
  400828:	f3c2 020d 	ubfx	r2, r2, #0, #14
  40082c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400830:	4770      	bx	lr

00400832 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400832:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400836:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40083a:	d105      	bne.n	400848 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  40083c:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  40083e:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400840:	bf14      	ite	ne
  400842:	2001      	movne	r0, #1
  400844:	2000      	moveq	r0, #0
  400846:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400848:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  40084a:	e7f8      	b.n	40083e <pio_get+0xc>

0040084c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40084c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40084e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400852:	d03a      	beq.n	4008ca <pio_set_peripheral+0x7e>
  400854:	d813      	bhi.n	40087e <pio_set_peripheral+0x32>
  400856:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40085a:	d025      	beq.n	4008a8 <pio_set_peripheral+0x5c>
  40085c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400860:	d10a      	bne.n	400878 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400862:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400864:	4313      	orrs	r3, r2
  400866:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400868:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40086a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40086c:	400b      	ands	r3, r1
  40086e:	ea23 0302 	bic.w	r3, r3, r2
  400872:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400874:	6042      	str	r2, [r0, #4]
  400876:	4770      	bx	lr
	switch (ul_type) {
  400878:	2900      	cmp	r1, #0
  40087a:	d1fb      	bne.n	400874 <pio_set_peripheral+0x28>
  40087c:	4770      	bx	lr
  40087e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400882:	d021      	beq.n	4008c8 <pio_set_peripheral+0x7c>
  400884:	d809      	bhi.n	40089a <pio_set_peripheral+0x4e>
  400886:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40088a:	d1f3      	bne.n	400874 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40088c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40088e:	4313      	orrs	r3, r2
  400890:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400892:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400894:	4313      	orrs	r3, r2
  400896:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400898:	e7ec      	b.n	400874 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40089a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40089e:	d013      	beq.n	4008c8 <pio_set_peripheral+0x7c>
  4008a0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4008a4:	d010      	beq.n	4008c8 <pio_set_peripheral+0x7c>
  4008a6:	e7e5      	b.n	400874 <pio_set_peripheral+0x28>
{
  4008a8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008aa:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008ac:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4008ae:	43d3      	mvns	r3, r2
  4008b0:	4021      	ands	r1, r4
  4008b2:	461c      	mov	r4, r3
  4008b4:	4019      	ands	r1, r3
  4008b6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008b8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4008ba:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4008bc:	400b      	ands	r3, r1
  4008be:	4023      	ands	r3, r4
  4008c0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4008c2:	6042      	str	r2, [r0, #4]
}
  4008c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008c8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4008ca:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4008cc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4008ce:	400b      	ands	r3, r1
  4008d0:	ea23 0302 	bic.w	r3, r3, r2
  4008d4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4008d6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4008d8:	4313      	orrs	r3, r2
  4008da:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4008dc:	e7ca      	b.n	400874 <pio_set_peripheral+0x28>

004008de <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4008de:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4008e0:	f012 0f01 	tst.w	r2, #1
  4008e4:	d10d      	bne.n	400902 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4008e6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4008e8:	f012 0f0a 	tst.w	r2, #10
  4008ec:	d00b      	beq.n	400906 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4008ee:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4008f0:	f012 0f02 	tst.w	r2, #2
  4008f4:	d109      	bne.n	40090a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4008f6:	f012 0f08 	tst.w	r2, #8
  4008fa:	d008      	beq.n	40090e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4008fc:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400900:	e005      	b.n	40090e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400902:	6641      	str	r1, [r0, #100]	; 0x64
  400904:	e7f0      	b.n	4008e8 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400906:	6241      	str	r1, [r0, #36]	; 0x24
  400908:	e7f2      	b.n	4008f0 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40090a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40090e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400910:	6001      	str	r1, [r0, #0]
  400912:	4770      	bx	lr

00400914 <pio_set_output>:
{
  400914:	b410      	push	{r4}
  400916:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400918:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40091a:	b94c      	cbnz	r4, 400930 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40091c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40091e:	b14b      	cbz	r3, 400934 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400920:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400922:	b94a      	cbnz	r2, 400938 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400924:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400926:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400928:	6001      	str	r1, [r0, #0]
}
  40092a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40092e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400930:	6641      	str	r1, [r0, #100]	; 0x64
  400932:	e7f4      	b.n	40091e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400934:	6541      	str	r1, [r0, #84]	; 0x54
  400936:	e7f4      	b.n	400922 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400938:	6301      	str	r1, [r0, #48]	; 0x30
  40093a:	e7f4      	b.n	400926 <pio_set_output+0x12>

0040093c <pio_configure>:
{
  40093c:	b570      	push	{r4, r5, r6, lr}
  40093e:	b082      	sub	sp, #8
  400940:	4605      	mov	r5, r0
  400942:	4616      	mov	r6, r2
  400944:	461c      	mov	r4, r3
	switch (ul_type) {
  400946:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40094a:	d014      	beq.n	400976 <pio_configure+0x3a>
  40094c:	d90a      	bls.n	400964 <pio_configure+0x28>
  40094e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400952:	d024      	beq.n	40099e <pio_configure+0x62>
  400954:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400958:	d021      	beq.n	40099e <pio_configure+0x62>
  40095a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40095e:	d017      	beq.n	400990 <pio_configure+0x54>
		return 0;
  400960:	2000      	movs	r0, #0
  400962:	e01a      	b.n	40099a <pio_configure+0x5e>
	switch (ul_type) {
  400964:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400968:	d005      	beq.n	400976 <pio_configure+0x3a>
  40096a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40096e:	d002      	beq.n	400976 <pio_configure+0x3a>
  400970:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400974:	d1f4      	bne.n	400960 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400976:	4632      	mov	r2, r6
  400978:	4628      	mov	r0, r5
  40097a:	4b11      	ldr	r3, [pc, #68]	; (4009c0 <pio_configure+0x84>)
  40097c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40097e:	f014 0f01 	tst.w	r4, #1
  400982:	d102      	bne.n	40098a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400984:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400986:	2001      	movs	r0, #1
  400988:	e007      	b.n	40099a <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40098a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  40098c:	2001      	movs	r0, #1
  40098e:	e004      	b.n	40099a <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400990:	461a      	mov	r2, r3
  400992:	4631      	mov	r1, r6
  400994:	4b0b      	ldr	r3, [pc, #44]	; (4009c4 <pio_configure+0x88>)
  400996:	4798      	blx	r3
	return 1;
  400998:	2001      	movs	r0, #1
}
  40099a:	b002      	add	sp, #8
  40099c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40099e:	f004 0301 	and.w	r3, r4, #1
  4009a2:	9300      	str	r3, [sp, #0]
  4009a4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4009a8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4009ac:	bf14      	ite	ne
  4009ae:	2200      	movne	r2, #0
  4009b0:	2201      	moveq	r2, #1
  4009b2:	4631      	mov	r1, r6
  4009b4:	4628      	mov	r0, r5
  4009b6:	4c04      	ldr	r4, [pc, #16]	; (4009c8 <pio_configure+0x8c>)
  4009b8:	47a0      	blx	r4
	return 1;
  4009ba:	2001      	movs	r0, #1
		break;
  4009bc:	e7ed      	b.n	40099a <pio_configure+0x5e>
  4009be:	bf00      	nop
  4009c0:	0040084d 	.word	0x0040084d
  4009c4:	004008df 	.word	0x004008df
  4009c8:	00400915 	.word	0x00400915

004009cc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4009cc:	f012 0f10 	tst.w	r2, #16
  4009d0:	d012      	beq.n	4009f8 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4009d2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4009d6:	f012 0f20 	tst.w	r2, #32
  4009da:	d007      	beq.n	4009ec <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4009dc:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4009e0:	f012 0f40 	tst.w	r2, #64	; 0x40
  4009e4:	d005      	beq.n	4009f2 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4009e6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4009ea:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4009ec:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4009f0:	e7f6      	b.n	4009e0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4009f2:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4009f6:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4009f8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4009fc:	4770      	bx	lr

004009fe <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4009fe:	6401      	str	r1, [r0, #64]	; 0x40
  400a00:	4770      	bx	lr

00400a02 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400a02:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400a04:	4770      	bx	lr

00400a06 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400a06:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400a08:	4770      	bx	lr
	...

00400a0c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a10:	4604      	mov	r4, r0
  400a12:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a14:	4b0e      	ldr	r3, [pc, #56]	; (400a50 <pio_handler_process+0x44>)
  400a16:	4798      	blx	r3
  400a18:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400a1a:	4620      	mov	r0, r4
  400a1c:	4b0d      	ldr	r3, [pc, #52]	; (400a54 <pio_handler_process+0x48>)
  400a1e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400a20:	4005      	ands	r5, r0
  400a22:	d013      	beq.n	400a4c <pio_handler_process+0x40>
  400a24:	4c0c      	ldr	r4, [pc, #48]	; (400a58 <pio_handler_process+0x4c>)
  400a26:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400a2a:	e003      	b.n	400a34 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a2c:	42b4      	cmp	r4, r6
  400a2e:	d00d      	beq.n	400a4c <pio_handler_process+0x40>
  400a30:	3410      	adds	r4, #16
		while (status != 0) {
  400a32:	b15d      	cbz	r5, 400a4c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a34:	6820      	ldr	r0, [r4, #0]
  400a36:	4540      	cmp	r0, r8
  400a38:	d1f8      	bne.n	400a2c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a3a:	6861      	ldr	r1, [r4, #4]
  400a3c:	4229      	tst	r1, r5
  400a3e:	d0f5      	beq.n	400a2c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a40:	68e3      	ldr	r3, [r4, #12]
  400a42:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a44:	6863      	ldr	r3, [r4, #4]
  400a46:	ea25 0503 	bic.w	r5, r5, r3
  400a4a:	e7ef      	b.n	400a2c <pio_handler_process+0x20>
  400a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a50:	00400a03 	.word	0x00400a03
  400a54:	00400a07 	.word	0x00400a07
  400a58:	204009d4 	.word	0x204009d4

00400a5c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400a5e:	4c18      	ldr	r4, [pc, #96]	; (400ac0 <pio_handler_set+0x64>)
  400a60:	6826      	ldr	r6, [r4, #0]
  400a62:	2e06      	cmp	r6, #6
  400a64:	d82a      	bhi.n	400abc <pio_handler_set+0x60>
  400a66:	f04f 0c00 	mov.w	ip, #0
  400a6a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a6c:	4f15      	ldr	r7, [pc, #84]	; (400ac4 <pio_handler_set+0x68>)
  400a6e:	e004      	b.n	400a7a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a70:	3401      	adds	r4, #1
  400a72:	b2e4      	uxtb	r4, r4
  400a74:	46a4      	mov	ip, r4
  400a76:	42a6      	cmp	r6, r4
  400a78:	d309      	bcc.n	400a8e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400a7a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a7c:	0125      	lsls	r5, r4, #4
  400a7e:	597d      	ldr	r5, [r7, r5]
  400a80:	428d      	cmp	r5, r1
  400a82:	d1f5      	bne.n	400a70 <pio_handler_set+0x14>
  400a84:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400a88:	686d      	ldr	r5, [r5, #4]
  400a8a:	4295      	cmp	r5, r2
  400a8c:	d1f0      	bne.n	400a70 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400a8e:	4d0d      	ldr	r5, [pc, #52]	; (400ac4 <pio_handler_set+0x68>)
  400a90:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400a94:	eb05 040e 	add.w	r4, r5, lr
  400a98:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400a9c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400a9e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400aa0:	9906      	ldr	r1, [sp, #24]
  400aa2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400aa4:	3601      	adds	r6, #1
  400aa6:	4566      	cmp	r6, ip
  400aa8:	d005      	beq.n	400ab6 <pio_handler_set+0x5a>
  400aaa:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400aac:	461a      	mov	r2, r3
  400aae:	4b06      	ldr	r3, [pc, #24]	; (400ac8 <pio_handler_set+0x6c>)
  400ab0:	4798      	blx	r3

	return 0;
  400ab2:	2000      	movs	r0, #0
  400ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400ab6:	4902      	ldr	r1, [pc, #8]	; (400ac0 <pio_handler_set+0x64>)
  400ab8:	600e      	str	r6, [r1, #0]
  400aba:	e7f6      	b.n	400aaa <pio_handler_set+0x4e>
		return 1;
  400abc:	2001      	movs	r0, #1
}
  400abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ac0:	20400a44 	.word	0x20400a44
  400ac4:	204009d4 	.word	0x204009d4
  400ac8:	004009cd 	.word	0x004009cd

00400acc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400acc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ace:	210a      	movs	r1, #10
  400ad0:	4801      	ldr	r0, [pc, #4]	; (400ad8 <PIOA_Handler+0xc>)
  400ad2:	4b02      	ldr	r3, [pc, #8]	; (400adc <PIOA_Handler+0x10>)
  400ad4:	4798      	blx	r3
  400ad6:	bd08      	pop	{r3, pc}
  400ad8:	400e0e00 	.word	0x400e0e00
  400adc:	00400a0d 	.word	0x00400a0d

00400ae0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ae0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400ae2:	210b      	movs	r1, #11
  400ae4:	4801      	ldr	r0, [pc, #4]	; (400aec <PIOB_Handler+0xc>)
  400ae6:	4b02      	ldr	r3, [pc, #8]	; (400af0 <PIOB_Handler+0x10>)
  400ae8:	4798      	blx	r3
  400aea:	bd08      	pop	{r3, pc}
  400aec:	400e1000 	.word	0x400e1000
  400af0:	00400a0d 	.word	0x00400a0d

00400af4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400af4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400af6:	210c      	movs	r1, #12
  400af8:	4801      	ldr	r0, [pc, #4]	; (400b00 <PIOC_Handler+0xc>)
  400afa:	4b02      	ldr	r3, [pc, #8]	; (400b04 <PIOC_Handler+0x10>)
  400afc:	4798      	blx	r3
  400afe:	bd08      	pop	{r3, pc}
  400b00:	400e1200 	.word	0x400e1200
  400b04:	00400a0d 	.word	0x00400a0d

00400b08 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b08:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400b0a:	2110      	movs	r1, #16
  400b0c:	4801      	ldr	r0, [pc, #4]	; (400b14 <PIOD_Handler+0xc>)
  400b0e:	4b02      	ldr	r3, [pc, #8]	; (400b18 <PIOD_Handler+0x10>)
  400b10:	4798      	blx	r3
  400b12:	bd08      	pop	{r3, pc}
  400b14:	400e1400 	.word	0x400e1400
  400b18:	00400a0d 	.word	0x00400a0d

00400b1c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b1c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b1e:	2111      	movs	r1, #17
  400b20:	4801      	ldr	r0, [pc, #4]	; (400b28 <PIOE_Handler+0xc>)
  400b22:	4b02      	ldr	r3, [pc, #8]	; (400b2c <PIOE_Handler+0x10>)
  400b24:	4798      	blx	r3
  400b26:	bd08      	pop	{r3, pc}
  400b28:	400e1600 	.word	0x400e1600
  400b2c:	00400a0d 	.word	0x00400a0d

00400b30 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400b30:	2803      	cmp	r0, #3
  400b32:	d011      	beq.n	400b58 <pmc_mck_set_division+0x28>
  400b34:	2804      	cmp	r0, #4
  400b36:	d012      	beq.n	400b5e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b38:	2802      	cmp	r0, #2
  400b3a:	bf0c      	ite	eq
  400b3c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400b40:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b42:	4a08      	ldr	r2, [pc, #32]	; (400b64 <pmc_mck_set_division+0x34>)
  400b44:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400b4a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400b4c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b4e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b50:	f013 0f08 	tst.w	r3, #8
  400b54:	d0fb      	beq.n	400b4e <pmc_mck_set_division+0x1e>
}
  400b56:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b58:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400b5c:	e7f1      	b.n	400b42 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400b62:	e7ee      	b.n	400b42 <pmc_mck_set_division+0x12>
  400b64:	400e0600 	.word	0x400e0600

00400b68 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b68:	4a17      	ldr	r2, [pc, #92]	; (400bc8 <pmc_switch_mck_to_pllack+0x60>)
  400b6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b70:	4318      	orrs	r0, r3
  400b72:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b74:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b76:	f013 0f08 	tst.w	r3, #8
  400b7a:	d10a      	bne.n	400b92 <pmc_switch_mck_to_pllack+0x2a>
  400b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400b80:	4911      	ldr	r1, [pc, #68]	; (400bc8 <pmc_switch_mck_to_pllack+0x60>)
  400b82:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b84:	f012 0f08 	tst.w	r2, #8
  400b88:	d103      	bne.n	400b92 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b8a:	3b01      	subs	r3, #1
  400b8c:	d1f9      	bne.n	400b82 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400b8e:	2001      	movs	r0, #1
  400b90:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b92:	4a0d      	ldr	r2, [pc, #52]	; (400bc8 <pmc_switch_mck_to_pllack+0x60>)
  400b94:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b96:	f023 0303 	bic.w	r3, r3, #3
  400b9a:	f043 0302 	orr.w	r3, r3, #2
  400b9e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ba0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ba2:	f013 0f08 	tst.w	r3, #8
  400ba6:	d10a      	bne.n	400bbe <pmc_switch_mck_to_pllack+0x56>
  400ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bac:	4906      	ldr	r1, [pc, #24]	; (400bc8 <pmc_switch_mck_to_pllack+0x60>)
  400bae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400bb0:	f012 0f08 	tst.w	r2, #8
  400bb4:	d105      	bne.n	400bc2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bb6:	3b01      	subs	r3, #1
  400bb8:	d1f9      	bne.n	400bae <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400bba:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400bbc:	4770      	bx	lr
	return 0;
  400bbe:	2000      	movs	r0, #0
  400bc0:	4770      	bx	lr
  400bc2:	2000      	movs	r0, #0
  400bc4:	4770      	bx	lr
  400bc6:	bf00      	nop
  400bc8:	400e0600 	.word	0x400e0600

00400bcc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400bcc:	b9a0      	cbnz	r0, 400bf8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bce:	480e      	ldr	r0, [pc, #56]	; (400c08 <pmc_switch_mainck_to_xtal+0x3c>)
  400bd0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400bd2:	0209      	lsls	r1, r1, #8
  400bd4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400bd6:	4a0d      	ldr	r2, [pc, #52]	; (400c0c <pmc_switch_mainck_to_xtal+0x40>)
  400bd8:	401a      	ands	r2, r3
  400bda:	4b0d      	ldr	r3, [pc, #52]	; (400c10 <pmc_switch_mainck_to_xtal+0x44>)
  400bdc:	4313      	orrs	r3, r2
  400bde:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400be0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400be2:	4602      	mov	r2, r0
  400be4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400be6:	f013 0f01 	tst.w	r3, #1
  400bea:	d0fb      	beq.n	400be4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400bec:	4a06      	ldr	r2, [pc, #24]	; (400c08 <pmc_switch_mainck_to_xtal+0x3c>)
  400bee:	6a11      	ldr	r1, [r2, #32]
  400bf0:	4b08      	ldr	r3, [pc, #32]	; (400c14 <pmc_switch_mainck_to_xtal+0x48>)
  400bf2:	430b      	orrs	r3, r1
  400bf4:	6213      	str	r3, [r2, #32]
  400bf6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bf8:	4903      	ldr	r1, [pc, #12]	; (400c08 <pmc_switch_mainck_to_xtal+0x3c>)
  400bfa:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400bfc:	4a06      	ldr	r2, [pc, #24]	; (400c18 <pmc_switch_mainck_to_xtal+0x4c>)
  400bfe:	401a      	ands	r2, r3
  400c00:	4b06      	ldr	r3, [pc, #24]	; (400c1c <pmc_switch_mainck_to_xtal+0x50>)
  400c02:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c04:	620b      	str	r3, [r1, #32]
  400c06:	4770      	bx	lr
  400c08:	400e0600 	.word	0x400e0600
  400c0c:	ffc8fffc 	.word	0xffc8fffc
  400c10:	00370001 	.word	0x00370001
  400c14:	01370000 	.word	0x01370000
  400c18:	fec8fffc 	.word	0xfec8fffc
  400c1c:	01370002 	.word	0x01370002

00400c20 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c20:	4b02      	ldr	r3, [pc, #8]	; (400c2c <pmc_osc_is_ready_mainck+0xc>)
  400c22:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c24:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400c28:	4770      	bx	lr
  400c2a:	bf00      	nop
  400c2c:	400e0600 	.word	0x400e0600

00400c30 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c34:	4b01      	ldr	r3, [pc, #4]	; (400c3c <pmc_disable_pllack+0xc>)
  400c36:	629a      	str	r2, [r3, #40]	; 0x28
  400c38:	4770      	bx	lr
  400c3a:	bf00      	nop
  400c3c:	400e0600 	.word	0x400e0600

00400c40 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c40:	4b02      	ldr	r3, [pc, #8]	; (400c4c <pmc_is_locked_pllack+0xc>)
  400c42:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c44:	f000 0002 	and.w	r0, r0, #2
  400c48:	4770      	bx	lr
  400c4a:	bf00      	nop
  400c4c:	400e0600 	.word	0x400e0600

00400c50 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400c50:	283f      	cmp	r0, #63	; 0x3f
  400c52:	d81e      	bhi.n	400c92 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c54:	281f      	cmp	r0, #31
  400c56:	d80c      	bhi.n	400c72 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c58:	4b11      	ldr	r3, [pc, #68]	; (400ca0 <pmc_enable_periph_clk+0x50>)
  400c5a:	699a      	ldr	r2, [r3, #24]
  400c5c:	2301      	movs	r3, #1
  400c5e:	4083      	lsls	r3, r0
  400c60:	4393      	bics	r3, r2
  400c62:	d018      	beq.n	400c96 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c64:	2301      	movs	r3, #1
  400c66:	fa03 f000 	lsl.w	r0, r3, r0
  400c6a:	4b0d      	ldr	r3, [pc, #52]	; (400ca0 <pmc_enable_periph_clk+0x50>)
  400c6c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c6e:	2000      	movs	r0, #0
  400c70:	4770      	bx	lr
		ul_id -= 32;
  400c72:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c74:	4b0a      	ldr	r3, [pc, #40]	; (400ca0 <pmc_enable_periph_clk+0x50>)
  400c76:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c7a:	2301      	movs	r3, #1
  400c7c:	4083      	lsls	r3, r0
  400c7e:	4393      	bics	r3, r2
  400c80:	d00b      	beq.n	400c9a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c82:	2301      	movs	r3, #1
  400c84:	fa03 f000 	lsl.w	r0, r3, r0
  400c88:	4b05      	ldr	r3, [pc, #20]	; (400ca0 <pmc_enable_periph_clk+0x50>)
  400c8a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400c8e:	2000      	movs	r0, #0
  400c90:	4770      	bx	lr
		return 1;
  400c92:	2001      	movs	r0, #1
  400c94:	4770      	bx	lr
	return 0;
  400c96:	2000      	movs	r0, #0
  400c98:	4770      	bx	lr
  400c9a:	2000      	movs	r0, #0
}
  400c9c:	4770      	bx	lr
  400c9e:	bf00      	nop
  400ca0:	400e0600 	.word	0x400e0600

00400ca4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400ca4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ca6:	0189      	lsls	r1, r1, #6
  400ca8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400caa:	2402      	movs	r4, #2
  400cac:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400cae:	f04f 31ff 	mov.w	r1, #4294967295
  400cb2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400cb4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400cb6:	605a      	str	r2, [r3, #4]
}
  400cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cbc:	4770      	bx	lr

00400cbe <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400cbe:	0189      	lsls	r1, r1, #6
  400cc0:	2305      	movs	r3, #5
  400cc2:	5043      	str	r3, [r0, r1]
  400cc4:	4770      	bx	lr

00400cc6 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400cc6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400cca:	61ca      	str	r2, [r1, #28]
  400ccc:	4770      	bx	lr

00400cce <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400cce:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400cd2:	624a      	str	r2, [r1, #36]	; 0x24
  400cd4:	4770      	bx	lr

00400cd6 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400cd6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400cda:	6a08      	ldr	r0, [r1, #32]
}
  400cdc:	4770      	bx	lr

00400cde <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400cde:	b4f0      	push	{r4, r5, r6, r7}
  400ce0:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400ce2:	2402      	movs	r4, #2
  400ce4:	9401      	str	r4, [sp, #4]
  400ce6:	2408      	movs	r4, #8
  400ce8:	9402      	str	r4, [sp, #8]
  400cea:	2420      	movs	r4, #32
  400cec:	9403      	str	r4, [sp, #12]
  400cee:	2480      	movs	r4, #128	; 0x80
  400cf0:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400cf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400cf4:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400cf6:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400cf8:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400cfc:	d814      	bhi.n	400d28 <tc_find_mck_divisor+0x4a>
  400cfe:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400d00:	42a0      	cmp	r0, r4
  400d02:	d217      	bcs.n	400d34 <tc_find_mck_divisor+0x56>
  400d04:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400d06:	af01      	add	r7, sp, #4
  400d08:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400d0c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400d10:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400d12:	4284      	cmp	r4, r0
  400d14:	d30a      	bcc.n	400d2c <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400d16:	4286      	cmp	r6, r0
  400d18:	d90d      	bls.n	400d36 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400d1a:	3501      	adds	r5, #1
	for (ul_index = 0;
  400d1c:	2d05      	cmp	r5, #5
  400d1e:	d1f3      	bne.n	400d08 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400d20:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400d22:	b006      	add	sp, #24
  400d24:	bcf0      	pop	{r4, r5, r6, r7}
  400d26:	4770      	bx	lr
			return 0;
  400d28:	2000      	movs	r0, #0
  400d2a:	e7fa      	b.n	400d22 <tc_find_mck_divisor+0x44>
  400d2c:	2000      	movs	r0, #0
  400d2e:	e7f8      	b.n	400d22 <tc_find_mck_divisor+0x44>
	return 1;
  400d30:	2001      	movs	r0, #1
  400d32:	e7f6      	b.n	400d22 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400d34:	2500      	movs	r5, #0
	if (p_uldiv) {
  400d36:	b12a      	cbz	r2, 400d44 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400d38:	a906      	add	r1, sp, #24
  400d3a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400d3e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400d42:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400d44:	2b00      	cmp	r3, #0
  400d46:	d0f3      	beq.n	400d30 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400d48:	601d      	str	r5, [r3, #0]
	return 1;
  400d4a:	2001      	movs	r0, #1
  400d4c:	e7e9      	b.n	400d22 <tc_find_mck_divisor+0x44>

00400d4e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400d4e:	6943      	ldr	r3, [r0, #20]
  400d50:	f013 0f02 	tst.w	r3, #2
  400d54:	d002      	beq.n	400d5c <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400d56:	61c1      	str	r1, [r0, #28]
	return 0;
  400d58:	2000      	movs	r0, #0
  400d5a:	4770      	bx	lr
		return 1;
  400d5c:	2001      	movs	r0, #1
}
  400d5e:	4770      	bx	lr

00400d60 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400d60:	6943      	ldr	r3, [r0, #20]
  400d62:	f013 0f01 	tst.w	r3, #1
  400d66:	d003      	beq.n	400d70 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400d68:	6983      	ldr	r3, [r0, #24]
  400d6a:	700b      	strb	r3, [r1, #0]
	return 0;
  400d6c:	2000      	movs	r0, #0
  400d6e:	4770      	bx	lr
		return 1;
  400d70:	2001      	movs	r0, #1
}
  400d72:	4770      	bx	lr

00400d74 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400d74:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400d76:	010b      	lsls	r3, r1, #4
  400d78:	4293      	cmp	r3, r2
  400d7a:	d914      	bls.n	400da6 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400d7c:	00c9      	lsls	r1, r1, #3
  400d7e:	084b      	lsrs	r3, r1, #1
  400d80:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400d84:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400d88:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400d8a:	1e5c      	subs	r4, r3, #1
  400d8c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400d90:	428c      	cmp	r4, r1
  400d92:	d901      	bls.n	400d98 <usart_set_async_baudrate+0x24>
		return 1;
  400d94:	2001      	movs	r0, #1
  400d96:	e017      	b.n	400dc8 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400d98:	6841      	ldr	r1, [r0, #4]
  400d9a:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400d9e:	6041      	str	r1, [r0, #4]
  400da0:	e00c      	b.n	400dbc <usart_set_async_baudrate+0x48>
		return 1;
  400da2:	2001      	movs	r0, #1
  400da4:	e010      	b.n	400dc8 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400da6:	0859      	lsrs	r1, r3, #1
  400da8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400dac:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400db0:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400db2:	1e5c      	subs	r4, r3, #1
  400db4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400db8:	428c      	cmp	r4, r1
  400dba:	d8f2      	bhi.n	400da2 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400dbc:	0412      	lsls	r2, r2, #16
  400dbe:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400dc2:	431a      	orrs	r2, r3
  400dc4:	6202      	str	r2, [r0, #32]

	return 0;
  400dc6:	2000      	movs	r0, #0
}
  400dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400dcc:	4770      	bx	lr
	...

00400dd0 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400dd0:	4b08      	ldr	r3, [pc, #32]	; (400df4 <usart_reset+0x24>)
  400dd2:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400dd6:	2300      	movs	r3, #0
  400dd8:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400dda:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400ddc:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400dde:	2388      	movs	r3, #136	; 0x88
  400de0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400de2:	2324      	movs	r3, #36	; 0x24
  400de4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400de6:	f44f 7380 	mov.w	r3, #256	; 0x100
  400dea:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400dec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400df0:	6003      	str	r3, [r0, #0]
  400df2:	4770      	bx	lr
  400df4:	55534100 	.word	0x55534100

00400df8 <usart_init_rs232>:
{
  400df8:	b570      	push	{r4, r5, r6, lr}
  400dfa:	4605      	mov	r5, r0
  400dfc:	460c      	mov	r4, r1
  400dfe:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400e00:	4b0f      	ldr	r3, [pc, #60]	; (400e40 <usart_init_rs232+0x48>)
  400e02:	4798      	blx	r3
	ul_reg_val = 0;
  400e04:	2200      	movs	r2, #0
  400e06:	4b0f      	ldr	r3, [pc, #60]	; (400e44 <usart_init_rs232+0x4c>)
  400e08:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400e0a:	b1a4      	cbz	r4, 400e36 <usart_init_rs232+0x3e>
  400e0c:	4632      	mov	r2, r6
  400e0e:	6821      	ldr	r1, [r4, #0]
  400e10:	4628      	mov	r0, r5
  400e12:	4b0d      	ldr	r3, [pc, #52]	; (400e48 <usart_init_rs232+0x50>)
  400e14:	4798      	blx	r3
  400e16:	4602      	mov	r2, r0
  400e18:	b978      	cbnz	r0, 400e3a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400e1a:	6863      	ldr	r3, [r4, #4]
  400e1c:	68a1      	ldr	r1, [r4, #8]
  400e1e:	430b      	orrs	r3, r1
  400e20:	6921      	ldr	r1, [r4, #16]
  400e22:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400e24:	68e1      	ldr	r1, [r4, #12]
  400e26:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400e28:	4906      	ldr	r1, [pc, #24]	; (400e44 <usart_init_rs232+0x4c>)
  400e2a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400e2c:	6869      	ldr	r1, [r5, #4]
  400e2e:	430b      	orrs	r3, r1
  400e30:	606b      	str	r3, [r5, #4]
}
  400e32:	4610      	mov	r0, r2
  400e34:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400e36:	2201      	movs	r2, #1
  400e38:	e7fb      	b.n	400e32 <usart_init_rs232+0x3a>
  400e3a:	2201      	movs	r2, #1
  400e3c:	e7f9      	b.n	400e32 <usart_init_rs232+0x3a>
  400e3e:	bf00      	nop
  400e40:	00400dd1 	.word	0x00400dd1
  400e44:	20400a48 	.word	0x20400a48
  400e48:	00400d75 	.word	0x00400d75

00400e4c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400e4c:	2340      	movs	r3, #64	; 0x40
  400e4e:	6003      	str	r3, [r0, #0]
  400e50:	4770      	bx	lr

00400e52 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400e52:	2310      	movs	r3, #16
  400e54:	6003      	str	r3, [r0, #0]
  400e56:	4770      	bx	lr

00400e58 <usart_is_tx_ready>:
	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
  400e58:	6940      	ldr	r0, [r0, #20]
}
  400e5a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400e5e:	4770      	bx	lr

00400e60 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400e60:	6943      	ldr	r3, [r0, #20]
  400e62:	f013 0f02 	tst.w	r3, #2
  400e66:	d004      	beq.n	400e72 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400e68:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400e6c:	61c1      	str	r1, [r0, #28]
	return 0;
  400e6e:	2000      	movs	r0, #0
  400e70:	4770      	bx	lr
		return 1;
  400e72:	2001      	movs	r0, #1
}
  400e74:	4770      	bx	lr

00400e76 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400e76:	6943      	ldr	r3, [r0, #20]
  400e78:	f013 0f01 	tst.w	r3, #1
  400e7c:	d005      	beq.n	400e8a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400e7e:	6983      	ldr	r3, [r0, #24]
  400e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400e84:	600b      	str	r3, [r1, #0]
	return 0;
  400e86:	2000      	movs	r0, #0
  400e88:	4770      	bx	lr
		return 1;
  400e8a:	2001      	movs	r0, #1
}
  400e8c:	4770      	bx	lr

00400e8e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400e8e:	e7fe      	b.n	400e8e <Dummy_Handler>

00400e90 <Reset_Handler>:
{
  400e90:	b500      	push	{lr}
  400e92:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400e94:	4b25      	ldr	r3, [pc, #148]	; (400f2c <Reset_Handler+0x9c>)
  400e96:	4a26      	ldr	r2, [pc, #152]	; (400f30 <Reset_Handler+0xa0>)
  400e98:	429a      	cmp	r2, r3
  400e9a:	d010      	beq.n	400ebe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400e9c:	4b25      	ldr	r3, [pc, #148]	; (400f34 <Reset_Handler+0xa4>)
  400e9e:	4a23      	ldr	r2, [pc, #140]	; (400f2c <Reset_Handler+0x9c>)
  400ea0:	429a      	cmp	r2, r3
  400ea2:	d20c      	bcs.n	400ebe <Reset_Handler+0x2e>
  400ea4:	3b01      	subs	r3, #1
  400ea6:	1a9b      	subs	r3, r3, r2
  400ea8:	f023 0303 	bic.w	r3, r3, #3
  400eac:	3304      	adds	r3, #4
  400eae:	4413      	add	r3, r2
  400eb0:	491f      	ldr	r1, [pc, #124]	; (400f30 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400eb2:	f851 0b04 	ldr.w	r0, [r1], #4
  400eb6:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400eba:	429a      	cmp	r2, r3
  400ebc:	d1f9      	bne.n	400eb2 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400ebe:	4b1e      	ldr	r3, [pc, #120]	; (400f38 <Reset_Handler+0xa8>)
  400ec0:	4a1e      	ldr	r2, [pc, #120]	; (400f3c <Reset_Handler+0xac>)
  400ec2:	429a      	cmp	r2, r3
  400ec4:	d20a      	bcs.n	400edc <Reset_Handler+0x4c>
  400ec6:	3b01      	subs	r3, #1
  400ec8:	1a9b      	subs	r3, r3, r2
  400eca:	f023 0303 	bic.w	r3, r3, #3
  400ece:	3304      	adds	r3, #4
  400ed0:	4413      	add	r3, r2
                *pDest++ = 0;
  400ed2:	2100      	movs	r1, #0
  400ed4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400ed8:	4293      	cmp	r3, r2
  400eda:	d1fb      	bne.n	400ed4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400edc:	4a18      	ldr	r2, [pc, #96]	; (400f40 <Reset_Handler+0xb0>)
  400ede:	4b19      	ldr	r3, [pc, #100]	; (400f44 <Reset_Handler+0xb4>)
  400ee0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400ee4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ee6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400eea:	fab3 f383 	clz	r3, r3
  400eee:	095b      	lsrs	r3, r3, #5
  400ef0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400ef2:	b672      	cpsid	i
  400ef4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ef8:	2200      	movs	r2, #0
  400efa:	4b13      	ldr	r3, [pc, #76]	; (400f48 <Reset_Handler+0xb8>)
  400efc:	701a      	strb	r2, [r3, #0]
	return flags;
  400efe:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400f00:	4a12      	ldr	r2, [pc, #72]	; (400f4c <Reset_Handler+0xbc>)
  400f02:	6813      	ldr	r3, [r2, #0]
  400f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400f08:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400f0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f0e:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400f12:	b129      	cbz	r1, 400f20 <Reset_Handler+0x90>
		cpu_irq_enable();
  400f14:	2201      	movs	r2, #1
  400f16:	4b0c      	ldr	r3, [pc, #48]	; (400f48 <Reset_Handler+0xb8>)
  400f18:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400f1a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f1e:	b662      	cpsie	i
        __libc_init_array();
  400f20:	4b0b      	ldr	r3, [pc, #44]	; (400f50 <Reset_Handler+0xc0>)
  400f22:	4798      	blx	r3
        main();
  400f24:	4b0b      	ldr	r3, [pc, #44]	; (400f54 <Reset_Handler+0xc4>)
  400f26:	4798      	blx	r3
  400f28:	e7fe      	b.n	400f28 <Reset_Handler+0x98>
  400f2a:	bf00      	nop
  400f2c:	20400000 	.word	0x20400000
  400f30:	00409524 	.word	0x00409524
  400f34:	204009b8 	.word	0x204009b8
  400f38:	20400ccc 	.word	0x20400ccc
  400f3c:	204009b8 	.word	0x204009b8
  400f40:	e000ed00 	.word	0xe000ed00
  400f44:	00400000 	.word	0x00400000
  400f48:	20400000 	.word	0x20400000
  400f4c:	e000ed88 	.word	0xe000ed88
  400f50:	00403925 	.word	0x00403925
  400f54:	00403789 	.word	0x00403789

00400f58 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400f58:	4b3b      	ldr	r3, [pc, #236]	; (401048 <SystemCoreClockUpdate+0xf0>)
  400f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f5c:	f003 0303 	and.w	r3, r3, #3
  400f60:	2b01      	cmp	r3, #1
  400f62:	d01d      	beq.n	400fa0 <SystemCoreClockUpdate+0x48>
  400f64:	b183      	cbz	r3, 400f88 <SystemCoreClockUpdate+0x30>
  400f66:	2b02      	cmp	r3, #2
  400f68:	d036      	beq.n	400fd8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400f6a:	4b37      	ldr	r3, [pc, #220]	; (401048 <SystemCoreClockUpdate+0xf0>)
  400f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400f72:	2b70      	cmp	r3, #112	; 0x70
  400f74:	d05f      	beq.n	401036 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400f76:	4b34      	ldr	r3, [pc, #208]	; (401048 <SystemCoreClockUpdate+0xf0>)
  400f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400f7a:	4934      	ldr	r1, [pc, #208]	; (40104c <SystemCoreClockUpdate+0xf4>)
  400f7c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400f80:	680b      	ldr	r3, [r1, #0]
  400f82:	40d3      	lsrs	r3, r2
  400f84:	600b      	str	r3, [r1, #0]
  400f86:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400f88:	4b31      	ldr	r3, [pc, #196]	; (401050 <SystemCoreClockUpdate+0xf8>)
  400f8a:	695b      	ldr	r3, [r3, #20]
  400f8c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400f90:	bf14      	ite	ne
  400f92:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400f96:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400f9a:	4b2c      	ldr	r3, [pc, #176]	; (40104c <SystemCoreClockUpdate+0xf4>)
  400f9c:	601a      	str	r2, [r3, #0]
  400f9e:	e7e4      	b.n	400f6a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400fa0:	4b29      	ldr	r3, [pc, #164]	; (401048 <SystemCoreClockUpdate+0xf0>)
  400fa2:	6a1b      	ldr	r3, [r3, #32]
  400fa4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400fa8:	d003      	beq.n	400fb2 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400faa:	4a2a      	ldr	r2, [pc, #168]	; (401054 <SystemCoreClockUpdate+0xfc>)
  400fac:	4b27      	ldr	r3, [pc, #156]	; (40104c <SystemCoreClockUpdate+0xf4>)
  400fae:	601a      	str	r2, [r3, #0]
  400fb0:	e7db      	b.n	400f6a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400fb2:	4a29      	ldr	r2, [pc, #164]	; (401058 <SystemCoreClockUpdate+0x100>)
  400fb4:	4b25      	ldr	r3, [pc, #148]	; (40104c <SystemCoreClockUpdate+0xf4>)
  400fb6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400fb8:	4b23      	ldr	r3, [pc, #140]	; (401048 <SystemCoreClockUpdate+0xf0>)
  400fba:	6a1b      	ldr	r3, [r3, #32]
  400fbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400fc0:	2b10      	cmp	r3, #16
  400fc2:	d005      	beq.n	400fd0 <SystemCoreClockUpdate+0x78>
  400fc4:	2b20      	cmp	r3, #32
  400fc6:	d1d0      	bne.n	400f6a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400fc8:	4a22      	ldr	r2, [pc, #136]	; (401054 <SystemCoreClockUpdate+0xfc>)
  400fca:	4b20      	ldr	r3, [pc, #128]	; (40104c <SystemCoreClockUpdate+0xf4>)
  400fcc:	601a      	str	r2, [r3, #0]
          break;
  400fce:	e7cc      	b.n	400f6a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400fd0:	4a22      	ldr	r2, [pc, #136]	; (40105c <SystemCoreClockUpdate+0x104>)
  400fd2:	4b1e      	ldr	r3, [pc, #120]	; (40104c <SystemCoreClockUpdate+0xf4>)
  400fd4:	601a      	str	r2, [r3, #0]
          break;
  400fd6:	e7c8      	b.n	400f6a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400fd8:	4b1b      	ldr	r3, [pc, #108]	; (401048 <SystemCoreClockUpdate+0xf0>)
  400fda:	6a1b      	ldr	r3, [r3, #32]
  400fdc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400fe0:	d016      	beq.n	401010 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400fe2:	4a1c      	ldr	r2, [pc, #112]	; (401054 <SystemCoreClockUpdate+0xfc>)
  400fe4:	4b19      	ldr	r3, [pc, #100]	; (40104c <SystemCoreClockUpdate+0xf4>)
  400fe6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400fe8:	4b17      	ldr	r3, [pc, #92]	; (401048 <SystemCoreClockUpdate+0xf0>)
  400fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fec:	f003 0303 	and.w	r3, r3, #3
  400ff0:	2b02      	cmp	r3, #2
  400ff2:	d1ba      	bne.n	400f6a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ff4:	4a14      	ldr	r2, [pc, #80]	; (401048 <SystemCoreClockUpdate+0xf0>)
  400ff6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ff8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400ffa:	4814      	ldr	r0, [pc, #80]	; (40104c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ffc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401000:	6803      	ldr	r3, [r0, #0]
  401002:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401006:	b2d2      	uxtb	r2, r2
  401008:	fbb3 f3f2 	udiv	r3, r3, r2
  40100c:	6003      	str	r3, [r0, #0]
  40100e:	e7ac      	b.n	400f6a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401010:	4a11      	ldr	r2, [pc, #68]	; (401058 <SystemCoreClockUpdate+0x100>)
  401012:	4b0e      	ldr	r3, [pc, #56]	; (40104c <SystemCoreClockUpdate+0xf4>)
  401014:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401016:	4b0c      	ldr	r3, [pc, #48]	; (401048 <SystemCoreClockUpdate+0xf0>)
  401018:	6a1b      	ldr	r3, [r3, #32]
  40101a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40101e:	2b10      	cmp	r3, #16
  401020:	d005      	beq.n	40102e <SystemCoreClockUpdate+0xd6>
  401022:	2b20      	cmp	r3, #32
  401024:	d1e0      	bne.n	400fe8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401026:	4a0b      	ldr	r2, [pc, #44]	; (401054 <SystemCoreClockUpdate+0xfc>)
  401028:	4b08      	ldr	r3, [pc, #32]	; (40104c <SystemCoreClockUpdate+0xf4>)
  40102a:	601a      	str	r2, [r3, #0]
          break;
  40102c:	e7dc      	b.n	400fe8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40102e:	4a0b      	ldr	r2, [pc, #44]	; (40105c <SystemCoreClockUpdate+0x104>)
  401030:	4b06      	ldr	r3, [pc, #24]	; (40104c <SystemCoreClockUpdate+0xf4>)
  401032:	601a      	str	r2, [r3, #0]
          break;
  401034:	e7d8      	b.n	400fe8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401036:	4a05      	ldr	r2, [pc, #20]	; (40104c <SystemCoreClockUpdate+0xf4>)
  401038:	6813      	ldr	r3, [r2, #0]
  40103a:	4909      	ldr	r1, [pc, #36]	; (401060 <SystemCoreClockUpdate+0x108>)
  40103c:	fba1 1303 	umull	r1, r3, r1, r3
  401040:	085b      	lsrs	r3, r3, #1
  401042:	6013      	str	r3, [r2, #0]
  401044:	4770      	bx	lr
  401046:	bf00      	nop
  401048:	400e0600 	.word	0x400e0600
  40104c:	20400004 	.word	0x20400004
  401050:	400e1810 	.word	0x400e1810
  401054:	00b71b00 	.word	0x00b71b00
  401058:	003d0900 	.word	0x003d0900
  40105c:	007a1200 	.word	0x007a1200
  401060:	aaaaaaab 	.word	0xaaaaaaab

00401064 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401064:	4b16      	ldr	r3, [pc, #88]	; (4010c0 <system_init_flash+0x5c>)
  401066:	4298      	cmp	r0, r3
  401068:	d913      	bls.n	401092 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40106a:	4b16      	ldr	r3, [pc, #88]	; (4010c4 <system_init_flash+0x60>)
  40106c:	4298      	cmp	r0, r3
  40106e:	d915      	bls.n	40109c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401070:	4b15      	ldr	r3, [pc, #84]	; (4010c8 <system_init_flash+0x64>)
  401072:	4298      	cmp	r0, r3
  401074:	d916      	bls.n	4010a4 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401076:	4b15      	ldr	r3, [pc, #84]	; (4010cc <system_init_flash+0x68>)
  401078:	4298      	cmp	r0, r3
  40107a:	d917      	bls.n	4010ac <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40107c:	4b14      	ldr	r3, [pc, #80]	; (4010d0 <system_init_flash+0x6c>)
  40107e:	4298      	cmp	r0, r3
  401080:	d918      	bls.n	4010b4 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401082:	4b14      	ldr	r3, [pc, #80]	; (4010d4 <system_init_flash+0x70>)
  401084:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401086:	bf94      	ite	ls
  401088:	4a13      	ldrls	r2, [pc, #76]	; (4010d8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40108a:	4a14      	ldrhi	r2, [pc, #80]	; (4010dc <system_init_flash+0x78>)
  40108c:	4b14      	ldr	r3, [pc, #80]	; (4010e0 <system_init_flash+0x7c>)
  40108e:	601a      	str	r2, [r3, #0]
  401090:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401092:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401096:	4b12      	ldr	r3, [pc, #72]	; (4010e0 <system_init_flash+0x7c>)
  401098:	601a      	str	r2, [r3, #0]
  40109a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40109c:	4a11      	ldr	r2, [pc, #68]	; (4010e4 <system_init_flash+0x80>)
  40109e:	4b10      	ldr	r3, [pc, #64]	; (4010e0 <system_init_flash+0x7c>)
  4010a0:	601a      	str	r2, [r3, #0]
  4010a2:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4010a4:	4a10      	ldr	r2, [pc, #64]	; (4010e8 <system_init_flash+0x84>)
  4010a6:	4b0e      	ldr	r3, [pc, #56]	; (4010e0 <system_init_flash+0x7c>)
  4010a8:	601a      	str	r2, [r3, #0]
  4010aa:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4010ac:	4a0f      	ldr	r2, [pc, #60]	; (4010ec <system_init_flash+0x88>)
  4010ae:	4b0c      	ldr	r3, [pc, #48]	; (4010e0 <system_init_flash+0x7c>)
  4010b0:	601a      	str	r2, [r3, #0]
  4010b2:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4010b4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4010b8:	4b09      	ldr	r3, [pc, #36]	; (4010e0 <system_init_flash+0x7c>)
  4010ba:	601a      	str	r2, [r3, #0]
  4010bc:	4770      	bx	lr
  4010be:	bf00      	nop
  4010c0:	015ef3bf 	.word	0x015ef3bf
  4010c4:	02bde77f 	.word	0x02bde77f
  4010c8:	041cdb3f 	.word	0x041cdb3f
  4010cc:	057bceff 	.word	0x057bceff
  4010d0:	06dac2bf 	.word	0x06dac2bf
  4010d4:	0839b67f 	.word	0x0839b67f
  4010d8:	04000500 	.word	0x04000500
  4010dc:	04000600 	.word	0x04000600
  4010e0:	400e0c00 	.word	0x400e0c00
  4010e4:	04000100 	.word	0x04000100
  4010e8:	04000200 	.word	0x04000200
  4010ec:	04000300 	.word	0x04000300

004010f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4010f0:	4b0a      	ldr	r3, [pc, #40]	; (40111c <_sbrk+0x2c>)
  4010f2:	681b      	ldr	r3, [r3, #0]
  4010f4:	b153      	cbz	r3, 40110c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4010f6:	4b09      	ldr	r3, [pc, #36]	; (40111c <_sbrk+0x2c>)
  4010f8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4010fa:	181a      	adds	r2, r3, r0
  4010fc:	4908      	ldr	r1, [pc, #32]	; (401120 <_sbrk+0x30>)
  4010fe:	4291      	cmp	r1, r2
  401100:	db08      	blt.n	401114 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401102:	4610      	mov	r0, r2
  401104:	4a05      	ldr	r2, [pc, #20]	; (40111c <_sbrk+0x2c>)
  401106:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401108:	4618      	mov	r0, r3
  40110a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40110c:	4a05      	ldr	r2, [pc, #20]	; (401124 <_sbrk+0x34>)
  40110e:	4b03      	ldr	r3, [pc, #12]	; (40111c <_sbrk+0x2c>)
  401110:	601a      	str	r2, [r3, #0]
  401112:	e7f0      	b.n	4010f6 <_sbrk+0x6>
		return (caddr_t) -1;	
  401114:	f04f 30ff 	mov.w	r0, #4294967295
}
  401118:	4770      	bx	lr
  40111a:	bf00      	nop
  40111c:	20400a4c 	.word	0x20400a4c
  401120:	2045fffc 	.word	0x2045fffc
  401124:	20402ed0 	.word	0x20402ed0

00401128 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401128:	f04f 30ff 	mov.w	r0, #4294967295
  40112c:	4770      	bx	lr

0040112e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40112e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401132:	604b      	str	r3, [r1, #4]

	return 0;
}
  401134:	2000      	movs	r0, #0
  401136:	4770      	bx	lr

00401138 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401138:	2001      	movs	r0, #1
  40113a:	4770      	bx	lr

0040113c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40113c:	2000      	movs	r0, #0
  40113e:	4770      	bx	lr

00401140 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401140:	f100 0308 	add.w	r3, r0, #8
  401144:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401146:	f04f 32ff 	mov.w	r2, #4294967295
  40114a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40114c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40114e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401150:	2300      	movs	r3, #0
  401152:	6003      	str	r3, [r0, #0]
  401154:	4770      	bx	lr

00401156 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401156:	2300      	movs	r3, #0
  401158:	6103      	str	r3, [r0, #16]
  40115a:	4770      	bx	lr

0040115c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40115c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40115e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401160:	689a      	ldr	r2, [r3, #8]
  401162:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401164:	689a      	ldr	r2, [r3, #8]
  401166:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401168:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40116a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40116c:	6803      	ldr	r3, [r0, #0]
  40116e:	3301      	adds	r3, #1
  401170:	6003      	str	r3, [r0, #0]
  401172:	4770      	bx	lr

00401174 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401174:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401176:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401178:	f1b5 3fff 	cmp.w	r5, #4294967295
  40117c:	d002      	beq.n	401184 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40117e:	f100 0208 	add.w	r2, r0, #8
  401182:	e002      	b.n	40118a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401184:	6902      	ldr	r2, [r0, #16]
  401186:	e004      	b.n	401192 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401188:	461a      	mov	r2, r3
  40118a:	6853      	ldr	r3, [r2, #4]
  40118c:	681c      	ldr	r4, [r3, #0]
  40118e:	42a5      	cmp	r5, r4
  401190:	d2fa      	bcs.n	401188 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401192:	6853      	ldr	r3, [r2, #4]
  401194:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401196:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401198:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40119a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40119c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40119e:	6803      	ldr	r3, [r0, #0]
  4011a0:	3301      	adds	r3, #1
  4011a2:	6003      	str	r3, [r0, #0]
}
  4011a4:	bc30      	pop	{r4, r5}
  4011a6:	4770      	bx	lr

004011a8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4011a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4011aa:	6842      	ldr	r2, [r0, #4]
  4011ac:	6881      	ldr	r1, [r0, #8]
  4011ae:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4011b0:	6882      	ldr	r2, [r0, #8]
  4011b2:	6841      	ldr	r1, [r0, #4]
  4011b4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4011b6:	685a      	ldr	r2, [r3, #4]
  4011b8:	4290      	cmp	r0, r2
  4011ba:	d005      	beq.n	4011c8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4011bc:	2200      	movs	r2, #0
  4011be:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4011c0:	6818      	ldr	r0, [r3, #0]
  4011c2:	3801      	subs	r0, #1
  4011c4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4011c6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4011c8:	6882      	ldr	r2, [r0, #8]
  4011ca:	605a      	str	r2, [r3, #4]
  4011cc:	e7f6      	b.n	4011bc <uxListRemove+0x14>
	...

004011d0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4011d0:	4b0d      	ldr	r3, [pc, #52]	; (401208 <prvTaskExitError+0x38>)
  4011d2:	681b      	ldr	r3, [r3, #0]
  4011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011d8:	d00a      	beq.n	4011f0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4011da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011de:	b672      	cpsid	i
  4011e0:	f383 8811 	msr	BASEPRI, r3
  4011e4:	f3bf 8f6f 	isb	sy
  4011e8:	f3bf 8f4f 	dsb	sy
  4011ec:	b662      	cpsie	i
  4011ee:	e7fe      	b.n	4011ee <prvTaskExitError+0x1e>
  4011f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011f4:	b672      	cpsid	i
  4011f6:	f383 8811 	msr	BASEPRI, r3
  4011fa:	f3bf 8f6f 	isb	sy
  4011fe:	f3bf 8f4f 	dsb	sy
  401202:	b662      	cpsie	i
  401204:	e7fe      	b.n	401204 <prvTaskExitError+0x34>
  401206:	bf00      	nop
  401208:	20400008 	.word	0x20400008

0040120c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40120c:	4806      	ldr	r0, [pc, #24]	; (401228 <prvPortStartFirstTask+0x1c>)
  40120e:	6800      	ldr	r0, [r0, #0]
  401210:	6800      	ldr	r0, [r0, #0]
  401212:	f380 8808 	msr	MSP, r0
  401216:	b662      	cpsie	i
  401218:	b661      	cpsie	f
  40121a:	f3bf 8f4f 	dsb	sy
  40121e:	f3bf 8f6f 	isb	sy
  401222:	df00      	svc	0
  401224:	bf00      	nop
  401226:	0000      	.short	0x0000
  401228:	e000ed08 	.word	0xe000ed08

0040122c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40122c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40123c <vPortEnableVFP+0x10>
  401230:	6801      	ldr	r1, [r0, #0]
  401232:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401236:	6001      	str	r1, [r0, #0]
  401238:	4770      	bx	lr
  40123a:	0000      	.short	0x0000
  40123c:	e000ed88 	.word	0xe000ed88

00401240 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401244:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401248:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40124c:	4b05      	ldr	r3, [pc, #20]	; (401264 <pxPortInitialiseStack+0x24>)
  40124e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401252:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401256:	f06f 0302 	mvn.w	r3, #2
  40125a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40125e:	3844      	subs	r0, #68	; 0x44
  401260:	4770      	bx	lr
  401262:	bf00      	nop
  401264:	004011d1 	.word	0x004011d1

00401268 <SVC_Handler>:
	__asm volatile (
  401268:	4b06      	ldr	r3, [pc, #24]	; (401284 <pxCurrentTCBConst2>)
  40126a:	6819      	ldr	r1, [r3, #0]
  40126c:	6808      	ldr	r0, [r1, #0]
  40126e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401272:	f380 8809 	msr	PSP, r0
  401276:	f3bf 8f6f 	isb	sy
  40127a:	f04f 0000 	mov.w	r0, #0
  40127e:	f380 8811 	msr	BASEPRI, r0
  401282:	4770      	bx	lr

00401284 <pxCurrentTCBConst2>:
  401284:	20400a58 	.word	0x20400a58
  401288:	4770      	bx	lr
  40128a:	bf00      	nop

0040128c <vPortEnterCritical>:
  40128c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401290:	b672      	cpsid	i
  401292:	f383 8811 	msr	BASEPRI, r3
  401296:	f3bf 8f6f 	isb	sy
  40129a:	f3bf 8f4f 	dsb	sy
  40129e:	b662      	cpsie	i
	uxCriticalNesting++;
  4012a0:	4a0b      	ldr	r2, [pc, #44]	; (4012d0 <vPortEnterCritical+0x44>)
  4012a2:	6813      	ldr	r3, [r2, #0]
  4012a4:	3301      	adds	r3, #1
  4012a6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4012a8:	2b01      	cmp	r3, #1
  4012aa:	d10f      	bne.n	4012cc <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4012ac:	4b09      	ldr	r3, [pc, #36]	; (4012d4 <vPortEnterCritical+0x48>)
  4012ae:	681b      	ldr	r3, [r3, #0]
  4012b0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4012b4:	d00a      	beq.n	4012cc <vPortEnterCritical+0x40>
  4012b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012ba:	b672      	cpsid	i
  4012bc:	f383 8811 	msr	BASEPRI, r3
  4012c0:	f3bf 8f6f 	isb	sy
  4012c4:	f3bf 8f4f 	dsb	sy
  4012c8:	b662      	cpsie	i
  4012ca:	e7fe      	b.n	4012ca <vPortEnterCritical+0x3e>
  4012cc:	4770      	bx	lr
  4012ce:	bf00      	nop
  4012d0:	20400008 	.word	0x20400008
  4012d4:	e000ed04 	.word	0xe000ed04

004012d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4012d8:	4b0a      	ldr	r3, [pc, #40]	; (401304 <vPortExitCritical+0x2c>)
  4012da:	681b      	ldr	r3, [r3, #0]
  4012dc:	b953      	cbnz	r3, 4012f4 <vPortExitCritical+0x1c>
  4012de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012e2:	b672      	cpsid	i
  4012e4:	f383 8811 	msr	BASEPRI, r3
  4012e8:	f3bf 8f6f 	isb	sy
  4012ec:	f3bf 8f4f 	dsb	sy
  4012f0:	b662      	cpsie	i
  4012f2:	e7fe      	b.n	4012f2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4012f4:	3b01      	subs	r3, #1
  4012f6:	4a03      	ldr	r2, [pc, #12]	; (401304 <vPortExitCritical+0x2c>)
  4012f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4012fa:	b90b      	cbnz	r3, 401300 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4012fc:	f383 8811 	msr	BASEPRI, r3
  401300:	4770      	bx	lr
  401302:	bf00      	nop
  401304:	20400008 	.word	0x20400008

00401308 <PendSV_Handler>:
	__asm volatile
  401308:	f3ef 8009 	mrs	r0, PSP
  40130c:	f3bf 8f6f 	isb	sy
  401310:	4b15      	ldr	r3, [pc, #84]	; (401368 <pxCurrentTCBConst>)
  401312:	681a      	ldr	r2, [r3, #0]
  401314:	f01e 0f10 	tst.w	lr, #16
  401318:	bf08      	it	eq
  40131a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40131e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401322:	6010      	str	r0, [r2, #0]
  401324:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401328:	f04f 0080 	mov.w	r0, #128	; 0x80
  40132c:	b672      	cpsid	i
  40132e:	f380 8811 	msr	BASEPRI, r0
  401332:	f3bf 8f4f 	dsb	sy
  401336:	f3bf 8f6f 	isb	sy
  40133a:	b662      	cpsie	i
  40133c:	f001 f88e 	bl	40245c <vTaskSwitchContext>
  401340:	f04f 0000 	mov.w	r0, #0
  401344:	f380 8811 	msr	BASEPRI, r0
  401348:	bc08      	pop	{r3}
  40134a:	6819      	ldr	r1, [r3, #0]
  40134c:	6808      	ldr	r0, [r1, #0]
  40134e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401352:	f01e 0f10 	tst.w	lr, #16
  401356:	bf08      	it	eq
  401358:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40135c:	f380 8809 	msr	PSP, r0
  401360:	f3bf 8f6f 	isb	sy
  401364:	4770      	bx	lr
  401366:	bf00      	nop

00401368 <pxCurrentTCBConst>:
  401368:	20400a58 	.word	0x20400a58
  40136c:	4770      	bx	lr
  40136e:	bf00      	nop

00401370 <SysTick_Handler>:
{
  401370:	b508      	push	{r3, lr}
	__asm volatile
  401372:	f3ef 8311 	mrs	r3, BASEPRI
  401376:	f04f 0280 	mov.w	r2, #128	; 0x80
  40137a:	b672      	cpsid	i
  40137c:	f382 8811 	msr	BASEPRI, r2
  401380:	f3bf 8f6f 	isb	sy
  401384:	f3bf 8f4f 	dsb	sy
  401388:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40138a:	4b05      	ldr	r3, [pc, #20]	; (4013a0 <SysTick_Handler+0x30>)
  40138c:	4798      	blx	r3
  40138e:	b118      	cbz	r0, 401398 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401394:	4b03      	ldr	r3, [pc, #12]	; (4013a4 <SysTick_Handler+0x34>)
  401396:	601a      	str	r2, [r3, #0]
	__asm volatile
  401398:	2300      	movs	r3, #0
  40139a:	f383 8811 	msr	BASEPRI, r3
  40139e:	bd08      	pop	{r3, pc}
  4013a0:	004020c9 	.word	0x004020c9
  4013a4:	e000ed04 	.word	0xe000ed04

004013a8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4013a8:	4a03      	ldr	r2, [pc, #12]	; (4013b8 <vPortSetupTimerInterrupt+0x10>)
  4013aa:	4b04      	ldr	r3, [pc, #16]	; (4013bc <vPortSetupTimerInterrupt+0x14>)
  4013ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4013ae:	2207      	movs	r2, #7
  4013b0:	3b04      	subs	r3, #4
  4013b2:	601a      	str	r2, [r3, #0]
  4013b4:	4770      	bx	lr
  4013b6:	bf00      	nop
  4013b8:	000927bf 	.word	0x000927bf
  4013bc:	e000e014 	.word	0xe000e014

004013c0 <xPortStartScheduler>:
{
  4013c0:	b500      	push	{lr}
  4013c2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4013c4:	4b25      	ldr	r3, [pc, #148]	; (40145c <xPortStartScheduler+0x9c>)
  4013c6:	781a      	ldrb	r2, [r3, #0]
  4013c8:	b2d2      	uxtb	r2, r2
  4013ca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4013cc:	22ff      	movs	r2, #255	; 0xff
  4013ce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4013d0:	781b      	ldrb	r3, [r3, #0]
  4013d2:	b2db      	uxtb	r3, r3
  4013d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4013d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4013dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4013e0:	4a1f      	ldr	r2, [pc, #124]	; (401460 <xPortStartScheduler+0xa0>)
  4013e2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4013e4:	2207      	movs	r2, #7
  4013e6:	4b1f      	ldr	r3, [pc, #124]	; (401464 <xPortStartScheduler+0xa4>)
  4013e8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4013ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4013ee:	f013 0f80 	tst.w	r3, #128	; 0x80
  4013f2:	d010      	beq.n	401416 <xPortStartScheduler+0x56>
  4013f4:	2206      	movs	r2, #6
  4013f6:	e000      	b.n	4013fa <xPortStartScheduler+0x3a>
  4013f8:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4013fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4013fe:	005b      	lsls	r3, r3, #1
  401400:	b2db      	uxtb	r3, r3
  401402:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401406:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40140a:	1e51      	subs	r1, r2, #1
  40140c:	f013 0f80 	tst.w	r3, #128	; 0x80
  401410:	d1f2      	bne.n	4013f8 <xPortStartScheduler+0x38>
  401412:	4b14      	ldr	r3, [pc, #80]	; (401464 <xPortStartScheduler+0xa4>)
  401414:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401416:	4a13      	ldr	r2, [pc, #76]	; (401464 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401418:	6813      	ldr	r3, [r2, #0]
  40141a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40141c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401420:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401422:	9b01      	ldr	r3, [sp, #4]
  401424:	b2db      	uxtb	r3, r3
  401426:	4a0d      	ldr	r2, [pc, #52]	; (40145c <xPortStartScheduler+0x9c>)
  401428:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40142a:	4b0f      	ldr	r3, [pc, #60]	; (401468 <xPortStartScheduler+0xa8>)
  40142c:	681a      	ldr	r2, [r3, #0]
  40142e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401432:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401434:	681a      	ldr	r2, [r3, #0]
  401436:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40143a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40143c:	4b0b      	ldr	r3, [pc, #44]	; (40146c <xPortStartScheduler+0xac>)
  40143e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401440:	2200      	movs	r2, #0
  401442:	4b0b      	ldr	r3, [pc, #44]	; (401470 <xPortStartScheduler+0xb0>)
  401444:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401446:	4b0b      	ldr	r3, [pc, #44]	; (401474 <xPortStartScheduler+0xb4>)
  401448:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40144a:	4a0b      	ldr	r2, [pc, #44]	; (401478 <xPortStartScheduler+0xb8>)
  40144c:	6813      	ldr	r3, [r2, #0]
  40144e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401452:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401454:	4b09      	ldr	r3, [pc, #36]	; (40147c <xPortStartScheduler+0xbc>)
  401456:	4798      	blx	r3
	prvTaskExitError();
  401458:	4b09      	ldr	r3, [pc, #36]	; (401480 <xPortStartScheduler+0xc0>)
  40145a:	4798      	blx	r3
  40145c:	e000e400 	.word	0xe000e400
  401460:	20400a50 	.word	0x20400a50
  401464:	20400a54 	.word	0x20400a54
  401468:	e000ed20 	.word	0xe000ed20
  40146c:	004013a9 	.word	0x004013a9
  401470:	20400008 	.word	0x20400008
  401474:	0040122d 	.word	0x0040122d
  401478:	e000ef34 	.word	0xe000ef34
  40147c:	0040120d 	.word	0x0040120d
  401480:	004011d1 	.word	0x004011d1

00401484 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401484:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401488:	2b0f      	cmp	r3, #15
  40148a:	d911      	bls.n	4014b0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40148c:	4a12      	ldr	r2, [pc, #72]	; (4014d8 <vPortValidateInterruptPriority+0x54>)
  40148e:	5c9b      	ldrb	r3, [r3, r2]
  401490:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401492:	4a12      	ldr	r2, [pc, #72]	; (4014dc <vPortValidateInterruptPriority+0x58>)
  401494:	7812      	ldrb	r2, [r2, #0]
  401496:	429a      	cmp	r2, r3
  401498:	d90a      	bls.n	4014b0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40149a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40149e:	b672      	cpsid	i
  4014a0:	f383 8811 	msr	BASEPRI, r3
  4014a4:	f3bf 8f6f 	isb	sy
  4014a8:	f3bf 8f4f 	dsb	sy
  4014ac:	b662      	cpsie	i
  4014ae:	e7fe      	b.n	4014ae <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4014b0:	4b0b      	ldr	r3, [pc, #44]	; (4014e0 <vPortValidateInterruptPriority+0x5c>)
  4014b2:	681b      	ldr	r3, [r3, #0]
  4014b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4014b8:	4a0a      	ldr	r2, [pc, #40]	; (4014e4 <vPortValidateInterruptPriority+0x60>)
  4014ba:	6812      	ldr	r2, [r2, #0]
  4014bc:	4293      	cmp	r3, r2
  4014be:	d90a      	bls.n	4014d6 <vPortValidateInterruptPriority+0x52>
  4014c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014c4:	b672      	cpsid	i
  4014c6:	f383 8811 	msr	BASEPRI, r3
  4014ca:	f3bf 8f6f 	isb	sy
  4014ce:	f3bf 8f4f 	dsb	sy
  4014d2:	b662      	cpsie	i
  4014d4:	e7fe      	b.n	4014d4 <vPortValidateInterruptPriority+0x50>
  4014d6:	4770      	bx	lr
  4014d8:	e000e3f0 	.word	0xe000e3f0
  4014dc:	20400a50 	.word	0x20400a50
  4014e0:	e000ed0c 	.word	0xe000ed0c
  4014e4:	20400a54 	.word	0x20400a54

004014e8 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4014e8:	b510      	push	{r4, lr}
  4014ea:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  4014ec:	4b06      	ldr	r3, [pc, #24]	; (401508 <pvPortMalloc+0x20>)
  4014ee:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  4014f0:	4620      	mov	r0, r4
  4014f2:	4b06      	ldr	r3, [pc, #24]	; (40150c <pvPortMalloc+0x24>)
  4014f4:	4798      	blx	r3
  4014f6:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4014f8:	4b05      	ldr	r3, [pc, #20]	; (401510 <pvPortMalloc+0x28>)
  4014fa:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4014fc:	b10c      	cbz	r4, 401502 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  4014fe:	4620      	mov	r0, r4
  401500:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401502:	4b04      	ldr	r3, [pc, #16]	; (401514 <pvPortMalloc+0x2c>)
  401504:	4798      	blx	r3
	return pvReturn;
  401506:	e7fa      	b.n	4014fe <pvPortMalloc+0x16>
  401508:	004020ad 	.word	0x004020ad
  40150c:	00403975 	.word	0x00403975
  401510:	00402215 	.word	0x00402215
  401514:	0040310f 	.word	0x0040310f

00401518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401518:	b148      	cbz	r0, 40152e <vPortFree+0x16>
{
  40151a:	b510      	push	{r4, lr}
  40151c:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  40151e:	4b04      	ldr	r3, [pc, #16]	; (401530 <vPortFree+0x18>)
  401520:	4798      	blx	r3
		{
			free( pv );
  401522:	4620      	mov	r0, r4
  401524:	4b03      	ldr	r3, [pc, #12]	; (401534 <vPortFree+0x1c>)
  401526:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401528:	4b03      	ldr	r3, [pc, #12]	; (401538 <vPortFree+0x20>)
  40152a:	4798      	blx	r3
  40152c:	bd10      	pop	{r4, pc}
  40152e:	4770      	bx	lr
  401530:	004020ad 	.word	0x004020ad
  401534:	00403985 	.word	0x00403985
  401538:	00402215 	.word	0x00402215

0040153c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40153c:	b538      	push	{r3, r4, r5, lr}
  40153e:	4604      	mov	r4, r0
  401540:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401542:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401544:	b95a      	cbnz	r2, 40155e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401546:	6803      	ldr	r3, [r0, #0]
  401548:	2b00      	cmp	r3, #0
  40154a:	d12e      	bne.n	4015aa <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40154c:	6840      	ldr	r0, [r0, #4]
  40154e:	4b1b      	ldr	r3, [pc, #108]	; (4015bc <prvCopyDataToQueue+0x80>)
  401550:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401552:	2300      	movs	r3, #0
  401554:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401558:	3301      	adds	r3, #1
  40155a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40155c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40155e:	b96d      	cbnz	r5, 40157c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401560:	6880      	ldr	r0, [r0, #8]
  401562:	4b17      	ldr	r3, [pc, #92]	; (4015c0 <prvCopyDataToQueue+0x84>)
  401564:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401566:	68a3      	ldr	r3, [r4, #8]
  401568:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40156a:	4413      	add	r3, r2
  40156c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40156e:	6862      	ldr	r2, [r4, #4]
  401570:	4293      	cmp	r3, r2
  401572:	d31c      	bcc.n	4015ae <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401574:	6823      	ldr	r3, [r4, #0]
  401576:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401578:	2000      	movs	r0, #0
  40157a:	e7ec      	b.n	401556 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40157c:	68c0      	ldr	r0, [r0, #12]
  40157e:	4b10      	ldr	r3, [pc, #64]	; (4015c0 <prvCopyDataToQueue+0x84>)
  401580:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401582:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401584:	425b      	negs	r3, r3
  401586:	68e2      	ldr	r2, [r4, #12]
  401588:	441a      	add	r2, r3
  40158a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40158c:	6821      	ldr	r1, [r4, #0]
  40158e:	428a      	cmp	r2, r1
  401590:	d202      	bcs.n	401598 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401592:	6862      	ldr	r2, [r4, #4]
  401594:	4413      	add	r3, r2
  401596:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401598:	2d02      	cmp	r5, #2
  40159a:	d10a      	bne.n	4015b2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40159c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40159e:	b153      	cbz	r3, 4015b6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4015a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4015a2:	3b01      	subs	r3, #1
  4015a4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4015a6:	2000      	movs	r0, #0
  4015a8:	e7d5      	b.n	401556 <prvCopyDataToQueue+0x1a>
  4015aa:	2000      	movs	r0, #0
  4015ac:	e7d3      	b.n	401556 <prvCopyDataToQueue+0x1a>
  4015ae:	2000      	movs	r0, #0
  4015b0:	e7d1      	b.n	401556 <prvCopyDataToQueue+0x1a>
  4015b2:	2000      	movs	r0, #0
  4015b4:	e7cf      	b.n	401556 <prvCopyDataToQueue+0x1a>
  4015b6:	2000      	movs	r0, #0
  4015b8:	e7cd      	b.n	401556 <prvCopyDataToQueue+0x1a>
  4015ba:	bf00      	nop
  4015bc:	0040285d 	.word	0x0040285d
  4015c0:	00403ef5 	.word	0x00403ef5

004015c4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4015c4:	b530      	push	{r4, r5, lr}
  4015c6:	b083      	sub	sp, #12
  4015c8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4015ca:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4015cc:	b174      	cbz	r4, 4015ec <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4015ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4015d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4015d2:	429a      	cmp	r2, r3
  4015d4:	d315      	bcc.n	401602 <prvNotifyQueueSetContainer+0x3e>
  4015d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015da:	b672      	cpsid	i
  4015dc:	f383 8811 	msr	BASEPRI, r3
  4015e0:	f3bf 8f6f 	isb	sy
  4015e4:	f3bf 8f4f 	dsb	sy
  4015e8:	b662      	cpsie	i
  4015ea:	e7fe      	b.n	4015ea <prvNotifyQueueSetContainer+0x26>
  4015ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015f0:	b672      	cpsid	i
  4015f2:	f383 8811 	msr	BASEPRI, r3
  4015f6:	f3bf 8f6f 	isb	sy
  4015fa:	f3bf 8f4f 	dsb	sy
  4015fe:	b662      	cpsie	i
  401600:	e7fe      	b.n	401600 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401602:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401604:	4293      	cmp	r3, r2
  401606:	d803      	bhi.n	401610 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401608:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40160a:	4628      	mov	r0, r5
  40160c:	b003      	add	sp, #12
  40160e:	bd30      	pop	{r4, r5, pc}
  401610:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401612:	a901      	add	r1, sp, #4
  401614:	4620      	mov	r0, r4
  401616:	4b0b      	ldr	r3, [pc, #44]	; (401644 <prvNotifyQueueSetContainer+0x80>)
  401618:	4798      	blx	r3
  40161a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40161c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40161e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401622:	d10a      	bne.n	40163a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401624:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401626:	2b00      	cmp	r3, #0
  401628:	d0ef      	beq.n	40160a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40162a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40162e:	4b06      	ldr	r3, [pc, #24]	; (401648 <prvNotifyQueueSetContainer+0x84>)
  401630:	4798      	blx	r3
  401632:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401634:	bf18      	it	ne
  401636:	2501      	movne	r5, #1
  401638:	e7e7      	b.n	40160a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40163a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40163c:	3301      	adds	r3, #1
  40163e:	64a3      	str	r3, [r4, #72]	; 0x48
  401640:	e7e3      	b.n	40160a <prvNotifyQueueSetContainer+0x46>
  401642:	bf00      	nop
  401644:	0040153d 	.word	0x0040153d
  401648:	00402631 	.word	0x00402631

0040164c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40164c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40164e:	b172      	cbz	r2, 40166e <prvCopyDataFromQueue+0x22>
{
  401650:	b510      	push	{r4, lr}
  401652:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401654:	68c4      	ldr	r4, [r0, #12]
  401656:	4414      	add	r4, r2
  401658:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40165a:	6840      	ldr	r0, [r0, #4]
  40165c:	4284      	cmp	r4, r0
  40165e:	d301      	bcc.n	401664 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401660:	6818      	ldr	r0, [r3, #0]
  401662:	60d8      	str	r0, [r3, #12]
  401664:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401666:	68d9      	ldr	r1, [r3, #12]
  401668:	4b01      	ldr	r3, [pc, #4]	; (401670 <prvCopyDataFromQueue+0x24>)
  40166a:	4798      	blx	r3
  40166c:	bd10      	pop	{r4, pc}
  40166e:	4770      	bx	lr
  401670:	00403ef5 	.word	0x00403ef5

00401674 <prvUnlockQueue>:
{
  401674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401676:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401678:	4b22      	ldr	r3, [pc, #136]	; (401704 <prvUnlockQueue+0x90>)
  40167a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40167c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40167e:	2b00      	cmp	r3, #0
  401680:	dd1b      	ble.n	4016ba <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401682:	4d21      	ldr	r5, [pc, #132]	; (401708 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401684:	4f21      	ldr	r7, [pc, #132]	; (40170c <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401686:	4e22      	ldr	r6, [pc, #136]	; (401710 <prvUnlockQueue+0x9c>)
  401688:	e00b      	b.n	4016a2 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40168a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40168c:	b1ab      	cbz	r3, 4016ba <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40168e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401692:	47b0      	blx	r6
  401694:	b978      	cbnz	r0, 4016b6 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401696:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401698:	3b01      	subs	r3, #1
  40169a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40169c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40169e:	2b00      	cmp	r3, #0
  4016a0:	dd0b      	ble.n	4016ba <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4016a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4016a4:	2b00      	cmp	r3, #0
  4016a6:	d0f0      	beq.n	40168a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4016a8:	2100      	movs	r1, #0
  4016aa:	4620      	mov	r0, r4
  4016ac:	47a8      	blx	r5
  4016ae:	2801      	cmp	r0, #1
  4016b0:	d1f1      	bne.n	401696 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4016b2:	47b8      	blx	r7
  4016b4:	e7ef      	b.n	401696 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4016b6:	47b8      	blx	r7
  4016b8:	e7ed      	b.n	401696 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4016ba:	f04f 33ff 	mov.w	r3, #4294967295
  4016be:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4016c0:	4b14      	ldr	r3, [pc, #80]	; (401714 <prvUnlockQueue+0xa0>)
  4016c2:	4798      	blx	r3
	taskENTER_CRITICAL();
  4016c4:	4b0f      	ldr	r3, [pc, #60]	; (401704 <prvUnlockQueue+0x90>)
  4016c6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4016c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4016ca:	2b00      	cmp	r3, #0
  4016cc:	dd14      	ble.n	4016f8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4016ce:	6923      	ldr	r3, [r4, #16]
  4016d0:	b193      	cbz	r3, 4016f8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4016d2:	f104 0610 	add.w	r6, r4, #16
  4016d6:	4d0e      	ldr	r5, [pc, #56]	; (401710 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4016d8:	4f0c      	ldr	r7, [pc, #48]	; (40170c <prvUnlockQueue+0x98>)
  4016da:	e007      	b.n	4016ec <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4016dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4016de:	3b01      	subs	r3, #1
  4016e0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4016e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	dd07      	ble.n	4016f8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4016e8:	6923      	ldr	r3, [r4, #16]
  4016ea:	b12b      	cbz	r3, 4016f8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4016ec:	4630      	mov	r0, r6
  4016ee:	47a8      	blx	r5
  4016f0:	2800      	cmp	r0, #0
  4016f2:	d0f3      	beq.n	4016dc <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4016f4:	47b8      	blx	r7
  4016f6:	e7f1      	b.n	4016dc <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4016f8:	f04f 33ff 	mov.w	r3, #4294967295
  4016fc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4016fe:	4b05      	ldr	r3, [pc, #20]	; (401714 <prvUnlockQueue+0xa0>)
  401700:	4798      	blx	r3
  401702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401704:	0040128d 	.word	0x0040128d
  401708:	004015c5 	.word	0x004015c5
  40170c:	0040278d 	.word	0x0040278d
  401710:	00402631 	.word	0x00402631
  401714:	004012d9 	.word	0x004012d9

00401718 <xQueueGenericReset>:
{
  401718:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40171a:	b308      	cbz	r0, 401760 <xQueueGenericReset+0x48>
  40171c:	4604      	mov	r4, r0
  40171e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401720:	4b1d      	ldr	r3, [pc, #116]	; (401798 <xQueueGenericReset+0x80>)
  401722:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401724:	6822      	ldr	r2, [r4, #0]
  401726:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401728:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40172a:	fb03 f301 	mul.w	r3, r3, r1
  40172e:	18d0      	adds	r0, r2, r3
  401730:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401732:	2000      	movs	r0, #0
  401734:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401736:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401738:	1a5b      	subs	r3, r3, r1
  40173a:	4413      	add	r3, r2
  40173c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40173e:	f04f 33ff 	mov.w	r3, #4294967295
  401742:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401744:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401746:	b9fd      	cbnz	r5, 401788 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401748:	6923      	ldr	r3, [r4, #16]
  40174a:	b12b      	cbz	r3, 401758 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40174c:	f104 0010 	add.w	r0, r4, #16
  401750:	4b12      	ldr	r3, [pc, #72]	; (40179c <xQueueGenericReset+0x84>)
  401752:	4798      	blx	r3
  401754:	2801      	cmp	r0, #1
  401756:	d00e      	beq.n	401776 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401758:	4b11      	ldr	r3, [pc, #68]	; (4017a0 <xQueueGenericReset+0x88>)
  40175a:	4798      	blx	r3
}
  40175c:	2001      	movs	r0, #1
  40175e:	bd38      	pop	{r3, r4, r5, pc}
  401760:	f04f 0380 	mov.w	r3, #128	; 0x80
  401764:	b672      	cpsid	i
  401766:	f383 8811 	msr	BASEPRI, r3
  40176a:	f3bf 8f6f 	isb	sy
  40176e:	f3bf 8f4f 	dsb	sy
  401772:	b662      	cpsie	i
  401774:	e7fe      	b.n	401774 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40177a:	4b0a      	ldr	r3, [pc, #40]	; (4017a4 <xQueueGenericReset+0x8c>)
  40177c:	601a      	str	r2, [r3, #0]
  40177e:	f3bf 8f4f 	dsb	sy
  401782:	f3bf 8f6f 	isb	sy
  401786:	e7e7      	b.n	401758 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401788:	f104 0010 	add.w	r0, r4, #16
  40178c:	4d06      	ldr	r5, [pc, #24]	; (4017a8 <xQueueGenericReset+0x90>)
  40178e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401790:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401794:	47a8      	blx	r5
  401796:	e7df      	b.n	401758 <xQueueGenericReset+0x40>
  401798:	0040128d 	.word	0x0040128d
  40179c:	00402631 	.word	0x00402631
  4017a0:	004012d9 	.word	0x004012d9
  4017a4:	e000ed04 	.word	0xe000ed04
  4017a8:	00401141 	.word	0x00401141

004017ac <xQueueGenericCreate>:
{
  4017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  4017ae:	b950      	cbnz	r0, 4017c6 <xQueueGenericCreate+0x1a>
  4017b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017b4:	b672      	cpsid	i
  4017b6:	f383 8811 	msr	BASEPRI, r3
  4017ba:	f3bf 8f6f 	isb	sy
  4017be:	f3bf 8f4f 	dsb	sy
  4017c2:	b662      	cpsie	i
  4017c4:	e7fe      	b.n	4017c4 <xQueueGenericCreate+0x18>
  4017c6:	4606      	mov	r6, r0
  4017c8:	4617      	mov	r7, r2
  4017ca:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4017cc:	b189      	cbz	r1, 4017f2 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4017ce:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4017d2:	3059      	adds	r0, #89	; 0x59
  4017d4:	4b12      	ldr	r3, [pc, #72]	; (401820 <xQueueGenericCreate+0x74>)
  4017d6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4017d8:	4604      	mov	r4, r0
  4017da:	b9e8      	cbnz	r0, 401818 <xQueueGenericCreate+0x6c>
  4017dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017e0:	b672      	cpsid	i
  4017e2:	f383 8811 	msr	BASEPRI, r3
  4017e6:	f3bf 8f6f 	isb	sy
  4017ea:	f3bf 8f4f 	dsb	sy
  4017ee:	b662      	cpsie	i
  4017f0:	e7fe      	b.n	4017f0 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4017f2:	2058      	movs	r0, #88	; 0x58
  4017f4:	4b0a      	ldr	r3, [pc, #40]	; (401820 <xQueueGenericCreate+0x74>)
  4017f6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4017f8:	4604      	mov	r4, r0
  4017fa:	2800      	cmp	r0, #0
  4017fc:	d0ee      	beq.n	4017dc <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4017fe:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401800:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401802:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401804:	2101      	movs	r1, #1
  401806:	4620      	mov	r0, r4
  401808:	4b06      	ldr	r3, [pc, #24]	; (401824 <xQueueGenericCreate+0x78>)
  40180a:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  40180c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401810:	2300      	movs	r3, #0
  401812:	6563      	str	r3, [r4, #84]	; 0x54
}
  401814:	4620      	mov	r0, r4
  401816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401818:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40181c:	6003      	str	r3, [r0, #0]
  40181e:	e7ef      	b.n	401800 <xQueueGenericCreate+0x54>
  401820:	004014e9 	.word	0x004014e9
  401824:	00401719 	.word	0x00401719

00401828 <xQueueGenericSend>:
{
  401828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40182c:	b085      	sub	sp, #20
  40182e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401830:	b1b8      	cbz	r0, 401862 <xQueueGenericSend+0x3a>
  401832:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401834:	b301      	cbz	r1, 401878 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401836:	2b02      	cmp	r3, #2
  401838:	d02c      	beq.n	401894 <xQueueGenericSend+0x6c>
  40183a:	461d      	mov	r5, r3
  40183c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40183e:	4b66      	ldr	r3, [pc, #408]	; (4019d8 <xQueueGenericSend+0x1b0>)
  401840:	4798      	blx	r3
  401842:	2800      	cmp	r0, #0
  401844:	d134      	bne.n	4018b0 <xQueueGenericSend+0x88>
  401846:	9b01      	ldr	r3, [sp, #4]
  401848:	2b00      	cmp	r3, #0
  40184a:	d038      	beq.n	4018be <xQueueGenericSend+0x96>
  40184c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401850:	b672      	cpsid	i
  401852:	f383 8811 	msr	BASEPRI, r3
  401856:	f3bf 8f6f 	isb	sy
  40185a:	f3bf 8f4f 	dsb	sy
  40185e:	b662      	cpsie	i
  401860:	e7fe      	b.n	401860 <xQueueGenericSend+0x38>
  401862:	f04f 0380 	mov.w	r3, #128	; 0x80
  401866:	b672      	cpsid	i
  401868:	f383 8811 	msr	BASEPRI, r3
  40186c:	f3bf 8f6f 	isb	sy
  401870:	f3bf 8f4f 	dsb	sy
  401874:	b662      	cpsie	i
  401876:	e7fe      	b.n	401876 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401878:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40187a:	2a00      	cmp	r2, #0
  40187c:	d0db      	beq.n	401836 <xQueueGenericSend+0xe>
  40187e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401882:	b672      	cpsid	i
  401884:	f383 8811 	msr	BASEPRI, r3
  401888:	f3bf 8f6f 	isb	sy
  40188c:	f3bf 8f4f 	dsb	sy
  401890:	b662      	cpsie	i
  401892:	e7fe      	b.n	401892 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401894:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401896:	2a01      	cmp	r2, #1
  401898:	d0cf      	beq.n	40183a <xQueueGenericSend+0x12>
  40189a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40189e:	b672      	cpsid	i
  4018a0:	f383 8811 	msr	BASEPRI, r3
  4018a4:	f3bf 8f6f 	isb	sy
  4018a8:	f3bf 8f4f 	dsb	sy
  4018ac:	b662      	cpsie	i
  4018ae:	e7fe      	b.n	4018ae <xQueueGenericSend+0x86>
  4018b0:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4018b2:	4e4a      	ldr	r6, [pc, #296]	; (4019dc <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  4018b4:	f8df a150 	ldr.w	sl, [pc, #336]	; 401a08 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  4018b8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4019e8 <xQueueGenericSend+0x1c0>
  4018bc:	e042      	b.n	401944 <xQueueGenericSend+0x11c>
  4018be:	2700      	movs	r7, #0
  4018c0:	e7f7      	b.n	4018b2 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4018c2:	462a      	mov	r2, r5
  4018c4:	4641      	mov	r1, r8
  4018c6:	4620      	mov	r0, r4
  4018c8:	4b45      	ldr	r3, [pc, #276]	; (4019e0 <xQueueGenericSend+0x1b8>)
  4018ca:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4018cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4018ce:	b19b      	cbz	r3, 4018f8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4018d0:	4629      	mov	r1, r5
  4018d2:	4620      	mov	r0, r4
  4018d4:	4b43      	ldr	r3, [pc, #268]	; (4019e4 <xQueueGenericSend+0x1bc>)
  4018d6:	4798      	blx	r3
  4018d8:	2801      	cmp	r0, #1
  4018da:	d107      	bne.n	4018ec <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4018dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018e0:	4b41      	ldr	r3, [pc, #260]	; (4019e8 <xQueueGenericSend+0x1c0>)
  4018e2:	601a      	str	r2, [r3, #0]
  4018e4:	f3bf 8f4f 	dsb	sy
  4018e8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4018ec:	4b3f      	ldr	r3, [pc, #252]	; (4019ec <xQueueGenericSend+0x1c4>)
  4018ee:	4798      	blx	r3
				return pdPASS;
  4018f0:	2001      	movs	r0, #1
}
  4018f2:	b005      	add	sp, #20
  4018f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4018f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4018fa:	b173      	cbz	r3, 40191a <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4018fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401900:	4b3b      	ldr	r3, [pc, #236]	; (4019f0 <xQueueGenericSend+0x1c8>)
  401902:	4798      	blx	r3
  401904:	2801      	cmp	r0, #1
  401906:	d1f1      	bne.n	4018ec <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40190c:	4b36      	ldr	r3, [pc, #216]	; (4019e8 <xQueueGenericSend+0x1c0>)
  40190e:	601a      	str	r2, [r3, #0]
  401910:	f3bf 8f4f 	dsb	sy
  401914:	f3bf 8f6f 	isb	sy
  401918:	e7e8      	b.n	4018ec <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40191a:	2800      	cmp	r0, #0
  40191c:	d0e6      	beq.n	4018ec <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40191e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401922:	4b31      	ldr	r3, [pc, #196]	; (4019e8 <xQueueGenericSend+0x1c0>)
  401924:	601a      	str	r2, [r3, #0]
  401926:	f3bf 8f4f 	dsb	sy
  40192a:	f3bf 8f6f 	isb	sy
  40192e:	e7dd      	b.n	4018ec <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401930:	4b2e      	ldr	r3, [pc, #184]	; (4019ec <xQueueGenericSend+0x1c4>)
  401932:	4798      	blx	r3
					return errQUEUE_FULL;
  401934:	2000      	movs	r0, #0
  401936:	e7dc      	b.n	4018f2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401938:	4620      	mov	r0, r4
  40193a:	4b2e      	ldr	r3, [pc, #184]	; (4019f4 <xQueueGenericSend+0x1cc>)
  40193c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40193e:	4b2e      	ldr	r3, [pc, #184]	; (4019f8 <xQueueGenericSend+0x1d0>)
  401940:	4798      	blx	r3
  401942:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401944:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401946:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40194a:	429a      	cmp	r2, r3
  40194c:	d3b9      	bcc.n	4018c2 <xQueueGenericSend+0x9a>
  40194e:	2d02      	cmp	r5, #2
  401950:	d0b7      	beq.n	4018c2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401952:	9b01      	ldr	r3, [sp, #4]
  401954:	2b00      	cmp	r3, #0
  401956:	d0eb      	beq.n	401930 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401958:	b90f      	cbnz	r7, 40195e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40195a:	a802      	add	r0, sp, #8
  40195c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40195e:	4b23      	ldr	r3, [pc, #140]	; (4019ec <xQueueGenericSend+0x1c4>)
  401960:	4798      	blx	r3
		vTaskSuspendAll();
  401962:	4b26      	ldr	r3, [pc, #152]	; (4019fc <xQueueGenericSend+0x1d4>)
  401964:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401966:	47b0      	blx	r6
  401968:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40196a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40196e:	d101      	bne.n	401974 <xQueueGenericSend+0x14c>
  401970:	2300      	movs	r3, #0
  401972:	6463      	str	r3, [r4, #68]	; 0x44
  401974:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401976:	f1b3 3fff 	cmp.w	r3, #4294967295
  40197a:	d101      	bne.n	401980 <xQueueGenericSend+0x158>
  40197c:	2300      	movs	r3, #0
  40197e:	64a3      	str	r3, [r4, #72]	; 0x48
  401980:	4b1a      	ldr	r3, [pc, #104]	; (4019ec <xQueueGenericSend+0x1c4>)
  401982:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401984:	a901      	add	r1, sp, #4
  401986:	a802      	add	r0, sp, #8
  401988:	4b1d      	ldr	r3, [pc, #116]	; (401a00 <xQueueGenericSend+0x1d8>)
  40198a:	4798      	blx	r3
  40198c:	b9e0      	cbnz	r0, 4019c8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  40198e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401990:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401994:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401996:	4b15      	ldr	r3, [pc, #84]	; (4019ec <xQueueGenericSend+0x1c4>)
  401998:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40199a:	45bb      	cmp	fp, r7
  40199c:	d1cc      	bne.n	401938 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40199e:	9901      	ldr	r1, [sp, #4]
  4019a0:	f104 0010 	add.w	r0, r4, #16
  4019a4:	4b17      	ldr	r3, [pc, #92]	; (401a04 <xQueueGenericSend+0x1dc>)
  4019a6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4019a8:	4620      	mov	r0, r4
  4019aa:	4b12      	ldr	r3, [pc, #72]	; (4019f4 <xQueueGenericSend+0x1cc>)
  4019ac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4019ae:	4b12      	ldr	r3, [pc, #72]	; (4019f8 <xQueueGenericSend+0x1d0>)
  4019b0:	4798      	blx	r3
  4019b2:	2800      	cmp	r0, #0
  4019b4:	d1c5      	bne.n	401942 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  4019b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4019ba:	f8c9 3000 	str.w	r3, [r9]
  4019be:	f3bf 8f4f 	dsb	sy
  4019c2:	f3bf 8f6f 	isb	sy
  4019c6:	e7bc      	b.n	401942 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4019c8:	4620      	mov	r0, r4
  4019ca:	4b0a      	ldr	r3, [pc, #40]	; (4019f4 <xQueueGenericSend+0x1cc>)
  4019cc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4019ce:	4b0a      	ldr	r3, [pc, #40]	; (4019f8 <xQueueGenericSend+0x1d0>)
  4019d0:	4798      	blx	r3
			return errQUEUE_FULL;
  4019d2:	2000      	movs	r0, #0
  4019d4:	e78d      	b.n	4018f2 <xQueueGenericSend+0xca>
  4019d6:	bf00      	nop
  4019d8:	00402799 	.word	0x00402799
  4019dc:	0040128d 	.word	0x0040128d
  4019e0:	0040153d 	.word	0x0040153d
  4019e4:	004015c5 	.word	0x004015c5
  4019e8:	e000ed04 	.word	0xe000ed04
  4019ec:	004012d9 	.word	0x004012d9
  4019f0:	00402631 	.word	0x00402631
  4019f4:	00401675 	.word	0x00401675
  4019f8:	00402215 	.word	0x00402215
  4019fc:	004020ad 	.word	0x004020ad
  401a00:	004026f9 	.word	0x004026f9
  401a04:	0040252d 	.word	0x0040252d
  401a08:	004026c9 	.word	0x004026c9

00401a0c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401a0c:	2800      	cmp	r0, #0
  401a0e:	d036      	beq.n	401a7e <xQueueGenericSendFromISR+0x72>
{
  401a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a14:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a16:	2900      	cmp	r1, #0
  401a18:	d03c      	beq.n	401a94 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401a1a:	2b02      	cmp	r3, #2
  401a1c:	d048      	beq.n	401ab0 <xQueueGenericSendFromISR+0xa4>
  401a1e:	461e      	mov	r6, r3
  401a20:	4615      	mov	r5, r2
  401a22:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401a24:	4b35      	ldr	r3, [pc, #212]	; (401afc <xQueueGenericSendFromISR+0xf0>)
  401a26:	4798      	blx	r3
	__asm volatile
  401a28:	f3ef 8711 	mrs	r7, BASEPRI
  401a2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a30:	b672      	cpsid	i
  401a32:	f383 8811 	msr	BASEPRI, r3
  401a36:	f3bf 8f6f 	isb	sy
  401a3a:	f3bf 8f4f 	dsb	sy
  401a3e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401a40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401a42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a44:	429a      	cmp	r2, r3
  401a46:	d301      	bcc.n	401a4c <xQueueGenericSendFromISR+0x40>
  401a48:	2e02      	cmp	r6, #2
  401a4a:	d14f      	bne.n	401aec <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401a4c:	4632      	mov	r2, r6
  401a4e:	4641      	mov	r1, r8
  401a50:	4620      	mov	r0, r4
  401a52:	4b2b      	ldr	r3, [pc, #172]	; (401b00 <xQueueGenericSendFromISR+0xf4>)
  401a54:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a58:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a5c:	d141      	bne.n	401ae2 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401a5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401a60:	2b00      	cmp	r3, #0
  401a62:	d033      	beq.n	401acc <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401a64:	4631      	mov	r1, r6
  401a66:	4620      	mov	r0, r4
  401a68:	4b26      	ldr	r3, [pc, #152]	; (401b04 <xQueueGenericSendFromISR+0xf8>)
  401a6a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401a6c:	2d00      	cmp	r5, #0
  401a6e:	d03f      	beq.n	401af0 <xQueueGenericSendFromISR+0xe4>
  401a70:	2801      	cmp	r0, #1
  401a72:	d13d      	bne.n	401af0 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401a74:	6028      	str	r0, [r5, #0]
	__asm volatile
  401a76:	f387 8811 	msr	BASEPRI, r7
}
  401a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401a7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a82:	b672      	cpsid	i
  401a84:	f383 8811 	msr	BASEPRI, r3
  401a88:	f3bf 8f6f 	isb	sy
  401a8c:	f3bf 8f4f 	dsb	sy
  401a90:	b662      	cpsie	i
  401a92:	e7fe      	b.n	401a92 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a94:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401a96:	2800      	cmp	r0, #0
  401a98:	d0bf      	beq.n	401a1a <xQueueGenericSendFromISR+0xe>
  401a9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9e:	b672      	cpsid	i
  401aa0:	f383 8811 	msr	BASEPRI, r3
  401aa4:	f3bf 8f6f 	isb	sy
  401aa8:	f3bf 8f4f 	dsb	sy
  401aac:	b662      	cpsie	i
  401aae:	e7fe      	b.n	401aae <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401ab0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401ab2:	2801      	cmp	r0, #1
  401ab4:	d0b3      	beq.n	401a1e <xQueueGenericSendFromISR+0x12>
  401ab6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aba:	b672      	cpsid	i
  401abc:	f383 8811 	msr	BASEPRI, r3
  401ac0:	f3bf 8f6f 	isb	sy
  401ac4:	f3bf 8f4f 	dsb	sy
  401ac8:	b662      	cpsie	i
  401aca:	e7fe      	b.n	401aca <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ace:	b18b      	cbz	r3, 401af4 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ad0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ad4:	4b0c      	ldr	r3, [pc, #48]	; (401b08 <xQueueGenericSendFromISR+0xfc>)
  401ad6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401ad8:	b175      	cbz	r5, 401af8 <xQueueGenericSendFromISR+0xec>
  401ada:	b168      	cbz	r0, 401af8 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401adc:	2001      	movs	r0, #1
  401ade:	6028      	str	r0, [r5, #0]
  401ae0:	e7c9      	b.n	401a76 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401ae2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ae4:	3301      	adds	r3, #1
  401ae6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401ae8:	2001      	movs	r0, #1
  401aea:	e7c4      	b.n	401a76 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401aec:	2000      	movs	r0, #0
  401aee:	e7c2      	b.n	401a76 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401af0:	2001      	movs	r0, #1
  401af2:	e7c0      	b.n	401a76 <xQueueGenericSendFromISR+0x6a>
  401af4:	2001      	movs	r0, #1
  401af6:	e7be      	b.n	401a76 <xQueueGenericSendFromISR+0x6a>
  401af8:	2001      	movs	r0, #1
  401afa:	e7bc      	b.n	401a76 <xQueueGenericSendFromISR+0x6a>
  401afc:	00401485 	.word	0x00401485
  401b00:	0040153d 	.word	0x0040153d
  401b04:	004015c5 	.word	0x004015c5
  401b08:	00402631 	.word	0x00402631

00401b0c <xQueueGenericReceive>:
{
  401b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b10:	b084      	sub	sp, #16
  401b12:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b14:	b198      	cbz	r0, 401b3e <xQueueGenericReceive+0x32>
  401b16:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b18:	b1e1      	cbz	r1, 401b54 <xQueueGenericReceive+0x48>
  401b1a:	4698      	mov	r8, r3
  401b1c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b1e:	4b61      	ldr	r3, [pc, #388]	; (401ca4 <xQueueGenericReceive+0x198>)
  401b20:	4798      	blx	r3
  401b22:	bb28      	cbnz	r0, 401b70 <xQueueGenericReceive+0x64>
  401b24:	9b01      	ldr	r3, [sp, #4]
  401b26:	b353      	cbz	r3, 401b7e <xQueueGenericReceive+0x72>
  401b28:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b2c:	b672      	cpsid	i
  401b2e:	f383 8811 	msr	BASEPRI, r3
  401b32:	f3bf 8f6f 	isb	sy
  401b36:	f3bf 8f4f 	dsb	sy
  401b3a:	b662      	cpsie	i
  401b3c:	e7fe      	b.n	401b3c <xQueueGenericReceive+0x30>
  401b3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b42:	b672      	cpsid	i
  401b44:	f383 8811 	msr	BASEPRI, r3
  401b48:	f3bf 8f6f 	isb	sy
  401b4c:	f3bf 8f4f 	dsb	sy
  401b50:	b662      	cpsie	i
  401b52:	e7fe      	b.n	401b52 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b54:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b56:	2a00      	cmp	r2, #0
  401b58:	d0df      	beq.n	401b1a <xQueueGenericReceive+0xe>
  401b5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b5e:	b672      	cpsid	i
  401b60:	f383 8811 	msr	BASEPRI, r3
  401b64:	f3bf 8f6f 	isb	sy
  401b68:	f3bf 8f4f 	dsb	sy
  401b6c:	b662      	cpsie	i
  401b6e:	e7fe      	b.n	401b6e <xQueueGenericReceive+0x62>
  401b70:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401b72:	4d4d      	ldr	r5, [pc, #308]	; (401ca8 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401b74:	f8df a160 	ldr.w	sl, [pc, #352]	; 401cd8 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401b78:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401cb8 <xQueueGenericReceive+0x1ac>
  401b7c:	e04b      	b.n	401c16 <xQueueGenericReceive+0x10a>
  401b7e:	2600      	movs	r6, #0
  401b80:	e7f7      	b.n	401b72 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401b82:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401b84:	4639      	mov	r1, r7
  401b86:	4620      	mov	r0, r4
  401b88:	4b48      	ldr	r3, [pc, #288]	; (401cac <xQueueGenericReceive+0x1a0>)
  401b8a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401b8c:	f1b8 0f00 	cmp.w	r8, #0
  401b90:	d11d      	bne.n	401bce <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401b92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b94:	3b01      	subs	r3, #1
  401b96:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401b98:	6823      	ldr	r3, [r4, #0]
  401b9a:	b913      	cbnz	r3, 401ba2 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401b9c:	4b44      	ldr	r3, [pc, #272]	; (401cb0 <xQueueGenericReceive+0x1a4>)
  401b9e:	4798      	blx	r3
  401ba0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ba2:	6923      	ldr	r3, [r4, #16]
  401ba4:	b16b      	cbz	r3, 401bc2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401ba6:	f104 0010 	add.w	r0, r4, #16
  401baa:	4b42      	ldr	r3, [pc, #264]	; (401cb4 <xQueueGenericReceive+0x1a8>)
  401bac:	4798      	blx	r3
  401bae:	2801      	cmp	r0, #1
  401bb0:	d107      	bne.n	401bc2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401bb6:	4b40      	ldr	r3, [pc, #256]	; (401cb8 <xQueueGenericReceive+0x1ac>)
  401bb8:	601a      	str	r2, [r3, #0]
  401bba:	f3bf 8f4f 	dsb	sy
  401bbe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401bc2:	4b3e      	ldr	r3, [pc, #248]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401bc4:	4798      	blx	r3
				return pdPASS;
  401bc6:	2001      	movs	r0, #1
}
  401bc8:	b004      	add	sp, #16
  401bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401bce:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bd2:	2b00      	cmp	r3, #0
  401bd4:	d0f5      	beq.n	401bc2 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401bda:	4b36      	ldr	r3, [pc, #216]	; (401cb4 <xQueueGenericReceive+0x1a8>)
  401bdc:	4798      	blx	r3
  401bde:	2800      	cmp	r0, #0
  401be0:	d0ef      	beq.n	401bc2 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401be6:	4b34      	ldr	r3, [pc, #208]	; (401cb8 <xQueueGenericReceive+0x1ac>)
  401be8:	601a      	str	r2, [r3, #0]
  401bea:	f3bf 8f4f 	dsb	sy
  401bee:	f3bf 8f6f 	isb	sy
  401bf2:	e7e6      	b.n	401bc2 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401bf4:	4b31      	ldr	r3, [pc, #196]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401bf6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401bf8:	2000      	movs	r0, #0
  401bfa:	e7e5      	b.n	401bc8 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401bfc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401bfe:	6860      	ldr	r0, [r4, #4]
  401c00:	4b2f      	ldr	r3, [pc, #188]	; (401cc0 <xQueueGenericReceive+0x1b4>)
  401c02:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401c04:	4b2d      	ldr	r3, [pc, #180]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401c06:	4798      	blx	r3
  401c08:	e030      	b.n	401c6c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401c0a:	4620      	mov	r0, r4
  401c0c:	4b2d      	ldr	r3, [pc, #180]	; (401cc4 <xQueueGenericReceive+0x1b8>)
  401c0e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c10:	4b2d      	ldr	r3, [pc, #180]	; (401cc8 <xQueueGenericReceive+0x1bc>)
  401c12:	4798      	blx	r3
  401c14:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401c16:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c1a:	2b00      	cmp	r3, #0
  401c1c:	d1b1      	bne.n	401b82 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c1e:	9b01      	ldr	r3, [sp, #4]
  401c20:	2b00      	cmp	r3, #0
  401c22:	d0e7      	beq.n	401bf4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401c24:	b90e      	cbnz	r6, 401c2a <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401c26:	a802      	add	r0, sp, #8
  401c28:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401c2a:	4b24      	ldr	r3, [pc, #144]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401c2c:	4798      	blx	r3
		vTaskSuspendAll();
  401c2e:	4b27      	ldr	r3, [pc, #156]	; (401ccc <xQueueGenericReceive+0x1c0>)
  401c30:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c32:	47a8      	blx	r5
  401c34:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c36:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c3a:	d101      	bne.n	401c40 <xQueueGenericReceive+0x134>
  401c3c:	2300      	movs	r3, #0
  401c3e:	6463      	str	r3, [r4, #68]	; 0x44
  401c40:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c42:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c46:	d101      	bne.n	401c4c <xQueueGenericReceive+0x140>
  401c48:	2300      	movs	r3, #0
  401c4a:	64a3      	str	r3, [r4, #72]	; 0x48
  401c4c:	4b1b      	ldr	r3, [pc, #108]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401c4e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c50:	a901      	add	r1, sp, #4
  401c52:	a802      	add	r0, sp, #8
  401c54:	4b1e      	ldr	r3, [pc, #120]	; (401cd0 <xQueueGenericReceive+0x1c4>)
  401c56:	4798      	blx	r3
  401c58:	b9e8      	cbnz	r0, 401c96 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401c5a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401c5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401c5e:	4b17      	ldr	r3, [pc, #92]	; (401cbc <xQueueGenericReceive+0x1b0>)
  401c60:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401c62:	2e00      	cmp	r6, #0
  401c64:	d1d1      	bne.n	401c0a <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c66:	6823      	ldr	r3, [r4, #0]
  401c68:	2b00      	cmp	r3, #0
  401c6a:	d0c7      	beq.n	401bfc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401c6c:	9901      	ldr	r1, [sp, #4]
  401c6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c72:	4b18      	ldr	r3, [pc, #96]	; (401cd4 <xQueueGenericReceive+0x1c8>)
  401c74:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401c76:	4620      	mov	r0, r4
  401c78:	4b12      	ldr	r3, [pc, #72]	; (401cc4 <xQueueGenericReceive+0x1b8>)
  401c7a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401c7c:	4b12      	ldr	r3, [pc, #72]	; (401cc8 <xQueueGenericReceive+0x1bc>)
  401c7e:	4798      	blx	r3
  401c80:	2800      	cmp	r0, #0
  401c82:	d1c7      	bne.n	401c14 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c88:	f8c9 3000 	str.w	r3, [r9]
  401c8c:	f3bf 8f4f 	dsb	sy
  401c90:	f3bf 8f6f 	isb	sy
  401c94:	e7be      	b.n	401c14 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401c96:	4620      	mov	r0, r4
  401c98:	4b0a      	ldr	r3, [pc, #40]	; (401cc4 <xQueueGenericReceive+0x1b8>)
  401c9a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401c9c:	4b0a      	ldr	r3, [pc, #40]	; (401cc8 <xQueueGenericReceive+0x1bc>)
  401c9e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401ca0:	2000      	movs	r0, #0
  401ca2:	e791      	b.n	401bc8 <xQueueGenericReceive+0xbc>
  401ca4:	00402799 	.word	0x00402799
  401ca8:	0040128d 	.word	0x0040128d
  401cac:	0040164d 	.word	0x0040164d
  401cb0:	00402919 	.word	0x00402919
  401cb4:	00402631 	.word	0x00402631
  401cb8:	e000ed04 	.word	0xe000ed04
  401cbc:	004012d9 	.word	0x004012d9
  401cc0:	004027b9 	.word	0x004027b9
  401cc4:	00401675 	.word	0x00401675
  401cc8:	00402215 	.word	0x00402215
  401ccc:	004020ad 	.word	0x004020ad
  401cd0:	004026f9 	.word	0x004026f9
  401cd4:	0040252d 	.word	0x0040252d
  401cd8:	004026c9 	.word	0x004026c9

00401cdc <vQueueAddToRegistry>:
	{
  401cdc:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401cde:	4b0b      	ldr	r3, [pc, #44]	; (401d0c <vQueueAddToRegistry+0x30>)
  401ce0:	681b      	ldr	r3, [r3, #0]
  401ce2:	b153      	cbz	r3, 401cfa <vQueueAddToRegistry+0x1e>
  401ce4:	2301      	movs	r3, #1
  401ce6:	4c09      	ldr	r4, [pc, #36]	; (401d0c <vQueueAddToRegistry+0x30>)
  401ce8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401cec:	b132      	cbz	r2, 401cfc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401cee:	3301      	adds	r3, #1
  401cf0:	2b08      	cmp	r3, #8
  401cf2:	d1f9      	bne.n	401ce8 <vQueueAddToRegistry+0xc>
	}
  401cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cf8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401cfa:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401cfc:	4a03      	ldr	r2, [pc, #12]	; (401d0c <vQueueAddToRegistry+0x30>)
  401cfe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401d02:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401d06:	6058      	str	r0, [r3, #4]
				break;
  401d08:	e7f4      	b.n	401cf4 <vQueueAddToRegistry+0x18>
  401d0a:	bf00      	nop
  401d0c:	20400c58 	.word	0x20400c58

00401d10 <vQueueWaitForMessageRestricted>:
	{
  401d10:	b570      	push	{r4, r5, r6, lr}
  401d12:	4604      	mov	r4, r0
  401d14:	460d      	mov	r5, r1
  401d16:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401d18:	4b0f      	ldr	r3, [pc, #60]	; (401d58 <vQueueWaitForMessageRestricted+0x48>)
  401d1a:	4798      	blx	r3
  401d1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d22:	d00b      	beq.n	401d3c <vQueueWaitForMessageRestricted+0x2c>
  401d24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d26:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d2a:	d00a      	beq.n	401d42 <vQueueWaitForMessageRestricted+0x32>
  401d2c:	4b0b      	ldr	r3, [pc, #44]	; (401d5c <vQueueWaitForMessageRestricted+0x4c>)
  401d2e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401d32:	b14b      	cbz	r3, 401d48 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401d34:	4620      	mov	r0, r4
  401d36:	4b0a      	ldr	r3, [pc, #40]	; (401d60 <vQueueWaitForMessageRestricted+0x50>)
  401d38:	4798      	blx	r3
  401d3a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401d3c:	2300      	movs	r3, #0
  401d3e:	6463      	str	r3, [r4, #68]	; 0x44
  401d40:	e7f0      	b.n	401d24 <vQueueWaitForMessageRestricted+0x14>
  401d42:	2300      	movs	r3, #0
  401d44:	64a3      	str	r3, [r4, #72]	; 0x48
  401d46:	e7f1      	b.n	401d2c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401d48:	4632      	mov	r2, r6
  401d4a:	4629      	mov	r1, r5
  401d4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d50:	4b04      	ldr	r3, [pc, #16]	; (401d64 <vQueueWaitForMessageRestricted+0x54>)
  401d52:	4798      	blx	r3
  401d54:	e7ee      	b.n	401d34 <vQueueWaitForMessageRestricted+0x24>
  401d56:	bf00      	nop
  401d58:	0040128d 	.word	0x0040128d
  401d5c:	004012d9 	.word	0x004012d9
  401d60:	00401675 	.word	0x00401675
  401d64:	004025b1 	.word	0x004025b1

00401d68 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401d68:	4b08      	ldr	r3, [pc, #32]	; (401d8c <prvResetNextTaskUnblockTime+0x24>)
  401d6a:	681b      	ldr	r3, [r3, #0]
  401d6c:	681b      	ldr	r3, [r3, #0]
  401d6e:	b13b      	cbz	r3, 401d80 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401d70:	4b06      	ldr	r3, [pc, #24]	; (401d8c <prvResetNextTaskUnblockTime+0x24>)
  401d72:	681b      	ldr	r3, [r3, #0]
  401d74:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401d76:	68db      	ldr	r3, [r3, #12]
  401d78:	685a      	ldr	r2, [r3, #4]
  401d7a:	4b05      	ldr	r3, [pc, #20]	; (401d90 <prvResetNextTaskUnblockTime+0x28>)
  401d7c:	601a      	str	r2, [r3, #0]
  401d7e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401d80:	f04f 32ff 	mov.w	r2, #4294967295
  401d84:	4b02      	ldr	r3, [pc, #8]	; (401d90 <prvResetNextTaskUnblockTime+0x28>)
  401d86:	601a      	str	r2, [r3, #0]
  401d88:	4770      	bx	lr
  401d8a:	bf00      	nop
  401d8c:	20400a5c 	.word	0x20400a5c
  401d90:	20400b08 	.word	0x20400b08

00401d94 <prvAddCurrentTaskToDelayedList>:
{
  401d94:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401d96:	4b0f      	ldr	r3, [pc, #60]	; (401dd4 <prvAddCurrentTaskToDelayedList+0x40>)
  401d98:	681b      	ldr	r3, [r3, #0]
  401d9a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401d9c:	4b0e      	ldr	r3, [pc, #56]	; (401dd8 <prvAddCurrentTaskToDelayedList+0x44>)
  401d9e:	681b      	ldr	r3, [r3, #0]
  401da0:	4298      	cmp	r0, r3
  401da2:	d30e      	bcc.n	401dc2 <prvAddCurrentTaskToDelayedList+0x2e>
  401da4:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401da6:	4b0d      	ldr	r3, [pc, #52]	; (401ddc <prvAddCurrentTaskToDelayedList+0x48>)
  401da8:	6818      	ldr	r0, [r3, #0]
  401daa:	4b0a      	ldr	r3, [pc, #40]	; (401dd4 <prvAddCurrentTaskToDelayedList+0x40>)
  401dac:	6819      	ldr	r1, [r3, #0]
  401dae:	3104      	adds	r1, #4
  401db0:	4b0b      	ldr	r3, [pc, #44]	; (401de0 <prvAddCurrentTaskToDelayedList+0x4c>)
  401db2:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401db4:	4b0b      	ldr	r3, [pc, #44]	; (401de4 <prvAddCurrentTaskToDelayedList+0x50>)
  401db6:	681b      	ldr	r3, [r3, #0]
  401db8:	429c      	cmp	r4, r3
  401dba:	d201      	bcs.n	401dc0 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401dbc:	4b09      	ldr	r3, [pc, #36]	; (401de4 <prvAddCurrentTaskToDelayedList+0x50>)
  401dbe:	601c      	str	r4, [r3, #0]
  401dc0:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401dc2:	4b09      	ldr	r3, [pc, #36]	; (401de8 <prvAddCurrentTaskToDelayedList+0x54>)
  401dc4:	6818      	ldr	r0, [r3, #0]
  401dc6:	4b03      	ldr	r3, [pc, #12]	; (401dd4 <prvAddCurrentTaskToDelayedList+0x40>)
  401dc8:	6819      	ldr	r1, [r3, #0]
  401dca:	3104      	adds	r1, #4
  401dcc:	4b04      	ldr	r3, [pc, #16]	; (401de0 <prvAddCurrentTaskToDelayedList+0x4c>)
  401dce:	4798      	blx	r3
  401dd0:	bd10      	pop	{r4, pc}
  401dd2:	bf00      	nop
  401dd4:	20400a58 	.word	0x20400a58
  401dd8:	20400b50 	.word	0x20400b50
  401ddc:	20400a5c 	.word	0x20400a5c
  401de0:	00401175 	.word	0x00401175
  401de4:	20400b08 	.word	0x20400b08
  401de8:	20400a60 	.word	0x20400a60

00401dec <xTaskGenericCreate>:
{
  401dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401df0:	b083      	sub	sp, #12
  401df2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401df4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401df8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401dfa:	b160      	cbz	r0, 401e16 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401dfc:	2d04      	cmp	r5, #4
  401dfe:	d915      	bls.n	401e2c <xTaskGenericCreate+0x40>
  401e00:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e04:	b672      	cpsid	i
  401e06:	f383 8811 	msr	BASEPRI, r3
  401e0a:	f3bf 8f6f 	isb	sy
  401e0e:	f3bf 8f4f 	dsb	sy
  401e12:	b662      	cpsie	i
  401e14:	e7fe      	b.n	401e14 <xTaskGenericCreate+0x28>
  401e16:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e1a:	b672      	cpsid	i
  401e1c:	f383 8811 	msr	BASEPRI, r3
  401e20:	f3bf 8f6f 	isb	sy
  401e24:	f3bf 8f4f 	dsb	sy
  401e28:	b662      	cpsie	i
  401e2a:	e7fe      	b.n	401e2a <xTaskGenericCreate+0x3e>
  401e2c:	9001      	str	r0, [sp, #4]
  401e2e:	4698      	mov	r8, r3
  401e30:	4691      	mov	r9, r2
  401e32:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e34:	b936      	cbnz	r6, 401e44 <xTaskGenericCreate+0x58>
  401e36:	0090      	lsls	r0, r2, #2
  401e38:	4b62      	ldr	r3, [pc, #392]	; (401fc4 <xTaskGenericCreate+0x1d8>)
  401e3a:	4798      	blx	r3
		if( pxStack != NULL )
  401e3c:	4606      	mov	r6, r0
  401e3e:	2800      	cmp	r0, #0
  401e40:	f000 809e 	beq.w	401f80 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401e44:	2058      	movs	r0, #88	; 0x58
  401e46:	4b5f      	ldr	r3, [pc, #380]	; (401fc4 <xTaskGenericCreate+0x1d8>)
  401e48:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401e4a:	4604      	mov	r4, r0
  401e4c:	2800      	cmp	r0, #0
  401e4e:	f000 8094 	beq.w	401f7a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401e52:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401e54:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401e58:	21a5      	movs	r1, #165	; 0xa5
  401e5a:	4630      	mov	r0, r6
  401e5c:	4b5a      	ldr	r3, [pc, #360]	; (401fc8 <xTaskGenericCreate+0x1dc>)
  401e5e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401e60:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401e64:	444e      	add	r6, r9
  401e66:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e68:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401e6c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401e70:	783b      	ldrb	r3, [r7, #0]
  401e72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401e76:	783b      	ldrb	r3, [r7, #0]
  401e78:	2b00      	cmp	r3, #0
  401e7a:	f040 8084 	bne.w	401f86 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401e7e:	2700      	movs	r7, #0
  401e80:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401e84:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401e86:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401e88:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401e8a:	f104 0904 	add.w	r9, r4, #4
  401e8e:	4648      	mov	r0, r9
  401e90:	f8df b184 	ldr.w	fp, [pc, #388]	; 402018 <xTaskGenericCreate+0x22c>
  401e94:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401e96:	f104 0018 	add.w	r0, r4, #24
  401e9a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401e9c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e9e:	f1c5 0305 	rsb	r3, r5, #5
  401ea2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401ea4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401ea6:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401ea8:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401eac:	4642      	mov	r2, r8
  401eae:	9901      	ldr	r1, [sp, #4]
  401eb0:	4630      	mov	r0, r6
  401eb2:	4b46      	ldr	r3, [pc, #280]	; (401fcc <xTaskGenericCreate+0x1e0>)
  401eb4:	4798      	blx	r3
  401eb6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401eb8:	f1ba 0f00 	cmp.w	sl, #0
  401ebc:	d001      	beq.n	401ec2 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401ebe:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401ec2:	4b43      	ldr	r3, [pc, #268]	; (401fd0 <xTaskGenericCreate+0x1e4>)
  401ec4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401ec6:	4a43      	ldr	r2, [pc, #268]	; (401fd4 <xTaskGenericCreate+0x1e8>)
  401ec8:	6813      	ldr	r3, [r2, #0]
  401eca:	3301      	adds	r3, #1
  401ecc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401ece:	4b42      	ldr	r3, [pc, #264]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401ed0:	681b      	ldr	r3, [r3, #0]
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	d166      	bne.n	401fa4 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401ed6:	4b40      	ldr	r3, [pc, #256]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401ed8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401eda:	6813      	ldr	r3, [r2, #0]
  401edc:	2b01      	cmp	r3, #1
  401ede:	d121      	bne.n	401f24 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ee0:	4f3e      	ldr	r7, [pc, #248]	; (401fdc <xTaskGenericCreate+0x1f0>)
  401ee2:	4638      	mov	r0, r7
  401ee4:	4e3e      	ldr	r6, [pc, #248]	; (401fe0 <xTaskGenericCreate+0x1f4>)
  401ee6:	47b0      	blx	r6
  401ee8:	f107 0014 	add.w	r0, r7, #20
  401eec:	47b0      	blx	r6
  401eee:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401ef2:	47b0      	blx	r6
  401ef4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401ef8:	47b0      	blx	r6
  401efa:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401efe:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401f00:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40201c <xTaskGenericCreate+0x230>
  401f04:	4640      	mov	r0, r8
  401f06:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401f08:	4f36      	ldr	r7, [pc, #216]	; (401fe4 <xTaskGenericCreate+0x1f8>)
  401f0a:	4638      	mov	r0, r7
  401f0c:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401f0e:	4836      	ldr	r0, [pc, #216]	; (401fe8 <xTaskGenericCreate+0x1fc>)
  401f10:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401f12:	4836      	ldr	r0, [pc, #216]	; (401fec <xTaskGenericCreate+0x200>)
  401f14:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401f16:	4836      	ldr	r0, [pc, #216]	; (401ff0 <xTaskGenericCreate+0x204>)
  401f18:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401f1a:	4b36      	ldr	r3, [pc, #216]	; (401ff4 <xTaskGenericCreate+0x208>)
  401f1c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401f20:	4b35      	ldr	r3, [pc, #212]	; (401ff8 <xTaskGenericCreate+0x20c>)
  401f22:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401f24:	4a35      	ldr	r2, [pc, #212]	; (401ffc <xTaskGenericCreate+0x210>)
  401f26:	6813      	ldr	r3, [r2, #0]
  401f28:	3301      	adds	r3, #1
  401f2a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401f2c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401f2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401f30:	4a33      	ldr	r2, [pc, #204]	; (402000 <xTaskGenericCreate+0x214>)
  401f32:	6811      	ldr	r1, [r2, #0]
  401f34:	2301      	movs	r3, #1
  401f36:	4083      	lsls	r3, r0
  401f38:	430b      	orrs	r3, r1
  401f3a:	6013      	str	r3, [r2, #0]
  401f3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f40:	4649      	mov	r1, r9
  401f42:	4b26      	ldr	r3, [pc, #152]	; (401fdc <xTaskGenericCreate+0x1f0>)
  401f44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f48:	4b2e      	ldr	r3, [pc, #184]	; (402004 <xTaskGenericCreate+0x218>)
  401f4a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401f4c:	4b2e      	ldr	r3, [pc, #184]	; (402008 <xTaskGenericCreate+0x21c>)
  401f4e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401f50:	4b2e      	ldr	r3, [pc, #184]	; (40200c <xTaskGenericCreate+0x220>)
  401f52:	681b      	ldr	r3, [r3, #0]
  401f54:	2b00      	cmp	r3, #0
  401f56:	d031      	beq.n	401fbc <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401f58:	4b1f      	ldr	r3, [pc, #124]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401f5a:	681b      	ldr	r3, [r3, #0]
  401f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f5e:	429d      	cmp	r5, r3
  401f60:	d92e      	bls.n	401fc0 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f66:	4b2a      	ldr	r3, [pc, #168]	; (402010 <xTaskGenericCreate+0x224>)
  401f68:	601a      	str	r2, [r3, #0]
  401f6a:	f3bf 8f4f 	dsb	sy
  401f6e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401f72:	2001      	movs	r0, #1
}
  401f74:	b003      	add	sp, #12
  401f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401f7a:	4630      	mov	r0, r6
  401f7c:	4b25      	ldr	r3, [pc, #148]	; (402014 <xTaskGenericCreate+0x228>)
  401f7e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401f80:	f04f 30ff 	mov.w	r0, #4294967295
  401f84:	e7f6      	b.n	401f74 <xTaskGenericCreate+0x188>
  401f86:	463b      	mov	r3, r7
  401f88:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401f8c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401f8e:	7859      	ldrb	r1, [r3, #1]
  401f90:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401f94:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401f98:	2900      	cmp	r1, #0
  401f9a:	f43f af70 	beq.w	401e7e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401f9e:	42bb      	cmp	r3, r7
  401fa0:	d1f5      	bne.n	401f8e <xTaskGenericCreate+0x1a2>
  401fa2:	e76c      	b.n	401e7e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401fa4:	4b19      	ldr	r3, [pc, #100]	; (40200c <xTaskGenericCreate+0x220>)
  401fa6:	681b      	ldr	r3, [r3, #0]
  401fa8:	2b00      	cmp	r3, #0
  401faa:	d1bb      	bne.n	401f24 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401fac:	4b0a      	ldr	r3, [pc, #40]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401fae:	681b      	ldr	r3, [r3, #0]
  401fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401fb2:	429d      	cmp	r5, r3
  401fb4:	d3b6      	bcc.n	401f24 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401fb6:	4b08      	ldr	r3, [pc, #32]	; (401fd8 <xTaskGenericCreate+0x1ec>)
  401fb8:	601c      	str	r4, [r3, #0]
  401fba:	e7b3      	b.n	401f24 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401fbc:	2001      	movs	r0, #1
  401fbe:	e7d9      	b.n	401f74 <xTaskGenericCreate+0x188>
  401fc0:	2001      	movs	r0, #1
	return xReturn;
  401fc2:	e7d7      	b.n	401f74 <xTaskGenericCreate+0x188>
  401fc4:	004014e9 	.word	0x004014e9
  401fc8:	00404029 	.word	0x00404029
  401fcc:	00401241 	.word	0x00401241
  401fd0:	0040128d 	.word	0x0040128d
  401fd4:	20400ac8 	.word	0x20400ac8
  401fd8:	20400a58 	.word	0x20400a58
  401fdc:	20400a64 	.word	0x20400a64
  401fe0:	00401141 	.word	0x00401141
  401fe4:	20400af4 	.word	0x20400af4
  401fe8:	20400b10 	.word	0x20400b10
  401fec:	20400b3c 	.word	0x20400b3c
  401ff0:	20400b28 	.word	0x20400b28
  401ff4:	20400a5c 	.word	0x20400a5c
  401ff8:	20400a60 	.word	0x20400a60
  401ffc:	20400ad4 	.word	0x20400ad4
  402000:	20400adc 	.word	0x20400adc
  402004:	0040115d 	.word	0x0040115d
  402008:	004012d9 	.word	0x004012d9
  40200c:	20400b24 	.word	0x20400b24
  402010:	e000ed04 	.word	0xe000ed04
  402014:	00401519 	.word	0x00401519
  402018:	00401157 	.word	0x00401157
  40201c:	20400ae0 	.word	0x20400ae0

00402020 <vTaskStartScheduler>:
{
  402020:	b510      	push	{r4, lr}
  402022:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402024:	2300      	movs	r3, #0
  402026:	9303      	str	r3, [sp, #12]
  402028:	9302      	str	r3, [sp, #8]
  40202a:	9301      	str	r3, [sp, #4]
  40202c:	9300      	str	r3, [sp, #0]
  40202e:	2282      	movs	r2, #130	; 0x82
  402030:	4916      	ldr	r1, [pc, #88]	; (40208c <vTaskStartScheduler+0x6c>)
  402032:	4817      	ldr	r0, [pc, #92]	; (402090 <vTaskStartScheduler+0x70>)
  402034:	4c17      	ldr	r4, [pc, #92]	; (402094 <vTaskStartScheduler+0x74>)
  402036:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402038:	2801      	cmp	r0, #1
  40203a:	d00b      	beq.n	402054 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  40203c:	bb20      	cbnz	r0, 402088 <vTaskStartScheduler+0x68>
  40203e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402042:	b672      	cpsid	i
  402044:	f383 8811 	msr	BASEPRI, r3
  402048:	f3bf 8f6f 	isb	sy
  40204c:	f3bf 8f4f 	dsb	sy
  402050:	b662      	cpsie	i
  402052:	e7fe      	b.n	402052 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402054:	4b10      	ldr	r3, [pc, #64]	; (402098 <vTaskStartScheduler+0x78>)
  402056:	4798      	blx	r3
	if( xReturn == pdPASS )
  402058:	2801      	cmp	r0, #1
  40205a:	d1ef      	bne.n	40203c <vTaskStartScheduler+0x1c>
  40205c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402060:	b672      	cpsid	i
  402062:	f383 8811 	msr	BASEPRI, r3
  402066:	f3bf 8f6f 	isb	sy
  40206a:	f3bf 8f4f 	dsb	sy
  40206e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402070:	f04f 32ff 	mov.w	r2, #4294967295
  402074:	4b09      	ldr	r3, [pc, #36]	; (40209c <vTaskStartScheduler+0x7c>)
  402076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402078:	2201      	movs	r2, #1
  40207a:	4b09      	ldr	r3, [pc, #36]	; (4020a0 <vTaskStartScheduler+0x80>)
  40207c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40207e:	2200      	movs	r2, #0
  402080:	4b08      	ldr	r3, [pc, #32]	; (4020a4 <vTaskStartScheduler+0x84>)
  402082:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402084:	4b08      	ldr	r3, [pc, #32]	; (4020a8 <vTaskStartScheduler+0x88>)
  402086:	4798      	blx	r3
}
  402088:	b004      	add	sp, #16
  40208a:	bd10      	pop	{r4, pc}
  40208c:	00409140 	.word	0x00409140
  402090:	004023c5 	.word	0x004023c5
  402094:	00401ded 	.word	0x00401ded
  402098:	00402a05 	.word	0x00402a05
  40209c:	20400b08 	.word	0x20400b08
  4020a0:	20400b24 	.word	0x20400b24
  4020a4:	20400b50 	.word	0x20400b50
  4020a8:	004013c1 	.word	0x004013c1

004020ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4020ac:	4a02      	ldr	r2, [pc, #8]	; (4020b8 <vTaskSuspendAll+0xc>)
  4020ae:	6813      	ldr	r3, [r2, #0]
  4020b0:	3301      	adds	r3, #1
  4020b2:	6013      	str	r3, [r2, #0]
  4020b4:	4770      	bx	lr
  4020b6:	bf00      	nop
  4020b8:	20400ad0 	.word	0x20400ad0

004020bc <xTaskGetTickCount>:
		xTicks = xTickCount;
  4020bc:	4b01      	ldr	r3, [pc, #4]	; (4020c4 <xTaskGetTickCount+0x8>)
  4020be:	6818      	ldr	r0, [r3, #0]
}
  4020c0:	4770      	bx	lr
  4020c2:	bf00      	nop
  4020c4:	20400b50 	.word	0x20400b50

004020c8 <xTaskIncrementTick>:
{
  4020c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4020cc:	4b42      	ldr	r3, [pc, #264]	; (4021d8 <xTaskIncrementTick+0x110>)
  4020ce:	681b      	ldr	r3, [r3, #0]
  4020d0:	2b00      	cmp	r3, #0
  4020d2:	d178      	bne.n	4021c6 <xTaskIncrementTick+0xfe>
		++xTickCount;
  4020d4:	4b41      	ldr	r3, [pc, #260]	; (4021dc <xTaskIncrementTick+0x114>)
  4020d6:	681a      	ldr	r2, [r3, #0]
  4020d8:	3201      	adds	r2, #1
  4020da:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4020dc:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4020de:	b9d6      	cbnz	r6, 402116 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4020e0:	4b3f      	ldr	r3, [pc, #252]	; (4021e0 <xTaskIncrementTick+0x118>)
  4020e2:	681b      	ldr	r3, [r3, #0]
  4020e4:	681b      	ldr	r3, [r3, #0]
  4020e6:	b153      	cbz	r3, 4020fe <xTaskIncrementTick+0x36>
  4020e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ec:	b672      	cpsid	i
  4020ee:	f383 8811 	msr	BASEPRI, r3
  4020f2:	f3bf 8f6f 	isb	sy
  4020f6:	f3bf 8f4f 	dsb	sy
  4020fa:	b662      	cpsie	i
  4020fc:	e7fe      	b.n	4020fc <xTaskIncrementTick+0x34>
  4020fe:	4a38      	ldr	r2, [pc, #224]	; (4021e0 <xTaskIncrementTick+0x118>)
  402100:	6811      	ldr	r1, [r2, #0]
  402102:	4b38      	ldr	r3, [pc, #224]	; (4021e4 <xTaskIncrementTick+0x11c>)
  402104:	6818      	ldr	r0, [r3, #0]
  402106:	6010      	str	r0, [r2, #0]
  402108:	6019      	str	r1, [r3, #0]
  40210a:	4a37      	ldr	r2, [pc, #220]	; (4021e8 <xTaskIncrementTick+0x120>)
  40210c:	6813      	ldr	r3, [r2, #0]
  40210e:	3301      	adds	r3, #1
  402110:	6013      	str	r3, [r2, #0]
  402112:	4b36      	ldr	r3, [pc, #216]	; (4021ec <xTaskIncrementTick+0x124>)
  402114:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402116:	4b36      	ldr	r3, [pc, #216]	; (4021f0 <xTaskIncrementTick+0x128>)
  402118:	681b      	ldr	r3, [r3, #0]
  40211a:	429e      	cmp	r6, r3
  40211c:	d218      	bcs.n	402150 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40211e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402120:	4b34      	ldr	r3, [pc, #208]	; (4021f4 <xTaskIncrementTick+0x12c>)
  402122:	681b      	ldr	r3, [r3, #0]
  402124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402126:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40212a:	4a33      	ldr	r2, [pc, #204]	; (4021f8 <xTaskIncrementTick+0x130>)
  40212c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402130:	2b02      	cmp	r3, #2
  402132:	bf28      	it	cs
  402134:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402136:	4b31      	ldr	r3, [pc, #196]	; (4021fc <xTaskIncrementTick+0x134>)
  402138:	681b      	ldr	r3, [r3, #0]
  40213a:	b90b      	cbnz	r3, 402140 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  40213c:	4b30      	ldr	r3, [pc, #192]	; (402200 <xTaskIncrementTick+0x138>)
  40213e:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402140:	4b30      	ldr	r3, [pc, #192]	; (402204 <xTaskIncrementTick+0x13c>)
  402142:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402144:	2b00      	cmp	r3, #0
}
  402146:	bf0c      	ite	eq
  402148:	4620      	moveq	r0, r4
  40214a:	2001      	movne	r0, #1
  40214c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402150:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402152:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4021e0 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402156:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402210 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40215a:	4f2b      	ldr	r7, [pc, #172]	; (402208 <xTaskIncrementTick+0x140>)
  40215c:	e01f      	b.n	40219e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  40215e:	f04f 32ff 	mov.w	r2, #4294967295
  402162:	4b23      	ldr	r3, [pc, #140]	; (4021f0 <xTaskIncrementTick+0x128>)
  402164:	601a      	str	r2, [r3, #0]
						break;
  402166:	e7db      	b.n	402120 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402168:	4a21      	ldr	r2, [pc, #132]	; (4021f0 <xTaskIncrementTick+0x128>)
  40216a:	6013      	str	r3, [r2, #0]
							break;
  40216c:	e7d8      	b.n	402120 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40216e:	f105 0018 	add.w	r0, r5, #24
  402172:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402174:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402176:	683a      	ldr	r2, [r7, #0]
  402178:	2301      	movs	r3, #1
  40217a:	4083      	lsls	r3, r0
  40217c:	4313      	orrs	r3, r2
  40217e:	603b      	str	r3, [r7, #0]
  402180:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402184:	4651      	mov	r1, sl
  402186:	4b1c      	ldr	r3, [pc, #112]	; (4021f8 <xTaskIncrementTick+0x130>)
  402188:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40218c:	4b1f      	ldr	r3, [pc, #124]	; (40220c <xTaskIncrementTick+0x144>)
  40218e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402190:	4b18      	ldr	r3, [pc, #96]	; (4021f4 <xTaskIncrementTick+0x12c>)
  402192:	681b      	ldr	r3, [r3, #0]
  402194:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402198:	429a      	cmp	r2, r3
  40219a:	bf28      	it	cs
  40219c:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40219e:	f8d9 3000 	ldr.w	r3, [r9]
  4021a2:	681b      	ldr	r3, [r3, #0]
  4021a4:	2b00      	cmp	r3, #0
  4021a6:	d0da      	beq.n	40215e <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4021a8:	f8d9 3000 	ldr.w	r3, [r9]
  4021ac:	68db      	ldr	r3, [r3, #12]
  4021ae:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4021b0:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4021b2:	429e      	cmp	r6, r3
  4021b4:	d3d8      	bcc.n	402168 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4021b6:	f105 0a04 	add.w	sl, r5, #4
  4021ba:	4650      	mov	r0, sl
  4021bc:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4021be:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4021c0:	2b00      	cmp	r3, #0
  4021c2:	d1d4      	bne.n	40216e <xTaskIncrementTick+0xa6>
  4021c4:	e7d6      	b.n	402174 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4021c6:	4a0d      	ldr	r2, [pc, #52]	; (4021fc <xTaskIncrementTick+0x134>)
  4021c8:	6813      	ldr	r3, [r2, #0]
  4021ca:	3301      	adds	r3, #1
  4021cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4021ce:	4b0c      	ldr	r3, [pc, #48]	; (402200 <xTaskIncrementTick+0x138>)
  4021d0:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4021d2:	2400      	movs	r4, #0
  4021d4:	e7b4      	b.n	402140 <xTaskIncrementTick+0x78>
  4021d6:	bf00      	nop
  4021d8:	20400ad0 	.word	0x20400ad0
  4021dc:	20400b50 	.word	0x20400b50
  4021e0:	20400a5c 	.word	0x20400a5c
  4021e4:	20400a60 	.word	0x20400a60
  4021e8:	20400b0c 	.word	0x20400b0c
  4021ec:	00401d69 	.word	0x00401d69
  4021f0:	20400b08 	.word	0x20400b08
  4021f4:	20400a58 	.word	0x20400a58
  4021f8:	20400a64 	.word	0x20400a64
  4021fc:	20400acc 	.word	0x20400acc
  402200:	0040310d 	.word	0x0040310d
  402204:	20400b54 	.word	0x20400b54
  402208:	20400adc 	.word	0x20400adc
  40220c:	0040115d 	.word	0x0040115d
  402210:	004011a9 	.word	0x004011a9

00402214 <xTaskResumeAll>:
{
  402214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402218:	4b38      	ldr	r3, [pc, #224]	; (4022fc <xTaskResumeAll+0xe8>)
  40221a:	681b      	ldr	r3, [r3, #0]
  40221c:	b953      	cbnz	r3, 402234 <xTaskResumeAll+0x20>
  40221e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402222:	b672      	cpsid	i
  402224:	f383 8811 	msr	BASEPRI, r3
  402228:	f3bf 8f6f 	isb	sy
  40222c:	f3bf 8f4f 	dsb	sy
  402230:	b662      	cpsie	i
  402232:	e7fe      	b.n	402232 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402234:	4b32      	ldr	r3, [pc, #200]	; (402300 <xTaskResumeAll+0xec>)
  402236:	4798      	blx	r3
		--uxSchedulerSuspended;
  402238:	4b30      	ldr	r3, [pc, #192]	; (4022fc <xTaskResumeAll+0xe8>)
  40223a:	681a      	ldr	r2, [r3, #0]
  40223c:	3a01      	subs	r2, #1
  40223e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402240:	681b      	ldr	r3, [r3, #0]
  402242:	2b00      	cmp	r3, #0
  402244:	d155      	bne.n	4022f2 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402246:	4b2f      	ldr	r3, [pc, #188]	; (402304 <xTaskResumeAll+0xf0>)
  402248:	681b      	ldr	r3, [r3, #0]
  40224a:	2b00      	cmp	r3, #0
  40224c:	d132      	bne.n	4022b4 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40224e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402250:	4b2d      	ldr	r3, [pc, #180]	; (402308 <xTaskResumeAll+0xf4>)
  402252:	4798      	blx	r3
}
  402254:	4620      	mov	r0, r4
  402256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40225a:	68fb      	ldr	r3, [r7, #12]
  40225c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40225e:	f104 0018 	add.w	r0, r4, #24
  402262:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402264:	f104 0804 	add.w	r8, r4, #4
  402268:	4640      	mov	r0, r8
  40226a:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40226c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40226e:	682a      	ldr	r2, [r5, #0]
  402270:	2301      	movs	r3, #1
  402272:	4083      	lsls	r3, r0
  402274:	4313      	orrs	r3, r2
  402276:	602b      	str	r3, [r5, #0]
  402278:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40227c:	4641      	mov	r1, r8
  40227e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402282:	4b22      	ldr	r3, [pc, #136]	; (40230c <xTaskResumeAll+0xf8>)
  402284:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402286:	4b22      	ldr	r3, [pc, #136]	; (402310 <xTaskResumeAll+0xfc>)
  402288:	681b      	ldr	r3, [r3, #0]
  40228a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40228e:	429a      	cmp	r2, r3
  402290:	d20c      	bcs.n	4022ac <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402292:	683b      	ldr	r3, [r7, #0]
  402294:	2b00      	cmp	r3, #0
  402296:	d1e0      	bne.n	40225a <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402298:	4b1e      	ldr	r3, [pc, #120]	; (402314 <xTaskResumeAll+0x100>)
  40229a:	681b      	ldr	r3, [r3, #0]
  40229c:	b1db      	cbz	r3, 4022d6 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40229e:	4b1d      	ldr	r3, [pc, #116]	; (402314 <xTaskResumeAll+0x100>)
  4022a0:	681b      	ldr	r3, [r3, #0]
  4022a2:	b1c3      	cbz	r3, 4022d6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4022a4:	4e1c      	ldr	r6, [pc, #112]	; (402318 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4022a6:	4d1d      	ldr	r5, [pc, #116]	; (40231c <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4022a8:	4c1a      	ldr	r4, [pc, #104]	; (402314 <xTaskResumeAll+0x100>)
  4022aa:	e00e      	b.n	4022ca <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4022ac:	2201      	movs	r2, #1
  4022ae:	4b1b      	ldr	r3, [pc, #108]	; (40231c <xTaskResumeAll+0x108>)
  4022b0:	601a      	str	r2, [r3, #0]
  4022b2:	e7ee      	b.n	402292 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4022b4:	4f1a      	ldr	r7, [pc, #104]	; (402320 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4022b6:	4e1b      	ldr	r6, [pc, #108]	; (402324 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4022b8:	4d1b      	ldr	r5, [pc, #108]	; (402328 <xTaskResumeAll+0x114>)
  4022ba:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402330 <xTaskResumeAll+0x11c>
  4022be:	e7e8      	b.n	402292 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4022c0:	6823      	ldr	r3, [r4, #0]
  4022c2:	3b01      	subs	r3, #1
  4022c4:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4022c6:	6823      	ldr	r3, [r4, #0]
  4022c8:	b12b      	cbz	r3, 4022d6 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4022ca:	47b0      	blx	r6
  4022cc:	2800      	cmp	r0, #0
  4022ce:	d0f7      	beq.n	4022c0 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4022d0:	2301      	movs	r3, #1
  4022d2:	602b      	str	r3, [r5, #0]
  4022d4:	e7f4      	b.n	4022c0 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4022d6:	4b11      	ldr	r3, [pc, #68]	; (40231c <xTaskResumeAll+0x108>)
  4022d8:	681b      	ldr	r3, [r3, #0]
  4022da:	2b01      	cmp	r3, #1
  4022dc:	d10b      	bne.n	4022f6 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4022de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022e2:	4b12      	ldr	r3, [pc, #72]	; (40232c <xTaskResumeAll+0x118>)
  4022e4:	601a      	str	r2, [r3, #0]
  4022e6:	f3bf 8f4f 	dsb	sy
  4022ea:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4022ee:	2401      	movs	r4, #1
  4022f0:	e7ae      	b.n	402250 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4022f2:	2400      	movs	r4, #0
  4022f4:	e7ac      	b.n	402250 <xTaskResumeAll+0x3c>
  4022f6:	2400      	movs	r4, #0
  4022f8:	e7aa      	b.n	402250 <xTaskResumeAll+0x3c>
  4022fa:	bf00      	nop
  4022fc:	20400ad0 	.word	0x20400ad0
  402300:	0040128d 	.word	0x0040128d
  402304:	20400ac8 	.word	0x20400ac8
  402308:	004012d9 	.word	0x004012d9
  40230c:	0040115d 	.word	0x0040115d
  402310:	20400a58 	.word	0x20400a58
  402314:	20400acc 	.word	0x20400acc
  402318:	004020c9 	.word	0x004020c9
  40231c:	20400b54 	.word	0x20400b54
  402320:	20400b10 	.word	0x20400b10
  402324:	004011a9 	.word	0x004011a9
  402328:	20400adc 	.word	0x20400adc
  40232c:	e000ed04 	.word	0xe000ed04
  402330:	20400a64 	.word	0x20400a64

00402334 <vTaskDelay>:
	{
  402334:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402336:	2800      	cmp	r0, #0
  402338:	d029      	beq.n	40238e <vTaskDelay+0x5a>
  40233a:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40233c:	4b18      	ldr	r3, [pc, #96]	; (4023a0 <vTaskDelay+0x6c>)
  40233e:	681b      	ldr	r3, [r3, #0]
  402340:	b153      	cbz	r3, 402358 <vTaskDelay+0x24>
  402342:	f04f 0380 	mov.w	r3, #128	; 0x80
  402346:	b672      	cpsid	i
  402348:	f383 8811 	msr	BASEPRI, r3
  40234c:	f3bf 8f6f 	isb	sy
  402350:	f3bf 8f4f 	dsb	sy
  402354:	b662      	cpsie	i
  402356:	e7fe      	b.n	402356 <vTaskDelay+0x22>
			vTaskSuspendAll();
  402358:	4b12      	ldr	r3, [pc, #72]	; (4023a4 <vTaskDelay+0x70>)
  40235a:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  40235c:	4b12      	ldr	r3, [pc, #72]	; (4023a8 <vTaskDelay+0x74>)
  40235e:	681b      	ldr	r3, [r3, #0]
  402360:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402362:	4b12      	ldr	r3, [pc, #72]	; (4023ac <vTaskDelay+0x78>)
  402364:	6818      	ldr	r0, [r3, #0]
  402366:	3004      	adds	r0, #4
  402368:	4b11      	ldr	r3, [pc, #68]	; (4023b0 <vTaskDelay+0x7c>)
  40236a:	4798      	blx	r3
  40236c:	b948      	cbnz	r0, 402382 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40236e:	4b0f      	ldr	r3, [pc, #60]	; (4023ac <vTaskDelay+0x78>)
  402370:	681a      	ldr	r2, [r3, #0]
  402372:	4910      	ldr	r1, [pc, #64]	; (4023b4 <vTaskDelay+0x80>)
  402374:	680b      	ldr	r3, [r1, #0]
  402376:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402378:	2201      	movs	r2, #1
  40237a:	4082      	lsls	r2, r0
  40237c:	ea23 0302 	bic.w	r3, r3, r2
  402380:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402382:	4620      	mov	r0, r4
  402384:	4b0c      	ldr	r3, [pc, #48]	; (4023b8 <vTaskDelay+0x84>)
  402386:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402388:	4b0c      	ldr	r3, [pc, #48]	; (4023bc <vTaskDelay+0x88>)
  40238a:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  40238c:	b938      	cbnz	r0, 40239e <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  40238e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402392:	4b0b      	ldr	r3, [pc, #44]	; (4023c0 <vTaskDelay+0x8c>)
  402394:	601a      	str	r2, [r3, #0]
  402396:	f3bf 8f4f 	dsb	sy
  40239a:	f3bf 8f6f 	isb	sy
  40239e:	bd10      	pop	{r4, pc}
  4023a0:	20400ad0 	.word	0x20400ad0
  4023a4:	004020ad 	.word	0x004020ad
  4023a8:	20400b50 	.word	0x20400b50
  4023ac:	20400a58 	.word	0x20400a58
  4023b0:	004011a9 	.word	0x004011a9
  4023b4:	20400adc 	.word	0x20400adc
  4023b8:	00401d95 	.word	0x00401d95
  4023bc:	00402215 	.word	0x00402215
  4023c0:	e000ed04 	.word	0xe000ed04

004023c4 <prvIdleTask>:
{
  4023c4:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4023c6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402450 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4023ca:	4e19      	ldr	r6, [pc, #100]	; (402430 <prvIdleTask+0x6c>)
				taskYIELD();
  4023cc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402454 <prvIdleTask+0x90>
  4023d0:	e02a      	b.n	402428 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4023d2:	4b18      	ldr	r3, [pc, #96]	; (402434 <prvIdleTask+0x70>)
  4023d4:	681b      	ldr	r3, [r3, #0]
  4023d6:	2b01      	cmp	r3, #1
  4023d8:	d81e      	bhi.n	402418 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4023da:	682b      	ldr	r3, [r5, #0]
  4023dc:	2b00      	cmp	r3, #0
  4023de:	d0f8      	beq.n	4023d2 <prvIdleTask+0xe>
			vTaskSuspendAll();
  4023e0:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4023e2:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4023e4:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4023e6:	2c00      	cmp	r4, #0
  4023e8:	d0f7      	beq.n	4023da <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4023ea:	4b13      	ldr	r3, [pc, #76]	; (402438 <prvIdleTask+0x74>)
  4023ec:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4023ee:	68f3      	ldr	r3, [r6, #12]
  4023f0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4023f2:	1d20      	adds	r0, r4, #4
  4023f4:	4b11      	ldr	r3, [pc, #68]	; (40243c <prvIdleTask+0x78>)
  4023f6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4023f8:	4a11      	ldr	r2, [pc, #68]	; (402440 <prvIdleTask+0x7c>)
  4023fa:	6813      	ldr	r3, [r2, #0]
  4023fc:	3b01      	subs	r3, #1
  4023fe:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402400:	682b      	ldr	r3, [r5, #0]
  402402:	3b01      	subs	r3, #1
  402404:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402406:	4b0f      	ldr	r3, [pc, #60]	; (402444 <prvIdleTask+0x80>)
  402408:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40240a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40240c:	f8df a048 	ldr.w	sl, [pc, #72]	; 402458 <prvIdleTask+0x94>
  402410:	47d0      	blx	sl
		vPortFree( pxTCB );
  402412:	4620      	mov	r0, r4
  402414:	47d0      	blx	sl
  402416:	e7e0      	b.n	4023da <prvIdleTask+0x16>
				taskYIELD();
  402418:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40241c:	f8c9 3000 	str.w	r3, [r9]
  402420:	f3bf 8f4f 	dsb	sy
  402424:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402428:	4d07      	ldr	r5, [pc, #28]	; (402448 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40242a:	4f08      	ldr	r7, [pc, #32]	; (40244c <prvIdleTask+0x88>)
  40242c:	e7d5      	b.n	4023da <prvIdleTask+0x16>
  40242e:	bf00      	nop
  402430:	20400b3c 	.word	0x20400b3c
  402434:	20400a64 	.word	0x20400a64
  402438:	0040128d 	.word	0x0040128d
  40243c:	004011a9 	.word	0x004011a9
  402440:	20400ac8 	.word	0x20400ac8
  402444:	004012d9 	.word	0x004012d9
  402448:	20400ad8 	.word	0x20400ad8
  40244c:	00402215 	.word	0x00402215
  402450:	004020ad 	.word	0x004020ad
  402454:	e000ed04 	.word	0xe000ed04
  402458:	00401519 	.word	0x00401519

0040245c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40245c:	4b2d      	ldr	r3, [pc, #180]	; (402514 <vTaskSwitchContext+0xb8>)
  40245e:	681b      	ldr	r3, [r3, #0]
  402460:	2b00      	cmp	r3, #0
  402462:	d12c      	bne.n	4024be <vTaskSwitchContext+0x62>
{
  402464:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402466:	2200      	movs	r2, #0
  402468:	4b2b      	ldr	r3, [pc, #172]	; (402518 <vTaskSwitchContext+0xbc>)
  40246a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  40246c:	4b2b      	ldr	r3, [pc, #172]	; (40251c <vTaskSwitchContext+0xc0>)
  40246e:	681b      	ldr	r3, [r3, #0]
  402470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402472:	681a      	ldr	r2, [r3, #0]
  402474:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402478:	d103      	bne.n	402482 <vTaskSwitchContext+0x26>
  40247a:	685a      	ldr	r2, [r3, #4]
  40247c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402480:	d021      	beq.n	4024c6 <vTaskSwitchContext+0x6a>
  402482:	4b26      	ldr	r3, [pc, #152]	; (40251c <vTaskSwitchContext+0xc0>)
  402484:	6818      	ldr	r0, [r3, #0]
  402486:	6819      	ldr	r1, [r3, #0]
  402488:	3134      	adds	r1, #52	; 0x34
  40248a:	4b25      	ldr	r3, [pc, #148]	; (402520 <vTaskSwitchContext+0xc4>)
  40248c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40248e:	4b25      	ldr	r3, [pc, #148]	; (402524 <vTaskSwitchContext+0xc8>)
  402490:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402492:	fab3 f383 	clz	r3, r3
  402496:	b2db      	uxtb	r3, r3
  402498:	f1c3 031f 	rsb	r3, r3, #31
  40249c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4024a0:	4a21      	ldr	r2, [pc, #132]	; (402528 <vTaskSwitchContext+0xcc>)
  4024a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4024a6:	b9ba      	cbnz	r2, 4024d8 <vTaskSwitchContext+0x7c>
	__asm volatile
  4024a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024ac:	b672      	cpsid	i
  4024ae:	f383 8811 	msr	BASEPRI, r3
  4024b2:	f3bf 8f6f 	isb	sy
  4024b6:	f3bf 8f4f 	dsb	sy
  4024ba:	b662      	cpsie	i
  4024bc:	e7fe      	b.n	4024bc <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4024be:	2201      	movs	r2, #1
  4024c0:	4b15      	ldr	r3, [pc, #84]	; (402518 <vTaskSwitchContext+0xbc>)
  4024c2:	601a      	str	r2, [r3, #0]
  4024c4:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4024c6:	689a      	ldr	r2, [r3, #8]
  4024c8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4024cc:	d1d9      	bne.n	402482 <vTaskSwitchContext+0x26>
  4024ce:	68db      	ldr	r3, [r3, #12]
  4024d0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4024d4:	d1d5      	bne.n	402482 <vTaskSwitchContext+0x26>
  4024d6:	e7da      	b.n	40248e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4024d8:	4a13      	ldr	r2, [pc, #76]	; (402528 <vTaskSwitchContext+0xcc>)
  4024da:	0099      	lsls	r1, r3, #2
  4024dc:	18c8      	adds	r0, r1, r3
  4024de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4024e2:	6844      	ldr	r4, [r0, #4]
  4024e4:	6864      	ldr	r4, [r4, #4]
  4024e6:	6044      	str	r4, [r0, #4]
  4024e8:	4419      	add	r1, r3
  4024ea:	4602      	mov	r2, r0
  4024ec:	3208      	adds	r2, #8
  4024ee:	4294      	cmp	r4, r2
  4024f0:	d009      	beq.n	402506 <vTaskSwitchContext+0xaa>
  4024f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024f6:	4a0c      	ldr	r2, [pc, #48]	; (402528 <vTaskSwitchContext+0xcc>)
  4024f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4024fc:	685b      	ldr	r3, [r3, #4]
  4024fe:	68da      	ldr	r2, [r3, #12]
  402500:	4b06      	ldr	r3, [pc, #24]	; (40251c <vTaskSwitchContext+0xc0>)
  402502:	601a      	str	r2, [r3, #0]
  402504:	bd10      	pop	{r4, pc}
  402506:	6860      	ldr	r0, [r4, #4]
  402508:	4a07      	ldr	r2, [pc, #28]	; (402528 <vTaskSwitchContext+0xcc>)
  40250a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40250e:	6050      	str	r0, [r2, #4]
  402510:	e7ef      	b.n	4024f2 <vTaskSwitchContext+0x96>
  402512:	bf00      	nop
  402514:	20400ad0 	.word	0x20400ad0
  402518:	20400b54 	.word	0x20400b54
  40251c:	20400a58 	.word	0x20400a58
  402520:	004030f5 	.word	0x004030f5
  402524:	20400adc 	.word	0x20400adc
  402528:	20400a64 	.word	0x20400a64

0040252c <vTaskPlaceOnEventList>:
{
  40252c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40252e:	b1e0      	cbz	r0, 40256a <vTaskPlaceOnEventList+0x3e>
  402530:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402532:	4d17      	ldr	r5, [pc, #92]	; (402590 <vTaskPlaceOnEventList+0x64>)
  402534:	6829      	ldr	r1, [r5, #0]
  402536:	3118      	adds	r1, #24
  402538:	4b16      	ldr	r3, [pc, #88]	; (402594 <vTaskPlaceOnEventList+0x68>)
  40253a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40253c:	6828      	ldr	r0, [r5, #0]
  40253e:	3004      	adds	r0, #4
  402540:	4b15      	ldr	r3, [pc, #84]	; (402598 <vTaskPlaceOnEventList+0x6c>)
  402542:	4798      	blx	r3
  402544:	b940      	cbnz	r0, 402558 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402546:	682a      	ldr	r2, [r5, #0]
  402548:	4914      	ldr	r1, [pc, #80]	; (40259c <vTaskPlaceOnEventList+0x70>)
  40254a:	680b      	ldr	r3, [r1, #0]
  40254c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40254e:	2201      	movs	r2, #1
  402550:	4082      	lsls	r2, r0
  402552:	ea23 0302 	bic.w	r3, r3, r2
  402556:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402558:	f1b4 3fff 	cmp.w	r4, #4294967295
  40255c:	d010      	beq.n	402580 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40255e:	4b10      	ldr	r3, [pc, #64]	; (4025a0 <vTaskPlaceOnEventList+0x74>)
  402560:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402562:	4420      	add	r0, r4
  402564:	4b0f      	ldr	r3, [pc, #60]	; (4025a4 <vTaskPlaceOnEventList+0x78>)
  402566:	4798      	blx	r3
  402568:	bd38      	pop	{r3, r4, r5, pc}
  40256a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40256e:	b672      	cpsid	i
  402570:	f383 8811 	msr	BASEPRI, r3
  402574:	f3bf 8f6f 	isb	sy
  402578:	f3bf 8f4f 	dsb	sy
  40257c:	b662      	cpsie	i
  40257e:	e7fe      	b.n	40257e <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402580:	4b03      	ldr	r3, [pc, #12]	; (402590 <vTaskPlaceOnEventList+0x64>)
  402582:	6819      	ldr	r1, [r3, #0]
  402584:	3104      	adds	r1, #4
  402586:	4808      	ldr	r0, [pc, #32]	; (4025a8 <vTaskPlaceOnEventList+0x7c>)
  402588:	4b08      	ldr	r3, [pc, #32]	; (4025ac <vTaskPlaceOnEventList+0x80>)
  40258a:	4798      	blx	r3
  40258c:	bd38      	pop	{r3, r4, r5, pc}
  40258e:	bf00      	nop
  402590:	20400a58 	.word	0x20400a58
  402594:	00401175 	.word	0x00401175
  402598:	004011a9 	.word	0x004011a9
  40259c:	20400adc 	.word	0x20400adc
  4025a0:	20400b50 	.word	0x20400b50
  4025a4:	00401d95 	.word	0x00401d95
  4025a8:	20400b28 	.word	0x20400b28
  4025ac:	0040115d 	.word	0x0040115d

004025b0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4025b0:	b1e8      	cbz	r0, 4025ee <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4025b2:	b570      	push	{r4, r5, r6, lr}
  4025b4:	4615      	mov	r5, r2
  4025b6:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4025b8:	4e16      	ldr	r6, [pc, #88]	; (402614 <vTaskPlaceOnEventListRestricted+0x64>)
  4025ba:	6831      	ldr	r1, [r6, #0]
  4025bc:	3118      	adds	r1, #24
  4025be:	4b16      	ldr	r3, [pc, #88]	; (402618 <vTaskPlaceOnEventListRestricted+0x68>)
  4025c0:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4025c2:	6830      	ldr	r0, [r6, #0]
  4025c4:	3004      	adds	r0, #4
  4025c6:	4b15      	ldr	r3, [pc, #84]	; (40261c <vTaskPlaceOnEventListRestricted+0x6c>)
  4025c8:	4798      	blx	r3
  4025ca:	b940      	cbnz	r0, 4025de <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4025cc:	6832      	ldr	r2, [r6, #0]
  4025ce:	4914      	ldr	r1, [pc, #80]	; (402620 <vTaskPlaceOnEventListRestricted+0x70>)
  4025d0:	680b      	ldr	r3, [r1, #0]
  4025d2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4025d4:	2201      	movs	r2, #1
  4025d6:	4082      	lsls	r2, r0
  4025d8:	ea23 0302 	bic.w	r3, r3, r2
  4025dc:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4025de:	2d01      	cmp	r5, #1
  4025e0:	d010      	beq.n	402604 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4025e2:	4b10      	ldr	r3, [pc, #64]	; (402624 <vTaskPlaceOnEventListRestricted+0x74>)
  4025e4:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4025e6:	4420      	add	r0, r4
  4025e8:	4b0f      	ldr	r3, [pc, #60]	; (402628 <vTaskPlaceOnEventListRestricted+0x78>)
  4025ea:	4798      	blx	r3
  4025ec:	bd70      	pop	{r4, r5, r6, pc}
  4025ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025f2:	b672      	cpsid	i
  4025f4:	f383 8811 	msr	BASEPRI, r3
  4025f8:	f3bf 8f6f 	isb	sy
  4025fc:	f3bf 8f4f 	dsb	sy
  402600:	b662      	cpsie	i
  402602:	e7fe      	b.n	402602 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402604:	4b03      	ldr	r3, [pc, #12]	; (402614 <vTaskPlaceOnEventListRestricted+0x64>)
  402606:	6819      	ldr	r1, [r3, #0]
  402608:	3104      	adds	r1, #4
  40260a:	4808      	ldr	r0, [pc, #32]	; (40262c <vTaskPlaceOnEventListRestricted+0x7c>)
  40260c:	4b02      	ldr	r3, [pc, #8]	; (402618 <vTaskPlaceOnEventListRestricted+0x68>)
  40260e:	4798      	blx	r3
  402610:	bd70      	pop	{r4, r5, r6, pc}
  402612:	bf00      	nop
  402614:	20400a58 	.word	0x20400a58
  402618:	0040115d 	.word	0x0040115d
  40261c:	004011a9 	.word	0x004011a9
  402620:	20400adc 	.word	0x20400adc
  402624:	20400b50 	.word	0x20400b50
  402628:	00401d95 	.word	0x00401d95
  40262c:	20400b28 	.word	0x20400b28

00402630 <xTaskRemoveFromEventList>:
{
  402630:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402632:	68c3      	ldr	r3, [r0, #12]
  402634:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402636:	b324      	cbz	r4, 402682 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402638:	f104 0518 	add.w	r5, r4, #24
  40263c:	4628      	mov	r0, r5
  40263e:	4b1a      	ldr	r3, [pc, #104]	; (4026a8 <xTaskRemoveFromEventList+0x78>)
  402640:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402642:	4b1a      	ldr	r3, [pc, #104]	; (4026ac <xTaskRemoveFromEventList+0x7c>)
  402644:	681b      	ldr	r3, [r3, #0]
  402646:	bb3b      	cbnz	r3, 402698 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402648:	1d25      	adds	r5, r4, #4
  40264a:	4628      	mov	r0, r5
  40264c:	4b16      	ldr	r3, [pc, #88]	; (4026a8 <xTaskRemoveFromEventList+0x78>)
  40264e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402650:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402652:	4a17      	ldr	r2, [pc, #92]	; (4026b0 <xTaskRemoveFromEventList+0x80>)
  402654:	6811      	ldr	r1, [r2, #0]
  402656:	2301      	movs	r3, #1
  402658:	4083      	lsls	r3, r0
  40265a:	430b      	orrs	r3, r1
  40265c:	6013      	str	r3, [r2, #0]
  40265e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402662:	4629      	mov	r1, r5
  402664:	4b13      	ldr	r3, [pc, #76]	; (4026b4 <xTaskRemoveFromEventList+0x84>)
  402666:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40266a:	4b13      	ldr	r3, [pc, #76]	; (4026b8 <xTaskRemoveFromEventList+0x88>)
  40266c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40266e:	4b13      	ldr	r3, [pc, #76]	; (4026bc <xTaskRemoveFromEventList+0x8c>)
  402670:	681b      	ldr	r3, [r3, #0]
  402672:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402676:	429a      	cmp	r2, r3
  402678:	d913      	bls.n	4026a2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40267a:	2001      	movs	r0, #1
  40267c:	4b10      	ldr	r3, [pc, #64]	; (4026c0 <xTaskRemoveFromEventList+0x90>)
  40267e:	6018      	str	r0, [r3, #0]
  402680:	bd38      	pop	{r3, r4, r5, pc}
  402682:	f04f 0380 	mov.w	r3, #128	; 0x80
  402686:	b672      	cpsid	i
  402688:	f383 8811 	msr	BASEPRI, r3
  40268c:	f3bf 8f6f 	isb	sy
  402690:	f3bf 8f4f 	dsb	sy
  402694:	b662      	cpsie	i
  402696:	e7fe      	b.n	402696 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402698:	4629      	mov	r1, r5
  40269a:	480a      	ldr	r0, [pc, #40]	; (4026c4 <xTaskRemoveFromEventList+0x94>)
  40269c:	4b06      	ldr	r3, [pc, #24]	; (4026b8 <xTaskRemoveFromEventList+0x88>)
  40269e:	4798      	blx	r3
  4026a0:	e7e5      	b.n	40266e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4026a2:	2000      	movs	r0, #0
}
  4026a4:	bd38      	pop	{r3, r4, r5, pc}
  4026a6:	bf00      	nop
  4026a8:	004011a9 	.word	0x004011a9
  4026ac:	20400ad0 	.word	0x20400ad0
  4026b0:	20400adc 	.word	0x20400adc
  4026b4:	20400a64 	.word	0x20400a64
  4026b8:	0040115d 	.word	0x0040115d
  4026bc:	20400a58 	.word	0x20400a58
  4026c0:	20400b54 	.word	0x20400b54
  4026c4:	20400b10 	.word	0x20400b10

004026c8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4026c8:	b130      	cbz	r0, 4026d8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4026ca:	4a09      	ldr	r2, [pc, #36]	; (4026f0 <vTaskSetTimeOutState+0x28>)
  4026cc:	6812      	ldr	r2, [r2, #0]
  4026ce:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4026d0:	4a08      	ldr	r2, [pc, #32]	; (4026f4 <vTaskSetTimeOutState+0x2c>)
  4026d2:	6812      	ldr	r2, [r2, #0]
  4026d4:	6042      	str	r2, [r0, #4]
  4026d6:	4770      	bx	lr
  4026d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026dc:	b672      	cpsid	i
  4026de:	f383 8811 	msr	BASEPRI, r3
  4026e2:	f3bf 8f6f 	isb	sy
  4026e6:	f3bf 8f4f 	dsb	sy
  4026ea:	b662      	cpsie	i
  4026ec:	e7fe      	b.n	4026ec <vTaskSetTimeOutState+0x24>
  4026ee:	bf00      	nop
  4026f0:	20400b0c 	.word	0x20400b0c
  4026f4:	20400b50 	.word	0x20400b50

004026f8 <xTaskCheckForTimeOut>:
{
  4026f8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4026fa:	b1c0      	cbz	r0, 40272e <xTaskCheckForTimeOut+0x36>
  4026fc:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4026fe:	b309      	cbz	r1, 402744 <xTaskCheckForTimeOut+0x4c>
  402700:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402702:	4b1d      	ldr	r3, [pc, #116]	; (402778 <xTaskCheckForTimeOut+0x80>)
  402704:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402706:	4b1d      	ldr	r3, [pc, #116]	; (40277c <xTaskCheckForTimeOut+0x84>)
  402708:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40270a:	682b      	ldr	r3, [r5, #0]
  40270c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402710:	d02e      	beq.n	402770 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402712:	491b      	ldr	r1, [pc, #108]	; (402780 <xTaskCheckForTimeOut+0x88>)
  402714:	6809      	ldr	r1, [r1, #0]
  402716:	6820      	ldr	r0, [r4, #0]
  402718:	4288      	cmp	r0, r1
  40271a:	d002      	beq.n	402722 <xTaskCheckForTimeOut+0x2a>
  40271c:	6861      	ldr	r1, [r4, #4]
  40271e:	428a      	cmp	r2, r1
  402720:	d228      	bcs.n	402774 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402722:	6861      	ldr	r1, [r4, #4]
  402724:	1a50      	subs	r0, r2, r1
  402726:	4283      	cmp	r3, r0
  402728:	d817      	bhi.n	40275a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40272a:	2401      	movs	r4, #1
  40272c:	e01c      	b.n	402768 <xTaskCheckForTimeOut+0x70>
  40272e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402732:	b672      	cpsid	i
  402734:	f383 8811 	msr	BASEPRI, r3
  402738:	f3bf 8f6f 	isb	sy
  40273c:	f3bf 8f4f 	dsb	sy
  402740:	b662      	cpsie	i
  402742:	e7fe      	b.n	402742 <xTaskCheckForTimeOut+0x4a>
  402744:	f04f 0380 	mov.w	r3, #128	; 0x80
  402748:	b672      	cpsid	i
  40274a:	f383 8811 	msr	BASEPRI, r3
  40274e:	f3bf 8f6f 	isb	sy
  402752:	f3bf 8f4f 	dsb	sy
  402756:	b662      	cpsie	i
  402758:	e7fe      	b.n	402758 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40275a:	1a9b      	subs	r3, r3, r2
  40275c:	440b      	add	r3, r1
  40275e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402760:	4620      	mov	r0, r4
  402762:	4b08      	ldr	r3, [pc, #32]	; (402784 <xTaskCheckForTimeOut+0x8c>)
  402764:	4798      	blx	r3
			xReturn = pdFALSE;
  402766:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402768:	4b07      	ldr	r3, [pc, #28]	; (402788 <xTaskCheckForTimeOut+0x90>)
  40276a:	4798      	blx	r3
}
  40276c:	4620      	mov	r0, r4
  40276e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402770:	2400      	movs	r4, #0
  402772:	e7f9      	b.n	402768 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402774:	2401      	movs	r4, #1
  402776:	e7f7      	b.n	402768 <xTaskCheckForTimeOut+0x70>
  402778:	0040128d 	.word	0x0040128d
  40277c:	20400b50 	.word	0x20400b50
  402780:	20400b0c 	.word	0x20400b0c
  402784:	004026c9 	.word	0x004026c9
  402788:	004012d9 	.word	0x004012d9

0040278c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  40278c:	2201      	movs	r2, #1
  40278e:	4b01      	ldr	r3, [pc, #4]	; (402794 <vTaskMissedYield+0x8>)
  402790:	601a      	str	r2, [r3, #0]
  402792:	4770      	bx	lr
  402794:	20400b54 	.word	0x20400b54

00402798 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402798:	4b05      	ldr	r3, [pc, #20]	; (4027b0 <xTaskGetSchedulerState+0x18>)
  40279a:	681b      	ldr	r3, [r3, #0]
  40279c:	b133      	cbz	r3, 4027ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40279e:	4b05      	ldr	r3, [pc, #20]	; (4027b4 <xTaskGetSchedulerState+0x1c>)
  4027a0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4027a2:	2b00      	cmp	r3, #0
  4027a4:	bf0c      	ite	eq
  4027a6:	2002      	moveq	r0, #2
  4027a8:	2000      	movne	r0, #0
  4027aa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4027ac:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4027ae:	4770      	bx	lr
  4027b0:	20400b24 	.word	0x20400b24
  4027b4:	20400ad0 	.word	0x20400ad0

004027b8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4027b8:	2800      	cmp	r0, #0
  4027ba:	d044      	beq.n	402846 <vTaskPriorityInherit+0x8e>
	{
  4027bc:	b538      	push	{r3, r4, r5, lr}
  4027be:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4027c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4027c2:	4921      	ldr	r1, [pc, #132]	; (402848 <vTaskPriorityInherit+0x90>)
  4027c4:	6809      	ldr	r1, [r1, #0]
  4027c6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4027c8:	428a      	cmp	r2, r1
  4027ca:	d214      	bcs.n	4027f6 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4027cc:	6981      	ldr	r1, [r0, #24]
  4027ce:	2900      	cmp	r1, #0
  4027d0:	db05      	blt.n	4027de <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4027d2:	491d      	ldr	r1, [pc, #116]	; (402848 <vTaskPriorityInherit+0x90>)
  4027d4:	6809      	ldr	r1, [r1, #0]
  4027d6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4027d8:	f1c1 0105 	rsb	r1, r1, #5
  4027dc:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4027de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4027e2:	491a      	ldr	r1, [pc, #104]	; (40284c <vTaskPriorityInherit+0x94>)
  4027e4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4027e8:	6961      	ldr	r1, [r4, #20]
  4027ea:	4291      	cmp	r1, r2
  4027ec:	d004      	beq.n	4027f8 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4027ee:	4a16      	ldr	r2, [pc, #88]	; (402848 <vTaskPriorityInherit+0x90>)
  4027f0:	6812      	ldr	r2, [r2, #0]
  4027f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4027f4:	62e2      	str	r2, [r4, #44]	; 0x2c
  4027f6:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4027f8:	1d25      	adds	r5, r4, #4
  4027fa:	4628      	mov	r0, r5
  4027fc:	4b14      	ldr	r3, [pc, #80]	; (402850 <vTaskPriorityInherit+0x98>)
  4027fe:	4798      	blx	r3
  402800:	b970      	cbnz	r0, 402820 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402802:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402804:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402808:	4a10      	ldr	r2, [pc, #64]	; (40284c <vTaskPriorityInherit+0x94>)
  40280a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40280e:	b93a      	cbnz	r2, 402820 <vTaskPriorityInherit+0x68>
  402810:	4810      	ldr	r0, [pc, #64]	; (402854 <vTaskPriorityInherit+0x9c>)
  402812:	6802      	ldr	r2, [r0, #0]
  402814:	2101      	movs	r1, #1
  402816:	fa01 f303 	lsl.w	r3, r1, r3
  40281a:	ea22 0303 	bic.w	r3, r2, r3
  40281e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402820:	4b09      	ldr	r3, [pc, #36]	; (402848 <vTaskPriorityInherit+0x90>)
  402822:	681b      	ldr	r3, [r3, #0]
  402824:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402826:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402828:	4a0a      	ldr	r2, [pc, #40]	; (402854 <vTaskPriorityInherit+0x9c>)
  40282a:	6811      	ldr	r1, [r2, #0]
  40282c:	2301      	movs	r3, #1
  40282e:	4083      	lsls	r3, r0
  402830:	430b      	orrs	r3, r1
  402832:	6013      	str	r3, [r2, #0]
  402834:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402838:	4629      	mov	r1, r5
  40283a:	4b04      	ldr	r3, [pc, #16]	; (40284c <vTaskPriorityInherit+0x94>)
  40283c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402840:	4b05      	ldr	r3, [pc, #20]	; (402858 <vTaskPriorityInherit+0xa0>)
  402842:	4798      	blx	r3
  402844:	bd38      	pop	{r3, r4, r5, pc}
  402846:	4770      	bx	lr
  402848:	20400a58 	.word	0x20400a58
  40284c:	20400a64 	.word	0x20400a64
  402850:	004011a9 	.word	0x004011a9
  402854:	20400adc 	.word	0x20400adc
  402858:	0040115d 	.word	0x0040115d

0040285c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  40285c:	2800      	cmp	r0, #0
  40285e:	d04d      	beq.n	4028fc <xTaskPriorityDisinherit+0xa0>
	{
  402860:	b538      	push	{r3, r4, r5, lr}
  402862:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402864:	4a27      	ldr	r2, [pc, #156]	; (402904 <xTaskPriorityDisinherit+0xa8>)
  402866:	6812      	ldr	r2, [r2, #0]
  402868:	4290      	cmp	r0, r2
  40286a:	d00a      	beq.n	402882 <xTaskPriorityDisinherit+0x26>
  40286c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402870:	b672      	cpsid	i
  402872:	f383 8811 	msr	BASEPRI, r3
  402876:	f3bf 8f6f 	isb	sy
  40287a:	f3bf 8f4f 	dsb	sy
  40287e:	b662      	cpsie	i
  402880:	e7fe      	b.n	402880 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402882:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402884:	b952      	cbnz	r2, 40289c <xTaskPriorityDisinherit+0x40>
  402886:	f04f 0380 	mov.w	r3, #128	; 0x80
  40288a:	b672      	cpsid	i
  40288c:	f383 8811 	msr	BASEPRI, r3
  402890:	f3bf 8f6f 	isb	sy
  402894:	f3bf 8f4f 	dsb	sy
  402898:	b662      	cpsie	i
  40289a:	e7fe      	b.n	40289a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  40289c:	3a01      	subs	r2, #1
  40289e:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4028a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4028a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4028a4:	4288      	cmp	r0, r1
  4028a6:	d02b      	beq.n	402900 <xTaskPriorityDisinherit+0xa4>
  4028a8:	bb52      	cbnz	r2, 402900 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4028aa:	1d25      	adds	r5, r4, #4
  4028ac:	4628      	mov	r0, r5
  4028ae:	4b16      	ldr	r3, [pc, #88]	; (402908 <xTaskPriorityDisinherit+0xac>)
  4028b0:	4798      	blx	r3
  4028b2:	b968      	cbnz	r0, 4028d0 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4028b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4028b6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4028ba:	4b14      	ldr	r3, [pc, #80]	; (40290c <xTaskPriorityDisinherit+0xb0>)
  4028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4028c0:	b933      	cbnz	r3, 4028d0 <xTaskPriorityDisinherit+0x74>
  4028c2:	4813      	ldr	r0, [pc, #76]	; (402910 <xTaskPriorityDisinherit+0xb4>)
  4028c4:	6803      	ldr	r3, [r0, #0]
  4028c6:	2201      	movs	r2, #1
  4028c8:	408a      	lsls	r2, r1
  4028ca:	ea23 0302 	bic.w	r3, r3, r2
  4028ce:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4028d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4028d2:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4028d4:	f1c0 0305 	rsb	r3, r0, #5
  4028d8:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4028da:	4a0d      	ldr	r2, [pc, #52]	; (402910 <xTaskPriorityDisinherit+0xb4>)
  4028dc:	6811      	ldr	r1, [r2, #0]
  4028de:	2401      	movs	r4, #1
  4028e0:	fa04 f300 	lsl.w	r3, r4, r0
  4028e4:	430b      	orrs	r3, r1
  4028e6:	6013      	str	r3, [r2, #0]
  4028e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4028ec:	4629      	mov	r1, r5
  4028ee:	4b07      	ldr	r3, [pc, #28]	; (40290c <xTaskPriorityDisinherit+0xb0>)
  4028f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4028f4:	4b07      	ldr	r3, [pc, #28]	; (402914 <xTaskPriorityDisinherit+0xb8>)
  4028f6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4028f8:	4620      	mov	r0, r4
  4028fa:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4028fc:	2000      	movs	r0, #0
  4028fe:	4770      	bx	lr
  402900:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402902:	bd38      	pop	{r3, r4, r5, pc}
  402904:	20400a58 	.word	0x20400a58
  402908:	004011a9 	.word	0x004011a9
  40290c:	20400a64 	.word	0x20400a64
  402910:	20400adc 	.word	0x20400adc
  402914:	0040115d 	.word	0x0040115d

00402918 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402918:	4b05      	ldr	r3, [pc, #20]	; (402930 <pvTaskIncrementMutexHeldCount+0x18>)
  40291a:	681b      	ldr	r3, [r3, #0]
  40291c:	b123      	cbz	r3, 402928 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40291e:	4b04      	ldr	r3, [pc, #16]	; (402930 <pvTaskIncrementMutexHeldCount+0x18>)
  402920:	681a      	ldr	r2, [r3, #0]
  402922:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402924:	3301      	adds	r3, #1
  402926:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402928:	4b01      	ldr	r3, [pc, #4]	; (402930 <pvTaskIncrementMutexHeldCount+0x18>)
  40292a:	6818      	ldr	r0, [r3, #0]
	}
  40292c:	4770      	bx	lr
  40292e:	bf00      	nop
  402930:	20400a58 	.word	0x20400a58

00402934 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402934:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402936:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402938:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40293a:	4291      	cmp	r1, r2
  40293c:	d80c      	bhi.n	402958 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40293e:	1ad2      	subs	r2, r2, r3
  402940:	6983      	ldr	r3, [r0, #24]
  402942:	429a      	cmp	r2, r3
  402944:	d301      	bcc.n	40294a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402946:	2001      	movs	r0, #1
  402948:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40294a:	1d01      	adds	r1, r0, #4
  40294c:	4b09      	ldr	r3, [pc, #36]	; (402974 <prvInsertTimerInActiveList+0x40>)
  40294e:	6818      	ldr	r0, [r3, #0]
  402950:	4b09      	ldr	r3, [pc, #36]	; (402978 <prvInsertTimerInActiveList+0x44>)
  402952:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402954:	2000      	movs	r0, #0
  402956:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402958:	429a      	cmp	r2, r3
  40295a:	d203      	bcs.n	402964 <prvInsertTimerInActiveList+0x30>
  40295c:	4299      	cmp	r1, r3
  40295e:	d301      	bcc.n	402964 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402960:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402962:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402964:	1d01      	adds	r1, r0, #4
  402966:	4b05      	ldr	r3, [pc, #20]	; (40297c <prvInsertTimerInActiveList+0x48>)
  402968:	6818      	ldr	r0, [r3, #0]
  40296a:	4b03      	ldr	r3, [pc, #12]	; (402978 <prvInsertTimerInActiveList+0x44>)
  40296c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40296e:	2000      	movs	r0, #0
  402970:	bd08      	pop	{r3, pc}
  402972:	bf00      	nop
  402974:	20400b5c 	.word	0x20400b5c
  402978:	00401175 	.word	0x00401175
  40297c:	20400b58 	.word	0x20400b58

00402980 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402980:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402982:	4b15      	ldr	r3, [pc, #84]	; (4029d8 <prvCheckForValidListAndQueue+0x58>)
  402984:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402986:	4b15      	ldr	r3, [pc, #84]	; (4029dc <prvCheckForValidListAndQueue+0x5c>)
  402988:	681b      	ldr	r3, [r3, #0]
  40298a:	b113      	cbz	r3, 402992 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40298c:	4b14      	ldr	r3, [pc, #80]	; (4029e0 <prvCheckForValidListAndQueue+0x60>)
  40298e:	4798      	blx	r3
  402990:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402992:	4d14      	ldr	r5, [pc, #80]	; (4029e4 <prvCheckForValidListAndQueue+0x64>)
  402994:	4628      	mov	r0, r5
  402996:	4e14      	ldr	r6, [pc, #80]	; (4029e8 <prvCheckForValidListAndQueue+0x68>)
  402998:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40299a:	4c14      	ldr	r4, [pc, #80]	; (4029ec <prvCheckForValidListAndQueue+0x6c>)
  40299c:	4620      	mov	r0, r4
  40299e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4029a0:	4b13      	ldr	r3, [pc, #76]	; (4029f0 <prvCheckForValidListAndQueue+0x70>)
  4029a2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4029a4:	4b13      	ldr	r3, [pc, #76]	; (4029f4 <prvCheckForValidListAndQueue+0x74>)
  4029a6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4029a8:	2200      	movs	r2, #0
  4029aa:	2110      	movs	r1, #16
  4029ac:	2005      	movs	r0, #5
  4029ae:	4b12      	ldr	r3, [pc, #72]	; (4029f8 <prvCheckForValidListAndQueue+0x78>)
  4029b0:	4798      	blx	r3
  4029b2:	4b0a      	ldr	r3, [pc, #40]	; (4029dc <prvCheckForValidListAndQueue+0x5c>)
  4029b4:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4029b6:	b118      	cbz	r0, 4029c0 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4029b8:	4910      	ldr	r1, [pc, #64]	; (4029fc <prvCheckForValidListAndQueue+0x7c>)
  4029ba:	4b11      	ldr	r3, [pc, #68]	; (402a00 <prvCheckForValidListAndQueue+0x80>)
  4029bc:	4798      	blx	r3
  4029be:	e7e5      	b.n	40298c <prvCheckForValidListAndQueue+0xc>
  4029c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029c4:	b672      	cpsid	i
  4029c6:	f383 8811 	msr	BASEPRI, r3
  4029ca:	f3bf 8f6f 	isb	sy
  4029ce:	f3bf 8f4f 	dsb	sy
  4029d2:	b662      	cpsie	i
  4029d4:	e7fe      	b.n	4029d4 <prvCheckForValidListAndQueue+0x54>
  4029d6:	bf00      	nop
  4029d8:	0040128d 	.word	0x0040128d
  4029dc:	20400b8c 	.word	0x20400b8c
  4029e0:	004012d9 	.word	0x004012d9
  4029e4:	20400b60 	.word	0x20400b60
  4029e8:	00401141 	.word	0x00401141
  4029ec:	20400b74 	.word	0x20400b74
  4029f0:	20400b58 	.word	0x20400b58
  4029f4:	20400b5c 	.word	0x20400b5c
  4029f8:	004017ad 	.word	0x004017ad
  4029fc:	00409148 	.word	0x00409148
  402a00:	00401cdd 	.word	0x00401cdd

00402a04 <xTimerCreateTimerTask>:
{
  402a04:	b510      	push	{r4, lr}
  402a06:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402a08:	4b0f      	ldr	r3, [pc, #60]	; (402a48 <xTimerCreateTimerTask+0x44>)
  402a0a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402a0c:	4b0f      	ldr	r3, [pc, #60]	; (402a4c <xTimerCreateTimerTask+0x48>)
  402a0e:	681b      	ldr	r3, [r3, #0]
  402a10:	b173      	cbz	r3, 402a30 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402a12:	2300      	movs	r3, #0
  402a14:	9303      	str	r3, [sp, #12]
  402a16:	9302      	str	r3, [sp, #8]
  402a18:	9301      	str	r3, [sp, #4]
  402a1a:	2204      	movs	r2, #4
  402a1c:	9200      	str	r2, [sp, #0]
  402a1e:	f44f 7282 	mov.w	r2, #260	; 0x104
  402a22:	490b      	ldr	r1, [pc, #44]	; (402a50 <xTimerCreateTimerTask+0x4c>)
  402a24:	480b      	ldr	r0, [pc, #44]	; (402a54 <xTimerCreateTimerTask+0x50>)
  402a26:	4c0c      	ldr	r4, [pc, #48]	; (402a58 <xTimerCreateTimerTask+0x54>)
  402a28:	47a0      	blx	r4
	configASSERT( xReturn );
  402a2a:	b108      	cbz	r0, 402a30 <xTimerCreateTimerTask+0x2c>
}
  402a2c:	b004      	add	sp, #16
  402a2e:	bd10      	pop	{r4, pc}
  402a30:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a34:	b672      	cpsid	i
  402a36:	f383 8811 	msr	BASEPRI, r3
  402a3a:	f3bf 8f6f 	isb	sy
  402a3e:	f3bf 8f4f 	dsb	sy
  402a42:	b662      	cpsie	i
  402a44:	e7fe      	b.n	402a44 <xTimerCreateTimerTask+0x40>
  402a46:	bf00      	nop
  402a48:	00402981 	.word	0x00402981
  402a4c:	20400b8c 	.word	0x20400b8c
  402a50:	00409150 	.word	0x00409150
  402a54:	00402b85 	.word	0x00402b85
  402a58:	00401ded 	.word	0x00401ded

00402a5c <xTimerGenericCommand>:
	configASSERT( xTimer );
  402a5c:	b1d8      	cbz	r0, 402a96 <xTimerGenericCommand+0x3a>
{
  402a5e:	b530      	push	{r4, r5, lr}
  402a60:	b085      	sub	sp, #20
  402a62:	4615      	mov	r5, r2
  402a64:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402a66:	4a15      	ldr	r2, [pc, #84]	; (402abc <xTimerGenericCommand+0x60>)
  402a68:	6810      	ldr	r0, [r2, #0]
  402a6a:	b320      	cbz	r0, 402ab6 <xTimerGenericCommand+0x5a>
  402a6c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402a6e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402a70:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402a72:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402a74:	2905      	cmp	r1, #5
  402a76:	dc19      	bgt.n	402aac <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402a78:	4b11      	ldr	r3, [pc, #68]	; (402ac0 <xTimerGenericCommand+0x64>)
  402a7a:	4798      	blx	r3
  402a7c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402a7e:	f04f 0300 	mov.w	r3, #0
  402a82:	bf0c      	ite	eq
  402a84:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402a86:	461a      	movne	r2, r3
  402a88:	4669      	mov	r1, sp
  402a8a:	480c      	ldr	r0, [pc, #48]	; (402abc <xTimerGenericCommand+0x60>)
  402a8c:	6800      	ldr	r0, [r0, #0]
  402a8e:	4c0d      	ldr	r4, [pc, #52]	; (402ac4 <xTimerGenericCommand+0x68>)
  402a90:	47a0      	blx	r4
}
  402a92:	b005      	add	sp, #20
  402a94:	bd30      	pop	{r4, r5, pc}
  402a96:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a9a:	b672      	cpsid	i
  402a9c:	f383 8811 	msr	BASEPRI, r3
  402aa0:	f3bf 8f6f 	isb	sy
  402aa4:	f3bf 8f4f 	dsb	sy
  402aa8:	b662      	cpsie	i
  402aaa:	e7fe      	b.n	402aaa <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402aac:	2300      	movs	r3, #0
  402aae:	4669      	mov	r1, sp
  402ab0:	4c05      	ldr	r4, [pc, #20]	; (402ac8 <xTimerGenericCommand+0x6c>)
  402ab2:	47a0      	blx	r4
  402ab4:	e7ed      	b.n	402a92 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402ab6:	2000      	movs	r0, #0
	return xReturn;
  402ab8:	e7eb      	b.n	402a92 <xTimerGenericCommand+0x36>
  402aba:	bf00      	nop
  402abc:	20400b8c 	.word	0x20400b8c
  402ac0:	00402799 	.word	0x00402799
  402ac4:	00401829 	.word	0x00401829
  402ac8:	00401a0d 	.word	0x00401a0d

00402acc <prvSampleTimeNow>:
{
  402acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ad0:	b082      	sub	sp, #8
  402ad2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402ad4:	4b24      	ldr	r3, [pc, #144]	; (402b68 <prvSampleTimeNow+0x9c>)
  402ad6:	4798      	blx	r3
  402ad8:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402ada:	4b24      	ldr	r3, [pc, #144]	; (402b6c <prvSampleTimeNow+0xa0>)
  402adc:	681b      	ldr	r3, [r3, #0]
  402ade:	4298      	cmp	r0, r3
  402ae0:	d31b      	bcc.n	402b1a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402ae2:	2300      	movs	r3, #0
  402ae4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402ae8:	4b20      	ldr	r3, [pc, #128]	; (402b6c <prvSampleTimeNow+0xa0>)
  402aea:	601f      	str	r7, [r3, #0]
}
  402aec:	4638      	mov	r0, r7
  402aee:	b002      	add	sp, #8
  402af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402af4:	2100      	movs	r1, #0
  402af6:	9100      	str	r1, [sp, #0]
  402af8:	460b      	mov	r3, r1
  402afa:	4652      	mov	r2, sl
  402afc:	4620      	mov	r0, r4
  402afe:	4c1c      	ldr	r4, [pc, #112]	; (402b70 <prvSampleTimeNow+0xa4>)
  402b00:	47a0      	blx	r4
				configASSERT( xResult );
  402b02:	b960      	cbnz	r0, 402b1e <prvSampleTimeNow+0x52>
  402b04:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b08:	b672      	cpsid	i
  402b0a:	f383 8811 	msr	BASEPRI, r3
  402b0e:	f3bf 8f6f 	isb	sy
  402b12:	f3bf 8f4f 	dsb	sy
  402b16:	b662      	cpsie	i
  402b18:	e7fe      	b.n	402b18 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b1a:	4d16      	ldr	r5, [pc, #88]	; (402b74 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b1c:	4e16      	ldr	r6, [pc, #88]	; (402b78 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402b1e:	682b      	ldr	r3, [r5, #0]
  402b20:	681a      	ldr	r2, [r3, #0]
  402b22:	b1c2      	cbz	r2, 402b56 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b24:	68db      	ldr	r3, [r3, #12]
  402b26:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b2a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b2c:	f104 0904 	add.w	r9, r4, #4
  402b30:	4648      	mov	r0, r9
  402b32:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402b36:	4620      	mov	r0, r4
  402b38:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b3a:	69e3      	ldr	r3, [r4, #28]
  402b3c:	2b01      	cmp	r3, #1
  402b3e:	d1ee      	bne.n	402b1e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402b40:	69a3      	ldr	r3, [r4, #24]
  402b42:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402b44:	459a      	cmp	sl, r3
  402b46:	d2d5      	bcs.n	402af4 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402b48:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402b4a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402b4c:	4649      	mov	r1, r9
  402b4e:	6828      	ldr	r0, [r5, #0]
  402b50:	4b0a      	ldr	r3, [pc, #40]	; (402b7c <prvSampleTimeNow+0xb0>)
  402b52:	4798      	blx	r3
  402b54:	e7e3      	b.n	402b1e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402b56:	4a0a      	ldr	r2, [pc, #40]	; (402b80 <prvSampleTimeNow+0xb4>)
  402b58:	6810      	ldr	r0, [r2, #0]
  402b5a:	4906      	ldr	r1, [pc, #24]	; (402b74 <prvSampleTimeNow+0xa8>)
  402b5c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402b5e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402b60:	2301      	movs	r3, #1
  402b62:	f8c8 3000 	str.w	r3, [r8]
  402b66:	e7bf      	b.n	402ae8 <prvSampleTimeNow+0x1c>
  402b68:	004020bd 	.word	0x004020bd
  402b6c:	20400b88 	.word	0x20400b88
  402b70:	00402a5d 	.word	0x00402a5d
  402b74:	20400b58 	.word	0x20400b58
  402b78:	004011a9 	.word	0x004011a9
  402b7c:	00401175 	.word	0x00401175
  402b80:	20400b5c 	.word	0x20400b5c

00402b84 <prvTimerTask>:
{
  402b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b88:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402b8a:	4e75      	ldr	r6, [pc, #468]	; (402d60 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402b8c:	4f75      	ldr	r7, [pc, #468]	; (402d64 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402b8e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402d8c <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b92:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402d90 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402b96:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402b98:	681a      	ldr	r2, [r3, #0]
  402b9a:	2a00      	cmp	r2, #0
  402b9c:	f000 80ce 	beq.w	402d3c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ba0:	68db      	ldr	r3, [r3, #12]
  402ba2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402ba4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402ba6:	a804      	add	r0, sp, #16
  402ba8:	4b6f      	ldr	r3, [pc, #444]	; (402d68 <prvTimerTask+0x1e4>)
  402baa:	4798      	blx	r3
  402bac:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402bae:	9b04      	ldr	r3, [sp, #16]
  402bb0:	2b00      	cmp	r3, #0
  402bb2:	d144      	bne.n	402c3e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402bb4:	42a0      	cmp	r0, r4
  402bb6:	d212      	bcs.n	402bde <prvTimerTask+0x5a>
  402bb8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402bba:	1b61      	subs	r1, r4, r5
  402bbc:	4b6b      	ldr	r3, [pc, #428]	; (402d6c <prvTimerTask+0x1e8>)
  402bbe:	6818      	ldr	r0, [r3, #0]
  402bc0:	4b6b      	ldr	r3, [pc, #428]	; (402d70 <prvTimerTask+0x1ec>)
  402bc2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402bc4:	4b6b      	ldr	r3, [pc, #428]	; (402d74 <prvTimerTask+0x1f0>)
  402bc6:	4798      	blx	r3
  402bc8:	2800      	cmp	r0, #0
  402bca:	d13a      	bne.n	402c42 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402bcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402bd0:	f8c9 3000 	str.w	r3, [r9]
  402bd4:	f3bf 8f4f 	dsb	sy
  402bd8:	f3bf 8f6f 	isb	sy
  402bdc:	e031      	b.n	402c42 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402bde:	4b65      	ldr	r3, [pc, #404]	; (402d74 <prvTimerTask+0x1f0>)
  402be0:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402be2:	6833      	ldr	r3, [r6, #0]
  402be4:	68db      	ldr	r3, [r3, #12]
  402be6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402bea:	f10a 0004 	add.w	r0, sl, #4
  402bee:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402bf0:	f8da 301c 	ldr.w	r3, [sl, #28]
  402bf4:	2b01      	cmp	r3, #1
  402bf6:	d004      	beq.n	402c02 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402bf8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402bfc:	4650      	mov	r0, sl
  402bfe:	4798      	blx	r3
  402c00:	e01f      	b.n	402c42 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402c02:	f8da 1018 	ldr.w	r1, [sl, #24]
  402c06:	4623      	mov	r3, r4
  402c08:	462a      	mov	r2, r5
  402c0a:	4421      	add	r1, r4
  402c0c:	4650      	mov	r0, sl
  402c0e:	4d5a      	ldr	r5, [pc, #360]	; (402d78 <prvTimerTask+0x1f4>)
  402c10:	47a8      	blx	r5
  402c12:	2801      	cmp	r0, #1
  402c14:	d1f0      	bne.n	402bf8 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402c16:	2100      	movs	r1, #0
  402c18:	9100      	str	r1, [sp, #0]
  402c1a:	460b      	mov	r3, r1
  402c1c:	4622      	mov	r2, r4
  402c1e:	4650      	mov	r0, sl
  402c20:	4c56      	ldr	r4, [pc, #344]	; (402d7c <prvTimerTask+0x1f8>)
  402c22:	47a0      	blx	r4
			configASSERT( xResult );
  402c24:	2800      	cmp	r0, #0
  402c26:	d1e7      	bne.n	402bf8 <prvTimerTask+0x74>
  402c28:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c2c:	b672      	cpsid	i
  402c2e:	f383 8811 	msr	BASEPRI, r3
  402c32:	f3bf 8f6f 	isb	sy
  402c36:	f3bf 8f4f 	dsb	sy
  402c3a:	b662      	cpsie	i
  402c3c:	e7fe      	b.n	402c3c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402c3e:	4b4d      	ldr	r3, [pc, #308]	; (402d74 <prvTimerTask+0x1f0>)
  402c40:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c42:	4d4a      	ldr	r5, [pc, #296]	; (402d6c <prvTimerTask+0x1e8>)
  402c44:	4c4e      	ldr	r4, [pc, #312]	; (402d80 <prvTimerTask+0x1fc>)
  402c46:	e006      	b.n	402c56 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402c48:	9907      	ldr	r1, [sp, #28]
  402c4a:	9806      	ldr	r0, [sp, #24]
  402c4c:	9b05      	ldr	r3, [sp, #20]
  402c4e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402c50:	9b04      	ldr	r3, [sp, #16]
  402c52:	2b00      	cmp	r3, #0
  402c54:	da09      	bge.n	402c6a <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402c56:	2300      	movs	r3, #0
  402c58:	461a      	mov	r2, r3
  402c5a:	a904      	add	r1, sp, #16
  402c5c:	6828      	ldr	r0, [r5, #0]
  402c5e:	47a0      	blx	r4
  402c60:	2800      	cmp	r0, #0
  402c62:	d098      	beq.n	402b96 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402c64:	9b04      	ldr	r3, [sp, #16]
  402c66:	2b00      	cmp	r3, #0
  402c68:	dbee      	blt.n	402c48 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402c6a:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402c6e:	f8da 3014 	ldr.w	r3, [sl, #20]
  402c72:	b113      	cbz	r3, 402c7a <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402c74:	f10a 0004 	add.w	r0, sl, #4
  402c78:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402c7a:	a803      	add	r0, sp, #12
  402c7c:	4b3a      	ldr	r3, [pc, #232]	; (402d68 <prvTimerTask+0x1e4>)
  402c7e:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402c80:	9b04      	ldr	r3, [sp, #16]
  402c82:	2b09      	cmp	r3, #9
  402c84:	d8e7      	bhi.n	402c56 <prvTimerTask+0xd2>
  402c86:	a201      	add	r2, pc, #4	; (adr r2, 402c8c <prvTimerTask+0x108>)
  402c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402c8c:	00402cb5 	.word	0x00402cb5
  402c90:	00402cb5 	.word	0x00402cb5
  402c94:	00402cb5 	.word	0x00402cb5
  402c98:	00402c57 	.word	0x00402c57
  402c9c:	00402d09 	.word	0x00402d09
  402ca0:	00402d35 	.word	0x00402d35
  402ca4:	00402cb5 	.word	0x00402cb5
  402ca8:	00402cb5 	.word	0x00402cb5
  402cac:	00402c57 	.word	0x00402c57
  402cb0:	00402d09 	.word	0x00402d09
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402cb4:	9c05      	ldr	r4, [sp, #20]
  402cb6:	f8da 1018 	ldr.w	r1, [sl, #24]
  402cba:	4623      	mov	r3, r4
  402cbc:	4602      	mov	r2, r0
  402cbe:	4421      	add	r1, r4
  402cc0:	4650      	mov	r0, sl
  402cc2:	4c2d      	ldr	r4, [pc, #180]	; (402d78 <prvTimerTask+0x1f4>)
  402cc4:	47a0      	blx	r4
  402cc6:	2801      	cmp	r0, #1
  402cc8:	d1bc      	bne.n	402c44 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402cca:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402cce:	4650      	mov	r0, sl
  402cd0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402cd2:	f8da 301c 	ldr.w	r3, [sl, #28]
  402cd6:	2b01      	cmp	r3, #1
  402cd8:	d1b4      	bne.n	402c44 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402cda:	f8da 2018 	ldr.w	r2, [sl, #24]
  402cde:	2100      	movs	r1, #0
  402ce0:	9100      	str	r1, [sp, #0]
  402ce2:	460b      	mov	r3, r1
  402ce4:	9805      	ldr	r0, [sp, #20]
  402ce6:	4402      	add	r2, r0
  402ce8:	4650      	mov	r0, sl
  402cea:	4c24      	ldr	r4, [pc, #144]	; (402d7c <prvTimerTask+0x1f8>)
  402cec:	47a0      	blx	r4
							configASSERT( xResult );
  402cee:	2800      	cmp	r0, #0
  402cf0:	d1a8      	bne.n	402c44 <prvTimerTask+0xc0>
  402cf2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cf6:	b672      	cpsid	i
  402cf8:	f383 8811 	msr	BASEPRI, r3
  402cfc:	f3bf 8f6f 	isb	sy
  402d00:	f3bf 8f4f 	dsb	sy
  402d04:	b662      	cpsie	i
  402d06:	e7fe      	b.n	402d06 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402d08:	9905      	ldr	r1, [sp, #20]
  402d0a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402d0e:	b131      	cbz	r1, 402d1e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402d10:	4603      	mov	r3, r0
  402d12:	4602      	mov	r2, r0
  402d14:	4401      	add	r1, r0
  402d16:	4650      	mov	r0, sl
  402d18:	4c17      	ldr	r4, [pc, #92]	; (402d78 <prvTimerTask+0x1f4>)
  402d1a:	47a0      	blx	r4
  402d1c:	e792      	b.n	402c44 <prvTimerTask+0xc0>
  402d1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d22:	b672      	cpsid	i
  402d24:	f383 8811 	msr	BASEPRI, r3
  402d28:	f3bf 8f6f 	isb	sy
  402d2c:	f3bf 8f4f 	dsb	sy
  402d30:	b662      	cpsie	i
  402d32:	e7fe      	b.n	402d32 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402d34:	4650      	mov	r0, sl
  402d36:	4b13      	ldr	r3, [pc, #76]	; (402d84 <prvTimerTask+0x200>)
  402d38:	4798      	blx	r3
  402d3a:	e783      	b.n	402c44 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402d3c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402d3e:	a804      	add	r0, sp, #16
  402d40:	4b09      	ldr	r3, [pc, #36]	; (402d68 <prvTimerTask+0x1e4>)
  402d42:	4798      	blx	r3
  402d44:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402d46:	9b04      	ldr	r3, [sp, #16]
  402d48:	2b00      	cmp	r3, #0
  402d4a:	f47f af78 	bne.w	402c3e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402d4e:	4b0e      	ldr	r3, [pc, #56]	; (402d88 <prvTimerTask+0x204>)
  402d50:	681b      	ldr	r3, [r3, #0]
  402d52:	681a      	ldr	r2, [r3, #0]
  402d54:	fab2 f282 	clz	r2, r2
  402d58:	0952      	lsrs	r2, r2, #5
  402d5a:	2400      	movs	r4, #0
  402d5c:	e72d      	b.n	402bba <prvTimerTask+0x36>
  402d5e:	bf00      	nop
  402d60:	20400b58 	.word	0x20400b58
  402d64:	004020ad 	.word	0x004020ad
  402d68:	00402acd 	.word	0x00402acd
  402d6c:	20400b8c 	.word	0x20400b8c
  402d70:	00401d11 	.word	0x00401d11
  402d74:	00402215 	.word	0x00402215
  402d78:	00402935 	.word	0x00402935
  402d7c:	00402a5d 	.word	0x00402a5d
  402d80:	00401b0d 	.word	0x00401b0d
  402d84:	00401519 	.word	0x00401519
  402d88:	20400b5c 	.word	0x20400b5c
  402d8c:	e000ed04 	.word	0xe000ed04
  402d90:	004011a9 	.word	0x004011a9

00402d94 <but_amarelo_callback>:
	pio_get_interrupt_status(pio);
	NVIC_EnableIRQ(ul_id);
	NVIC_SetPriority(ul_id, priority);
}

void but_amarelo_callback(){
  402d94:	b510      	push	{r4, lr}
  402d96:	b082      	sub	sp, #8
	
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	char head_amarelo = 'A';
	char but_amarelo;
	
	if(pio_get(BUT_PIO, PIO_INPUT, BUT_IDX_MASK) == 0) {
  402d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402d9c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402da0:	4809      	ldr	r0, [pc, #36]	; (402dc8 <but_amarelo_callback+0x34>)
  402da2:	4b0a      	ldr	r3, [pc, #40]	; (402dcc <but_amarelo_callback+0x38>)
  402da4:	4798      	blx	r3
  402da6:	fab0 f080 	clz	r0, r0
  402daa:	0940      	lsrs	r0, r0, #5
  402dac:	f88d 0005 	strb.w	r0, [sp, #5]
	} else {
		but_amarelo = 0;
	}
	
	but_amarelo_data.value = but_amarelo;
	but_amarelo_data.head = head_amarelo;
  402db0:	a902      	add	r1, sp, #8
  402db2:	2341      	movs	r3, #65	; 0x41
  402db4:	f801 3d04 	strb.w	r3, [r1, #-4]!
	
	xQueueSendFromISR(xQueueBut, &but_amarelo_data, xHigherPriorityTaskWoken);
  402db8:	2300      	movs	r3, #0
  402dba:	461a      	mov	r2, r3
  402dbc:	4804      	ldr	r0, [pc, #16]	; (402dd0 <but_amarelo_callback+0x3c>)
  402dbe:	6800      	ldr	r0, [r0, #0]
  402dc0:	4c04      	ldr	r4, [pc, #16]	; (402dd4 <but_amarelo_callback+0x40>)
  402dc2:	47a0      	blx	r4
}
  402dc4:	b002      	add	sp, #8
  402dc6:	bd10      	pop	{r4, pc}
  402dc8:	400e1400 	.word	0x400e1400
  402dcc:	00400833 	.word	0x00400833
  402dd0:	20400c98 	.word	0x20400c98
  402dd4:	00401a0d 	.word	0x00401a0d

00402dd8 <but_verde_callback>:

void but_verde_callback(){
  402dd8:	b510      	push	{r4, lr}
  402dda:	b082      	sub	sp, #8
	
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	char head_verde = 'B';
	char but_verde;
	
	if (pio_get(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK) == 0){
  402ddc:	2240      	movs	r2, #64	; 0x40
  402dde:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402de2:	480a      	ldr	r0, [pc, #40]	; (402e0c <but_verde_callback+0x34>)
  402de4:	4b0a      	ldr	r3, [pc, #40]	; (402e10 <but_verde_callback+0x38>)
  402de6:	4798      	blx	r3
  402de8:	fab0 f080 	clz	r0, r0
  402dec:	0940      	lsrs	r0, r0, #5
  402dee:	f88d 0005 	strb.w	r0, [sp, #5]
	} else{
		but_verde = 0;
	}
	
	but_verde_data.value = but_verde;
	but_verde_data.head = head_verde;
  402df2:	a902      	add	r1, sp, #8
  402df4:	2342      	movs	r3, #66	; 0x42
  402df6:	f801 3d04 	strb.w	r3, [r1, #-4]!
	
	xQueueSendFromISR(xQueueBut, &but_verde_data, xHigherPriorityTaskWoken);
  402dfa:	2300      	movs	r3, #0
  402dfc:	461a      	mov	r2, r3
  402dfe:	4805      	ldr	r0, [pc, #20]	; (402e14 <but_verde_callback+0x3c>)
  402e00:	6800      	ldr	r0, [r0, #0]
  402e02:	4c05      	ldr	r4, [pc, #20]	; (402e18 <but_verde_callback+0x40>)
  402e04:	47a0      	blx	r4
}
  402e06:	b002      	add	sp, #8
  402e08:	bd10      	pop	{r4, pc}
  402e0a:	bf00      	nop
  402e0c:	400e0e00 	.word	0x400e0e00
  402e10:	00400833 	.word	0x00400833
  402e14:	20400c98 	.word	0x20400c98
  402e18:	00401a0d 	.word	0x00401a0d

00402e1c <AFEC_vry_Callback>:
	adc.value = afec_channel_get_value(AFEC_VRX, AFEC_VRX_CHANNEL);
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
	xQueueSendFromISR(xQueuexX1, &adc, &xHigherPriorityTaskWoken);
}

static void AFEC_vry_Callback(void) {
  402e1c:	b510      	push	{r4, lr}
  402e1e:	b082      	sub	sp, #8
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  402e20:	4b08      	ldr	r3, [pc, #32]	; (402e44 <AFEC_vry_Callback+0x28>)
  402e22:	2205      	movs	r2, #5
  402e24:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	adcData adc;
	adc.value = afec_channel_get_value(AFEC_VRY, AFEC_VRY_CHANNEL);
  402e28:	9301      	str	r3, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  402e2a:	aa02      	add	r2, sp, #8
  402e2c:	2301      	movs	r3, #1
  402e2e:	f842 3d08 	str.w	r3, [r2, #-8]!
	xQueueSendFromISR(xQueueY1, &adc, &xHigherPriorityTaskWoken);
  402e32:	2300      	movs	r3, #0
  402e34:	a901      	add	r1, sp, #4
  402e36:	4804      	ldr	r0, [pc, #16]	; (402e48 <AFEC_vry_Callback+0x2c>)
  402e38:	6800      	ldr	r0, [r0, #0]
  402e3a:	4c04      	ldr	r4, [pc, #16]	; (402e4c <AFEC_vry_Callback+0x30>)
  402e3c:	47a0      	blx	r4
}
  402e3e:	b002      	add	sp, #8
  402e40:	bd10      	pop	{r4, pc}
  402e42:	bf00      	nop
  402e44:	4003c000 	.word	0x4003c000
  402e48:	20400c9c 	.word	0x20400c9c
  402e4c:	00401a0d 	.word	0x00401a0d

00402e50 <AFEC_vrx_Callback>:
static void AFEC_vrx_Callback(void) {
  402e50:	b510      	push	{r4, lr}
  402e52:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  402e54:	4b08      	ldr	r3, [pc, #32]	; (402e78 <AFEC_vrx_Callback+0x28>)
  402e56:	2205      	movs	r2, #5
  402e58:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	adc.value = afec_channel_get_value(AFEC_VRX, AFEC_VRX_CHANNEL);
  402e5c:	9301      	str	r3, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  402e5e:	aa02      	add	r2, sp, #8
  402e60:	2301      	movs	r3, #1
  402e62:	f842 3d08 	str.w	r3, [r2, #-8]!
	xQueueSendFromISR(xQueuexX1, &adc, &xHigherPriorityTaskWoken);
  402e66:	2300      	movs	r3, #0
  402e68:	a901      	add	r1, sp, #4
  402e6a:	4804      	ldr	r0, [pc, #16]	; (402e7c <AFEC_vrx_Callback+0x2c>)
  402e6c:	6800      	ldr	r0, [r0, #0]
  402e6e:	4c04      	ldr	r4, [pc, #16]	; (402e80 <AFEC_vrx_Callback+0x30>)
  402e70:	47a0      	blx	r4
}
  402e72:	b002      	add	sp, #8
  402e74:	bd10      	pop	{r4, pc}
  402e76:	bf00      	nop
  402e78:	40064000 	.word	0x40064000
  402e7c:	20400ca0 	.word	0x20400ca0
  402e80:	00401a0d 	.word	0x00401a0d

00402e84 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402e84:	b570      	push	{r4, r5, r6, lr}
  402e86:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402e88:	4b2a      	ldr	r3, [pc, #168]	; (402f34 <usart_serial_putchar+0xb0>)
  402e8a:	4298      	cmp	r0, r3
  402e8c:	d013      	beq.n	402eb6 <usart_serial_putchar+0x32>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402e8e:	4b2a      	ldr	r3, [pc, #168]	; (402f38 <usart_serial_putchar+0xb4>)
  402e90:	4298      	cmp	r0, r3
  402e92:	d019      	beq.n	402ec8 <usart_serial_putchar+0x44>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402e94:	4b29      	ldr	r3, [pc, #164]	; (402f3c <usart_serial_putchar+0xb8>)
  402e96:	4298      	cmp	r0, r3
  402e98:	d01f      	beq.n	402eda <usart_serial_putchar+0x56>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402e9a:	4b29      	ldr	r3, [pc, #164]	; (402f40 <usart_serial_putchar+0xbc>)
  402e9c:	4298      	cmp	r0, r3
  402e9e:	d025      	beq.n	402eec <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402ea0:	4b28      	ldr	r3, [pc, #160]	; (402f44 <usart_serial_putchar+0xc0>)
  402ea2:	4298      	cmp	r0, r3
  402ea4:	d02b      	beq.n	402efe <usart_serial_putchar+0x7a>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402ea6:	4b28      	ldr	r3, [pc, #160]	; (402f48 <usart_serial_putchar+0xc4>)
  402ea8:	4298      	cmp	r0, r3
  402eaa:	d031      	beq.n	402f10 <usart_serial_putchar+0x8c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402eac:	4b27      	ldr	r3, [pc, #156]	; (402f4c <usart_serial_putchar+0xc8>)
  402eae:	4298      	cmp	r0, r3
  402eb0:	d037      	beq.n	402f22 <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402eb2:	2000      	movs	r0, #0
}
  402eb4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402eb6:	461e      	mov	r6, r3
  402eb8:	4d25      	ldr	r5, [pc, #148]	; (402f50 <usart_serial_putchar+0xcc>)
  402eba:	4621      	mov	r1, r4
  402ebc:	4630      	mov	r0, r6
  402ebe:	47a8      	blx	r5
  402ec0:	2800      	cmp	r0, #0
  402ec2:	d1fa      	bne.n	402eba <usart_serial_putchar+0x36>
		return 1;
  402ec4:	2001      	movs	r0, #1
  402ec6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ec8:	461e      	mov	r6, r3
  402eca:	4d21      	ldr	r5, [pc, #132]	; (402f50 <usart_serial_putchar+0xcc>)
  402ecc:	4621      	mov	r1, r4
  402ece:	4630      	mov	r0, r6
  402ed0:	47a8      	blx	r5
  402ed2:	2800      	cmp	r0, #0
  402ed4:	d1fa      	bne.n	402ecc <usart_serial_putchar+0x48>
		return 1;
  402ed6:	2001      	movs	r0, #1
  402ed8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402eda:	461e      	mov	r6, r3
  402edc:	4d1c      	ldr	r5, [pc, #112]	; (402f50 <usart_serial_putchar+0xcc>)
  402ede:	4621      	mov	r1, r4
  402ee0:	4630      	mov	r0, r6
  402ee2:	47a8      	blx	r5
  402ee4:	2800      	cmp	r0, #0
  402ee6:	d1fa      	bne.n	402ede <usart_serial_putchar+0x5a>
		return 1;
  402ee8:	2001      	movs	r0, #1
  402eea:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402eec:	461e      	mov	r6, r3
  402eee:	4d18      	ldr	r5, [pc, #96]	; (402f50 <usart_serial_putchar+0xcc>)
  402ef0:	4621      	mov	r1, r4
  402ef2:	4630      	mov	r0, r6
  402ef4:	47a8      	blx	r5
  402ef6:	2800      	cmp	r0, #0
  402ef8:	d1fa      	bne.n	402ef0 <usart_serial_putchar+0x6c>
		return 1;
  402efa:	2001      	movs	r0, #1
  402efc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402efe:	461e      	mov	r6, r3
  402f00:	4d14      	ldr	r5, [pc, #80]	; (402f54 <usart_serial_putchar+0xd0>)
  402f02:	4621      	mov	r1, r4
  402f04:	4630      	mov	r0, r6
  402f06:	47a8      	blx	r5
  402f08:	2800      	cmp	r0, #0
  402f0a:	d1fa      	bne.n	402f02 <usart_serial_putchar+0x7e>
		return 1;
  402f0c:	2001      	movs	r0, #1
  402f0e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402f10:	461e      	mov	r6, r3
  402f12:	4d10      	ldr	r5, [pc, #64]	; (402f54 <usart_serial_putchar+0xd0>)
  402f14:	4621      	mov	r1, r4
  402f16:	4630      	mov	r0, r6
  402f18:	47a8      	blx	r5
  402f1a:	2800      	cmp	r0, #0
  402f1c:	d1fa      	bne.n	402f14 <usart_serial_putchar+0x90>
		return 1;
  402f1e:	2001      	movs	r0, #1
  402f20:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402f22:	461e      	mov	r6, r3
  402f24:	4d0b      	ldr	r5, [pc, #44]	; (402f54 <usart_serial_putchar+0xd0>)
  402f26:	4621      	mov	r1, r4
  402f28:	4630      	mov	r0, r6
  402f2a:	47a8      	blx	r5
  402f2c:	2800      	cmp	r0, #0
  402f2e:	d1fa      	bne.n	402f26 <usart_serial_putchar+0xa2>
		return 1;
  402f30:	2001      	movs	r0, #1
  402f32:	bd70      	pop	{r4, r5, r6, pc}
  402f34:	400e0800 	.word	0x400e0800
  402f38:	400e0a00 	.word	0x400e0a00
  402f3c:	400e1a00 	.word	0x400e1a00
  402f40:	400e1c00 	.word	0x400e1c00
  402f44:	40024000 	.word	0x40024000
  402f48:	40028000 	.word	0x40028000
  402f4c:	4002c000 	.word	0x4002c000
  402f50:	00400d4f 	.word	0x00400d4f
  402f54:	00400e61 	.word	0x00400e61

00402f58 <config_AFEC_pot>:
}



static void config_AFEC_pot(Afec *afec, uint32_t afec_id, uint32_t afec_channel,
                            afec_callback_t callback) {
  402f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402f5c:	b08a      	sub	sp, #40	; 0x28
  402f5e:	4604      	mov	r4, r0
  402f60:	460d      	mov	r5, r1
  402f62:	4616      	mov	r6, r2
  402f64:	4698      	mov	r8, r3
  /*************************************
   * Ativa e configura AFEC
   *************************************/
  /* Ativa AFEC - 0 */
  afec_enable(afec);
  402f66:	4b21      	ldr	r3, [pc, #132]	; (402fec <config_AFEC_pot+0x94>)
  402f68:	4798      	blx	r3

  /* struct de configuracao do AFEC */
  struct afec_config afec_cfg;

  /* Carrega parametros padrao */
  afec_get_config_defaults(&afec_cfg);
  402f6a:	a804      	add	r0, sp, #16
  402f6c:	4b20      	ldr	r3, [pc, #128]	; (402ff0 <config_AFEC_pot+0x98>)
  402f6e:	4798      	blx	r3

  /* Configura AFEC */
  afec_init(afec, &afec_cfg);
  402f70:	a904      	add	r1, sp, #16
  402f72:	4620      	mov	r0, r4
  402f74:	4b1f      	ldr	r3, [pc, #124]	; (402ff4 <config_AFEC_pot+0x9c>)
  402f76:	4798      	blx	r3
	reg = afec->AFEC_MR;
  402f78:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  402f7a:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  402f7e:	6063      	str	r3, [r4, #4]
  /* Configura trigger por software */
  afec_set_trigger(afec, AFEC_TRIG_SW);

  /*** Configuracao específica do canal AFEC ***/
  struct afec_ch_config afec_ch_cfg;
  afec_ch_get_config_defaults(&afec_ch_cfg);
  402f80:	a803      	add	r0, sp, #12
  402f82:	4b1d      	ldr	r3, [pc, #116]	; (402ff8 <config_AFEC_pot+0xa0>)
  402f84:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402f86:	2300      	movs	r3, #0
  402f88:	f88d 300d 	strb.w	r3, [sp, #13]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  402f8c:	b2b7      	uxth	r7, r6
  402f8e:	aa03      	add	r2, sp, #12
  402f90:	4639      	mov	r1, r7
  402f92:	4620      	mov	r0, r4
  402f94:	4b19      	ldr	r3, [pc, #100]	; (402ffc <config_AFEC_pot+0xa4>)
  402f96:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  402f98:	6667      	str	r7, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
  402f9e:	66e3      	str	r3, [r4, #108]	; 0x6c
  afec_channel_set_analog_offset(afec, afec_channel, 0x200);

  /***  Configura sensor de temperatura ***/
  struct afec_temp_sensor_config afec_temp_sensor_cfg;

  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402fa0:	a801      	add	r0, sp, #4
  402fa2:	4b17      	ldr	r3, [pc, #92]	; (403000 <config_AFEC_pot+0xa8>)
  402fa4:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  402fa6:	a901      	add	r1, sp, #4
  402fa8:	4620      	mov	r0, r4
  402faa:	4b16      	ldr	r3, [pc, #88]	; (403004 <config_AFEC_pot+0xac>)
  402fac:	4798      	blx	r3

  /* configura IRQ */
  afec_set_callback(afec, afec_channel, callback, 1);
  402fae:	2301      	movs	r3, #1
  402fb0:	4642      	mov	r2, r8
  402fb2:	4631      	mov	r1, r6
  402fb4:	4620      	mov	r0, r4
  402fb6:	4c14      	ldr	r4, [pc, #80]	; (403008 <config_AFEC_pot+0xb0>)
  402fb8:	47a0      	blx	r4
  NVIC_SetPriority(afec_id, 4);
  402fba:	b26b      	sxtb	r3, r5
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  402fbc:	2b00      	cmp	r3, #0
  402fbe:	db0e      	blt.n	402fde <config_AFEC_pot+0x86>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402fc0:	4a12      	ldr	r2, [pc, #72]	; (40300c <config_AFEC_pot+0xb4>)
  402fc2:	2180      	movs	r1, #128	; 0x80
  402fc4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402fc6:	095b      	lsrs	r3, r3, #5
  402fc8:	f005 051f 	and.w	r5, r5, #31
  402fcc:	2201      	movs	r2, #1
  402fce:	fa02 f505 	lsl.w	r5, r2, r5
  402fd2:	4a0f      	ldr	r2, [pc, #60]	; (403010 <config_AFEC_pot+0xb8>)
  402fd4:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
  NVIC_EnableIRQ(afec_id);
}
  402fd8:	b00a      	add	sp, #40	; 0x28
  402fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402fde:	f005 010f 	and.w	r1, r5, #15
  402fe2:	4a0c      	ldr	r2, [pc, #48]	; (403014 <config_AFEC_pot+0xbc>)
  402fe4:	440a      	add	r2, r1
  402fe6:	2180      	movs	r1, #128	; 0x80
  402fe8:	7611      	strb	r1, [r2, #24]
  402fea:	e7ec      	b.n	402fc6 <config_AFEC_pot+0x6e>
  402fec:	004007b5 	.word	0x004007b5
  402ff0:	004005e5 	.word	0x004005e5
  402ff4:	00400635 	.word	0x00400635
  402ff8:	00400615 	.word	0x00400615
  402ffc:	004005a1 	.word	0x004005a1
  403000:	0040061f 	.word	0x0040061f
  403004:	004005d1 	.word	0x004005d1
  403008:	00400735 	.word	0x00400735
  40300c:	e000e400 	.word	0xe000e400
  403010:	e000e100 	.word	0xe000e100
  403014:	e000ecfc 	.word	0xe000ecfc

00403018 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403018:	b5f0      	push	{r4, r5, r6, r7, lr}
  40301a:	b083      	sub	sp, #12
  40301c:	4605      	mov	r5, r0
  40301e:	460c      	mov	r4, r1
	uint32_t val = 0;
  403020:	2300      	movs	r3, #0
  403022:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403024:	4b2a      	ldr	r3, [pc, #168]	; (4030d0 <usart_serial_getchar+0xb8>)
  403026:	4298      	cmp	r0, r3
  403028:	d013      	beq.n	403052 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40302a:	4b2a      	ldr	r3, [pc, #168]	; (4030d4 <usart_serial_getchar+0xbc>)
  40302c:	4298      	cmp	r0, r3
  40302e:	d018      	beq.n	403062 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403030:	4b29      	ldr	r3, [pc, #164]	; (4030d8 <usart_serial_getchar+0xc0>)
  403032:	4298      	cmp	r0, r3
  403034:	d01d      	beq.n	403072 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403036:	4b29      	ldr	r3, [pc, #164]	; (4030dc <usart_serial_getchar+0xc4>)
  403038:	429d      	cmp	r5, r3
  40303a:	d022      	beq.n	403082 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40303c:	4b28      	ldr	r3, [pc, #160]	; (4030e0 <usart_serial_getchar+0xc8>)
  40303e:	429d      	cmp	r5, r3
  403040:	d027      	beq.n	403092 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403042:	4b28      	ldr	r3, [pc, #160]	; (4030e4 <usart_serial_getchar+0xcc>)
  403044:	429d      	cmp	r5, r3
  403046:	d02e      	beq.n	4030a6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403048:	4b27      	ldr	r3, [pc, #156]	; (4030e8 <usart_serial_getchar+0xd0>)
  40304a:	429d      	cmp	r5, r3
  40304c:	d035      	beq.n	4030ba <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40304e:	b003      	add	sp, #12
  403050:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403052:	461f      	mov	r7, r3
  403054:	4e25      	ldr	r6, [pc, #148]	; (4030ec <usart_serial_getchar+0xd4>)
  403056:	4621      	mov	r1, r4
  403058:	4638      	mov	r0, r7
  40305a:	47b0      	blx	r6
  40305c:	2800      	cmp	r0, #0
  40305e:	d1fa      	bne.n	403056 <usart_serial_getchar+0x3e>
  403060:	e7e9      	b.n	403036 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403062:	461f      	mov	r7, r3
  403064:	4e21      	ldr	r6, [pc, #132]	; (4030ec <usart_serial_getchar+0xd4>)
  403066:	4621      	mov	r1, r4
  403068:	4638      	mov	r0, r7
  40306a:	47b0      	blx	r6
  40306c:	2800      	cmp	r0, #0
  40306e:	d1fa      	bne.n	403066 <usart_serial_getchar+0x4e>
  403070:	e7e4      	b.n	40303c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403072:	461f      	mov	r7, r3
  403074:	4e1d      	ldr	r6, [pc, #116]	; (4030ec <usart_serial_getchar+0xd4>)
  403076:	4621      	mov	r1, r4
  403078:	4638      	mov	r0, r7
  40307a:	47b0      	blx	r6
  40307c:	2800      	cmp	r0, #0
  40307e:	d1fa      	bne.n	403076 <usart_serial_getchar+0x5e>
  403080:	e7df      	b.n	403042 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403082:	461f      	mov	r7, r3
  403084:	4e19      	ldr	r6, [pc, #100]	; (4030ec <usart_serial_getchar+0xd4>)
  403086:	4621      	mov	r1, r4
  403088:	4638      	mov	r0, r7
  40308a:	47b0      	blx	r6
  40308c:	2800      	cmp	r0, #0
  40308e:	d1fa      	bne.n	403086 <usart_serial_getchar+0x6e>
  403090:	e7da      	b.n	403048 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403092:	461e      	mov	r6, r3
  403094:	4d16      	ldr	r5, [pc, #88]	; (4030f0 <usart_serial_getchar+0xd8>)
  403096:	a901      	add	r1, sp, #4
  403098:	4630      	mov	r0, r6
  40309a:	47a8      	blx	r5
  40309c:	2800      	cmp	r0, #0
  40309e:	d1fa      	bne.n	403096 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4030a0:	9b01      	ldr	r3, [sp, #4]
  4030a2:	7023      	strb	r3, [r4, #0]
  4030a4:	e7d3      	b.n	40304e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4030a6:	461e      	mov	r6, r3
  4030a8:	4d11      	ldr	r5, [pc, #68]	; (4030f0 <usart_serial_getchar+0xd8>)
  4030aa:	a901      	add	r1, sp, #4
  4030ac:	4630      	mov	r0, r6
  4030ae:	47a8      	blx	r5
  4030b0:	2800      	cmp	r0, #0
  4030b2:	d1fa      	bne.n	4030aa <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4030b4:	9b01      	ldr	r3, [sp, #4]
  4030b6:	7023      	strb	r3, [r4, #0]
  4030b8:	e7c9      	b.n	40304e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4030ba:	461e      	mov	r6, r3
  4030bc:	4d0c      	ldr	r5, [pc, #48]	; (4030f0 <usart_serial_getchar+0xd8>)
  4030be:	a901      	add	r1, sp, #4
  4030c0:	4630      	mov	r0, r6
  4030c2:	47a8      	blx	r5
  4030c4:	2800      	cmp	r0, #0
  4030c6:	d1fa      	bne.n	4030be <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4030c8:	9b01      	ldr	r3, [sp, #4]
  4030ca:	7023      	strb	r3, [r4, #0]
}
  4030cc:	e7bf      	b.n	40304e <usart_serial_getchar+0x36>
  4030ce:	bf00      	nop
  4030d0:	400e0800 	.word	0x400e0800
  4030d4:	400e0a00 	.word	0x400e0a00
  4030d8:	400e1a00 	.word	0x400e1a00
  4030dc:	400e1c00 	.word	0x400e1c00
  4030e0:	40024000 	.word	0x40024000
  4030e4:	40028000 	.word	0x40028000
  4030e8:	4002c000 	.word	0x4002c000
  4030ec:	00400d61 	.word	0x00400d61
  4030f0:	00400e77 	.word	0x00400e77

004030f4 <vApplicationStackOverflowHook>:
signed char *pcTaskName) {
  4030f4:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4030f6:	460a      	mov	r2, r1
  4030f8:	4601      	mov	r1, r0
  4030fa:	4802      	ldr	r0, [pc, #8]	; (403104 <vApplicationStackOverflowHook+0x10>)
  4030fc:	4b02      	ldr	r3, [pc, #8]	; (403108 <vApplicationStackOverflowHook+0x14>)
  4030fe:	4798      	blx	r3
  403100:	e7fe      	b.n	403100 <vApplicationStackOverflowHook+0xc>
  403102:	bf00      	nop
  403104:	00409250 	.word	0x00409250
  403108:	004040dd 	.word	0x004040dd

0040310c <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  40310c:	4770      	bx	lr

0040310e <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40310e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403112:	b672      	cpsid	i
  403114:	f383 8811 	msr	BASEPRI, r3
  403118:	f3bf 8f6f 	isb	sy
  40311c:	f3bf 8f4f 	dsb	sy
  403120:	b662      	cpsie	i
  403122:	e7fe      	b.n	403122 <vApplicationMallocFailedHook+0x14>

00403124 <configure_pio_input>:
void configure_pio_input(Pio *pio, const pio_type_t ul_type, const uint32_t ul_mask, const uint32_t ul_attribute, uint32_t ul_id){
  403124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403126:	4604      	mov	r4, r0
  403128:	460e      	mov	r6, r1
  40312a:	4615      	mov	r5, r2
  40312c:	461f      	mov	r7, r3
	pmc_enable_periph_clk(ul_id);
  40312e:	9806      	ldr	r0, [sp, #24]
  403130:	4b06      	ldr	r3, [pc, #24]	; (40314c <configure_pio_input+0x28>)
  403132:	4798      	blx	r3
	pio_configure(pio, ul_type, ul_mask, ul_attribute);
  403134:	463b      	mov	r3, r7
  403136:	462a      	mov	r2, r5
  403138:	4631      	mov	r1, r6
  40313a:	4620      	mov	r0, r4
  40313c:	4e04      	ldr	r6, [pc, #16]	; (403150 <configure_pio_input+0x2c>)
  40313e:	47b0      	blx	r6
	pio_set_debounce_filter(pio, ul_mask, 60);
  403140:	223c      	movs	r2, #60	; 0x3c
  403142:	4629      	mov	r1, r5
  403144:	4620      	mov	r0, r4
  403146:	4b03      	ldr	r3, [pc, #12]	; (403154 <configure_pio_input+0x30>)
  403148:	4798      	blx	r3
  40314a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40314c:	00400c51 	.word	0x00400c51
  403150:	0040093d 	.word	0x0040093d
  403154:	00400819 	.word	0x00400819

00403158 <configure_interruption>:
void configure_interruption(Pio *pio, uint32_t ul_id, const uint32_t ul_mask,  uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t), uint32_t priority){
  403158:	b5f0      	push	{r4, r5, r6, r7, lr}
  40315a:	b083      	sub	sp, #12
  40315c:	4605      	mov	r5, r0
  40315e:	460c      	mov	r4, r1
  403160:	4616      	mov	r6, r2
	pio_handler_set(pio, ul_id, ul_mask , ul_attr, p_handler);
  403162:	9f08      	ldr	r7, [sp, #32]
  403164:	9700      	str	r7, [sp, #0]
  403166:	4f12      	ldr	r7, [pc, #72]	; (4031b0 <configure_interruption+0x58>)
  403168:	47b8      	blx	r7
	pio_enable_interrupt(pio, ul_mask);
  40316a:	4631      	mov	r1, r6
  40316c:	4628      	mov	r0, r5
  40316e:	4b11      	ldr	r3, [pc, #68]	; (4031b4 <configure_interruption+0x5c>)
  403170:	4798      	blx	r3
	pio_get_interrupt_status(pio);
  403172:	4628      	mov	r0, r5
  403174:	4b10      	ldr	r3, [pc, #64]	; (4031b8 <configure_interruption+0x60>)
  403176:	4798      	blx	r3
	NVIC_EnableIRQ(ul_id);
  403178:	b262      	sxtb	r2, r4
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40317a:	0950      	lsrs	r0, r2, #5
  40317c:	b2e4      	uxtb	r4, r4
  40317e:	f004 011f 	and.w	r1, r4, #31
  403182:	2301      	movs	r3, #1
  403184:	408b      	lsls	r3, r1
  403186:	490d      	ldr	r1, [pc, #52]	; (4031bc <configure_interruption+0x64>)
  403188:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  if(IRQn < 0) {
  40318c:	2a00      	cmp	r2, #0
  40318e:	db06      	blt.n	40319e <configure_interruption+0x46>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403190:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403192:	015b      	lsls	r3, r3, #5
  403194:	b2db      	uxtb	r3, r3
  403196:	490a      	ldr	r1, [pc, #40]	; (4031c0 <configure_interruption+0x68>)
  403198:	548b      	strb	r3, [r1, r2]
}
  40319a:	b003      	add	sp, #12
  40319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40319e:	f004 040f 	and.w	r4, r4, #15
  4031a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4031a4:	015a      	lsls	r2, r3, #5
  4031a6:	b2d2      	uxtb	r2, r2
  4031a8:	4b06      	ldr	r3, [pc, #24]	; (4031c4 <configure_interruption+0x6c>)
  4031aa:	551a      	strb	r2, [r3, r4]
  4031ac:	e7f5      	b.n	40319a <configure_interruption+0x42>
  4031ae:	bf00      	nop
  4031b0:	00400a5d 	.word	0x00400a5d
  4031b4:	004009ff 	.word	0x004009ff
  4031b8:	00400a03 	.word	0x00400a03
  4031bc:	e000e100 	.word	0xe000e100
  4031c0:	e000e400 	.word	0xe000e400
  4031c4:	e000ed14 	.word	0xe000ed14

004031c8 <io_init>:
void io_init(void) {
  4031c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4031cc:	b082      	sub	sp, #8
	pmc_enable_periph_clk(LED_PIO_ID);
  4031ce:	200c      	movs	r0, #12
  4031d0:	4c1c      	ldr	r4, [pc, #112]	; (403244 <io_init+0x7c>)
  4031d2:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT_PIO_ID);
  4031d4:	2010      	movs	r0, #16
  4031d6:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT1_PIO_ID);
  4031d8:	200a      	movs	r0, #10
  4031da:	47a0      	blx	r4
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT | PIO_DEBOUNCE);
  4031dc:	2308      	movs	r3, #8
  4031de:	f44f 7280 	mov.w	r2, #256	; 0x100
  4031e2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4031e6:	4818      	ldr	r0, [pc, #96]	; (403248 <io_init+0x80>)
  4031e8:	4c18      	ldr	r4, [pc, #96]	; (40324c <io_init+0x84>)
  4031ea:	47a0      	blx	r4
	configure_pio_input(BUT_PIO, PIO_INPUT, BUT_IDX_MASK, PIO_PULLUP|PIO_DEBOUNCE, BUT_PIO_ID);
  4031ec:	4c18      	ldr	r4, [pc, #96]	; (403250 <io_init+0x88>)
  4031ee:	2510      	movs	r5, #16
  4031f0:	9500      	str	r5, [sp, #0]
  4031f2:	2309      	movs	r3, #9
  4031f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4031f8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4031fc:	4620      	mov	r0, r4
  4031fe:	f8df 8064 	ldr.w	r8, [pc, #100]	; 403264 <io_init+0x9c>
  403202:	47c0      	blx	r8
	configure_interruption(BUT_PIO, BUT_PIO_ID, BUT_IDX_MASK, PIO_IT_EDGE, but_amarelo_callback, 4);
  403204:	2704      	movs	r7, #4
  403206:	9701      	str	r7, [sp, #4]
  403208:	4b12      	ldr	r3, [pc, #72]	; (403254 <io_init+0x8c>)
  40320a:	9300      	str	r3, [sp, #0]
  40320c:	2340      	movs	r3, #64	; 0x40
  40320e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403212:	4629      	mov	r1, r5
  403214:	4620      	mov	r0, r4
  403216:	4c10      	ldr	r4, [pc, #64]	; (403258 <io_init+0x90>)
  403218:	47a0      	blx	r4
	configure_pio_input(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP|PIO_DEBOUNCE, BUT1_PIO_ID);
  40321a:	4d10      	ldr	r5, [pc, #64]	; (40325c <io_init+0x94>)
  40321c:	260a      	movs	r6, #10
  40321e:	9600      	str	r6, [sp, #0]
  403220:	2309      	movs	r3, #9
  403222:	2240      	movs	r2, #64	; 0x40
  403224:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403228:	4628      	mov	r0, r5
  40322a:	47c0      	blx	r8
	configure_interruption(BUT1_PIO, BUT1_PIO_ID, BUT1_IDX_MASK, PIO_IT_EDGE, but_verde_callback, 4);
  40322c:	9701      	str	r7, [sp, #4]
  40322e:	4b0c      	ldr	r3, [pc, #48]	; (403260 <io_init+0x98>)
  403230:	9300      	str	r3, [sp, #0]
  403232:	2340      	movs	r3, #64	; 0x40
  403234:	461a      	mov	r2, r3
  403236:	4631      	mov	r1, r6
  403238:	4628      	mov	r0, r5
  40323a:	47a0      	blx	r4
}
  40323c:	b002      	add	sp, #8
  40323e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403242:	bf00      	nop
  403244:	00400c51 	.word	0x00400c51
  403248:	400e1200 	.word	0x400e1200
  40324c:	0040093d 	.word	0x0040093d
  403250:	400e1400 	.word	0x400e1400
  403254:	00402d95 	.word	0x00402d95
  403258:	00403159 	.word	0x00403159
  40325c:	400e0e00 	.word	0x400e0e00
  403260:	00402dd9 	.word	0x00402dd9
  403264:	00403125 	.word	0x00403125

00403268 <usart_put_string>:
void usart_put_string(Usart *usart, char str[]) {
  403268:	b538      	push	{r3, r4, r5, lr}
  40326a:	4605      	mov	r5, r0
  40326c:	460c      	mov	r4, r1
	usart_serial_write_packet(usart, str, strlen(str));
  40326e:	4608      	mov	r0, r1
  403270:	4b03      	ldr	r3, [pc, #12]	; (403280 <usart_put_string+0x18>)
  403272:	4798      	blx	r3
  403274:	4602      	mov	r2, r0
  403276:	4621      	mov	r1, r4
  403278:	4628      	mov	r0, r5
  40327a:	4b02      	ldr	r3, [pc, #8]	; (403284 <usart_put_string+0x1c>)
  40327c:	4798      	blx	r3
  40327e:	bd38      	pop	{r3, r4, r5, pc}
  403280:	00404381 	.word	0x00404381
  403284:	0040021d 	.word	0x0040021d

00403288 <usart_get_string>:
int usart_get_string(Usart *usart, char buffer[], int bufferlen, uint timeout_ms) {
  403288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40328c:	b082      	sub	sp, #8
  40328e:	4689      	mov	r9, r1
	while( (timecounter > 0) && (counter < bufferlen - 1)) {
  403290:	b1c3      	cbz	r3, 4032c4 <usart_get_string+0x3c>
  403292:	4680      	mov	r8, r0
  403294:	461d      	mov	r5, r3
  403296:	1e56      	subs	r6, r2, #1
  403298:	d01c      	beq.n	4032d4 <usart_get_string+0x4c>
  40329a:	2400      	movs	r4, #0
		if(usart_read(usart, &rx) == 0) {
  40329c:	4f0e      	ldr	r7, [pc, #56]	; (4032d8 <usart_get_string+0x50>)
			vTaskDelay(1);
  40329e:	f8df a03c 	ldr.w	sl, [pc, #60]	; 4032dc <usart_get_string+0x54>
  4032a2:	e005      	b.n	4032b0 <usart_get_string+0x28>
			timecounter--;
  4032a4:	3d01      	subs	r5, #1
			vTaskDelay(1);
  4032a6:	2001      	movs	r0, #1
  4032a8:	47d0      	blx	sl
	while( (timecounter > 0) && (counter < bufferlen - 1)) {
  4032aa:	b165      	cbz	r5, 4032c6 <usart_get_string+0x3e>
  4032ac:	42b4      	cmp	r4, r6
  4032ae:	d20a      	bcs.n	4032c6 <usart_get_string+0x3e>
		if(usart_read(usart, &rx) == 0) {
  4032b0:	a901      	add	r1, sp, #4
  4032b2:	4640      	mov	r0, r8
  4032b4:	47b8      	blx	r7
  4032b6:	2800      	cmp	r0, #0
  4032b8:	d1f4      	bne.n	4032a4 <usart_get_string+0x1c>
			buffer[counter++] = rx;
  4032ba:	9b01      	ldr	r3, [sp, #4]
  4032bc:	f809 3004 	strb.w	r3, [r9, r4]
  4032c0:	3401      	adds	r4, #1
  4032c2:	e7f2      	b.n	4032aa <usart_get_string+0x22>
	uint32_t counter = 0;
  4032c4:	2400      	movs	r4, #0
	buffer[counter] = 0x00;
  4032c6:	2300      	movs	r3, #0
  4032c8:	f809 3004 	strb.w	r3, [r9, r4]
}
  4032cc:	4620      	mov	r0, r4
  4032ce:	b002      	add	sp, #8
  4032d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t counter = 0;
  4032d4:	4634      	mov	r4, r6
  4032d6:	e7f6      	b.n	4032c6 <usart_get_string+0x3e>
  4032d8:	00400e77 	.word	0x00400e77
  4032dc:	00402335 	.word	0x00402335

004032e0 <usart_send_command>:
char buffer_tx[], int timeout) {
  4032e0:	b570      	push	{r4, r5, r6, lr}
  4032e2:	4604      	mov	r4, r0
  4032e4:	460d      	mov	r5, r1
  4032e6:	4616      	mov	r6, r2
	usart_put_string(usart, buffer_tx);
  4032e8:	4619      	mov	r1, r3
  4032ea:	4b04      	ldr	r3, [pc, #16]	; (4032fc <usart_send_command+0x1c>)
  4032ec:	4798      	blx	r3
	usart_get_string(usart, buffer_rx, bufferlen, timeout);
  4032ee:	9b04      	ldr	r3, [sp, #16]
  4032f0:	4632      	mov	r2, r6
  4032f2:	4629      	mov	r1, r5
  4032f4:	4620      	mov	r0, r4
  4032f6:	4c02      	ldr	r4, [pc, #8]	; (403300 <usart_send_command+0x20>)
  4032f8:	47a0      	blx	r4
  4032fa:	bd70      	pop	{r4, r5, r6, pc}
  4032fc:	00403269 	.word	0x00403269
  403300:	00403289 	.word	0x00403289

00403304 <config_usart0>:
void config_usart0(void) {
  403304:	b5f0      	push	{r4, r5, r6, r7, lr}
  403306:	b087      	sub	sp, #28
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  403308:	200d      	movs	r0, #13
  40330a:	4c17      	ldr	r4, [pc, #92]	; (403368 <config_usart0+0x64>)
  40330c:	47a0      	blx	r4
	usart_settings.baudrate = opt->baudrate;
  40330e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  403312:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  403314:	23c0      	movs	r3, #192	; 0xc0
  403316:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  403318:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40331c:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  40331e:	2500      	movs	r5, #0
  403320:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403322:	9504      	str	r5, [sp, #16]
  403324:	200d      	movs	r0, #13
  403326:	47a0      	blx	r4
		usart_init_rs232(p_usart, &usart_settings,
  403328:	4c10      	ldr	r4, [pc, #64]	; (40336c <config_usart0+0x68>)
  40332a:	4a11      	ldr	r2, [pc, #68]	; (403370 <config_usart0+0x6c>)
  40332c:	4669      	mov	r1, sp
  40332e:	4620      	mov	r0, r4
  403330:	4b10      	ldr	r3, [pc, #64]	; (403374 <config_usart0+0x70>)
  403332:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403334:	4620      	mov	r0, r4
  403336:	4f10      	ldr	r7, [pc, #64]	; (403378 <config_usart0+0x74>)
  403338:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  40333a:	4620      	mov	r0, r4
  40333c:	4e0f      	ldr	r6, [pc, #60]	; (40337c <config_usart0+0x78>)
  40333e:	47b0      	blx	r6
	usart_enable_tx(USART0);
  403340:	4620      	mov	r0, r4
  403342:	47b8      	blx	r7
	usart_enable_rx(USART0);
  403344:	4620      	mov	r0, r4
  403346:	47b0      	blx	r6
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  403348:	4e0d      	ldr	r6, [pc, #52]	; (403380 <config_usart0+0x7c>)
  40334a:	462b      	mov	r3, r5
  40334c:	2201      	movs	r2, #1
  40334e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403352:	4630      	mov	r0, r6
  403354:	4c0b      	ldr	r4, [pc, #44]	; (403384 <config_usart0+0x80>)
  403356:	47a0      	blx	r4
	pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  403358:	462b      	mov	r3, r5
  40335a:	2202      	movs	r2, #2
  40335c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403360:	4630      	mov	r0, r6
  403362:	47a0      	blx	r4
}
  403364:	b007      	add	sp, #28
  403366:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403368:	00400c51 	.word	0x00400c51
  40336c:	40024000 	.word	0x40024000
  403370:	08f0d180 	.word	0x08f0d180
  403374:	00400df9 	.word	0x00400df9
  403378:	00400e4d 	.word	0x00400e4d
  40337c:	00400e53 	.word	0x00400e53
  403380:	400e1000 	.word	0x400e1000
  403384:	0040093d 	.word	0x0040093d

00403388 <hc05_init>:
int hc05_init(void) {
  403388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40338c:	b0a3      	sub	sp, #140	; 0x8c
	usart_send_command(USART_COM, buffer_rx, 1000, "AT", 100);
  40338e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 403420 <hc05_init+0x98>
  403392:	4e1e      	ldr	r6, [pc, #120]	; (40340c <hc05_init+0x84>)
  403394:	f04f 0964 	mov.w	r9, #100	; 0x64
  403398:	f8cd 9000 	str.w	r9, [sp]
  40339c:	4643      	mov	r3, r8
  40339e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4033a2:	a902      	add	r1, sp, #8
  4033a4:	4630      	mov	r0, r6
  4033a6:	4d1a      	ldr	r5, [pc, #104]	; (403410 <hc05_init+0x88>)
  4033a8:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  4033aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4033ae:	4c19      	ldr	r4, [pc, #100]	; (403414 <hc05_init+0x8c>)
  4033b0:	47a0      	blx	r4
	usart_send_command(USART_COM, buffer_rx, 1000, "AT", 100);
  4033b2:	f8cd 9000 	str.w	r9, [sp]
  4033b6:	4643      	mov	r3, r8
  4033b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4033bc:	a902      	add	r1, sp, #8
  4033be:	4630      	mov	r0, r6
  4033c0:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  4033c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4033c6:	47a0      	blx	r4
	usart_send_command(USART_COM, buffer_rx, 1000, "AT+NAMEGuerreiros", 1000);
  4033c8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  4033cc:	9700      	str	r7, [sp, #0]
  4033ce:	4b12      	ldr	r3, [pc, #72]	; (403418 <hc05_init+0x90>)
  4033d0:	463a      	mov	r2, r7
  4033d2:	a902      	add	r1, sp, #8
  4033d4:	4630      	mov	r0, r6
  4033d6:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  4033d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4033dc:	47a0      	blx	r4
	usart_send_command(USART_COM, buffer_rx, 1000, "AT", 100);
  4033de:	f8cd 9000 	str.w	r9, [sp]
  4033e2:	4643      	mov	r3, r8
  4033e4:	463a      	mov	r2, r7
  4033e6:	a902      	add	r1, sp, #8
  4033e8:	4630      	mov	r0, r6
  4033ea:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  4033ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4033f0:	47a0      	blx	r4
	usart_send_command(USART_COM, buffer_rx, 1000, "AT+PIN1234", 1000);
  4033f2:	9700      	str	r7, [sp, #0]
  4033f4:	4b09      	ldr	r3, [pc, #36]	; (40341c <hc05_init+0x94>)
  4033f6:	463a      	mov	r2, r7
  4033f8:	a902      	add	r1, sp, #8
  4033fa:	4630      	mov	r0, r6
  4033fc:	47a8      	blx	r5
	vTaskDelay( 500 / portTICK_PERIOD_MS);
  4033fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403402:	47a0      	blx	r4
}
  403404:	b023      	add	sp, #140	; 0x8c
  403406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40340a:	bf00      	nop
  40340c:	40024000 	.word	0x40024000
  403410:	004032e1 	.word	0x004032e1
  403414:	00402335 	.word	0x00402335
  403418:	0040915c 	.word	0x0040915c
  40341c:	00409170 	.word	0x00409170
  403420:	00409158 	.word	0x00409158

00403424 <TC1_Handler>:
void TC1_Handler(void) {
  403424:	b500      	push	{lr}
  403426:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 1);
  403428:	2101      	movs	r1, #1
  40342a:	4808      	ldr	r0, [pc, #32]	; (40344c <TC1_Handler+0x28>)
  40342c:	4b08      	ldr	r3, [pc, #32]	; (403450 <TC1_Handler+0x2c>)
  40342e:	4798      	blx	r3
  403430:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  403432:	9b01      	ldr	r3, [sp, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403434:	4b07      	ldr	r3, [pc, #28]	; (403454 <TC1_Handler+0x30>)
  403436:	2120      	movs	r1, #32
  403438:	6159      	str	r1, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  40343a:	2202      	movs	r2, #2
  40343c:	601a      	str	r2, [r3, #0]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40343e:	f5a3 3320 	sub.w	r3, r3, #163840	; 0x28000
  403442:	6159      	str	r1, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  403444:	601a      	str	r2, [r3, #0]
}
  403446:	b003      	add	sp, #12
  403448:	f85d fb04 	ldr.w	pc, [sp], #4
  40344c:	4000c000 	.word	0x4000c000
  403450:	00400cd7 	.word	0x00400cd7
  403454:	40064000 	.word	0x40064000

00403458 <TC_init>:



void TC_init(Tc *TC, int ID_TC, int TC_CHANNEL, int freq) {
  403458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40345c:	b085      	sub	sp, #20
  40345e:	4606      	mov	r6, r0
  403460:	460c      	mov	r4, r1
  403462:	4617      	mov	r7, r2
  403464:	4698      	mov	r8, r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	pmc_enable_periph_clk(ID_TC);
  403466:	4608      	mov	r0, r1
  403468:	4b1c      	ldr	r3, [pc, #112]	; (4034dc <TC_init+0x84>)
  40346a:	4798      	blx	r3

	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  40346c:	4d1c      	ldr	r5, [pc, #112]	; (4034e0 <TC_init+0x88>)
  40346e:	9500      	str	r5, [sp, #0]
  403470:	ab02      	add	r3, sp, #8
  403472:	aa03      	add	r2, sp, #12
  403474:	4629      	mov	r1, r5
  403476:	4640      	mov	r0, r8
  403478:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4034fc <TC_init+0xa4>
  40347c:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  40347e:	9a02      	ldr	r2, [sp, #8]
  403480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403484:	4639      	mov	r1, r7
  403486:	4630      	mov	r0, r6
  403488:	4b16      	ldr	r3, [pc, #88]	; (4034e4 <TC_init+0x8c>)
  40348a:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  40348c:	9a03      	ldr	r2, [sp, #12]
  40348e:	fbb5 f2f2 	udiv	r2, r5, r2
  403492:	fbb2 f2f8 	udiv	r2, r2, r8
  403496:	4639      	mov	r1, r7
  403498:	4630      	mov	r0, r6
  40349a:	4b13      	ldr	r3, [pc, #76]	; (4034e8 <TC_init+0x90>)
  40349c:	4798      	blx	r3

	NVIC_SetPriority((IRQn_Type)ID_TC, 4);
  40349e:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  4034a0:	2b00      	cmp	r3, #0
  4034a2:	db13      	blt.n	4034cc <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034a4:	4a11      	ldr	r2, [pc, #68]	; (4034ec <TC_init+0x94>)
  4034a6:	2180      	movs	r1, #128	; 0x80
  4034a8:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034aa:	095b      	lsrs	r3, r3, #5
  4034ac:	f004 041f 	and.w	r4, r4, #31
  4034b0:	2201      	movs	r2, #1
  4034b2:	fa02 f404 	lsl.w	r4, r2, r4
  4034b6:	4a0e      	ldr	r2, [pc, #56]	; (4034f0 <TC_init+0x98>)
  4034b8:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4034bc:	2210      	movs	r2, #16
  4034be:	4639      	mov	r1, r7
  4034c0:	4630      	mov	r0, r6
  4034c2:	4b0c      	ldr	r3, [pc, #48]	; (4034f4 <TC_init+0x9c>)
  4034c4:	4798      	blx	r3
}
  4034c6:	b005      	add	sp, #20
  4034c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4034cc:	f004 010f 	and.w	r1, r4, #15
  4034d0:	4a09      	ldr	r2, [pc, #36]	; (4034f8 <TC_init+0xa0>)
  4034d2:	440a      	add	r2, r1
  4034d4:	2180      	movs	r1, #128	; 0x80
  4034d6:	7611      	strb	r1, [r2, #24]
  4034d8:	e7e7      	b.n	4034aa <TC_init+0x52>
  4034da:	bf00      	nop
  4034dc:	00400c51 	.word	0x00400c51
  4034e0:	11e1a300 	.word	0x11e1a300
  4034e4:	00400ca5 	.word	0x00400ca5
  4034e8:	00400cc7 	.word	0x00400cc7
  4034ec:	e000e400 	.word	0xe000e400
  4034f0:	e000e100 	.word	0xe000e100
  4034f4:	00400ccf 	.word	0x00400ccf
  4034f8:	e000ecfc 	.word	0xe000ecfc
  4034fc:	00400cdf 	.word	0x00400cdf

00403500 <task_proc2>:
		}
	}

}

static void task_proc2(void *pvParameters){
  403500:	b500      	push	{lr}
  403502:	b083      	sub	sp, #12
	config_AFEC_pot(AFEC_VRY, AFEC_VRY_ID, AFEC_VRY_CHANNEL, AFEC_vry_Callback);
  403504:	4b0c      	ldr	r3, [pc, #48]	; (403538 <task_proc2+0x38>)
  403506:	2205      	movs	r2, #5
  403508:	211d      	movs	r1, #29
  40350a:	480c      	ldr	r0, [pc, #48]	; (40353c <task_proc2+0x3c>)
  40350c:	4c0c      	ldr	r4, [pc, #48]	; (403540 <task_proc2+0x40>)
  40350e:	47a0      	blx	r4

	TC_init(TC0, ID_TC1, 1, 10);
  403510:	4c0c      	ldr	r4, [pc, #48]	; (403544 <task_proc2+0x44>)
  403512:	230a      	movs	r3, #10
  403514:	2201      	movs	r2, #1
  403516:	2118      	movs	r1, #24
  403518:	4620      	mov	r0, r4
  40351a:	4d0b      	ldr	r5, [pc, #44]	; (403548 <task_proc2+0x48>)
  40351c:	47a8      	blx	r5
	tc_start(TC0, 1);
  40351e:	2101      	movs	r1, #1
  403520:	4620      	mov	r0, r4
  403522:	4b0a      	ldr	r3, [pc, #40]	; (40354c <task_proc2+0x4c>)
  403524:	4798      	blx	r3
	
	adcData adc;

	
	while (1) {
		if (xQueueReceive(xQueueY1, &(adc), 1000)) {
  403526:	4d0a      	ldr	r5, [pc, #40]	; (403550 <task_proc2+0x50>)
  403528:	4c0a      	ldr	r4, [pc, #40]	; (403554 <task_proc2+0x54>)
  40352a:	2300      	movs	r3, #0
  40352c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403530:	a901      	add	r1, sp, #4
  403532:	6828      	ldr	r0, [r5, #0]
  403534:	47a0      	blx	r4
  403536:	e7f8      	b.n	40352a <task_proc2+0x2a>
  403538:	00402e1d 	.word	0x00402e1d
  40353c:	4003c000 	.word	0x4003c000
  403540:	00402f59 	.word	0x00402f59
  403544:	4000c000 	.word	0x4000c000
  403548:	00403459 	.word	0x00403459
  40354c:	00400cbf 	.word	0x00400cbf
  403550:	20400c9c 	.word	0x20400c9c
  403554:	00401b0d 	.word	0x00401b0d

00403558 <task_proc>:
static void task_proc(void *pvParameters){
  403558:	b500      	push	{lr}
  40355a:	b083      	sub	sp, #12
	config_AFEC_pot(AFEC_VRX, AFEC_VRX_ID, AFEC_VRX_CHANNEL, AFEC_vrx_Callback);
  40355c:	4b0c      	ldr	r3, [pc, #48]	; (403590 <task_proc+0x38>)
  40355e:	2205      	movs	r2, #5
  403560:	2128      	movs	r1, #40	; 0x28
  403562:	480c      	ldr	r0, [pc, #48]	; (403594 <task_proc+0x3c>)
  403564:	4c0c      	ldr	r4, [pc, #48]	; (403598 <task_proc+0x40>)
  403566:	47a0      	blx	r4
	TC_init(TC0, ID_TC1, 1, 10);
  403568:	4c0c      	ldr	r4, [pc, #48]	; (40359c <task_proc+0x44>)
  40356a:	230a      	movs	r3, #10
  40356c:	2201      	movs	r2, #1
  40356e:	2118      	movs	r1, #24
  403570:	4620      	mov	r0, r4
  403572:	4d0b      	ldr	r5, [pc, #44]	; (4035a0 <task_proc+0x48>)
  403574:	47a8      	blx	r5
	tc_start(TC0, 1);
  403576:	2101      	movs	r1, #1
  403578:	4620      	mov	r0, r4
  40357a:	4b0a      	ldr	r3, [pc, #40]	; (4035a4 <task_proc+0x4c>)
  40357c:	4798      	blx	r3
		if (xQueueReceive(xQueuexX1, &(adc), 1000)) {
  40357e:	4d0a      	ldr	r5, [pc, #40]	; (4035a8 <task_proc+0x50>)
  403580:	4c0a      	ldr	r4, [pc, #40]	; (4035ac <task_proc+0x54>)
  403582:	2300      	movs	r3, #0
  403584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403588:	a901      	add	r1, sp, #4
  40358a:	6828      	ldr	r0, [r5, #0]
  40358c:	47a0      	blx	r4
  40358e:	e7f8      	b.n	403582 <task_proc+0x2a>
  403590:	00402e51 	.word	0x00402e51
  403594:	40064000 	.word	0x40064000
  403598:	00402f59 	.word	0x00402f59
  40359c:	4000c000 	.word	0x4000c000
  4035a0:	00403459 	.word	0x00403459
  4035a4:	00400cbf 	.word	0x00400cbf
  4035a8:	20400ca0 	.word	0x20400ca0
  4035ac:	00401b0d 	.word	0x00401b0d

004035b0 <send_data_uart>:
			//printf("Nao chegou um novo dado em 1 segundo");
		}
	}
}

void send_data_uart(adcData adc_data, char head, char eof){
  4035b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4035b4:	4680      	mov	r8, r0
  4035b6:	4617      	mov	r7, r2
	usart_write(USART_COM, head);
  4035b8:	481d      	ldr	r0, [pc, #116]	; (403630 <send_data_uart+0x80>)
  4035ba:	4b1e      	ldr	r3, [pc, #120]	; (403634 <send_data_uart+0x84>)
  4035bc:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM)) {vTaskDelay(10 / portTICK_PERIOD_MS);}
  4035be:	4d1c      	ldr	r5, [pc, #112]	; (403630 <send_data_uart+0x80>)
  4035c0:	4c1d      	ldr	r4, [pc, #116]	; (403638 <send_data_uart+0x88>)
  4035c2:	4e1e      	ldr	r6, [pc, #120]	; (40363c <send_data_uart+0x8c>)
  4035c4:	e001      	b.n	4035ca <send_data_uart+0x1a>
  4035c6:	200a      	movs	r0, #10
  4035c8:	47b0      	blx	r6
  4035ca:	4628      	mov	r0, r5
  4035cc:	47a0      	blx	r4
  4035ce:	2800      	cmp	r0, #0
  4035d0:	d0f9      	beq.n	4035c6 <send_data_uart+0x16>
	
	usart_write(USART_COM,  (adc_data.value >> 8));
  4035d2:	ea4f 2118 	mov.w	r1, r8, lsr #8
  4035d6:	4816      	ldr	r0, [pc, #88]	; (403630 <send_data_uart+0x80>)
  4035d8:	4b16      	ldr	r3, [pc, #88]	; (403634 <send_data_uart+0x84>)
  4035da:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM)) {vTaskDelay(10 / portTICK_PERIOD_MS);}
  4035dc:	4d14      	ldr	r5, [pc, #80]	; (403630 <send_data_uart+0x80>)
  4035de:	4c16      	ldr	r4, [pc, #88]	; (403638 <send_data_uart+0x88>)
  4035e0:	4e16      	ldr	r6, [pc, #88]	; (40363c <send_data_uart+0x8c>)
  4035e2:	e001      	b.n	4035e8 <send_data_uart+0x38>
  4035e4:	200a      	movs	r0, #10
  4035e6:	47b0      	blx	r6
  4035e8:	4628      	mov	r0, r5
  4035ea:	47a0      	blx	r4
  4035ec:	2800      	cmp	r0, #0
  4035ee:	d0f9      	beq.n	4035e4 <send_data_uart+0x34>
	
	usart_write(USART_COM,  (adc_data.value & 0x00ff));
  4035f0:	fa5f f188 	uxtb.w	r1, r8
  4035f4:	480e      	ldr	r0, [pc, #56]	; (403630 <send_data_uart+0x80>)
  4035f6:	4b0f      	ldr	r3, [pc, #60]	; (403634 <send_data_uart+0x84>)
  4035f8:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM)) {vTaskDelay(10 / portTICK_PERIOD_MS);}
  4035fa:	4d0d      	ldr	r5, [pc, #52]	; (403630 <send_data_uart+0x80>)
  4035fc:	4c0e      	ldr	r4, [pc, #56]	; (403638 <send_data_uart+0x88>)
  4035fe:	4e0f      	ldr	r6, [pc, #60]	; (40363c <send_data_uart+0x8c>)
  403600:	e001      	b.n	403606 <send_data_uart+0x56>
  403602:	200a      	movs	r0, #10
  403604:	47b0      	blx	r6
  403606:	4628      	mov	r0, r5
  403608:	47a0      	blx	r4
  40360a:	2800      	cmp	r0, #0
  40360c:	d0f9      	beq.n	403602 <send_data_uart+0x52>
	
	usart_write(USART_COM, eof);
  40360e:	4639      	mov	r1, r7
  403610:	4807      	ldr	r0, [pc, #28]	; (403630 <send_data_uart+0x80>)
  403612:	4b08      	ldr	r3, [pc, #32]	; (403634 <send_data_uart+0x84>)
  403614:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM)) {vTaskDelay(10 / portTICK_PERIOD_MS);}
  403616:	4d06      	ldr	r5, [pc, #24]	; (403630 <send_data_uart+0x80>)
  403618:	4c07      	ldr	r4, [pc, #28]	; (403638 <send_data_uart+0x88>)
  40361a:	4e08      	ldr	r6, [pc, #32]	; (40363c <send_data_uart+0x8c>)
  40361c:	e001      	b.n	403622 <send_data_uart+0x72>
  40361e:	200a      	movs	r0, #10
  403620:	47b0      	blx	r6
  403622:	4628      	mov	r0, r5
  403624:	47a0      	blx	r4
  403626:	2800      	cmp	r0, #0
  403628:	d0f9      	beq.n	40361e <send_data_uart+0x6e>

}
  40362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40362e:	bf00      	nop
  403630:	40024000 	.word	0x40024000
  403634:	00400e61 	.word	0x00400e61
  403638:	00400e59 	.word	0x00400e59
  40363c:	00402335 	.word	0x00402335

00403640 <send_data_but_uart>:

void send_data_but_uart(char adc_head, char but_flag, char eof){
  403640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403644:	4604      	mov	r4, r0
  403646:	4688      	mov	r8, r1
  403648:	4617      	mov	r7, r2
	
	printf("%d \n", but_flag);
  40364a:	481e      	ldr	r0, [pc, #120]	; (4036c4 <send_data_but_uart+0x84>)
  40364c:	4b1e      	ldr	r3, [pc, #120]	; (4036c8 <send_data_but_uart+0x88>)
  40364e:	4798      	blx	r3

	usart_write(USART_COM, adc_head);
  403650:	4621      	mov	r1, r4
  403652:	481e      	ldr	r0, [pc, #120]	; (4036cc <send_data_but_uart+0x8c>)
  403654:	4b1e      	ldr	r3, [pc, #120]	; (4036d0 <send_data_but_uart+0x90>)
  403656:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM)) {vTaskDelay(10 / portTICK_PERIOD_MS);}
  403658:	4d1c      	ldr	r5, [pc, #112]	; (4036cc <send_data_but_uart+0x8c>)
  40365a:	4c1e      	ldr	r4, [pc, #120]	; (4036d4 <send_data_but_uart+0x94>)
  40365c:	4e1e      	ldr	r6, [pc, #120]	; (4036d8 <send_data_but_uart+0x98>)
  40365e:	e001      	b.n	403664 <send_data_but_uart+0x24>
  403660:	200a      	movs	r0, #10
  403662:	47b0      	blx	r6
  403664:	4628      	mov	r0, r5
  403666:	47a0      	blx	r4
  403668:	2800      	cmp	r0, #0
  40366a:	d0f9      	beq.n	403660 <send_data_but_uart+0x20>
	
	usart_write(USART_COM, 0);
  40366c:	2100      	movs	r1, #0
  40366e:	4817      	ldr	r0, [pc, #92]	; (4036cc <send_data_but_uart+0x8c>)
  403670:	4b17      	ldr	r3, [pc, #92]	; (4036d0 <send_data_but_uart+0x90>)
  403672:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM)) {vTaskDelay(10 / portTICK_PERIOD_MS);}
  403674:	4d15      	ldr	r5, [pc, #84]	; (4036cc <send_data_but_uart+0x8c>)
  403676:	4c17      	ldr	r4, [pc, #92]	; (4036d4 <send_data_but_uart+0x94>)
  403678:	4e17      	ldr	r6, [pc, #92]	; (4036d8 <send_data_but_uart+0x98>)
  40367a:	e001      	b.n	403680 <send_data_but_uart+0x40>
  40367c:	200a      	movs	r0, #10
  40367e:	47b0      	blx	r6
  403680:	4628      	mov	r0, r5
  403682:	47a0      	blx	r4
  403684:	2800      	cmp	r0, #0
  403686:	d0f9      	beq.n	40367c <send_data_but_uart+0x3c>
	
	usart_write(USART_COM,  but_flag);
  403688:	4641      	mov	r1, r8
  40368a:	4810      	ldr	r0, [pc, #64]	; (4036cc <send_data_but_uart+0x8c>)
  40368c:	4b10      	ldr	r3, [pc, #64]	; (4036d0 <send_data_but_uart+0x90>)
  40368e:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM)) {vTaskDelay(10 / portTICK_PERIOD_MS);}
  403690:	4d0e      	ldr	r5, [pc, #56]	; (4036cc <send_data_but_uart+0x8c>)
  403692:	4c10      	ldr	r4, [pc, #64]	; (4036d4 <send_data_but_uart+0x94>)
  403694:	4e10      	ldr	r6, [pc, #64]	; (4036d8 <send_data_but_uart+0x98>)
  403696:	e001      	b.n	40369c <send_data_but_uart+0x5c>
  403698:	200a      	movs	r0, #10
  40369a:	47b0      	blx	r6
  40369c:	4628      	mov	r0, r5
  40369e:	47a0      	blx	r4
  4036a0:	2800      	cmp	r0, #0
  4036a2:	d0f9      	beq.n	403698 <send_data_but_uart+0x58>
	
	usart_write(USART_COM, eof);
  4036a4:	4639      	mov	r1, r7
  4036a6:	4809      	ldr	r0, [pc, #36]	; (4036cc <send_data_but_uart+0x8c>)
  4036a8:	4b09      	ldr	r3, [pc, #36]	; (4036d0 <send_data_but_uart+0x90>)
  4036aa:	4798      	blx	r3
	while(!usart_is_tx_ready(USART_COM)) {vTaskDelay(10 / portTICK_PERIOD_MS);}
  4036ac:	4d07      	ldr	r5, [pc, #28]	; (4036cc <send_data_but_uart+0x8c>)
  4036ae:	4c09      	ldr	r4, [pc, #36]	; (4036d4 <send_data_but_uart+0x94>)
  4036b0:	4e09      	ldr	r6, [pc, #36]	; (4036d8 <send_data_but_uart+0x98>)
  4036b2:	e001      	b.n	4036b8 <send_data_but_uart+0x78>
  4036b4:	200a      	movs	r0, #10
  4036b6:	47b0      	blx	r6
  4036b8:	4628      	mov	r0, r5
  4036ba:	47a0      	blx	r4
  4036bc:	2800      	cmp	r0, #0
  4036be:	d0f9      	beq.n	4036b4 <send_data_but_uart+0x74>
}
  4036c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4036c4:	0040921c 	.word	0x0040921c
  4036c8:	004040dd 	.word	0x004040dd
  4036cc:	40024000 	.word	0x40024000
  4036d0:	00400e61 	.word	0x00400e61
  4036d4:	00400e59 	.word	0x00400e59
  4036d8:	00402335 	.word	0x00402335

004036dc <task_bluetooth>:


void task_bluetooth(void) {
  4036dc:	b570      	push	{r4, r5, r6, lr}
  4036de:	b084      	sub	sp, #16
	printf("Task Bluetooth started \n");
  4036e0:	481d      	ldr	r0, [pc, #116]	; (403758 <task_bluetooth+0x7c>)
  4036e2:	4c1e      	ldr	r4, [pc, #120]	; (40375c <task_bluetooth+0x80>)
  4036e4:	47a0      	blx	r4
	
	printf("Inicializando HC05 \n");
  4036e6:	481e      	ldr	r0, [pc, #120]	; (403760 <task_bluetooth+0x84>)
  4036e8:	47a0      	blx	r4
	config_usart0();
  4036ea:	4b1e      	ldr	r3, [pc, #120]	; (403764 <task_bluetooth+0x88>)
  4036ec:	4798      	blx	r3
	hc05_init();
  4036ee:	4b1e      	ldr	r3, [pc, #120]	; (403768 <task_bluetooth+0x8c>)
  4036f0:	4798      	blx	r3

	// configura LEDs e Botões
	io_init();
  4036f2:	4b1e      	ldr	r3, [pc, #120]	; (40376c <task_bluetooth+0x90>)
  4036f4:	4798      	blx	r3
	adcData adcY1;


	// Task não deve retornar.
	while(1) {
		if (xQueueReceive(xQueuexX1, &(adcX1), 1000)) {
  4036f6:	4e1e      	ldr	r6, [pc, #120]	; (403770 <task_bluetooth+0x94>)
  4036f8:	4d1e      	ldr	r5, [pc, #120]	; (403774 <task_bluetooth+0x98>)
  4036fa:	e02a      	b.n	403752 <task_bluetooth+0x76>
			send_data_uart(adcX1, head_x, eof);
  4036fc:	2258      	movs	r2, #88	; 0x58
  4036fe:	2168      	movs	r1, #104	; 0x68
  403700:	9802      	ldr	r0, [sp, #8]
  403702:	4b1d      	ldr	r3, [pc, #116]	; (403778 <task_bluetooth+0x9c>)
  403704:	4798      	blx	r3
  403706:	e00e      	b.n	403726 <task_bluetooth+0x4a>
		}
		if (xQueueReceive(xQueueY1, &(adcY1), 1000)) {
			send_data_uart(adcY1, head_y, eof);
		}
		if (xQueueReceive(xQueueBut, &(but_data), 2)) {
  403708:	4623      	mov	r3, r4
  40370a:	2202      	movs	r2, #2
  40370c:	a903      	add	r1, sp, #12
  40370e:	481b      	ldr	r0, [pc, #108]	; (40377c <task_bluetooth+0xa0>)
  403710:	6800      	ldr	r0, [r0, #0]
  403712:	47a8      	blx	r5
  403714:	b9b0      	cbnz	r0, 403744 <task_bluetooth+0x68>
		if (xQueueReceive(xQueuexX1, &(adcX1), 1000)) {
  403716:	4623      	mov	r3, r4
  403718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40371c:	a902      	add	r1, sp, #8
  40371e:	6830      	ldr	r0, [r6, #0]
  403720:	47a8      	blx	r5
  403722:	2800      	cmp	r0, #0
  403724:	d1ea      	bne.n	4036fc <task_bluetooth+0x20>
		if (xQueueReceive(xQueueY1, &(adcY1), 1000)) {
  403726:	4623      	mov	r3, r4
  403728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40372c:	a901      	add	r1, sp, #4
  40372e:	4814      	ldr	r0, [pc, #80]	; (403780 <task_bluetooth+0xa4>)
  403730:	6800      	ldr	r0, [r0, #0]
  403732:	47a8      	blx	r5
  403734:	2800      	cmp	r0, #0
  403736:	d0e7      	beq.n	403708 <task_bluetooth+0x2c>
			send_data_uart(adcY1, head_y, eof);
  403738:	2258      	movs	r2, #88	; 0x58
  40373a:	2179      	movs	r1, #121	; 0x79
  40373c:	9801      	ldr	r0, [sp, #4]
  40373e:	4b0e      	ldr	r3, [pc, #56]	; (403778 <task_bluetooth+0x9c>)
  403740:	4798      	blx	r3
  403742:	e7e1      	b.n	403708 <task_bluetooth+0x2c>
			send_data_but_uart(but_data.head, but_data.value, eof);
  403744:	2258      	movs	r2, #88	; 0x58
  403746:	f89d 100d 	ldrb.w	r1, [sp, #13]
  40374a:	f89d 000c 	ldrb.w	r0, [sp, #12]
  40374e:	4b0d      	ldr	r3, [pc, #52]	; (403784 <task_bluetooth+0xa8>)
  403750:	4798      	blx	r3
		if (xQueueReceive(xQueuexX1, &(adcX1), 1000)) {
  403752:	2400      	movs	r4, #0
  403754:	e7df      	b.n	403716 <task_bluetooth+0x3a>
  403756:	bf00      	nop
  403758:	00409224 	.word	0x00409224
  40375c:	004041a1 	.word	0x004041a1
  403760:	0040923c 	.word	0x0040923c
  403764:	00403305 	.word	0x00403305
  403768:	00403389 	.word	0x00403389
  40376c:	004031c9 	.word	0x004031c9
  403770:	20400ca0 	.word	0x20400ca0
  403774:	00401b0d 	.word	0x00401b0d
  403778:	004035b1 	.word	0x004035b1
  40377c:	20400c98 	.word	0x20400c98
  403780:	20400c9c 	.word	0x20400c9c
  403784:	00403641 	.word	0x00403641

00403788 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

  
int main(void) {
  403788:	b500      	push	{lr}
  40378a:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  40378c:	4b44      	ldr	r3, [pc, #272]	; (4038a0 <main+0x118>)
  40378e:	4798      	blx	r3
	board_init();
  403790:	4b44      	ldr	r3, [pc, #272]	; (4038a4 <main+0x11c>)
  403792:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403794:	4d44      	ldr	r5, [pc, #272]	; (4038a8 <main+0x120>)
  403796:	4b45      	ldr	r3, [pc, #276]	; (4038ac <main+0x124>)
  403798:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40379a:	4a45      	ldr	r2, [pc, #276]	; (4038b0 <main+0x128>)
  40379c:	4b45      	ldr	r3, [pc, #276]	; (4038b4 <main+0x12c>)
  40379e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4037a0:	4a45      	ldr	r2, [pc, #276]	; (4038b8 <main+0x130>)
  4037a2:	4b46      	ldr	r3, [pc, #280]	; (4038bc <main+0x134>)
  4037a4:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4037a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4037aa:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4037ac:	23c0      	movs	r3, #192	; 0xc0
  4037ae:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4037b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4037b4:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4037b6:	2400      	movs	r4, #0
  4037b8:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4037ba:	9408      	str	r4, [sp, #32]
  4037bc:	200e      	movs	r0, #14
  4037be:	4b40      	ldr	r3, [pc, #256]	; (4038c0 <main+0x138>)
  4037c0:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4037c2:	4a40      	ldr	r2, [pc, #256]	; (4038c4 <main+0x13c>)
  4037c4:	a904      	add	r1, sp, #16
  4037c6:	4628      	mov	r0, r5
  4037c8:	4b3f      	ldr	r3, [pc, #252]	; (4038c8 <main+0x140>)
  4037ca:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4037cc:	4628      	mov	r0, r5
  4037ce:	4b3f      	ldr	r3, [pc, #252]	; (4038cc <main+0x144>)
  4037d0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4037d2:	4628      	mov	r0, r5
  4037d4:	4b3e      	ldr	r3, [pc, #248]	; (4038d0 <main+0x148>)
  4037d6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4037d8:	4e3e      	ldr	r6, [pc, #248]	; (4038d4 <main+0x14c>)
  4037da:	6833      	ldr	r3, [r6, #0]
  4037dc:	4621      	mov	r1, r4
  4037de:	6898      	ldr	r0, [r3, #8]
  4037e0:	4d3d      	ldr	r5, [pc, #244]	; (4038d8 <main+0x150>)
  4037e2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4037e4:	6833      	ldr	r3, [r6, #0]
  4037e6:	4621      	mov	r1, r4
  4037e8:	6858      	ldr	r0, [r3, #4]
  4037ea:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4037ec:	6833      	ldr	r3, [r6, #0]
  4037ee:	4621      	mov	r1, r4
  4037f0:	6898      	ldr	r0, [r3, #8]
  4037f2:	47a8      	blx	r5

	configure_console();

	/* Create task to make led blink */
	xTaskCreate(task_bluetooth, "BLT", TASK_BLUETOOTH_STACK_SIZE, NULL,	TASK_BLUETOOTH_STACK_PRIORITY, NULL);
  4037f4:	9403      	str	r4, [sp, #12]
  4037f6:	9402      	str	r4, [sp, #8]
  4037f8:	9401      	str	r4, [sp, #4]
  4037fa:	9400      	str	r4, [sp, #0]
  4037fc:	4623      	mov	r3, r4
  4037fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403802:	4936      	ldr	r1, [pc, #216]	; (4038dc <main+0x154>)
  403804:	4836      	ldr	r0, [pc, #216]	; (4038e0 <main+0x158>)
  403806:	4d37      	ldr	r5, [pc, #220]	; (4038e4 <main+0x15c>)
  403808:	47a8      	blx	r5
	
	xQueuexX1 = xQueueCreate(100, sizeof(adcData));
  40380a:	4622      	mov	r2, r4
  40380c:	2104      	movs	r1, #4
  40380e:	2064      	movs	r0, #100	; 0x64
  403810:	4b35      	ldr	r3, [pc, #212]	; (4038e8 <main+0x160>)
  403812:	4798      	blx	r3
  403814:	4b35      	ldr	r3, [pc, #212]	; (4038ec <main+0x164>)
  403816:	6018      	str	r0, [r3, #0]
	if (xQueuexX1 == NULL)
  403818:	2800      	cmp	r0, #0
  40381a:	d034      	beq.n	403886 <main+0xfe>
		printf("falha em criar a queue xQueuexX1");
		
	xQueueY1 = xQueueCreate(100, sizeof(adcData));
  40381c:	2200      	movs	r2, #0
  40381e:	2104      	movs	r1, #4
  403820:	2064      	movs	r0, #100	; 0x64
  403822:	4b31      	ldr	r3, [pc, #196]	; (4038e8 <main+0x160>)
  403824:	4798      	blx	r3
  403826:	4b32      	ldr	r3, [pc, #200]	; (4038f0 <main+0x168>)
  403828:	6018      	str	r0, [r3, #0]
	if (xQueueY1 == NULL)
  40382a:	2800      	cmp	r0, #0
  40382c:	d02f      	beq.n	40388e <main+0x106>
	printf("falha em criar a queue xQueueY1 \n");
	
			
	xQueueBut = xQueueCreate(100, sizeof(adcData));
  40382e:	2200      	movs	r2, #0
  403830:	2104      	movs	r1, #4
  403832:	2064      	movs	r0, #100	; 0x64
  403834:	4b2c      	ldr	r3, [pc, #176]	; (4038e8 <main+0x160>)
  403836:	4798      	blx	r3
  403838:	4b2e      	ldr	r3, [pc, #184]	; (4038f4 <main+0x16c>)
  40383a:	6018      	str	r0, [r3, #0]
	if (xQueueBut == NULL)
  40383c:	2800      	cmp	r0, #0
  40383e:	d02a      	beq.n	403896 <main+0x10e>
	printf("falha em criar a queue xQueueBut \n");


	if (xTaskCreate(task_proc, "proc", TASK_PROC_STACK_SIZE, NULL,
  403840:	2300      	movs	r3, #0
  403842:	9303      	str	r3, [sp, #12]
  403844:	9302      	str	r3, [sp, #8]
  403846:	9301      	str	r3, [sp, #4]
  403848:	9300      	str	r3, [sp, #0]
  40384a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  40384e:	492a      	ldr	r1, [pc, #168]	; (4038f8 <main+0x170>)
  403850:	482a      	ldr	r0, [pc, #168]	; (4038fc <main+0x174>)
  403852:	4c24      	ldr	r4, [pc, #144]	; (4038e4 <main+0x15c>)
  403854:	47a0      	blx	r4
  403856:	2801      	cmp	r0, #1
  403858:	d002      	beq.n	403860 <main+0xd8>
	TASK_PROC_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test ADC task\r\n");
  40385a:	4829      	ldr	r0, [pc, #164]	; (403900 <main+0x178>)
  40385c:	4b29      	ldr	r3, [pc, #164]	; (403904 <main+0x17c>)
  40385e:	4798      	blx	r3
	}
 	
 	if (xTaskCreate(task_proc2, "proc2", TASK_PROC2_STACK_SIZE, NULL,
  403860:	2300      	movs	r3, #0
  403862:	9303      	str	r3, [sp, #12]
  403864:	9302      	str	r3, [sp, #8]
  403866:	9301      	str	r3, [sp, #4]
  403868:	9300      	str	r3, [sp, #0]
  40386a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  40386e:	4926      	ldr	r1, [pc, #152]	; (403908 <main+0x180>)
  403870:	4826      	ldr	r0, [pc, #152]	; (40390c <main+0x184>)
  403872:	4c1c      	ldr	r4, [pc, #112]	; (4038e4 <main+0x15c>)
  403874:	47a0      	blx	r4
  403876:	2801      	cmp	r0, #1
  403878:	d002      	beq.n	403880 <main+0xf8>
 	TASK_PROC2_STACK_PRIORITY, NULL) != pdPASS) {
 		printf("Failed to create test ADC task\r\n");
  40387a:	4821      	ldr	r0, [pc, #132]	; (403900 <main+0x178>)
  40387c:	4b21      	ldr	r3, [pc, #132]	; (403904 <main+0x17c>)
  40387e:	4798      	blx	r3
	



	/* Start the scheduler. */
	vTaskStartScheduler();
  403880:	4b23      	ldr	r3, [pc, #140]	; (403910 <main+0x188>)
  403882:	4798      	blx	r3
  403884:	e7fe      	b.n	403884 <main+0xfc>
		printf("falha em criar a queue xQueuexX1");
  403886:	4823      	ldr	r0, [pc, #140]	; (403914 <main+0x18c>)
  403888:	4b23      	ldr	r3, [pc, #140]	; (403918 <main+0x190>)
  40388a:	4798      	blx	r3
  40388c:	e7c6      	b.n	40381c <main+0x94>
	printf("falha em criar a queue xQueueY1 \n");
  40388e:	4823      	ldr	r0, [pc, #140]	; (40391c <main+0x194>)
  403890:	4b1c      	ldr	r3, [pc, #112]	; (403904 <main+0x17c>)
  403892:	4798      	blx	r3
  403894:	e7cb      	b.n	40382e <main+0xa6>
	printf("falha em criar a queue xQueueBut \n");
  403896:	4822      	ldr	r0, [pc, #136]	; (403920 <main+0x198>)
  403898:	4b1a      	ldr	r3, [pc, #104]	; (403904 <main+0x17c>)
  40389a:	4798      	blx	r3
  40389c:	e7d0      	b.n	403840 <main+0xb8>
  40389e:	bf00      	nop
  4038a0:	004001ad 	.word	0x004001ad
  4038a4:	00400381 	.word	0x00400381
  4038a8:	40028000 	.word	0x40028000
  4038ac:	20400bd4 	.word	0x20400bd4
  4038b0:	00402e85 	.word	0x00402e85
  4038b4:	20400bd0 	.word	0x20400bd0
  4038b8:	00403019 	.word	0x00403019
  4038bc:	20400bcc 	.word	0x20400bcc
  4038c0:	00400c51 	.word	0x00400c51
  4038c4:	08f0d180 	.word	0x08f0d180
  4038c8:	00400df9 	.word	0x00400df9
  4038cc:	00400e4d 	.word	0x00400e4d
  4038d0:	00400e53 	.word	0x00400e53
  4038d4:	2040000c 	.word	0x2040000c
  4038d8:	004041d5 	.word	0x004041d5
  4038dc:	0040917c 	.word	0x0040917c
  4038e0:	004036dd 	.word	0x004036dd
  4038e4:	00401ded 	.word	0x00401ded
  4038e8:	004017ad 	.word	0x004017ad
  4038ec:	20400ca0 	.word	0x20400ca0
  4038f0:	20400c9c 	.word	0x20400c9c
  4038f4:	20400c98 	.word	0x20400c98
  4038f8:	004091ec 	.word	0x004091ec
  4038fc:	00403559 	.word	0x00403559
  403900:	004091f4 	.word	0x004091f4
  403904:	004041a1 	.word	0x004041a1
  403908:	00409214 	.word	0x00409214
  40390c:	00403501 	.word	0x00403501
  403910:	00402021 	.word	0x00402021
  403914:	00409180 	.word	0x00409180
  403918:	004040dd 	.word	0x004040dd
  40391c:	004091a4 	.word	0x004091a4
  403920:	004091c8 	.word	0x004091c8

00403924 <__libc_init_array>:
  403924:	b570      	push	{r4, r5, r6, lr}
  403926:	4e0f      	ldr	r6, [pc, #60]	; (403964 <__libc_init_array+0x40>)
  403928:	4d0f      	ldr	r5, [pc, #60]	; (403968 <__libc_init_array+0x44>)
  40392a:	1b76      	subs	r6, r6, r5
  40392c:	10b6      	asrs	r6, r6, #2
  40392e:	bf18      	it	ne
  403930:	2400      	movne	r4, #0
  403932:	d005      	beq.n	403940 <__libc_init_array+0x1c>
  403934:	3401      	adds	r4, #1
  403936:	f855 3b04 	ldr.w	r3, [r5], #4
  40393a:	4798      	blx	r3
  40393c:	42a6      	cmp	r6, r4
  40393e:	d1f9      	bne.n	403934 <__libc_init_array+0x10>
  403940:	4e0a      	ldr	r6, [pc, #40]	; (40396c <__libc_init_array+0x48>)
  403942:	4d0b      	ldr	r5, [pc, #44]	; (403970 <__libc_init_array+0x4c>)
  403944:	1b76      	subs	r6, r6, r5
  403946:	f005 fdd7 	bl	4094f8 <_init>
  40394a:	10b6      	asrs	r6, r6, #2
  40394c:	bf18      	it	ne
  40394e:	2400      	movne	r4, #0
  403950:	d006      	beq.n	403960 <__libc_init_array+0x3c>
  403952:	3401      	adds	r4, #1
  403954:	f855 3b04 	ldr.w	r3, [r5], #4
  403958:	4798      	blx	r3
  40395a:	42a6      	cmp	r6, r4
  40395c:	d1f9      	bne.n	403952 <__libc_init_array+0x2e>
  40395e:	bd70      	pop	{r4, r5, r6, pc}
  403960:	bd70      	pop	{r4, r5, r6, pc}
  403962:	bf00      	nop
  403964:	00409504 	.word	0x00409504
  403968:	00409504 	.word	0x00409504
  40396c:	0040950c 	.word	0x0040950c
  403970:	00409504 	.word	0x00409504

00403974 <malloc>:
  403974:	4b02      	ldr	r3, [pc, #8]	; (403980 <malloc+0xc>)
  403976:	4601      	mov	r1, r0
  403978:	6818      	ldr	r0, [r3, #0]
  40397a:	f000 b80b 	b.w	403994 <_malloc_r>
  40397e:	bf00      	nop
  403980:	2040000c 	.word	0x2040000c

00403984 <free>:
  403984:	4b02      	ldr	r3, [pc, #8]	; (403990 <free+0xc>)
  403986:	4601      	mov	r1, r0
  403988:	6818      	ldr	r0, [r3, #0]
  40398a:	f003 ba21 	b.w	406dd0 <_free_r>
  40398e:	bf00      	nop
  403990:	2040000c 	.word	0x2040000c

00403994 <_malloc_r>:
  403994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403998:	f101 060b 	add.w	r6, r1, #11
  40399c:	2e16      	cmp	r6, #22
  40399e:	b083      	sub	sp, #12
  4039a0:	4605      	mov	r5, r0
  4039a2:	f240 809e 	bls.w	403ae2 <_malloc_r+0x14e>
  4039a6:	f036 0607 	bics.w	r6, r6, #7
  4039aa:	f100 80bd 	bmi.w	403b28 <_malloc_r+0x194>
  4039ae:	42b1      	cmp	r1, r6
  4039b0:	f200 80ba 	bhi.w	403b28 <_malloc_r+0x194>
  4039b4:	f000 fb86 	bl	4040c4 <__malloc_lock>
  4039b8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4039bc:	f0c0 8293 	bcc.w	403ee6 <_malloc_r+0x552>
  4039c0:	0a73      	lsrs	r3, r6, #9
  4039c2:	f000 80b8 	beq.w	403b36 <_malloc_r+0x1a2>
  4039c6:	2b04      	cmp	r3, #4
  4039c8:	f200 8179 	bhi.w	403cbe <_malloc_r+0x32a>
  4039cc:	09b3      	lsrs	r3, r6, #6
  4039ce:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4039d2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4039d6:	00c3      	lsls	r3, r0, #3
  4039d8:	4fbf      	ldr	r7, [pc, #764]	; (403cd8 <_malloc_r+0x344>)
  4039da:	443b      	add	r3, r7
  4039dc:	f1a3 0108 	sub.w	r1, r3, #8
  4039e0:	685c      	ldr	r4, [r3, #4]
  4039e2:	42a1      	cmp	r1, r4
  4039e4:	d106      	bne.n	4039f4 <_malloc_r+0x60>
  4039e6:	e00c      	b.n	403a02 <_malloc_r+0x6e>
  4039e8:	2a00      	cmp	r2, #0
  4039ea:	f280 80aa 	bge.w	403b42 <_malloc_r+0x1ae>
  4039ee:	68e4      	ldr	r4, [r4, #12]
  4039f0:	42a1      	cmp	r1, r4
  4039f2:	d006      	beq.n	403a02 <_malloc_r+0x6e>
  4039f4:	6863      	ldr	r3, [r4, #4]
  4039f6:	f023 0303 	bic.w	r3, r3, #3
  4039fa:	1b9a      	subs	r2, r3, r6
  4039fc:	2a0f      	cmp	r2, #15
  4039fe:	ddf3      	ble.n	4039e8 <_malloc_r+0x54>
  403a00:	4670      	mov	r0, lr
  403a02:	693c      	ldr	r4, [r7, #16]
  403a04:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403cec <_malloc_r+0x358>
  403a08:	4574      	cmp	r4, lr
  403a0a:	f000 81ab 	beq.w	403d64 <_malloc_r+0x3d0>
  403a0e:	6863      	ldr	r3, [r4, #4]
  403a10:	f023 0303 	bic.w	r3, r3, #3
  403a14:	1b9a      	subs	r2, r3, r6
  403a16:	2a0f      	cmp	r2, #15
  403a18:	f300 8190 	bgt.w	403d3c <_malloc_r+0x3a8>
  403a1c:	2a00      	cmp	r2, #0
  403a1e:	f8c7 e014 	str.w	lr, [r7, #20]
  403a22:	f8c7 e010 	str.w	lr, [r7, #16]
  403a26:	f280 809d 	bge.w	403b64 <_malloc_r+0x1d0>
  403a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403a2e:	f080 8161 	bcs.w	403cf4 <_malloc_r+0x360>
  403a32:	08db      	lsrs	r3, r3, #3
  403a34:	f103 0c01 	add.w	ip, r3, #1
  403a38:	1099      	asrs	r1, r3, #2
  403a3a:	687a      	ldr	r2, [r7, #4]
  403a3c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403a40:	f8c4 8008 	str.w	r8, [r4, #8]
  403a44:	2301      	movs	r3, #1
  403a46:	408b      	lsls	r3, r1
  403a48:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403a4c:	4313      	orrs	r3, r2
  403a4e:	3908      	subs	r1, #8
  403a50:	60e1      	str	r1, [r4, #12]
  403a52:	607b      	str	r3, [r7, #4]
  403a54:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403a58:	f8c8 400c 	str.w	r4, [r8, #12]
  403a5c:	1082      	asrs	r2, r0, #2
  403a5e:	2401      	movs	r4, #1
  403a60:	4094      	lsls	r4, r2
  403a62:	429c      	cmp	r4, r3
  403a64:	f200 808b 	bhi.w	403b7e <_malloc_r+0x1ea>
  403a68:	421c      	tst	r4, r3
  403a6a:	d106      	bne.n	403a7a <_malloc_r+0xe6>
  403a6c:	f020 0003 	bic.w	r0, r0, #3
  403a70:	0064      	lsls	r4, r4, #1
  403a72:	421c      	tst	r4, r3
  403a74:	f100 0004 	add.w	r0, r0, #4
  403a78:	d0fa      	beq.n	403a70 <_malloc_r+0xdc>
  403a7a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403a7e:	46cc      	mov	ip, r9
  403a80:	4680      	mov	r8, r0
  403a82:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403a86:	459c      	cmp	ip, r3
  403a88:	d107      	bne.n	403a9a <_malloc_r+0x106>
  403a8a:	e16d      	b.n	403d68 <_malloc_r+0x3d4>
  403a8c:	2a00      	cmp	r2, #0
  403a8e:	f280 817b 	bge.w	403d88 <_malloc_r+0x3f4>
  403a92:	68db      	ldr	r3, [r3, #12]
  403a94:	459c      	cmp	ip, r3
  403a96:	f000 8167 	beq.w	403d68 <_malloc_r+0x3d4>
  403a9a:	6859      	ldr	r1, [r3, #4]
  403a9c:	f021 0103 	bic.w	r1, r1, #3
  403aa0:	1b8a      	subs	r2, r1, r6
  403aa2:	2a0f      	cmp	r2, #15
  403aa4:	ddf2      	ble.n	403a8c <_malloc_r+0xf8>
  403aa6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403aaa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403aae:	9300      	str	r3, [sp, #0]
  403ab0:	199c      	adds	r4, r3, r6
  403ab2:	4628      	mov	r0, r5
  403ab4:	f046 0601 	orr.w	r6, r6, #1
  403ab8:	f042 0501 	orr.w	r5, r2, #1
  403abc:	605e      	str	r6, [r3, #4]
  403abe:	f8c8 c00c 	str.w	ip, [r8, #12]
  403ac2:	f8cc 8008 	str.w	r8, [ip, #8]
  403ac6:	617c      	str	r4, [r7, #20]
  403ac8:	613c      	str	r4, [r7, #16]
  403aca:	f8c4 e00c 	str.w	lr, [r4, #12]
  403ace:	f8c4 e008 	str.w	lr, [r4, #8]
  403ad2:	6065      	str	r5, [r4, #4]
  403ad4:	505a      	str	r2, [r3, r1]
  403ad6:	f000 fafb 	bl	4040d0 <__malloc_unlock>
  403ada:	9b00      	ldr	r3, [sp, #0]
  403adc:	f103 0408 	add.w	r4, r3, #8
  403ae0:	e01e      	b.n	403b20 <_malloc_r+0x18c>
  403ae2:	2910      	cmp	r1, #16
  403ae4:	d820      	bhi.n	403b28 <_malloc_r+0x194>
  403ae6:	f000 faed 	bl	4040c4 <__malloc_lock>
  403aea:	2610      	movs	r6, #16
  403aec:	2318      	movs	r3, #24
  403aee:	2002      	movs	r0, #2
  403af0:	4f79      	ldr	r7, [pc, #484]	; (403cd8 <_malloc_r+0x344>)
  403af2:	443b      	add	r3, r7
  403af4:	f1a3 0208 	sub.w	r2, r3, #8
  403af8:	685c      	ldr	r4, [r3, #4]
  403afa:	4294      	cmp	r4, r2
  403afc:	f000 813d 	beq.w	403d7a <_malloc_r+0x3e6>
  403b00:	6863      	ldr	r3, [r4, #4]
  403b02:	68e1      	ldr	r1, [r4, #12]
  403b04:	68a6      	ldr	r6, [r4, #8]
  403b06:	f023 0303 	bic.w	r3, r3, #3
  403b0a:	4423      	add	r3, r4
  403b0c:	4628      	mov	r0, r5
  403b0e:	685a      	ldr	r2, [r3, #4]
  403b10:	60f1      	str	r1, [r6, #12]
  403b12:	f042 0201 	orr.w	r2, r2, #1
  403b16:	608e      	str	r6, [r1, #8]
  403b18:	605a      	str	r2, [r3, #4]
  403b1a:	f000 fad9 	bl	4040d0 <__malloc_unlock>
  403b1e:	3408      	adds	r4, #8
  403b20:	4620      	mov	r0, r4
  403b22:	b003      	add	sp, #12
  403b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b28:	2400      	movs	r4, #0
  403b2a:	230c      	movs	r3, #12
  403b2c:	4620      	mov	r0, r4
  403b2e:	602b      	str	r3, [r5, #0]
  403b30:	b003      	add	sp, #12
  403b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b36:	2040      	movs	r0, #64	; 0x40
  403b38:	f44f 7300 	mov.w	r3, #512	; 0x200
  403b3c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403b40:	e74a      	b.n	4039d8 <_malloc_r+0x44>
  403b42:	4423      	add	r3, r4
  403b44:	68e1      	ldr	r1, [r4, #12]
  403b46:	685a      	ldr	r2, [r3, #4]
  403b48:	68a6      	ldr	r6, [r4, #8]
  403b4a:	f042 0201 	orr.w	r2, r2, #1
  403b4e:	60f1      	str	r1, [r6, #12]
  403b50:	4628      	mov	r0, r5
  403b52:	608e      	str	r6, [r1, #8]
  403b54:	605a      	str	r2, [r3, #4]
  403b56:	f000 fabb 	bl	4040d0 <__malloc_unlock>
  403b5a:	3408      	adds	r4, #8
  403b5c:	4620      	mov	r0, r4
  403b5e:	b003      	add	sp, #12
  403b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b64:	4423      	add	r3, r4
  403b66:	4628      	mov	r0, r5
  403b68:	685a      	ldr	r2, [r3, #4]
  403b6a:	f042 0201 	orr.w	r2, r2, #1
  403b6e:	605a      	str	r2, [r3, #4]
  403b70:	f000 faae 	bl	4040d0 <__malloc_unlock>
  403b74:	3408      	adds	r4, #8
  403b76:	4620      	mov	r0, r4
  403b78:	b003      	add	sp, #12
  403b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b7e:	68bc      	ldr	r4, [r7, #8]
  403b80:	6863      	ldr	r3, [r4, #4]
  403b82:	f023 0803 	bic.w	r8, r3, #3
  403b86:	45b0      	cmp	r8, r6
  403b88:	d304      	bcc.n	403b94 <_malloc_r+0x200>
  403b8a:	eba8 0306 	sub.w	r3, r8, r6
  403b8e:	2b0f      	cmp	r3, #15
  403b90:	f300 8085 	bgt.w	403c9e <_malloc_r+0x30a>
  403b94:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403cf0 <_malloc_r+0x35c>
  403b98:	4b50      	ldr	r3, [pc, #320]	; (403cdc <_malloc_r+0x348>)
  403b9a:	f8d9 2000 	ldr.w	r2, [r9]
  403b9e:	681b      	ldr	r3, [r3, #0]
  403ba0:	3201      	adds	r2, #1
  403ba2:	4433      	add	r3, r6
  403ba4:	eb04 0a08 	add.w	sl, r4, r8
  403ba8:	f000 8155 	beq.w	403e56 <_malloc_r+0x4c2>
  403bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403bb0:	330f      	adds	r3, #15
  403bb2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403bb6:	f02b 0b0f 	bic.w	fp, fp, #15
  403bba:	4659      	mov	r1, fp
  403bbc:	4628      	mov	r0, r5
  403bbe:	f000 faf7 	bl	4041b0 <_sbrk_r>
  403bc2:	1c41      	adds	r1, r0, #1
  403bc4:	4602      	mov	r2, r0
  403bc6:	f000 80fc 	beq.w	403dc2 <_malloc_r+0x42e>
  403bca:	4582      	cmp	sl, r0
  403bcc:	f200 80f7 	bhi.w	403dbe <_malloc_r+0x42a>
  403bd0:	4b43      	ldr	r3, [pc, #268]	; (403ce0 <_malloc_r+0x34c>)
  403bd2:	6819      	ldr	r1, [r3, #0]
  403bd4:	4459      	add	r1, fp
  403bd6:	6019      	str	r1, [r3, #0]
  403bd8:	f000 814d 	beq.w	403e76 <_malloc_r+0x4e2>
  403bdc:	f8d9 0000 	ldr.w	r0, [r9]
  403be0:	3001      	adds	r0, #1
  403be2:	bf1b      	ittet	ne
  403be4:	eba2 0a0a 	subne.w	sl, r2, sl
  403be8:	4451      	addne	r1, sl
  403bea:	f8c9 2000 	streq.w	r2, [r9]
  403bee:	6019      	strne	r1, [r3, #0]
  403bf0:	f012 0107 	ands.w	r1, r2, #7
  403bf4:	f000 8115 	beq.w	403e22 <_malloc_r+0x48e>
  403bf8:	f1c1 0008 	rsb	r0, r1, #8
  403bfc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403c00:	4402      	add	r2, r0
  403c02:	3108      	adds	r1, #8
  403c04:	eb02 090b 	add.w	r9, r2, fp
  403c08:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403c0c:	eba1 0909 	sub.w	r9, r1, r9
  403c10:	4649      	mov	r1, r9
  403c12:	4628      	mov	r0, r5
  403c14:	9301      	str	r3, [sp, #4]
  403c16:	9200      	str	r2, [sp, #0]
  403c18:	f000 faca 	bl	4041b0 <_sbrk_r>
  403c1c:	1c43      	adds	r3, r0, #1
  403c1e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403c22:	f000 8143 	beq.w	403eac <_malloc_r+0x518>
  403c26:	1a80      	subs	r0, r0, r2
  403c28:	4448      	add	r0, r9
  403c2a:	f040 0001 	orr.w	r0, r0, #1
  403c2e:	6819      	ldr	r1, [r3, #0]
  403c30:	60ba      	str	r2, [r7, #8]
  403c32:	4449      	add	r1, r9
  403c34:	42bc      	cmp	r4, r7
  403c36:	6050      	str	r0, [r2, #4]
  403c38:	6019      	str	r1, [r3, #0]
  403c3a:	d017      	beq.n	403c6c <_malloc_r+0x2d8>
  403c3c:	f1b8 0f0f 	cmp.w	r8, #15
  403c40:	f240 80fb 	bls.w	403e3a <_malloc_r+0x4a6>
  403c44:	6860      	ldr	r0, [r4, #4]
  403c46:	f1a8 020c 	sub.w	r2, r8, #12
  403c4a:	f022 0207 	bic.w	r2, r2, #7
  403c4e:	eb04 0e02 	add.w	lr, r4, r2
  403c52:	f000 0001 	and.w	r0, r0, #1
  403c56:	f04f 0c05 	mov.w	ip, #5
  403c5a:	4310      	orrs	r0, r2
  403c5c:	2a0f      	cmp	r2, #15
  403c5e:	6060      	str	r0, [r4, #4]
  403c60:	f8ce c004 	str.w	ip, [lr, #4]
  403c64:	f8ce c008 	str.w	ip, [lr, #8]
  403c68:	f200 8117 	bhi.w	403e9a <_malloc_r+0x506>
  403c6c:	4b1d      	ldr	r3, [pc, #116]	; (403ce4 <_malloc_r+0x350>)
  403c6e:	68bc      	ldr	r4, [r7, #8]
  403c70:	681a      	ldr	r2, [r3, #0]
  403c72:	4291      	cmp	r1, r2
  403c74:	bf88      	it	hi
  403c76:	6019      	strhi	r1, [r3, #0]
  403c78:	4b1b      	ldr	r3, [pc, #108]	; (403ce8 <_malloc_r+0x354>)
  403c7a:	681a      	ldr	r2, [r3, #0]
  403c7c:	4291      	cmp	r1, r2
  403c7e:	6862      	ldr	r2, [r4, #4]
  403c80:	bf88      	it	hi
  403c82:	6019      	strhi	r1, [r3, #0]
  403c84:	f022 0203 	bic.w	r2, r2, #3
  403c88:	4296      	cmp	r6, r2
  403c8a:	eba2 0306 	sub.w	r3, r2, r6
  403c8e:	d801      	bhi.n	403c94 <_malloc_r+0x300>
  403c90:	2b0f      	cmp	r3, #15
  403c92:	dc04      	bgt.n	403c9e <_malloc_r+0x30a>
  403c94:	4628      	mov	r0, r5
  403c96:	f000 fa1b 	bl	4040d0 <__malloc_unlock>
  403c9a:	2400      	movs	r4, #0
  403c9c:	e740      	b.n	403b20 <_malloc_r+0x18c>
  403c9e:	19a2      	adds	r2, r4, r6
  403ca0:	f043 0301 	orr.w	r3, r3, #1
  403ca4:	f046 0601 	orr.w	r6, r6, #1
  403ca8:	6066      	str	r6, [r4, #4]
  403caa:	4628      	mov	r0, r5
  403cac:	60ba      	str	r2, [r7, #8]
  403cae:	6053      	str	r3, [r2, #4]
  403cb0:	f000 fa0e 	bl	4040d0 <__malloc_unlock>
  403cb4:	3408      	adds	r4, #8
  403cb6:	4620      	mov	r0, r4
  403cb8:	b003      	add	sp, #12
  403cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403cbe:	2b14      	cmp	r3, #20
  403cc0:	d971      	bls.n	403da6 <_malloc_r+0x412>
  403cc2:	2b54      	cmp	r3, #84	; 0x54
  403cc4:	f200 80a3 	bhi.w	403e0e <_malloc_r+0x47a>
  403cc8:	0b33      	lsrs	r3, r6, #12
  403cca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403cce:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403cd2:	00c3      	lsls	r3, r0, #3
  403cd4:	e680      	b.n	4039d8 <_malloc_r+0x44>
  403cd6:	bf00      	nop
  403cd8:	20400438 	.word	0x20400438
  403cdc:	20400bc0 	.word	0x20400bc0
  403ce0:	20400b90 	.word	0x20400b90
  403ce4:	20400bb8 	.word	0x20400bb8
  403ce8:	20400bbc 	.word	0x20400bbc
  403cec:	20400440 	.word	0x20400440
  403cf0:	20400840 	.word	0x20400840
  403cf4:	0a5a      	lsrs	r2, r3, #9
  403cf6:	2a04      	cmp	r2, #4
  403cf8:	d95b      	bls.n	403db2 <_malloc_r+0x41e>
  403cfa:	2a14      	cmp	r2, #20
  403cfc:	f200 80ae 	bhi.w	403e5c <_malloc_r+0x4c8>
  403d00:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403d04:	00c9      	lsls	r1, r1, #3
  403d06:	325b      	adds	r2, #91	; 0x5b
  403d08:	eb07 0c01 	add.w	ip, r7, r1
  403d0c:	5879      	ldr	r1, [r7, r1]
  403d0e:	f1ac 0c08 	sub.w	ip, ip, #8
  403d12:	458c      	cmp	ip, r1
  403d14:	f000 8088 	beq.w	403e28 <_malloc_r+0x494>
  403d18:	684a      	ldr	r2, [r1, #4]
  403d1a:	f022 0203 	bic.w	r2, r2, #3
  403d1e:	4293      	cmp	r3, r2
  403d20:	d273      	bcs.n	403e0a <_malloc_r+0x476>
  403d22:	6889      	ldr	r1, [r1, #8]
  403d24:	458c      	cmp	ip, r1
  403d26:	d1f7      	bne.n	403d18 <_malloc_r+0x384>
  403d28:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403d2c:	687b      	ldr	r3, [r7, #4]
  403d2e:	60e2      	str	r2, [r4, #12]
  403d30:	f8c4 c008 	str.w	ip, [r4, #8]
  403d34:	6094      	str	r4, [r2, #8]
  403d36:	f8cc 400c 	str.w	r4, [ip, #12]
  403d3a:	e68f      	b.n	403a5c <_malloc_r+0xc8>
  403d3c:	19a1      	adds	r1, r4, r6
  403d3e:	f046 0c01 	orr.w	ip, r6, #1
  403d42:	f042 0601 	orr.w	r6, r2, #1
  403d46:	f8c4 c004 	str.w	ip, [r4, #4]
  403d4a:	4628      	mov	r0, r5
  403d4c:	6179      	str	r1, [r7, #20]
  403d4e:	6139      	str	r1, [r7, #16]
  403d50:	f8c1 e00c 	str.w	lr, [r1, #12]
  403d54:	f8c1 e008 	str.w	lr, [r1, #8]
  403d58:	604e      	str	r6, [r1, #4]
  403d5a:	50e2      	str	r2, [r4, r3]
  403d5c:	f000 f9b8 	bl	4040d0 <__malloc_unlock>
  403d60:	3408      	adds	r4, #8
  403d62:	e6dd      	b.n	403b20 <_malloc_r+0x18c>
  403d64:	687b      	ldr	r3, [r7, #4]
  403d66:	e679      	b.n	403a5c <_malloc_r+0xc8>
  403d68:	f108 0801 	add.w	r8, r8, #1
  403d6c:	f018 0f03 	tst.w	r8, #3
  403d70:	f10c 0c08 	add.w	ip, ip, #8
  403d74:	f47f ae85 	bne.w	403a82 <_malloc_r+0xee>
  403d78:	e02d      	b.n	403dd6 <_malloc_r+0x442>
  403d7a:	68dc      	ldr	r4, [r3, #12]
  403d7c:	42a3      	cmp	r3, r4
  403d7e:	bf08      	it	eq
  403d80:	3002      	addeq	r0, #2
  403d82:	f43f ae3e 	beq.w	403a02 <_malloc_r+0x6e>
  403d86:	e6bb      	b.n	403b00 <_malloc_r+0x16c>
  403d88:	4419      	add	r1, r3
  403d8a:	461c      	mov	r4, r3
  403d8c:	684a      	ldr	r2, [r1, #4]
  403d8e:	68db      	ldr	r3, [r3, #12]
  403d90:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403d94:	f042 0201 	orr.w	r2, r2, #1
  403d98:	604a      	str	r2, [r1, #4]
  403d9a:	4628      	mov	r0, r5
  403d9c:	60f3      	str	r3, [r6, #12]
  403d9e:	609e      	str	r6, [r3, #8]
  403da0:	f000 f996 	bl	4040d0 <__malloc_unlock>
  403da4:	e6bc      	b.n	403b20 <_malloc_r+0x18c>
  403da6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403daa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403dae:	00c3      	lsls	r3, r0, #3
  403db0:	e612      	b.n	4039d8 <_malloc_r+0x44>
  403db2:	099a      	lsrs	r2, r3, #6
  403db4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403db8:	00c9      	lsls	r1, r1, #3
  403dba:	3238      	adds	r2, #56	; 0x38
  403dbc:	e7a4      	b.n	403d08 <_malloc_r+0x374>
  403dbe:	42bc      	cmp	r4, r7
  403dc0:	d054      	beq.n	403e6c <_malloc_r+0x4d8>
  403dc2:	68bc      	ldr	r4, [r7, #8]
  403dc4:	6862      	ldr	r2, [r4, #4]
  403dc6:	f022 0203 	bic.w	r2, r2, #3
  403dca:	e75d      	b.n	403c88 <_malloc_r+0x2f4>
  403dcc:	f859 3908 	ldr.w	r3, [r9], #-8
  403dd0:	4599      	cmp	r9, r3
  403dd2:	f040 8086 	bne.w	403ee2 <_malloc_r+0x54e>
  403dd6:	f010 0f03 	tst.w	r0, #3
  403dda:	f100 30ff 	add.w	r0, r0, #4294967295
  403dde:	d1f5      	bne.n	403dcc <_malloc_r+0x438>
  403de0:	687b      	ldr	r3, [r7, #4]
  403de2:	ea23 0304 	bic.w	r3, r3, r4
  403de6:	607b      	str	r3, [r7, #4]
  403de8:	0064      	lsls	r4, r4, #1
  403dea:	429c      	cmp	r4, r3
  403dec:	f63f aec7 	bhi.w	403b7e <_malloc_r+0x1ea>
  403df0:	2c00      	cmp	r4, #0
  403df2:	f43f aec4 	beq.w	403b7e <_malloc_r+0x1ea>
  403df6:	421c      	tst	r4, r3
  403df8:	4640      	mov	r0, r8
  403dfa:	f47f ae3e 	bne.w	403a7a <_malloc_r+0xe6>
  403dfe:	0064      	lsls	r4, r4, #1
  403e00:	421c      	tst	r4, r3
  403e02:	f100 0004 	add.w	r0, r0, #4
  403e06:	d0fa      	beq.n	403dfe <_malloc_r+0x46a>
  403e08:	e637      	b.n	403a7a <_malloc_r+0xe6>
  403e0a:	468c      	mov	ip, r1
  403e0c:	e78c      	b.n	403d28 <_malloc_r+0x394>
  403e0e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403e12:	d815      	bhi.n	403e40 <_malloc_r+0x4ac>
  403e14:	0bf3      	lsrs	r3, r6, #15
  403e16:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403e1a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403e1e:	00c3      	lsls	r3, r0, #3
  403e20:	e5da      	b.n	4039d8 <_malloc_r+0x44>
  403e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403e26:	e6ed      	b.n	403c04 <_malloc_r+0x270>
  403e28:	687b      	ldr	r3, [r7, #4]
  403e2a:	1092      	asrs	r2, r2, #2
  403e2c:	2101      	movs	r1, #1
  403e2e:	fa01 f202 	lsl.w	r2, r1, r2
  403e32:	4313      	orrs	r3, r2
  403e34:	607b      	str	r3, [r7, #4]
  403e36:	4662      	mov	r2, ip
  403e38:	e779      	b.n	403d2e <_malloc_r+0x39a>
  403e3a:	2301      	movs	r3, #1
  403e3c:	6053      	str	r3, [r2, #4]
  403e3e:	e729      	b.n	403c94 <_malloc_r+0x300>
  403e40:	f240 5254 	movw	r2, #1364	; 0x554
  403e44:	4293      	cmp	r3, r2
  403e46:	d822      	bhi.n	403e8e <_malloc_r+0x4fa>
  403e48:	0cb3      	lsrs	r3, r6, #18
  403e4a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403e4e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403e52:	00c3      	lsls	r3, r0, #3
  403e54:	e5c0      	b.n	4039d8 <_malloc_r+0x44>
  403e56:	f103 0b10 	add.w	fp, r3, #16
  403e5a:	e6ae      	b.n	403bba <_malloc_r+0x226>
  403e5c:	2a54      	cmp	r2, #84	; 0x54
  403e5e:	d829      	bhi.n	403eb4 <_malloc_r+0x520>
  403e60:	0b1a      	lsrs	r2, r3, #12
  403e62:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403e66:	00c9      	lsls	r1, r1, #3
  403e68:	326e      	adds	r2, #110	; 0x6e
  403e6a:	e74d      	b.n	403d08 <_malloc_r+0x374>
  403e6c:	4b20      	ldr	r3, [pc, #128]	; (403ef0 <_malloc_r+0x55c>)
  403e6e:	6819      	ldr	r1, [r3, #0]
  403e70:	4459      	add	r1, fp
  403e72:	6019      	str	r1, [r3, #0]
  403e74:	e6b2      	b.n	403bdc <_malloc_r+0x248>
  403e76:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403e7a:	2800      	cmp	r0, #0
  403e7c:	f47f aeae 	bne.w	403bdc <_malloc_r+0x248>
  403e80:	eb08 030b 	add.w	r3, r8, fp
  403e84:	68ba      	ldr	r2, [r7, #8]
  403e86:	f043 0301 	orr.w	r3, r3, #1
  403e8a:	6053      	str	r3, [r2, #4]
  403e8c:	e6ee      	b.n	403c6c <_malloc_r+0x2d8>
  403e8e:	207f      	movs	r0, #127	; 0x7f
  403e90:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403e94:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403e98:	e59e      	b.n	4039d8 <_malloc_r+0x44>
  403e9a:	f104 0108 	add.w	r1, r4, #8
  403e9e:	4628      	mov	r0, r5
  403ea0:	9300      	str	r3, [sp, #0]
  403ea2:	f002 ff95 	bl	406dd0 <_free_r>
  403ea6:	9b00      	ldr	r3, [sp, #0]
  403ea8:	6819      	ldr	r1, [r3, #0]
  403eaa:	e6df      	b.n	403c6c <_malloc_r+0x2d8>
  403eac:	2001      	movs	r0, #1
  403eae:	f04f 0900 	mov.w	r9, #0
  403eb2:	e6bc      	b.n	403c2e <_malloc_r+0x29a>
  403eb4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403eb8:	d805      	bhi.n	403ec6 <_malloc_r+0x532>
  403eba:	0bda      	lsrs	r2, r3, #15
  403ebc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403ec0:	00c9      	lsls	r1, r1, #3
  403ec2:	3277      	adds	r2, #119	; 0x77
  403ec4:	e720      	b.n	403d08 <_malloc_r+0x374>
  403ec6:	f240 5154 	movw	r1, #1364	; 0x554
  403eca:	428a      	cmp	r2, r1
  403ecc:	d805      	bhi.n	403eda <_malloc_r+0x546>
  403ece:	0c9a      	lsrs	r2, r3, #18
  403ed0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403ed4:	00c9      	lsls	r1, r1, #3
  403ed6:	327c      	adds	r2, #124	; 0x7c
  403ed8:	e716      	b.n	403d08 <_malloc_r+0x374>
  403eda:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403ede:	227e      	movs	r2, #126	; 0x7e
  403ee0:	e712      	b.n	403d08 <_malloc_r+0x374>
  403ee2:	687b      	ldr	r3, [r7, #4]
  403ee4:	e780      	b.n	403de8 <_malloc_r+0x454>
  403ee6:	08f0      	lsrs	r0, r6, #3
  403ee8:	f106 0308 	add.w	r3, r6, #8
  403eec:	e600      	b.n	403af0 <_malloc_r+0x15c>
  403eee:	bf00      	nop
  403ef0:	20400b90 	.word	0x20400b90

00403ef4 <memcpy>:
  403ef4:	4684      	mov	ip, r0
  403ef6:	ea41 0300 	orr.w	r3, r1, r0
  403efa:	f013 0303 	ands.w	r3, r3, #3
  403efe:	d16d      	bne.n	403fdc <memcpy+0xe8>
  403f00:	3a40      	subs	r2, #64	; 0x40
  403f02:	d341      	bcc.n	403f88 <memcpy+0x94>
  403f04:	f851 3b04 	ldr.w	r3, [r1], #4
  403f08:	f840 3b04 	str.w	r3, [r0], #4
  403f0c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f10:	f840 3b04 	str.w	r3, [r0], #4
  403f14:	f851 3b04 	ldr.w	r3, [r1], #4
  403f18:	f840 3b04 	str.w	r3, [r0], #4
  403f1c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f20:	f840 3b04 	str.w	r3, [r0], #4
  403f24:	f851 3b04 	ldr.w	r3, [r1], #4
  403f28:	f840 3b04 	str.w	r3, [r0], #4
  403f2c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f30:	f840 3b04 	str.w	r3, [r0], #4
  403f34:	f851 3b04 	ldr.w	r3, [r1], #4
  403f38:	f840 3b04 	str.w	r3, [r0], #4
  403f3c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f40:	f840 3b04 	str.w	r3, [r0], #4
  403f44:	f851 3b04 	ldr.w	r3, [r1], #4
  403f48:	f840 3b04 	str.w	r3, [r0], #4
  403f4c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f50:	f840 3b04 	str.w	r3, [r0], #4
  403f54:	f851 3b04 	ldr.w	r3, [r1], #4
  403f58:	f840 3b04 	str.w	r3, [r0], #4
  403f5c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f60:	f840 3b04 	str.w	r3, [r0], #4
  403f64:	f851 3b04 	ldr.w	r3, [r1], #4
  403f68:	f840 3b04 	str.w	r3, [r0], #4
  403f6c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f70:	f840 3b04 	str.w	r3, [r0], #4
  403f74:	f851 3b04 	ldr.w	r3, [r1], #4
  403f78:	f840 3b04 	str.w	r3, [r0], #4
  403f7c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f80:	f840 3b04 	str.w	r3, [r0], #4
  403f84:	3a40      	subs	r2, #64	; 0x40
  403f86:	d2bd      	bcs.n	403f04 <memcpy+0x10>
  403f88:	3230      	adds	r2, #48	; 0x30
  403f8a:	d311      	bcc.n	403fb0 <memcpy+0xbc>
  403f8c:	f851 3b04 	ldr.w	r3, [r1], #4
  403f90:	f840 3b04 	str.w	r3, [r0], #4
  403f94:	f851 3b04 	ldr.w	r3, [r1], #4
  403f98:	f840 3b04 	str.w	r3, [r0], #4
  403f9c:	f851 3b04 	ldr.w	r3, [r1], #4
  403fa0:	f840 3b04 	str.w	r3, [r0], #4
  403fa4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fa8:	f840 3b04 	str.w	r3, [r0], #4
  403fac:	3a10      	subs	r2, #16
  403fae:	d2ed      	bcs.n	403f8c <memcpy+0x98>
  403fb0:	320c      	adds	r2, #12
  403fb2:	d305      	bcc.n	403fc0 <memcpy+0xcc>
  403fb4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fb8:	f840 3b04 	str.w	r3, [r0], #4
  403fbc:	3a04      	subs	r2, #4
  403fbe:	d2f9      	bcs.n	403fb4 <memcpy+0xc0>
  403fc0:	3204      	adds	r2, #4
  403fc2:	d008      	beq.n	403fd6 <memcpy+0xe2>
  403fc4:	07d2      	lsls	r2, r2, #31
  403fc6:	bf1c      	itt	ne
  403fc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403fcc:	f800 3b01 	strbne.w	r3, [r0], #1
  403fd0:	d301      	bcc.n	403fd6 <memcpy+0xe2>
  403fd2:	880b      	ldrh	r3, [r1, #0]
  403fd4:	8003      	strh	r3, [r0, #0]
  403fd6:	4660      	mov	r0, ip
  403fd8:	4770      	bx	lr
  403fda:	bf00      	nop
  403fdc:	2a08      	cmp	r2, #8
  403fde:	d313      	bcc.n	404008 <memcpy+0x114>
  403fe0:	078b      	lsls	r3, r1, #30
  403fe2:	d08d      	beq.n	403f00 <memcpy+0xc>
  403fe4:	f010 0303 	ands.w	r3, r0, #3
  403fe8:	d08a      	beq.n	403f00 <memcpy+0xc>
  403fea:	f1c3 0304 	rsb	r3, r3, #4
  403fee:	1ad2      	subs	r2, r2, r3
  403ff0:	07db      	lsls	r3, r3, #31
  403ff2:	bf1c      	itt	ne
  403ff4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403ff8:	f800 3b01 	strbne.w	r3, [r0], #1
  403ffc:	d380      	bcc.n	403f00 <memcpy+0xc>
  403ffe:	f831 3b02 	ldrh.w	r3, [r1], #2
  404002:	f820 3b02 	strh.w	r3, [r0], #2
  404006:	e77b      	b.n	403f00 <memcpy+0xc>
  404008:	3a04      	subs	r2, #4
  40400a:	d3d9      	bcc.n	403fc0 <memcpy+0xcc>
  40400c:	3a01      	subs	r2, #1
  40400e:	f811 3b01 	ldrb.w	r3, [r1], #1
  404012:	f800 3b01 	strb.w	r3, [r0], #1
  404016:	d2f9      	bcs.n	40400c <memcpy+0x118>
  404018:	780b      	ldrb	r3, [r1, #0]
  40401a:	7003      	strb	r3, [r0, #0]
  40401c:	784b      	ldrb	r3, [r1, #1]
  40401e:	7043      	strb	r3, [r0, #1]
  404020:	788b      	ldrb	r3, [r1, #2]
  404022:	7083      	strb	r3, [r0, #2]
  404024:	4660      	mov	r0, ip
  404026:	4770      	bx	lr

00404028 <memset>:
  404028:	b470      	push	{r4, r5, r6}
  40402a:	0786      	lsls	r6, r0, #30
  40402c:	d046      	beq.n	4040bc <memset+0x94>
  40402e:	1e54      	subs	r4, r2, #1
  404030:	2a00      	cmp	r2, #0
  404032:	d041      	beq.n	4040b8 <memset+0x90>
  404034:	b2ca      	uxtb	r2, r1
  404036:	4603      	mov	r3, r0
  404038:	e002      	b.n	404040 <memset+0x18>
  40403a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40403e:	d33b      	bcc.n	4040b8 <memset+0x90>
  404040:	f803 2b01 	strb.w	r2, [r3], #1
  404044:	079d      	lsls	r5, r3, #30
  404046:	d1f8      	bne.n	40403a <memset+0x12>
  404048:	2c03      	cmp	r4, #3
  40404a:	d92e      	bls.n	4040aa <memset+0x82>
  40404c:	b2cd      	uxtb	r5, r1
  40404e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404052:	2c0f      	cmp	r4, #15
  404054:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404058:	d919      	bls.n	40408e <memset+0x66>
  40405a:	f103 0210 	add.w	r2, r3, #16
  40405e:	4626      	mov	r6, r4
  404060:	3e10      	subs	r6, #16
  404062:	2e0f      	cmp	r6, #15
  404064:	f842 5c10 	str.w	r5, [r2, #-16]
  404068:	f842 5c0c 	str.w	r5, [r2, #-12]
  40406c:	f842 5c08 	str.w	r5, [r2, #-8]
  404070:	f842 5c04 	str.w	r5, [r2, #-4]
  404074:	f102 0210 	add.w	r2, r2, #16
  404078:	d8f2      	bhi.n	404060 <memset+0x38>
  40407a:	f1a4 0210 	sub.w	r2, r4, #16
  40407e:	f022 020f 	bic.w	r2, r2, #15
  404082:	f004 040f 	and.w	r4, r4, #15
  404086:	3210      	adds	r2, #16
  404088:	2c03      	cmp	r4, #3
  40408a:	4413      	add	r3, r2
  40408c:	d90d      	bls.n	4040aa <memset+0x82>
  40408e:	461e      	mov	r6, r3
  404090:	4622      	mov	r2, r4
  404092:	3a04      	subs	r2, #4
  404094:	2a03      	cmp	r2, #3
  404096:	f846 5b04 	str.w	r5, [r6], #4
  40409a:	d8fa      	bhi.n	404092 <memset+0x6a>
  40409c:	1f22      	subs	r2, r4, #4
  40409e:	f022 0203 	bic.w	r2, r2, #3
  4040a2:	3204      	adds	r2, #4
  4040a4:	4413      	add	r3, r2
  4040a6:	f004 0403 	and.w	r4, r4, #3
  4040aa:	b12c      	cbz	r4, 4040b8 <memset+0x90>
  4040ac:	b2c9      	uxtb	r1, r1
  4040ae:	441c      	add	r4, r3
  4040b0:	f803 1b01 	strb.w	r1, [r3], #1
  4040b4:	429c      	cmp	r4, r3
  4040b6:	d1fb      	bne.n	4040b0 <memset+0x88>
  4040b8:	bc70      	pop	{r4, r5, r6}
  4040ba:	4770      	bx	lr
  4040bc:	4614      	mov	r4, r2
  4040be:	4603      	mov	r3, r0
  4040c0:	e7c2      	b.n	404048 <memset+0x20>
  4040c2:	bf00      	nop

004040c4 <__malloc_lock>:
  4040c4:	4801      	ldr	r0, [pc, #4]	; (4040cc <__malloc_lock+0x8>)
  4040c6:	f003 b91d 	b.w	407304 <__retarget_lock_acquire_recursive>
  4040ca:	bf00      	nop
  4040cc:	20400cb4 	.word	0x20400cb4

004040d0 <__malloc_unlock>:
  4040d0:	4801      	ldr	r0, [pc, #4]	; (4040d8 <__malloc_unlock+0x8>)
  4040d2:	f003 b919 	b.w	407308 <__retarget_lock_release_recursive>
  4040d6:	bf00      	nop
  4040d8:	20400cb4 	.word	0x20400cb4

004040dc <printf>:
  4040dc:	b40f      	push	{r0, r1, r2, r3}
  4040de:	b500      	push	{lr}
  4040e0:	4907      	ldr	r1, [pc, #28]	; (404100 <printf+0x24>)
  4040e2:	b083      	sub	sp, #12
  4040e4:	ab04      	add	r3, sp, #16
  4040e6:	6808      	ldr	r0, [r1, #0]
  4040e8:	f853 2b04 	ldr.w	r2, [r3], #4
  4040ec:	6881      	ldr	r1, [r0, #8]
  4040ee:	9301      	str	r3, [sp, #4]
  4040f0:	f000 f9b4 	bl	40445c <_vfprintf_r>
  4040f4:	b003      	add	sp, #12
  4040f6:	f85d eb04 	ldr.w	lr, [sp], #4
  4040fa:	b004      	add	sp, #16
  4040fc:	4770      	bx	lr
  4040fe:	bf00      	nop
  404100:	2040000c 	.word	0x2040000c

00404104 <_puts_r>:
  404104:	b5f0      	push	{r4, r5, r6, r7, lr}
  404106:	4605      	mov	r5, r0
  404108:	b089      	sub	sp, #36	; 0x24
  40410a:	4608      	mov	r0, r1
  40410c:	460c      	mov	r4, r1
  40410e:	f000 f937 	bl	404380 <strlen>
  404112:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404114:	4f21      	ldr	r7, [pc, #132]	; (40419c <_puts_r+0x98>)
  404116:	9404      	str	r4, [sp, #16]
  404118:	2601      	movs	r6, #1
  40411a:	1c44      	adds	r4, r0, #1
  40411c:	a904      	add	r1, sp, #16
  40411e:	2202      	movs	r2, #2
  404120:	9403      	str	r4, [sp, #12]
  404122:	9005      	str	r0, [sp, #20]
  404124:	68ac      	ldr	r4, [r5, #8]
  404126:	9706      	str	r7, [sp, #24]
  404128:	9607      	str	r6, [sp, #28]
  40412a:	9101      	str	r1, [sp, #4]
  40412c:	9202      	str	r2, [sp, #8]
  40412e:	b353      	cbz	r3, 404186 <_puts_r+0x82>
  404130:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404132:	f013 0f01 	tst.w	r3, #1
  404136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40413a:	b29a      	uxth	r2, r3
  40413c:	d101      	bne.n	404142 <_puts_r+0x3e>
  40413e:	0590      	lsls	r0, r2, #22
  404140:	d525      	bpl.n	40418e <_puts_r+0x8a>
  404142:	0491      	lsls	r1, r2, #18
  404144:	d406      	bmi.n	404154 <_puts_r+0x50>
  404146:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404148:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40414c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  404150:	81a3      	strh	r3, [r4, #12]
  404152:	6662      	str	r2, [r4, #100]	; 0x64
  404154:	4628      	mov	r0, r5
  404156:	aa01      	add	r2, sp, #4
  404158:	4621      	mov	r1, r4
  40415a:	f002 ff1f 	bl	406f9c <__sfvwrite_r>
  40415e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404160:	2800      	cmp	r0, #0
  404162:	bf0c      	ite	eq
  404164:	250a      	moveq	r5, #10
  404166:	f04f 35ff 	movne.w	r5, #4294967295
  40416a:	07da      	lsls	r2, r3, #31
  40416c:	d402      	bmi.n	404174 <_puts_r+0x70>
  40416e:	89a3      	ldrh	r3, [r4, #12]
  404170:	059b      	lsls	r3, r3, #22
  404172:	d502      	bpl.n	40417a <_puts_r+0x76>
  404174:	4628      	mov	r0, r5
  404176:	b009      	add	sp, #36	; 0x24
  404178:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40417a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40417c:	f003 f8c4 	bl	407308 <__retarget_lock_release_recursive>
  404180:	4628      	mov	r0, r5
  404182:	b009      	add	sp, #36	; 0x24
  404184:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404186:	4628      	mov	r0, r5
  404188:	f002 fd80 	bl	406c8c <__sinit>
  40418c:	e7d0      	b.n	404130 <_puts_r+0x2c>
  40418e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404190:	f003 f8b8 	bl	407304 <__retarget_lock_acquire_recursive>
  404194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404198:	b29a      	uxth	r2, r3
  40419a:	e7d2      	b.n	404142 <_puts_r+0x3e>
  40419c:	0040926c 	.word	0x0040926c

004041a0 <puts>:
  4041a0:	4b02      	ldr	r3, [pc, #8]	; (4041ac <puts+0xc>)
  4041a2:	4601      	mov	r1, r0
  4041a4:	6818      	ldr	r0, [r3, #0]
  4041a6:	f7ff bfad 	b.w	404104 <_puts_r>
  4041aa:	bf00      	nop
  4041ac:	2040000c 	.word	0x2040000c

004041b0 <_sbrk_r>:
  4041b0:	b538      	push	{r3, r4, r5, lr}
  4041b2:	4c07      	ldr	r4, [pc, #28]	; (4041d0 <_sbrk_r+0x20>)
  4041b4:	2300      	movs	r3, #0
  4041b6:	4605      	mov	r5, r0
  4041b8:	4608      	mov	r0, r1
  4041ba:	6023      	str	r3, [r4, #0]
  4041bc:	f7fc ff98 	bl	4010f0 <_sbrk>
  4041c0:	1c43      	adds	r3, r0, #1
  4041c2:	d000      	beq.n	4041c6 <_sbrk_r+0x16>
  4041c4:	bd38      	pop	{r3, r4, r5, pc}
  4041c6:	6823      	ldr	r3, [r4, #0]
  4041c8:	2b00      	cmp	r3, #0
  4041ca:	d0fb      	beq.n	4041c4 <_sbrk_r+0x14>
  4041cc:	602b      	str	r3, [r5, #0]
  4041ce:	bd38      	pop	{r3, r4, r5, pc}
  4041d0:	20400cc8 	.word	0x20400cc8

004041d4 <setbuf>:
  4041d4:	2900      	cmp	r1, #0
  4041d6:	bf0c      	ite	eq
  4041d8:	2202      	moveq	r2, #2
  4041da:	2200      	movne	r2, #0
  4041dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4041e0:	f000 b800 	b.w	4041e4 <setvbuf>

004041e4 <setvbuf>:
  4041e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4041e8:	4c61      	ldr	r4, [pc, #388]	; (404370 <setvbuf+0x18c>)
  4041ea:	6825      	ldr	r5, [r4, #0]
  4041ec:	b083      	sub	sp, #12
  4041ee:	4604      	mov	r4, r0
  4041f0:	460f      	mov	r7, r1
  4041f2:	4690      	mov	r8, r2
  4041f4:	461e      	mov	r6, r3
  4041f6:	b115      	cbz	r5, 4041fe <setvbuf+0x1a>
  4041f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041fa:	2b00      	cmp	r3, #0
  4041fc:	d064      	beq.n	4042c8 <setvbuf+0xe4>
  4041fe:	f1b8 0f02 	cmp.w	r8, #2
  404202:	d006      	beq.n	404212 <setvbuf+0x2e>
  404204:	f1b8 0f01 	cmp.w	r8, #1
  404208:	f200 809f 	bhi.w	40434a <setvbuf+0x166>
  40420c:	2e00      	cmp	r6, #0
  40420e:	f2c0 809c 	blt.w	40434a <setvbuf+0x166>
  404212:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404214:	07d8      	lsls	r0, r3, #31
  404216:	d534      	bpl.n	404282 <setvbuf+0x9e>
  404218:	4621      	mov	r1, r4
  40421a:	4628      	mov	r0, r5
  40421c:	f002 fcde 	bl	406bdc <_fflush_r>
  404220:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404222:	b141      	cbz	r1, 404236 <setvbuf+0x52>
  404224:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404228:	4299      	cmp	r1, r3
  40422a:	d002      	beq.n	404232 <setvbuf+0x4e>
  40422c:	4628      	mov	r0, r5
  40422e:	f002 fdcf 	bl	406dd0 <_free_r>
  404232:	2300      	movs	r3, #0
  404234:	6323      	str	r3, [r4, #48]	; 0x30
  404236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40423a:	2200      	movs	r2, #0
  40423c:	61a2      	str	r2, [r4, #24]
  40423e:	6062      	str	r2, [r4, #4]
  404240:	061a      	lsls	r2, r3, #24
  404242:	d43a      	bmi.n	4042ba <setvbuf+0xd6>
  404244:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404248:	f023 0303 	bic.w	r3, r3, #3
  40424c:	f1b8 0f02 	cmp.w	r8, #2
  404250:	81a3      	strh	r3, [r4, #12]
  404252:	d01d      	beq.n	404290 <setvbuf+0xac>
  404254:	ab01      	add	r3, sp, #4
  404256:	466a      	mov	r2, sp
  404258:	4621      	mov	r1, r4
  40425a:	4628      	mov	r0, r5
  40425c:	f003 f856 	bl	40730c <__swhatbuf_r>
  404260:	89a3      	ldrh	r3, [r4, #12]
  404262:	4318      	orrs	r0, r3
  404264:	81a0      	strh	r0, [r4, #12]
  404266:	2e00      	cmp	r6, #0
  404268:	d132      	bne.n	4042d0 <setvbuf+0xec>
  40426a:	9e00      	ldr	r6, [sp, #0]
  40426c:	4630      	mov	r0, r6
  40426e:	f7ff fb81 	bl	403974 <malloc>
  404272:	4607      	mov	r7, r0
  404274:	2800      	cmp	r0, #0
  404276:	d06b      	beq.n	404350 <setvbuf+0x16c>
  404278:	89a3      	ldrh	r3, [r4, #12]
  40427a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40427e:	81a3      	strh	r3, [r4, #12]
  404280:	e028      	b.n	4042d4 <setvbuf+0xf0>
  404282:	89a3      	ldrh	r3, [r4, #12]
  404284:	0599      	lsls	r1, r3, #22
  404286:	d4c7      	bmi.n	404218 <setvbuf+0x34>
  404288:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40428a:	f003 f83b 	bl	407304 <__retarget_lock_acquire_recursive>
  40428e:	e7c3      	b.n	404218 <setvbuf+0x34>
  404290:	2500      	movs	r5, #0
  404292:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404294:	2600      	movs	r6, #0
  404296:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40429a:	f043 0302 	orr.w	r3, r3, #2
  40429e:	2001      	movs	r0, #1
  4042a0:	60a6      	str	r6, [r4, #8]
  4042a2:	07ce      	lsls	r6, r1, #31
  4042a4:	81a3      	strh	r3, [r4, #12]
  4042a6:	6022      	str	r2, [r4, #0]
  4042a8:	6122      	str	r2, [r4, #16]
  4042aa:	6160      	str	r0, [r4, #20]
  4042ac:	d401      	bmi.n	4042b2 <setvbuf+0xce>
  4042ae:	0598      	lsls	r0, r3, #22
  4042b0:	d53e      	bpl.n	404330 <setvbuf+0x14c>
  4042b2:	4628      	mov	r0, r5
  4042b4:	b003      	add	sp, #12
  4042b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042ba:	6921      	ldr	r1, [r4, #16]
  4042bc:	4628      	mov	r0, r5
  4042be:	f002 fd87 	bl	406dd0 <_free_r>
  4042c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042c6:	e7bd      	b.n	404244 <setvbuf+0x60>
  4042c8:	4628      	mov	r0, r5
  4042ca:	f002 fcdf 	bl	406c8c <__sinit>
  4042ce:	e796      	b.n	4041fe <setvbuf+0x1a>
  4042d0:	2f00      	cmp	r7, #0
  4042d2:	d0cb      	beq.n	40426c <setvbuf+0x88>
  4042d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4042d6:	2b00      	cmp	r3, #0
  4042d8:	d033      	beq.n	404342 <setvbuf+0x15e>
  4042da:	9b00      	ldr	r3, [sp, #0]
  4042dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4042e0:	6027      	str	r7, [r4, #0]
  4042e2:	429e      	cmp	r6, r3
  4042e4:	bf1c      	itt	ne
  4042e6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4042ea:	81a2      	strhne	r2, [r4, #12]
  4042ec:	f1b8 0f01 	cmp.w	r8, #1
  4042f0:	bf04      	itt	eq
  4042f2:	f042 0201 	orreq.w	r2, r2, #1
  4042f6:	81a2      	strheq	r2, [r4, #12]
  4042f8:	b292      	uxth	r2, r2
  4042fa:	f012 0308 	ands.w	r3, r2, #8
  4042fe:	6127      	str	r7, [r4, #16]
  404300:	6166      	str	r6, [r4, #20]
  404302:	d00e      	beq.n	404322 <setvbuf+0x13e>
  404304:	07d1      	lsls	r1, r2, #31
  404306:	d51a      	bpl.n	40433e <setvbuf+0x15a>
  404308:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40430a:	4276      	negs	r6, r6
  40430c:	2300      	movs	r3, #0
  40430e:	f015 0501 	ands.w	r5, r5, #1
  404312:	61a6      	str	r6, [r4, #24]
  404314:	60a3      	str	r3, [r4, #8]
  404316:	d009      	beq.n	40432c <setvbuf+0x148>
  404318:	2500      	movs	r5, #0
  40431a:	4628      	mov	r0, r5
  40431c:	b003      	add	sp, #12
  40431e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404322:	60a3      	str	r3, [r4, #8]
  404324:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404326:	f015 0501 	ands.w	r5, r5, #1
  40432a:	d1f5      	bne.n	404318 <setvbuf+0x134>
  40432c:	0593      	lsls	r3, r2, #22
  40432e:	d4c0      	bmi.n	4042b2 <setvbuf+0xce>
  404330:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404332:	f002 ffe9 	bl	407308 <__retarget_lock_release_recursive>
  404336:	4628      	mov	r0, r5
  404338:	b003      	add	sp, #12
  40433a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40433e:	60a6      	str	r6, [r4, #8]
  404340:	e7f0      	b.n	404324 <setvbuf+0x140>
  404342:	4628      	mov	r0, r5
  404344:	f002 fca2 	bl	406c8c <__sinit>
  404348:	e7c7      	b.n	4042da <setvbuf+0xf6>
  40434a:	f04f 35ff 	mov.w	r5, #4294967295
  40434e:	e7b0      	b.n	4042b2 <setvbuf+0xce>
  404350:	f8dd 9000 	ldr.w	r9, [sp]
  404354:	45b1      	cmp	r9, r6
  404356:	d004      	beq.n	404362 <setvbuf+0x17e>
  404358:	4648      	mov	r0, r9
  40435a:	f7ff fb0b 	bl	403974 <malloc>
  40435e:	4607      	mov	r7, r0
  404360:	b920      	cbnz	r0, 40436c <setvbuf+0x188>
  404362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404366:	f04f 35ff 	mov.w	r5, #4294967295
  40436a:	e792      	b.n	404292 <setvbuf+0xae>
  40436c:	464e      	mov	r6, r9
  40436e:	e783      	b.n	404278 <setvbuf+0x94>
  404370:	2040000c 	.word	0x2040000c
	...

00404380 <strlen>:
  404380:	f890 f000 	pld	[r0]
  404384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404388:	f020 0107 	bic.w	r1, r0, #7
  40438c:	f06f 0c00 	mvn.w	ip, #0
  404390:	f010 0407 	ands.w	r4, r0, #7
  404394:	f891 f020 	pld	[r1, #32]
  404398:	f040 8049 	bne.w	40442e <strlen+0xae>
  40439c:	f04f 0400 	mov.w	r4, #0
  4043a0:	f06f 0007 	mvn.w	r0, #7
  4043a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4043a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4043ac:	f100 0008 	add.w	r0, r0, #8
  4043b0:	fa82 f24c 	uadd8	r2, r2, ip
  4043b4:	faa4 f28c 	sel	r2, r4, ip
  4043b8:	fa83 f34c 	uadd8	r3, r3, ip
  4043bc:	faa2 f38c 	sel	r3, r2, ip
  4043c0:	bb4b      	cbnz	r3, 404416 <strlen+0x96>
  4043c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4043c6:	fa82 f24c 	uadd8	r2, r2, ip
  4043ca:	f100 0008 	add.w	r0, r0, #8
  4043ce:	faa4 f28c 	sel	r2, r4, ip
  4043d2:	fa83 f34c 	uadd8	r3, r3, ip
  4043d6:	faa2 f38c 	sel	r3, r2, ip
  4043da:	b9e3      	cbnz	r3, 404416 <strlen+0x96>
  4043dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4043e0:	fa82 f24c 	uadd8	r2, r2, ip
  4043e4:	f100 0008 	add.w	r0, r0, #8
  4043e8:	faa4 f28c 	sel	r2, r4, ip
  4043ec:	fa83 f34c 	uadd8	r3, r3, ip
  4043f0:	faa2 f38c 	sel	r3, r2, ip
  4043f4:	b97b      	cbnz	r3, 404416 <strlen+0x96>
  4043f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4043fa:	f101 0120 	add.w	r1, r1, #32
  4043fe:	fa82 f24c 	uadd8	r2, r2, ip
  404402:	f100 0008 	add.w	r0, r0, #8
  404406:	faa4 f28c 	sel	r2, r4, ip
  40440a:	fa83 f34c 	uadd8	r3, r3, ip
  40440e:	faa2 f38c 	sel	r3, r2, ip
  404412:	2b00      	cmp	r3, #0
  404414:	d0c6      	beq.n	4043a4 <strlen+0x24>
  404416:	2a00      	cmp	r2, #0
  404418:	bf04      	itt	eq
  40441a:	3004      	addeq	r0, #4
  40441c:	461a      	moveq	r2, r3
  40441e:	ba12      	rev	r2, r2
  404420:	fab2 f282 	clz	r2, r2
  404424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40442c:	4770      	bx	lr
  40442e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404432:	f004 0503 	and.w	r5, r4, #3
  404436:	f1c4 0000 	rsb	r0, r4, #0
  40443a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40443e:	f014 0f04 	tst.w	r4, #4
  404442:	f891 f040 	pld	[r1, #64]	; 0x40
  404446:	fa0c f505 	lsl.w	r5, ip, r5
  40444a:	ea62 0205 	orn	r2, r2, r5
  40444e:	bf1c      	itt	ne
  404450:	ea63 0305 	ornne	r3, r3, r5
  404454:	4662      	movne	r2, ip
  404456:	f04f 0400 	mov.w	r4, #0
  40445a:	e7a9      	b.n	4043b0 <strlen+0x30>

0040445c <_vfprintf_r>:
  40445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404460:	b0c1      	sub	sp, #260	; 0x104
  404462:	461d      	mov	r5, r3
  404464:	468a      	mov	sl, r1
  404466:	4691      	mov	r9, r2
  404468:	4604      	mov	r4, r0
  40446a:	9008      	str	r0, [sp, #32]
  40446c:	f002 ff38 	bl	4072e0 <_localeconv_r>
  404470:	6803      	ldr	r3, [r0, #0]
  404472:	9315      	str	r3, [sp, #84]	; 0x54
  404474:	4618      	mov	r0, r3
  404476:	f7ff ff83 	bl	404380 <strlen>
  40447a:	950e      	str	r5, [sp, #56]	; 0x38
  40447c:	9014      	str	r0, [sp, #80]	; 0x50
  40447e:	b11c      	cbz	r4, 404488 <_vfprintf_r+0x2c>
  404480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404482:	2b00      	cmp	r3, #0
  404484:	f000 825f 	beq.w	404946 <_vfprintf_r+0x4ea>
  404488:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40448c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  404490:	f013 0f01 	tst.w	r3, #1
  404494:	b293      	uxth	r3, r2
  404496:	d102      	bne.n	40449e <_vfprintf_r+0x42>
  404498:	0599      	lsls	r1, r3, #22
  40449a:	f140 8275 	bpl.w	404988 <_vfprintf_r+0x52c>
  40449e:	049f      	lsls	r7, r3, #18
  4044a0:	d40a      	bmi.n	4044b8 <_vfprintf_r+0x5c>
  4044a2:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  4044a6:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  4044aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4044ae:	f8aa 300c 	strh.w	r3, [sl, #12]
  4044b2:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  4044b6:	b29b      	uxth	r3, r3
  4044b8:	071e      	lsls	r6, r3, #28
  4044ba:	f140 8223 	bpl.w	404904 <_vfprintf_r+0x4a8>
  4044be:	f8da 2010 	ldr.w	r2, [sl, #16]
  4044c2:	2a00      	cmp	r2, #0
  4044c4:	f000 821e 	beq.w	404904 <_vfprintf_r+0x4a8>
  4044c8:	f003 021a 	and.w	r2, r3, #26
  4044cc:	2a0a      	cmp	r2, #10
  4044ce:	f000 823e 	beq.w	40494e <_vfprintf_r+0x4f2>
  4044d2:	2300      	movs	r3, #0
  4044d4:	4618      	mov	r0, r3
  4044d6:	9311      	str	r3, [sp, #68]	; 0x44
  4044d8:	9313      	str	r3, [sp, #76]	; 0x4c
  4044da:	9312      	str	r3, [sp, #72]	; 0x48
  4044dc:	9325      	str	r3, [sp, #148]	; 0x94
  4044de:	9324      	str	r3, [sp, #144]	; 0x90
  4044e0:	9318      	str	r3, [sp, #96]	; 0x60
  4044e2:	9319      	str	r3, [sp, #100]	; 0x64
  4044e4:	930b      	str	r3, [sp, #44]	; 0x2c
  4044e6:	ab30      	add	r3, sp, #192	; 0xc0
  4044e8:	9323      	str	r3, [sp, #140]	; 0x8c
  4044ea:	4698      	mov	r8, r3
  4044ec:	9016      	str	r0, [sp, #88]	; 0x58
  4044ee:	9017      	str	r0, [sp, #92]	; 0x5c
  4044f0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4044f4:	f899 3000 	ldrb.w	r3, [r9]
  4044f8:	464c      	mov	r4, r9
  4044fa:	b1eb      	cbz	r3, 404538 <_vfprintf_r+0xdc>
  4044fc:	2b25      	cmp	r3, #37	; 0x25
  4044fe:	d102      	bne.n	404506 <_vfprintf_r+0xaa>
  404500:	e01a      	b.n	404538 <_vfprintf_r+0xdc>
  404502:	2b25      	cmp	r3, #37	; 0x25
  404504:	d003      	beq.n	40450e <_vfprintf_r+0xb2>
  404506:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40450a:	2b00      	cmp	r3, #0
  40450c:	d1f9      	bne.n	404502 <_vfprintf_r+0xa6>
  40450e:	eba4 0509 	sub.w	r5, r4, r9
  404512:	b18d      	cbz	r5, 404538 <_vfprintf_r+0xdc>
  404514:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404516:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404518:	f8c8 9000 	str.w	r9, [r8]
  40451c:	3301      	adds	r3, #1
  40451e:	442a      	add	r2, r5
  404520:	2b07      	cmp	r3, #7
  404522:	f8c8 5004 	str.w	r5, [r8, #4]
  404526:	9225      	str	r2, [sp, #148]	; 0x94
  404528:	9324      	str	r3, [sp, #144]	; 0x90
  40452a:	f300 8201 	bgt.w	404930 <_vfprintf_r+0x4d4>
  40452e:	f108 0808 	add.w	r8, r8, #8
  404532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404534:	442b      	add	r3, r5
  404536:	930b      	str	r3, [sp, #44]	; 0x2c
  404538:	7823      	ldrb	r3, [r4, #0]
  40453a:	2b00      	cmp	r3, #0
  40453c:	f000 83f0 	beq.w	404d20 <_vfprintf_r+0x8c4>
  404540:	2300      	movs	r3, #0
  404542:	461a      	mov	r2, r3
  404544:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404548:	4619      	mov	r1, r3
  40454a:	930c      	str	r3, [sp, #48]	; 0x30
  40454c:	469b      	mov	fp, r3
  40454e:	7866      	ldrb	r6, [r4, #1]
  404550:	f04f 33ff 	mov.w	r3, #4294967295
  404554:	f104 0901 	add.w	r9, r4, #1
  404558:	9309      	str	r3, [sp, #36]	; 0x24
  40455a:	f109 0901 	add.w	r9, r9, #1
  40455e:	f1a6 0320 	sub.w	r3, r6, #32
  404562:	2b58      	cmp	r3, #88	; 0x58
  404564:	f200 83bf 	bhi.w	404ce6 <_vfprintf_r+0x88a>
  404568:	e8df f013 	tbh	[pc, r3, lsl #1]
  40456c:	03bd02e0 	.word	0x03bd02e0
  404570:	034f03bd 	.word	0x034f03bd
  404574:	03bd03bd 	.word	0x03bd03bd
  404578:	03bd03bd 	.word	0x03bd03bd
  40457c:	03bd03bd 	.word	0x03bd03bd
  404580:	03080354 	.word	0x03080354
  404584:	021a03bd 	.word	0x021a03bd
  404588:	03bd02e8 	.word	0x03bd02e8
  40458c:	033a0303 	.word	0x033a0303
  404590:	033a033a 	.word	0x033a033a
  404594:	033a033a 	.word	0x033a033a
  404598:	033a033a 	.word	0x033a033a
  40459c:	033a033a 	.word	0x033a033a
  4045a0:	03bd03bd 	.word	0x03bd03bd
  4045a4:	03bd03bd 	.word	0x03bd03bd
  4045a8:	03bd03bd 	.word	0x03bd03bd
  4045ac:	03bd03bd 	.word	0x03bd03bd
  4045b0:	03bd03bd 	.word	0x03bd03bd
  4045b4:	03620349 	.word	0x03620349
  4045b8:	036203bd 	.word	0x036203bd
  4045bc:	03bd03bd 	.word	0x03bd03bd
  4045c0:	03bd03bd 	.word	0x03bd03bd
  4045c4:	03bd03a2 	.word	0x03bd03a2
  4045c8:	006f03bd 	.word	0x006f03bd
  4045cc:	03bd03bd 	.word	0x03bd03bd
  4045d0:	03bd03bd 	.word	0x03bd03bd
  4045d4:	005903bd 	.word	0x005903bd
  4045d8:	03bd03bd 	.word	0x03bd03bd
  4045dc:	03bd031e 	.word	0x03bd031e
  4045e0:	03bd03bd 	.word	0x03bd03bd
  4045e4:	03bd03bd 	.word	0x03bd03bd
  4045e8:	03bd03bd 	.word	0x03bd03bd
  4045ec:	03bd03bd 	.word	0x03bd03bd
  4045f0:	032403bd 	.word	0x032403bd
  4045f4:	03620273 	.word	0x03620273
  4045f8:	03620362 	.word	0x03620362
  4045fc:	027302b7 	.word	0x027302b7
  404600:	03bd03bd 	.word	0x03bd03bd
  404604:	03bd02bc 	.word	0x03bd02bc
  404608:	007102c9 	.word	0x007102c9
  40460c:	0247030d 	.word	0x0247030d
  404610:	025203bd 	.word	0x025203bd
  404614:	005b03bd 	.word	0x005b03bd
  404618:	03bd03bd 	.word	0x03bd03bd
  40461c:	021f      	.short	0x021f
  40461e:	f04b 0b10 	orr.w	fp, fp, #16
  404622:	f01b 0f20 	tst.w	fp, #32
  404626:	f040 8353 	bne.w	404cd0 <_vfprintf_r+0x874>
  40462a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40462c:	f01b 0f10 	tst.w	fp, #16
  404630:	4613      	mov	r3, r2
  404632:	f040 85b4 	bne.w	40519e <_vfprintf_r+0xd42>
  404636:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40463a:	f000 85b0 	beq.w	40519e <_vfprintf_r+0xd42>
  40463e:	8814      	ldrh	r4, [r2, #0]
  404640:	3204      	adds	r2, #4
  404642:	2500      	movs	r5, #0
  404644:	2301      	movs	r3, #1
  404646:	920e      	str	r2, [sp, #56]	; 0x38
  404648:	e014      	b.n	404674 <_vfprintf_r+0x218>
  40464a:	f04b 0b10 	orr.w	fp, fp, #16
  40464e:	f01b 0320 	ands.w	r3, fp, #32
  404652:	f040 8332 	bne.w	404cba <_vfprintf_r+0x85e>
  404656:	f01b 0210 	ands.w	r2, fp, #16
  40465a:	f040 8589 	bne.w	405170 <_vfprintf_r+0xd14>
  40465e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404662:	f000 8585 	beq.w	405170 <_vfprintf_r+0xd14>
  404666:	990e      	ldr	r1, [sp, #56]	; 0x38
  404668:	4613      	mov	r3, r2
  40466a:	460a      	mov	r2, r1
  40466c:	3204      	adds	r2, #4
  40466e:	880c      	ldrh	r4, [r1, #0]
  404670:	920e      	str	r2, [sp, #56]	; 0x38
  404672:	2500      	movs	r5, #0
  404674:	f04f 0a00 	mov.w	sl, #0
  404678:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40467c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40467e:	1c4a      	adds	r2, r1, #1
  404680:	f000 820b 	beq.w	404a9a <_vfprintf_r+0x63e>
  404684:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404688:	9206      	str	r2, [sp, #24]
  40468a:	ea54 0205 	orrs.w	r2, r4, r5
  40468e:	f040 820a 	bne.w	404aa6 <_vfprintf_r+0x64a>
  404692:	2900      	cmp	r1, #0
  404694:	f040 846f 	bne.w	404f76 <_vfprintf_r+0xb1a>
  404698:	2b00      	cmp	r3, #0
  40469a:	f040 852d 	bne.w	4050f8 <_vfprintf_r+0xc9c>
  40469e:	f01b 0301 	ands.w	r3, fp, #1
  4046a2:	930d      	str	r3, [sp, #52]	; 0x34
  4046a4:	f000 8668 	beq.w	405378 <_vfprintf_r+0xf1c>
  4046a8:	af40      	add	r7, sp, #256	; 0x100
  4046aa:	2330      	movs	r3, #48	; 0x30
  4046ac:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4046b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4046b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4046b4:	4293      	cmp	r3, r2
  4046b6:	bfb8      	it	lt
  4046b8:	4613      	movlt	r3, r2
  4046ba:	9307      	str	r3, [sp, #28]
  4046bc:	2300      	movs	r3, #0
  4046be:	9310      	str	r3, [sp, #64]	; 0x40
  4046c0:	f1ba 0f00 	cmp.w	sl, #0
  4046c4:	d002      	beq.n	4046cc <_vfprintf_r+0x270>
  4046c6:	9b07      	ldr	r3, [sp, #28]
  4046c8:	3301      	adds	r3, #1
  4046ca:	9307      	str	r3, [sp, #28]
  4046cc:	9b06      	ldr	r3, [sp, #24]
  4046ce:	f013 0302 	ands.w	r3, r3, #2
  4046d2:	930f      	str	r3, [sp, #60]	; 0x3c
  4046d4:	d002      	beq.n	4046dc <_vfprintf_r+0x280>
  4046d6:	9b07      	ldr	r3, [sp, #28]
  4046d8:	3302      	adds	r3, #2
  4046da:	9307      	str	r3, [sp, #28]
  4046dc:	9b06      	ldr	r3, [sp, #24]
  4046de:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4046e2:	f040 831b 	bne.w	404d1c <_vfprintf_r+0x8c0>
  4046e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4046e8:	9a07      	ldr	r2, [sp, #28]
  4046ea:	eba3 0b02 	sub.w	fp, r3, r2
  4046ee:	f1bb 0f00 	cmp.w	fp, #0
  4046f2:	f340 8313 	ble.w	404d1c <_vfprintf_r+0x8c0>
  4046f6:	f1bb 0f10 	cmp.w	fp, #16
  4046fa:	9925      	ldr	r1, [sp, #148]	; 0x94
  4046fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4046fe:	dd28      	ble.n	404752 <_vfprintf_r+0x2f6>
  404700:	4643      	mov	r3, r8
  404702:	2410      	movs	r4, #16
  404704:	46a8      	mov	r8, r5
  404706:	f8dd a020 	ldr.w	sl, [sp, #32]
  40470a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40470c:	e006      	b.n	40471c <_vfprintf_r+0x2c0>
  40470e:	f1ab 0b10 	sub.w	fp, fp, #16
  404712:	f1bb 0f10 	cmp.w	fp, #16
  404716:	f103 0308 	add.w	r3, r3, #8
  40471a:	dd18      	ble.n	40474e <_vfprintf_r+0x2f2>
  40471c:	3201      	adds	r2, #1
  40471e:	48b9      	ldr	r0, [pc, #740]	; (404a04 <_vfprintf_r+0x5a8>)
  404720:	9224      	str	r2, [sp, #144]	; 0x90
  404722:	3110      	adds	r1, #16
  404724:	2a07      	cmp	r2, #7
  404726:	9125      	str	r1, [sp, #148]	; 0x94
  404728:	e883 0011 	stmia.w	r3, {r0, r4}
  40472c:	ddef      	ble.n	40470e <_vfprintf_r+0x2b2>
  40472e:	aa23      	add	r2, sp, #140	; 0x8c
  404730:	4629      	mov	r1, r5
  404732:	4650      	mov	r0, sl
  404734:	f003 fc3c 	bl	407fb0 <__sprint_r>
  404738:	2800      	cmp	r0, #0
  40473a:	f040 836a 	bne.w	404e12 <_vfprintf_r+0x9b6>
  40473e:	f1ab 0b10 	sub.w	fp, fp, #16
  404742:	f1bb 0f10 	cmp.w	fp, #16
  404746:	9925      	ldr	r1, [sp, #148]	; 0x94
  404748:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40474a:	ab30      	add	r3, sp, #192	; 0xc0
  40474c:	dce6      	bgt.n	40471c <_vfprintf_r+0x2c0>
  40474e:	4645      	mov	r5, r8
  404750:	4698      	mov	r8, r3
  404752:	3201      	adds	r2, #1
  404754:	4bab      	ldr	r3, [pc, #684]	; (404a04 <_vfprintf_r+0x5a8>)
  404756:	9224      	str	r2, [sp, #144]	; 0x90
  404758:	eb0b 0401 	add.w	r4, fp, r1
  40475c:	2a07      	cmp	r2, #7
  40475e:	9425      	str	r4, [sp, #148]	; 0x94
  404760:	e888 0808 	stmia.w	r8, {r3, fp}
  404764:	f300 84cd 	bgt.w	405102 <_vfprintf_r+0xca6>
  404768:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40476c:	f108 0808 	add.w	r8, r8, #8
  404770:	f1ba 0f00 	cmp.w	sl, #0
  404774:	d00e      	beq.n	404794 <_vfprintf_r+0x338>
  404776:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404778:	3301      	adds	r3, #1
  40477a:	3401      	adds	r4, #1
  40477c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404780:	2201      	movs	r2, #1
  404782:	2b07      	cmp	r3, #7
  404784:	9425      	str	r4, [sp, #148]	; 0x94
  404786:	9324      	str	r3, [sp, #144]	; 0x90
  404788:	e888 0006 	stmia.w	r8, {r1, r2}
  40478c:	f300 840a 	bgt.w	404fa4 <_vfprintf_r+0xb48>
  404790:	f108 0808 	add.w	r8, r8, #8
  404794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404796:	b16b      	cbz	r3, 4047b4 <_vfprintf_r+0x358>
  404798:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40479a:	3301      	adds	r3, #1
  40479c:	3402      	adds	r4, #2
  40479e:	a91c      	add	r1, sp, #112	; 0x70
  4047a0:	2202      	movs	r2, #2
  4047a2:	2b07      	cmp	r3, #7
  4047a4:	9425      	str	r4, [sp, #148]	; 0x94
  4047a6:	9324      	str	r3, [sp, #144]	; 0x90
  4047a8:	e888 0006 	stmia.w	r8, {r1, r2}
  4047ac:	f300 8406 	bgt.w	404fbc <_vfprintf_r+0xb60>
  4047b0:	f108 0808 	add.w	r8, r8, #8
  4047b4:	2d80      	cmp	r5, #128	; 0x80
  4047b6:	f000 832e 	beq.w	404e16 <_vfprintf_r+0x9ba>
  4047ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4047bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4047be:	eba3 0a02 	sub.w	sl, r3, r2
  4047c2:	f1ba 0f00 	cmp.w	sl, #0
  4047c6:	dd3b      	ble.n	404840 <_vfprintf_r+0x3e4>
  4047c8:	f1ba 0f10 	cmp.w	sl, #16
  4047cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4047ce:	4d8e      	ldr	r5, [pc, #568]	; (404a08 <_vfprintf_r+0x5ac>)
  4047d0:	dd2b      	ble.n	40482a <_vfprintf_r+0x3ce>
  4047d2:	4642      	mov	r2, r8
  4047d4:	4621      	mov	r1, r4
  4047d6:	46b0      	mov	r8, r6
  4047d8:	f04f 0b10 	mov.w	fp, #16
  4047dc:	462e      	mov	r6, r5
  4047de:	9c08      	ldr	r4, [sp, #32]
  4047e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4047e2:	e006      	b.n	4047f2 <_vfprintf_r+0x396>
  4047e4:	f1aa 0a10 	sub.w	sl, sl, #16
  4047e8:	f1ba 0f10 	cmp.w	sl, #16
  4047ec:	f102 0208 	add.w	r2, r2, #8
  4047f0:	dd17      	ble.n	404822 <_vfprintf_r+0x3c6>
  4047f2:	3301      	adds	r3, #1
  4047f4:	3110      	adds	r1, #16
  4047f6:	2b07      	cmp	r3, #7
  4047f8:	9125      	str	r1, [sp, #148]	; 0x94
  4047fa:	9324      	str	r3, [sp, #144]	; 0x90
  4047fc:	e882 0840 	stmia.w	r2, {r6, fp}
  404800:	ddf0      	ble.n	4047e4 <_vfprintf_r+0x388>
  404802:	aa23      	add	r2, sp, #140	; 0x8c
  404804:	4629      	mov	r1, r5
  404806:	4620      	mov	r0, r4
  404808:	f003 fbd2 	bl	407fb0 <__sprint_r>
  40480c:	2800      	cmp	r0, #0
  40480e:	f040 8300 	bne.w	404e12 <_vfprintf_r+0x9b6>
  404812:	f1aa 0a10 	sub.w	sl, sl, #16
  404816:	f1ba 0f10 	cmp.w	sl, #16
  40481a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40481c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40481e:	aa30      	add	r2, sp, #192	; 0xc0
  404820:	dce7      	bgt.n	4047f2 <_vfprintf_r+0x396>
  404822:	4635      	mov	r5, r6
  404824:	460c      	mov	r4, r1
  404826:	4646      	mov	r6, r8
  404828:	4690      	mov	r8, r2
  40482a:	3301      	adds	r3, #1
  40482c:	4454      	add	r4, sl
  40482e:	2b07      	cmp	r3, #7
  404830:	9425      	str	r4, [sp, #148]	; 0x94
  404832:	9324      	str	r3, [sp, #144]	; 0x90
  404834:	e888 0420 	stmia.w	r8, {r5, sl}
  404838:	f300 83a9 	bgt.w	404f8e <_vfprintf_r+0xb32>
  40483c:	f108 0808 	add.w	r8, r8, #8
  404840:	9b06      	ldr	r3, [sp, #24]
  404842:	05db      	lsls	r3, r3, #23
  404844:	f100 8285 	bmi.w	404d52 <_vfprintf_r+0x8f6>
  404848:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40484a:	990d      	ldr	r1, [sp, #52]	; 0x34
  40484c:	f8c8 7000 	str.w	r7, [r8]
  404850:	3301      	adds	r3, #1
  404852:	440c      	add	r4, r1
  404854:	2b07      	cmp	r3, #7
  404856:	9425      	str	r4, [sp, #148]	; 0x94
  404858:	f8c8 1004 	str.w	r1, [r8, #4]
  40485c:	9324      	str	r3, [sp, #144]	; 0x90
  40485e:	f300 8375 	bgt.w	404f4c <_vfprintf_r+0xaf0>
  404862:	f108 0808 	add.w	r8, r8, #8
  404866:	9b06      	ldr	r3, [sp, #24]
  404868:	0759      	lsls	r1, r3, #29
  40486a:	d53b      	bpl.n	4048e4 <_vfprintf_r+0x488>
  40486c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40486e:	9a07      	ldr	r2, [sp, #28]
  404870:	1a9d      	subs	r5, r3, r2
  404872:	2d00      	cmp	r5, #0
  404874:	dd36      	ble.n	4048e4 <_vfprintf_r+0x488>
  404876:	2d10      	cmp	r5, #16
  404878:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40487a:	dd21      	ble.n	4048c0 <_vfprintf_r+0x464>
  40487c:	2610      	movs	r6, #16
  40487e:	9f08      	ldr	r7, [sp, #32]
  404880:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404884:	e004      	b.n	404890 <_vfprintf_r+0x434>
  404886:	3d10      	subs	r5, #16
  404888:	2d10      	cmp	r5, #16
  40488a:	f108 0808 	add.w	r8, r8, #8
  40488e:	dd17      	ble.n	4048c0 <_vfprintf_r+0x464>
  404890:	3301      	adds	r3, #1
  404892:	4a5c      	ldr	r2, [pc, #368]	; (404a04 <_vfprintf_r+0x5a8>)
  404894:	9324      	str	r3, [sp, #144]	; 0x90
  404896:	3410      	adds	r4, #16
  404898:	2b07      	cmp	r3, #7
  40489a:	9425      	str	r4, [sp, #148]	; 0x94
  40489c:	e888 0044 	stmia.w	r8, {r2, r6}
  4048a0:	ddf1      	ble.n	404886 <_vfprintf_r+0x42a>
  4048a2:	aa23      	add	r2, sp, #140	; 0x8c
  4048a4:	4651      	mov	r1, sl
  4048a6:	4638      	mov	r0, r7
  4048a8:	f003 fb82 	bl	407fb0 <__sprint_r>
  4048ac:	2800      	cmp	r0, #0
  4048ae:	f040 823f 	bne.w	404d30 <_vfprintf_r+0x8d4>
  4048b2:	3d10      	subs	r5, #16
  4048b4:	2d10      	cmp	r5, #16
  4048b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4048b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4048ba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4048be:	dce7      	bgt.n	404890 <_vfprintf_r+0x434>
  4048c0:	3301      	adds	r3, #1
  4048c2:	4a50      	ldr	r2, [pc, #320]	; (404a04 <_vfprintf_r+0x5a8>)
  4048c4:	9324      	str	r3, [sp, #144]	; 0x90
  4048c6:	442c      	add	r4, r5
  4048c8:	2b07      	cmp	r3, #7
  4048ca:	9425      	str	r4, [sp, #148]	; 0x94
  4048cc:	e888 0024 	stmia.w	r8, {r2, r5}
  4048d0:	dd08      	ble.n	4048e4 <_vfprintf_r+0x488>
  4048d2:	aa23      	add	r2, sp, #140	; 0x8c
  4048d4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4048d6:	9808      	ldr	r0, [sp, #32]
  4048d8:	f003 fb6a 	bl	407fb0 <__sprint_r>
  4048dc:	2800      	cmp	r0, #0
  4048de:	f040 8347 	bne.w	404f70 <_vfprintf_r+0xb14>
  4048e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4048e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4048e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4048e8:	9907      	ldr	r1, [sp, #28]
  4048ea:	428a      	cmp	r2, r1
  4048ec:	bfac      	ite	ge
  4048ee:	189b      	addge	r3, r3, r2
  4048f0:	185b      	addlt	r3, r3, r1
  4048f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4048f4:	2c00      	cmp	r4, #0
  4048f6:	f040 8333 	bne.w	404f60 <_vfprintf_r+0xb04>
  4048fa:	2300      	movs	r3, #0
  4048fc:	9324      	str	r3, [sp, #144]	; 0x90
  4048fe:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404902:	e5f7      	b.n	4044f4 <_vfprintf_r+0x98>
  404904:	4651      	mov	r1, sl
  404906:	9808      	ldr	r0, [sp, #32]
  404908:	f001 f896 	bl	405a38 <__swsetup_r>
  40490c:	2800      	cmp	r0, #0
  40490e:	d038      	beq.n	404982 <_vfprintf_r+0x526>
  404910:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404914:	07dd      	lsls	r5, r3, #31
  404916:	d404      	bmi.n	404922 <_vfprintf_r+0x4c6>
  404918:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40491c:	059c      	lsls	r4, r3, #22
  40491e:	f140 85ca 	bpl.w	4054b6 <_vfprintf_r+0x105a>
  404922:	f04f 33ff 	mov.w	r3, #4294967295
  404926:	930b      	str	r3, [sp, #44]	; 0x2c
  404928:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40492a:	b041      	add	sp, #260	; 0x104
  40492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404930:	aa23      	add	r2, sp, #140	; 0x8c
  404932:	990a      	ldr	r1, [sp, #40]	; 0x28
  404934:	9808      	ldr	r0, [sp, #32]
  404936:	f003 fb3b 	bl	407fb0 <__sprint_r>
  40493a:	2800      	cmp	r0, #0
  40493c:	f040 8318 	bne.w	404f70 <_vfprintf_r+0xb14>
  404940:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404944:	e5f5      	b.n	404532 <_vfprintf_r+0xd6>
  404946:	9808      	ldr	r0, [sp, #32]
  404948:	f002 f9a0 	bl	406c8c <__sinit>
  40494c:	e59c      	b.n	404488 <_vfprintf_r+0x2c>
  40494e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  404952:	2a00      	cmp	r2, #0
  404954:	f6ff adbd 	blt.w	4044d2 <_vfprintf_r+0x76>
  404958:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  40495c:	07d0      	lsls	r0, r2, #31
  40495e:	d405      	bmi.n	40496c <_vfprintf_r+0x510>
  404960:	0599      	lsls	r1, r3, #22
  404962:	d403      	bmi.n	40496c <_vfprintf_r+0x510>
  404964:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  404968:	f002 fcce 	bl	407308 <__retarget_lock_release_recursive>
  40496c:	462b      	mov	r3, r5
  40496e:	464a      	mov	r2, r9
  404970:	4651      	mov	r1, sl
  404972:	9808      	ldr	r0, [sp, #32]
  404974:	f001 f81e 	bl	4059b4 <__sbprintf>
  404978:	900b      	str	r0, [sp, #44]	; 0x2c
  40497a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40497c:	b041      	add	sp, #260	; 0x104
  40497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404982:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404986:	e59f      	b.n	4044c8 <_vfprintf_r+0x6c>
  404988:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40498c:	f002 fcba 	bl	407304 <__retarget_lock_acquire_recursive>
  404990:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  404994:	b293      	uxth	r3, r2
  404996:	e582      	b.n	40449e <_vfprintf_r+0x42>
  404998:	980c      	ldr	r0, [sp, #48]	; 0x30
  40499a:	930e      	str	r3, [sp, #56]	; 0x38
  40499c:	4240      	negs	r0, r0
  40499e:	900c      	str	r0, [sp, #48]	; 0x30
  4049a0:	f04b 0b04 	orr.w	fp, fp, #4
  4049a4:	f899 6000 	ldrb.w	r6, [r9]
  4049a8:	e5d7      	b.n	40455a <_vfprintf_r+0xfe>
  4049aa:	2a00      	cmp	r2, #0
  4049ac:	f040 87df 	bne.w	40596e <_vfprintf_r+0x1512>
  4049b0:	4b16      	ldr	r3, [pc, #88]	; (404a0c <_vfprintf_r+0x5b0>)
  4049b2:	9318      	str	r3, [sp, #96]	; 0x60
  4049b4:	f01b 0f20 	tst.w	fp, #32
  4049b8:	f040 84b9 	bne.w	40532e <_vfprintf_r+0xed2>
  4049bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4049be:	f01b 0f10 	tst.w	fp, #16
  4049c2:	4613      	mov	r3, r2
  4049c4:	f040 83dc 	bne.w	405180 <_vfprintf_r+0xd24>
  4049c8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4049cc:	f000 83d8 	beq.w	405180 <_vfprintf_r+0xd24>
  4049d0:	3304      	adds	r3, #4
  4049d2:	8814      	ldrh	r4, [r2, #0]
  4049d4:	930e      	str	r3, [sp, #56]	; 0x38
  4049d6:	2500      	movs	r5, #0
  4049d8:	f01b 0f01 	tst.w	fp, #1
  4049dc:	f000 8322 	beq.w	405024 <_vfprintf_r+0xbc8>
  4049e0:	ea54 0305 	orrs.w	r3, r4, r5
  4049e4:	f000 831e 	beq.w	405024 <_vfprintf_r+0xbc8>
  4049e8:	2330      	movs	r3, #48	; 0x30
  4049ea:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4049ee:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4049f2:	f04b 0b02 	orr.w	fp, fp, #2
  4049f6:	2302      	movs	r3, #2
  4049f8:	e63c      	b.n	404674 <_vfprintf_r+0x218>
  4049fa:	f04b 0b20 	orr.w	fp, fp, #32
  4049fe:	f899 6000 	ldrb.w	r6, [r9]
  404a02:	e5aa      	b.n	40455a <_vfprintf_r+0xfe>
  404a04:	004092b4 	.word	0x004092b4
  404a08:	004092c4 	.word	0x004092c4
  404a0c:	00409294 	.word	0x00409294
  404a10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404a12:	6817      	ldr	r7, [r2, #0]
  404a14:	2400      	movs	r4, #0
  404a16:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  404a1a:	1d15      	adds	r5, r2, #4
  404a1c:	2f00      	cmp	r7, #0
  404a1e:	f000 864e 	beq.w	4056be <_vfprintf_r+0x1262>
  404a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404a24:	1c53      	adds	r3, r2, #1
  404a26:	f000 85cc 	beq.w	4055c2 <_vfprintf_r+0x1166>
  404a2a:	4621      	mov	r1, r4
  404a2c:	4638      	mov	r0, r7
  404a2e:	f002 fce7 	bl	407400 <memchr>
  404a32:	2800      	cmp	r0, #0
  404a34:	f000 8697 	beq.w	405766 <_vfprintf_r+0x130a>
  404a38:	1bc3      	subs	r3, r0, r7
  404a3a:	930d      	str	r3, [sp, #52]	; 0x34
  404a3c:	9409      	str	r4, [sp, #36]	; 0x24
  404a3e:	950e      	str	r5, [sp, #56]	; 0x38
  404a40:	f8cd b018 	str.w	fp, [sp, #24]
  404a44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404a48:	9307      	str	r3, [sp, #28]
  404a4a:	9410      	str	r4, [sp, #64]	; 0x40
  404a4c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404a50:	e636      	b.n	4046c0 <_vfprintf_r+0x264>
  404a52:	2a00      	cmp	r2, #0
  404a54:	f040 8796 	bne.w	405984 <_vfprintf_r+0x1528>
  404a58:	f01b 0f20 	tst.w	fp, #32
  404a5c:	f040 845a 	bne.w	405314 <_vfprintf_r+0xeb8>
  404a60:	f01b 0f10 	tst.w	fp, #16
  404a64:	f040 83a2 	bne.w	4051ac <_vfprintf_r+0xd50>
  404a68:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404a6c:	f000 839e 	beq.w	4051ac <_vfprintf_r+0xd50>
  404a70:	990e      	ldr	r1, [sp, #56]	; 0x38
  404a72:	f9b1 4000 	ldrsh.w	r4, [r1]
  404a76:	3104      	adds	r1, #4
  404a78:	17e5      	asrs	r5, r4, #31
  404a7a:	4622      	mov	r2, r4
  404a7c:	462b      	mov	r3, r5
  404a7e:	910e      	str	r1, [sp, #56]	; 0x38
  404a80:	2a00      	cmp	r2, #0
  404a82:	f173 0300 	sbcs.w	r3, r3, #0
  404a86:	f2c0 8487 	blt.w	405398 <_vfprintf_r+0xf3c>
  404a8a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404a8c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404a90:	1c4a      	adds	r2, r1, #1
  404a92:	f04f 0301 	mov.w	r3, #1
  404a96:	f47f adf5 	bne.w	404684 <_vfprintf_r+0x228>
  404a9a:	ea54 0205 	orrs.w	r2, r4, r5
  404a9e:	f000 826c 	beq.w	404f7a <_vfprintf_r+0xb1e>
  404aa2:	f8cd b018 	str.w	fp, [sp, #24]
  404aa6:	2b01      	cmp	r3, #1
  404aa8:	f000 8308 	beq.w	4050bc <_vfprintf_r+0xc60>
  404aac:	2b02      	cmp	r3, #2
  404aae:	f040 8295 	bne.w	404fdc <_vfprintf_r+0xb80>
  404ab2:	9818      	ldr	r0, [sp, #96]	; 0x60
  404ab4:	af30      	add	r7, sp, #192	; 0xc0
  404ab6:	0923      	lsrs	r3, r4, #4
  404ab8:	f004 010f 	and.w	r1, r4, #15
  404abc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404ac0:	092a      	lsrs	r2, r5, #4
  404ac2:	461c      	mov	r4, r3
  404ac4:	4615      	mov	r5, r2
  404ac6:	5c43      	ldrb	r3, [r0, r1]
  404ac8:	f807 3d01 	strb.w	r3, [r7, #-1]!
  404acc:	ea54 0305 	orrs.w	r3, r4, r5
  404ad0:	d1f1      	bne.n	404ab6 <_vfprintf_r+0x65a>
  404ad2:	ab30      	add	r3, sp, #192	; 0xc0
  404ad4:	1bdb      	subs	r3, r3, r7
  404ad6:	930d      	str	r3, [sp, #52]	; 0x34
  404ad8:	e5ea      	b.n	4046b0 <_vfprintf_r+0x254>
  404ada:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404ade:	f899 6000 	ldrb.w	r6, [r9]
  404ae2:	e53a      	b.n	40455a <_vfprintf_r+0xfe>
  404ae4:	f899 6000 	ldrb.w	r6, [r9]
  404ae8:	2e6c      	cmp	r6, #108	; 0x6c
  404aea:	bf03      	ittte	eq
  404aec:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  404af0:	f04b 0b20 	orreq.w	fp, fp, #32
  404af4:	f109 0901 	addeq.w	r9, r9, #1
  404af8:	f04b 0b10 	orrne.w	fp, fp, #16
  404afc:	e52d      	b.n	40455a <_vfprintf_r+0xfe>
  404afe:	2a00      	cmp	r2, #0
  404b00:	f040 874c 	bne.w	40599c <_vfprintf_r+0x1540>
  404b04:	f01b 0f20 	tst.w	fp, #32
  404b08:	f040 853f 	bne.w	40558a <_vfprintf_r+0x112e>
  404b0c:	f01b 0f10 	tst.w	fp, #16
  404b10:	f040 80fc 	bne.w	404d0c <_vfprintf_r+0x8b0>
  404b14:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404b18:	f000 80f8 	beq.w	404d0c <_vfprintf_r+0x8b0>
  404b1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404b1e:	6813      	ldr	r3, [r2, #0]
  404b20:	3204      	adds	r2, #4
  404b22:	920e      	str	r2, [sp, #56]	; 0x38
  404b24:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  404b28:	801a      	strh	r2, [r3, #0]
  404b2a:	e4e3      	b.n	4044f4 <_vfprintf_r+0x98>
  404b2c:	f899 6000 	ldrb.w	r6, [r9]
  404b30:	2900      	cmp	r1, #0
  404b32:	f47f ad12 	bne.w	40455a <_vfprintf_r+0xfe>
  404b36:	2201      	movs	r2, #1
  404b38:	2120      	movs	r1, #32
  404b3a:	e50e      	b.n	40455a <_vfprintf_r+0xfe>
  404b3c:	f899 6000 	ldrb.w	r6, [r9]
  404b40:	2e2a      	cmp	r6, #42	; 0x2a
  404b42:	f109 0001 	add.w	r0, r9, #1
  404b46:	f000 86f1 	beq.w	40592c <_vfprintf_r+0x14d0>
  404b4a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404b4e:	2b09      	cmp	r3, #9
  404b50:	4681      	mov	r9, r0
  404b52:	bf98      	it	ls
  404b54:	2000      	movls	r0, #0
  404b56:	f200 863d 	bhi.w	4057d4 <_vfprintf_r+0x1378>
  404b5a:	f819 6b01 	ldrb.w	r6, [r9], #1
  404b5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404b62:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  404b66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404b6a:	2b09      	cmp	r3, #9
  404b6c:	d9f5      	bls.n	404b5a <_vfprintf_r+0x6fe>
  404b6e:	9009      	str	r0, [sp, #36]	; 0x24
  404b70:	e4f5      	b.n	40455e <_vfprintf_r+0x102>
  404b72:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404b76:	f899 6000 	ldrb.w	r6, [r9]
  404b7a:	e4ee      	b.n	40455a <_vfprintf_r+0xfe>
  404b7c:	f899 6000 	ldrb.w	r6, [r9]
  404b80:	2201      	movs	r2, #1
  404b82:	212b      	movs	r1, #43	; 0x2b
  404b84:	e4e9      	b.n	40455a <_vfprintf_r+0xfe>
  404b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404b88:	4bae      	ldr	r3, [pc, #696]	; (404e44 <_vfprintf_r+0x9e8>)
  404b8a:	6814      	ldr	r4, [r2, #0]
  404b8c:	9318      	str	r3, [sp, #96]	; 0x60
  404b8e:	2678      	movs	r6, #120	; 0x78
  404b90:	2330      	movs	r3, #48	; 0x30
  404b92:	3204      	adds	r2, #4
  404b94:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  404b98:	f04b 0b02 	orr.w	fp, fp, #2
  404b9c:	920e      	str	r2, [sp, #56]	; 0x38
  404b9e:	2500      	movs	r5, #0
  404ba0:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  404ba4:	2302      	movs	r3, #2
  404ba6:	e565      	b.n	404674 <_vfprintf_r+0x218>
  404ba8:	2a00      	cmp	r2, #0
  404baa:	f040 86e4 	bne.w	405976 <_vfprintf_r+0x151a>
  404bae:	4ba6      	ldr	r3, [pc, #664]	; (404e48 <_vfprintf_r+0x9ec>)
  404bb0:	9318      	str	r3, [sp, #96]	; 0x60
  404bb2:	e6ff      	b.n	4049b4 <_vfprintf_r+0x558>
  404bb4:	990e      	ldr	r1, [sp, #56]	; 0x38
  404bb6:	f8cd b018 	str.w	fp, [sp, #24]
  404bba:	680a      	ldr	r2, [r1, #0]
  404bbc:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404bc0:	2300      	movs	r3, #0
  404bc2:	460a      	mov	r2, r1
  404bc4:	469a      	mov	sl, r3
  404bc6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404bca:	3204      	adds	r2, #4
  404bcc:	2301      	movs	r3, #1
  404bce:	9307      	str	r3, [sp, #28]
  404bd0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  404bd4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  404bd8:	920e      	str	r2, [sp, #56]	; 0x38
  404bda:	930d      	str	r3, [sp, #52]	; 0x34
  404bdc:	af26      	add	r7, sp, #152	; 0x98
  404bde:	e575      	b.n	4046cc <_vfprintf_r+0x270>
  404be0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404be4:	2000      	movs	r0, #0
  404be6:	f819 6b01 	ldrb.w	r6, [r9], #1
  404bea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  404bee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  404bf2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  404bf6:	2b09      	cmp	r3, #9
  404bf8:	d9f5      	bls.n	404be6 <_vfprintf_r+0x78a>
  404bfa:	900c      	str	r0, [sp, #48]	; 0x30
  404bfc:	e4af      	b.n	40455e <_vfprintf_r+0x102>
  404bfe:	2a00      	cmp	r2, #0
  404c00:	f040 86c8 	bne.w	405994 <_vfprintf_r+0x1538>
  404c04:	f04b 0b10 	orr.w	fp, fp, #16
  404c08:	e726      	b.n	404a58 <_vfprintf_r+0x5fc>
  404c0a:	f04b 0b01 	orr.w	fp, fp, #1
  404c0e:	f899 6000 	ldrb.w	r6, [r9]
  404c12:	e4a2      	b.n	40455a <_vfprintf_r+0xfe>
  404c14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404c16:	6823      	ldr	r3, [r4, #0]
  404c18:	930c      	str	r3, [sp, #48]	; 0x30
  404c1a:	4618      	mov	r0, r3
  404c1c:	2800      	cmp	r0, #0
  404c1e:	4623      	mov	r3, r4
  404c20:	f103 0304 	add.w	r3, r3, #4
  404c24:	f6ff aeb8 	blt.w	404998 <_vfprintf_r+0x53c>
  404c28:	930e      	str	r3, [sp, #56]	; 0x38
  404c2a:	f899 6000 	ldrb.w	r6, [r9]
  404c2e:	e494      	b.n	40455a <_vfprintf_r+0xfe>
  404c30:	2a00      	cmp	r2, #0
  404c32:	f040 86b7 	bne.w	4059a4 <_vfprintf_r+0x1548>
  404c36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404c38:	3507      	adds	r5, #7
  404c3a:	f025 0307 	bic.w	r3, r5, #7
  404c3e:	f103 0208 	add.w	r2, r3, #8
  404c42:	920e      	str	r2, [sp, #56]	; 0x38
  404c44:	681a      	ldr	r2, [r3, #0]
  404c46:	9213      	str	r2, [sp, #76]	; 0x4c
  404c48:	685b      	ldr	r3, [r3, #4]
  404c4a:	9312      	str	r3, [sp, #72]	; 0x48
  404c4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404c4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  404c50:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404c54:	4628      	mov	r0, r5
  404c56:	4621      	mov	r1, r4
  404c58:	f04f 32ff 	mov.w	r2, #4294967295
  404c5c:	4b7b      	ldr	r3, [pc, #492]	; (404e4c <_vfprintf_r+0x9f0>)
  404c5e:	f004 f8a9 	bl	408db4 <__aeabi_dcmpun>
  404c62:	2800      	cmp	r0, #0
  404c64:	f040 83a2 	bne.w	4053ac <_vfprintf_r+0xf50>
  404c68:	4628      	mov	r0, r5
  404c6a:	4621      	mov	r1, r4
  404c6c:	f04f 32ff 	mov.w	r2, #4294967295
  404c70:	4b76      	ldr	r3, [pc, #472]	; (404e4c <_vfprintf_r+0x9f0>)
  404c72:	f004 f881 	bl	408d78 <__aeabi_dcmple>
  404c76:	2800      	cmp	r0, #0
  404c78:	f040 8398 	bne.w	4053ac <_vfprintf_r+0xf50>
  404c7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404c7e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404c82:	9912      	ldr	r1, [sp, #72]	; 0x48
  404c84:	f004 f86e 	bl	408d64 <__aeabi_dcmplt>
  404c88:	2800      	cmp	r0, #0
  404c8a:	f040 8435 	bne.w	4054f8 <_vfprintf_r+0x109c>
  404c8e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404c92:	4f6f      	ldr	r7, [pc, #444]	; (404e50 <_vfprintf_r+0x9f4>)
  404c94:	4b6f      	ldr	r3, [pc, #444]	; (404e54 <_vfprintf_r+0x9f8>)
  404c96:	2203      	movs	r2, #3
  404c98:	2100      	movs	r1, #0
  404c9a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404c9e:	9207      	str	r2, [sp, #28]
  404ca0:	9109      	str	r1, [sp, #36]	; 0x24
  404ca2:	9006      	str	r0, [sp, #24]
  404ca4:	2e47      	cmp	r6, #71	; 0x47
  404ca6:	bfd8      	it	le
  404ca8:	461f      	movle	r7, r3
  404caa:	920d      	str	r2, [sp, #52]	; 0x34
  404cac:	9110      	str	r1, [sp, #64]	; 0x40
  404cae:	e507      	b.n	4046c0 <_vfprintf_r+0x264>
  404cb0:	f04b 0b08 	orr.w	fp, fp, #8
  404cb4:	f899 6000 	ldrb.w	r6, [r9]
  404cb8:	e44f      	b.n	40455a <_vfprintf_r+0xfe>
  404cba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404cbc:	3507      	adds	r5, #7
  404cbe:	f025 0307 	bic.w	r3, r5, #7
  404cc2:	f103 0208 	add.w	r2, r3, #8
  404cc6:	e9d3 4500 	ldrd	r4, r5, [r3]
  404cca:	920e      	str	r2, [sp, #56]	; 0x38
  404ccc:	2300      	movs	r3, #0
  404cce:	e4d1      	b.n	404674 <_vfprintf_r+0x218>
  404cd0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404cd2:	3507      	adds	r5, #7
  404cd4:	f025 0307 	bic.w	r3, r5, #7
  404cd8:	f103 0208 	add.w	r2, r3, #8
  404cdc:	e9d3 4500 	ldrd	r4, r5, [r3]
  404ce0:	920e      	str	r2, [sp, #56]	; 0x38
  404ce2:	2301      	movs	r3, #1
  404ce4:	e4c6      	b.n	404674 <_vfprintf_r+0x218>
  404ce6:	2a00      	cmp	r2, #0
  404ce8:	f040 8650 	bne.w	40598c <_vfprintf_r+0x1530>
  404cec:	b1c6      	cbz	r6, 404d20 <_vfprintf_r+0x8c4>
  404cee:	2300      	movs	r3, #0
  404cf0:	2201      	movs	r2, #1
  404cf2:	469a      	mov	sl, r3
  404cf4:	9207      	str	r2, [sp, #28]
  404cf6:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  404cfa:	f8cd b018 	str.w	fp, [sp, #24]
  404cfe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404d02:	9309      	str	r3, [sp, #36]	; 0x24
  404d04:	9310      	str	r3, [sp, #64]	; 0x40
  404d06:	920d      	str	r2, [sp, #52]	; 0x34
  404d08:	af26      	add	r7, sp, #152	; 0x98
  404d0a:	e4df      	b.n	4046cc <_vfprintf_r+0x270>
  404d0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404d0e:	6813      	ldr	r3, [r2, #0]
  404d10:	3204      	adds	r2, #4
  404d12:	920e      	str	r2, [sp, #56]	; 0x38
  404d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404d16:	601a      	str	r2, [r3, #0]
  404d18:	f7ff bbec 	b.w	4044f4 <_vfprintf_r+0x98>
  404d1c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d1e:	e527      	b.n	404770 <_vfprintf_r+0x314>
  404d20:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404d22:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404d26:	2b00      	cmp	r3, #0
  404d28:	f040 8594 	bne.w	405854 <_vfprintf_r+0x13f8>
  404d2c:	2300      	movs	r3, #0
  404d2e:	9324      	str	r3, [sp, #144]	; 0x90
  404d30:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404d34:	f013 0f01 	tst.w	r3, #1
  404d38:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404d3c:	d102      	bne.n	404d44 <_vfprintf_r+0x8e8>
  404d3e:	059a      	lsls	r2, r3, #22
  404d40:	f140 8249 	bpl.w	4051d6 <_vfprintf_r+0xd7a>
  404d44:	065b      	lsls	r3, r3, #25
  404d46:	f53f adec 	bmi.w	404922 <_vfprintf_r+0x4c6>
  404d4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404d4c:	b041      	add	sp, #260	; 0x104
  404d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d52:	2e65      	cmp	r6, #101	; 0x65
  404d54:	f340 80b2 	ble.w	404ebc <_vfprintf_r+0xa60>
  404d58:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404d5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404d5e:	9912      	ldr	r1, [sp, #72]	; 0x48
  404d60:	f003 fff6 	bl	408d50 <__aeabi_dcmpeq>
  404d64:	2800      	cmp	r0, #0
  404d66:	f000 8160 	beq.w	40502a <_vfprintf_r+0xbce>
  404d6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d6c:	4a3a      	ldr	r2, [pc, #232]	; (404e58 <_vfprintf_r+0x9fc>)
  404d6e:	f8c8 2000 	str.w	r2, [r8]
  404d72:	3301      	adds	r3, #1
  404d74:	3401      	adds	r4, #1
  404d76:	2201      	movs	r2, #1
  404d78:	2b07      	cmp	r3, #7
  404d7a:	9425      	str	r4, [sp, #148]	; 0x94
  404d7c:	9324      	str	r3, [sp, #144]	; 0x90
  404d7e:	f8c8 2004 	str.w	r2, [r8, #4]
  404d82:	f300 83bf 	bgt.w	405504 <_vfprintf_r+0x10a8>
  404d86:	f108 0808 	add.w	r8, r8, #8
  404d8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404d8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d8e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d90:	4293      	cmp	r3, r2
  404d92:	db03      	blt.n	404d9c <_vfprintf_r+0x940>
  404d94:	9b06      	ldr	r3, [sp, #24]
  404d96:	07df      	lsls	r7, r3, #31
  404d98:	f57f ad65 	bpl.w	404866 <_vfprintf_r+0x40a>
  404d9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d9e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404da0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404da2:	f8c8 2000 	str.w	r2, [r8]
  404da6:	3301      	adds	r3, #1
  404da8:	440c      	add	r4, r1
  404daa:	2b07      	cmp	r3, #7
  404dac:	f8c8 1004 	str.w	r1, [r8, #4]
  404db0:	9425      	str	r4, [sp, #148]	; 0x94
  404db2:	9324      	str	r3, [sp, #144]	; 0x90
  404db4:	f300 83f8 	bgt.w	4055a8 <_vfprintf_r+0x114c>
  404db8:	f108 0808 	add.w	r8, r8, #8
  404dbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404dbe:	1e5e      	subs	r6, r3, #1
  404dc0:	2e00      	cmp	r6, #0
  404dc2:	f77f ad50 	ble.w	404866 <_vfprintf_r+0x40a>
  404dc6:	2e10      	cmp	r6, #16
  404dc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404dca:	4d24      	ldr	r5, [pc, #144]	; (404e5c <_vfprintf_r+0xa00>)
  404dcc:	f340 81dd 	ble.w	40518a <_vfprintf_r+0xd2e>
  404dd0:	2710      	movs	r7, #16
  404dd2:	f8dd a020 	ldr.w	sl, [sp, #32]
  404dd6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404dda:	e005      	b.n	404de8 <_vfprintf_r+0x98c>
  404ddc:	f108 0808 	add.w	r8, r8, #8
  404de0:	3e10      	subs	r6, #16
  404de2:	2e10      	cmp	r6, #16
  404de4:	f340 81d1 	ble.w	40518a <_vfprintf_r+0xd2e>
  404de8:	3301      	adds	r3, #1
  404dea:	3410      	adds	r4, #16
  404dec:	2b07      	cmp	r3, #7
  404dee:	9425      	str	r4, [sp, #148]	; 0x94
  404df0:	9324      	str	r3, [sp, #144]	; 0x90
  404df2:	e888 00a0 	stmia.w	r8, {r5, r7}
  404df6:	ddf1      	ble.n	404ddc <_vfprintf_r+0x980>
  404df8:	aa23      	add	r2, sp, #140	; 0x8c
  404dfa:	4659      	mov	r1, fp
  404dfc:	4650      	mov	r0, sl
  404dfe:	f003 f8d7 	bl	407fb0 <__sprint_r>
  404e02:	2800      	cmp	r0, #0
  404e04:	f040 83cd 	bne.w	4055a2 <_vfprintf_r+0x1146>
  404e08:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404e0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e0c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404e10:	e7e6      	b.n	404de0 <_vfprintf_r+0x984>
  404e12:	46aa      	mov	sl, r5
  404e14:	e78c      	b.n	404d30 <_vfprintf_r+0x8d4>
  404e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404e18:	9a07      	ldr	r2, [sp, #28]
  404e1a:	eba3 0a02 	sub.w	sl, r3, r2
  404e1e:	f1ba 0f00 	cmp.w	sl, #0
  404e22:	f77f acca 	ble.w	4047ba <_vfprintf_r+0x35e>
  404e26:	f1ba 0f10 	cmp.w	sl, #16
  404e2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e2c:	4d0b      	ldr	r5, [pc, #44]	; (404e5c <_vfprintf_r+0xa00>)
  404e2e:	dd39      	ble.n	404ea4 <_vfprintf_r+0xa48>
  404e30:	4642      	mov	r2, r8
  404e32:	4621      	mov	r1, r4
  404e34:	46b0      	mov	r8, r6
  404e36:	f04f 0b10 	mov.w	fp, #16
  404e3a:	462e      	mov	r6, r5
  404e3c:	9c08      	ldr	r4, [sp, #32]
  404e3e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404e40:	e015      	b.n	404e6e <_vfprintf_r+0xa12>
  404e42:	bf00      	nop
  404e44:	00409294 	.word	0x00409294
  404e48:	00409280 	.word	0x00409280
  404e4c:	7fefffff 	.word	0x7fefffff
  404e50:	00409274 	.word	0x00409274
  404e54:	00409270 	.word	0x00409270
  404e58:	004092b0 	.word	0x004092b0
  404e5c:	004092c4 	.word	0x004092c4
  404e60:	f1aa 0a10 	sub.w	sl, sl, #16
  404e64:	f1ba 0f10 	cmp.w	sl, #16
  404e68:	f102 0208 	add.w	r2, r2, #8
  404e6c:	dd16      	ble.n	404e9c <_vfprintf_r+0xa40>
  404e6e:	3301      	adds	r3, #1
  404e70:	3110      	adds	r1, #16
  404e72:	2b07      	cmp	r3, #7
  404e74:	9125      	str	r1, [sp, #148]	; 0x94
  404e76:	9324      	str	r3, [sp, #144]	; 0x90
  404e78:	e882 0840 	stmia.w	r2, {r6, fp}
  404e7c:	ddf0      	ble.n	404e60 <_vfprintf_r+0xa04>
  404e7e:	aa23      	add	r2, sp, #140	; 0x8c
  404e80:	4629      	mov	r1, r5
  404e82:	4620      	mov	r0, r4
  404e84:	f003 f894 	bl	407fb0 <__sprint_r>
  404e88:	2800      	cmp	r0, #0
  404e8a:	d1c2      	bne.n	404e12 <_vfprintf_r+0x9b6>
  404e8c:	f1aa 0a10 	sub.w	sl, sl, #16
  404e90:	f1ba 0f10 	cmp.w	sl, #16
  404e94:	9925      	ldr	r1, [sp, #148]	; 0x94
  404e96:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e98:	aa30      	add	r2, sp, #192	; 0xc0
  404e9a:	dce8      	bgt.n	404e6e <_vfprintf_r+0xa12>
  404e9c:	4635      	mov	r5, r6
  404e9e:	460c      	mov	r4, r1
  404ea0:	4646      	mov	r6, r8
  404ea2:	4690      	mov	r8, r2
  404ea4:	3301      	adds	r3, #1
  404ea6:	4454      	add	r4, sl
  404ea8:	2b07      	cmp	r3, #7
  404eaa:	9425      	str	r4, [sp, #148]	; 0x94
  404eac:	9324      	str	r3, [sp, #144]	; 0x90
  404eae:	e888 0420 	stmia.w	r8, {r5, sl}
  404eb2:	f300 8264 	bgt.w	40537e <_vfprintf_r+0xf22>
  404eb6:	f108 0808 	add.w	r8, r8, #8
  404eba:	e47e      	b.n	4047ba <_vfprintf_r+0x35e>
  404ebc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ebe:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404ec0:	2b01      	cmp	r3, #1
  404ec2:	f340 81fd 	ble.w	4052c0 <_vfprintf_r+0xe64>
  404ec6:	3601      	adds	r6, #1
  404ec8:	3401      	adds	r4, #1
  404eca:	2301      	movs	r3, #1
  404ecc:	2e07      	cmp	r6, #7
  404ece:	9425      	str	r4, [sp, #148]	; 0x94
  404ed0:	9624      	str	r6, [sp, #144]	; 0x90
  404ed2:	f8c8 7000 	str.w	r7, [r8]
  404ed6:	f8c8 3004 	str.w	r3, [r8, #4]
  404eda:	f300 820e 	bgt.w	4052fa <_vfprintf_r+0xe9e>
  404ede:	f108 0808 	add.w	r8, r8, #8
  404ee2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404ee6:	f8c8 3000 	str.w	r3, [r8]
  404eea:	3601      	adds	r6, #1
  404eec:	4414      	add	r4, r2
  404eee:	2e07      	cmp	r6, #7
  404ef0:	9425      	str	r4, [sp, #148]	; 0x94
  404ef2:	9624      	str	r6, [sp, #144]	; 0x90
  404ef4:	f8c8 2004 	str.w	r2, [r8, #4]
  404ef8:	f300 822e 	bgt.w	405358 <_vfprintf_r+0xefc>
  404efc:	f108 0808 	add.w	r8, r8, #8
  404f00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404f02:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404f04:	9813      	ldr	r0, [sp, #76]	; 0x4c
  404f06:	9912      	ldr	r1, [sp, #72]	; 0x48
  404f08:	f003 ff22 	bl	408d50 <__aeabi_dcmpeq>
  404f0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f0e:	2800      	cmp	r0, #0
  404f10:	f040 8106 	bne.w	405120 <_vfprintf_r+0xcc4>
  404f14:	3b01      	subs	r3, #1
  404f16:	3601      	adds	r6, #1
  404f18:	3701      	adds	r7, #1
  404f1a:	441c      	add	r4, r3
  404f1c:	2e07      	cmp	r6, #7
  404f1e:	9624      	str	r6, [sp, #144]	; 0x90
  404f20:	9425      	str	r4, [sp, #148]	; 0x94
  404f22:	f8c8 7000 	str.w	r7, [r8]
  404f26:	f8c8 3004 	str.w	r3, [r8, #4]
  404f2a:	f300 81d9 	bgt.w	4052e0 <_vfprintf_r+0xe84>
  404f2e:	f108 0808 	add.w	r8, r8, #8
  404f32:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404f34:	f8c8 2004 	str.w	r2, [r8, #4]
  404f38:	3601      	adds	r6, #1
  404f3a:	4414      	add	r4, r2
  404f3c:	ab1f      	add	r3, sp, #124	; 0x7c
  404f3e:	2e07      	cmp	r6, #7
  404f40:	9425      	str	r4, [sp, #148]	; 0x94
  404f42:	9624      	str	r6, [sp, #144]	; 0x90
  404f44:	f8c8 3000 	str.w	r3, [r8]
  404f48:	f77f ac8b 	ble.w	404862 <_vfprintf_r+0x406>
  404f4c:	aa23      	add	r2, sp, #140	; 0x8c
  404f4e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f50:	9808      	ldr	r0, [sp, #32]
  404f52:	f003 f82d 	bl	407fb0 <__sprint_r>
  404f56:	b958      	cbnz	r0, 404f70 <_vfprintf_r+0xb14>
  404f58:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f5a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404f5e:	e482      	b.n	404866 <_vfprintf_r+0x40a>
  404f60:	aa23      	add	r2, sp, #140	; 0x8c
  404f62:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f64:	9808      	ldr	r0, [sp, #32]
  404f66:	f003 f823 	bl	407fb0 <__sprint_r>
  404f6a:	2800      	cmp	r0, #0
  404f6c:	f43f acc5 	beq.w	4048fa <_vfprintf_r+0x49e>
  404f70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404f74:	e6dc      	b.n	404d30 <_vfprintf_r+0x8d4>
  404f76:	f8dd b018 	ldr.w	fp, [sp, #24]
  404f7a:	2b01      	cmp	r3, #1
  404f7c:	f000 8121 	beq.w	4051c2 <_vfprintf_r+0xd66>
  404f80:	2b02      	cmp	r3, #2
  404f82:	d127      	bne.n	404fd4 <_vfprintf_r+0xb78>
  404f84:	f8cd b018 	str.w	fp, [sp, #24]
  404f88:	2400      	movs	r4, #0
  404f8a:	2500      	movs	r5, #0
  404f8c:	e591      	b.n	404ab2 <_vfprintf_r+0x656>
  404f8e:	aa23      	add	r2, sp, #140	; 0x8c
  404f90:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f92:	9808      	ldr	r0, [sp, #32]
  404f94:	f003 f80c 	bl	407fb0 <__sprint_r>
  404f98:	2800      	cmp	r0, #0
  404f9a:	d1e9      	bne.n	404f70 <_vfprintf_r+0xb14>
  404f9c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f9e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404fa2:	e44d      	b.n	404840 <_vfprintf_r+0x3e4>
  404fa4:	aa23      	add	r2, sp, #140	; 0x8c
  404fa6:	990a      	ldr	r1, [sp, #40]	; 0x28
  404fa8:	9808      	ldr	r0, [sp, #32]
  404faa:	f003 f801 	bl	407fb0 <__sprint_r>
  404fae:	2800      	cmp	r0, #0
  404fb0:	d1de      	bne.n	404f70 <_vfprintf_r+0xb14>
  404fb2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404fb4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404fb8:	f7ff bbec 	b.w	404794 <_vfprintf_r+0x338>
  404fbc:	aa23      	add	r2, sp, #140	; 0x8c
  404fbe:	990a      	ldr	r1, [sp, #40]	; 0x28
  404fc0:	9808      	ldr	r0, [sp, #32]
  404fc2:	f002 fff5 	bl	407fb0 <__sprint_r>
  404fc6:	2800      	cmp	r0, #0
  404fc8:	d1d2      	bne.n	404f70 <_vfprintf_r+0xb14>
  404fca:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404fcc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404fd0:	f7ff bbf0 	b.w	4047b4 <_vfprintf_r+0x358>
  404fd4:	f8cd b018 	str.w	fp, [sp, #24]
  404fd8:	2400      	movs	r4, #0
  404fda:	2500      	movs	r5, #0
  404fdc:	a930      	add	r1, sp, #192	; 0xc0
  404fde:	e000      	b.n	404fe2 <_vfprintf_r+0xb86>
  404fe0:	4639      	mov	r1, r7
  404fe2:	08e2      	lsrs	r2, r4, #3
  404fe4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404fe8:	08e8      	lsrs	r0, r5, #3
  404fea:	f004 0307 	and.w	r3, r4, #7
  404fee:	4605      	mov	r5, r0
  404ff0:	4614      	mov	r4, r2
  404ff2:	3330      	adds	r3, #48	; 0x30
  404ff4:	ea54 0205 	orrs.w	r2, r4, r5
  404ff8:	f801 3c01 	strb.w	r3, [r1, #-1]
  404ffc:	f101 37ff 	add.w	r7, r1, #4294967295
  405000:	d1ee      	bne.n	404fe0 <_vfprintf_r+0xb84>
  405002:	9a06      	ldr	r2, [sp, #24]
  405004:	07d2      	lsls	r2, r2, #31
  405006:	f57f ad64 	bpl.w	404ad2 <_vfprintf_r+0x676>
  40500a:	2b30      	cmp	r3, #48	; 0x30
  40500c:	f43f ad61 	beq.w	404ad2 <_vfprintf_r+0x676>
  405010:	2330      	movs	r3, #48	; 0x30
  405012:	3902      	subs	r1, #2
  405014:	f807 3c01 	strb.w	r3, [r7, #-1]
  405018:	ab30      	add	r3, sp, #192	; 0xc0
  40501a:	1a5b      	subs	r3, r3, r1
  40501c:	930d      	str	r3, [sp, #52]	; 0x34
  40501e:	460f      	mov	r7, r1
  405020:	f7ff bb46 	b.w	4046b0 <_vfprintf_r+0x254>
  405024:	2302      	movs	r3, #2
  405026:	f7ff bb25 	b.w	404674 <_vfprintf_r+0x218>
  40502a:	991d      	ldr	r1, [sp, #116]	; 0x74
  40502c:	2900      	cmp	r1, #0
  40502e:	f340 8274 	ble.w	40551a <_vfprintf_r+0x10be>
  405032:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405034:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405036:	4293      	cmp	r3, r2
  405038:	bfa8      	it	ge
  40503a:	4613      	movge	r3, r2
  40503c:	2b00      	cmp	r3, #0
  40503e:	461e      	mov	r6, r3
  405040:	dd0d      	ble.n	40505e <_vfprintf_r+0xc02>
  405042:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405044:	f8c8 7000 	str.w	r7, [r8]
  405048:	3301      	adds	r3, #1
  40504a:	4434      	add	r4, r6
  40504c:	2b07      	cmp	r3, #7
  40504e:	9425      	str	r4, [sp, #148]	; 0x94
  405050:	f8c8 6004 	str.w	r6, [r8, #4]
  405054:	9324      	str	r3, [sp, #144]	; 0x90
  405056:	f300 8324 	bgt.w	4056a2 <_vfprintf_r+0x1246>
  40505a:	f108 0808 	add.w	r8, r8, #8
  40505e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405060:	2e00      	cmp	r6, #0
  405062:	bfa8      	it	ge
  405064:	1b9b      	subge	r3, r3, r6
  405066:	2b00      	cmp	r3, #0
  405068:	461e      	mov	r6, r3
  40506a:	f340 80d0 	ble.w	40520e <_vfprintf_r+0xdb2>
  40506e:	2e10      	cmp	r6, #16
  405070:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405072:	4dc0      	ldr	r5, [pc, #768]	; (405374 <_vfprintf_r+0xf18>)
  405074:	f340 80b7 	ble.w	4051e6 <_vfprintf_r+0xd8a>
  405078:	4622      	mov	r2, r4
  40507a:	f04f 0a10 	mov.w	sl, #16
  40507e:	f8dd b020 	ldr.w	fp, [sp, #32]
  405082:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405084:	e005      	b.n	405092 <_vfprintf_r+0xc36>
  405086:	f108 0808 	add.w	r8, r8, #8
  40508a:	3e10      	subs	r6, #16
  40508c:	2e10      	cmp	r6, #16
  40508e:	f340 80a9 	ble.w	4051e4 <_vfprintf_r+0xd88>
  405092:	3301      	adds	r3, #1
  405094:	3210      	adds	r2, #16
  405096:	2b07      	cmp	r3, #7
  405098:	9225      	str	r2, [sp, #148]	; 0x94
  40509a:	9324      	str	r3, [sp, #144]	; 0x90
  40509c:	e888 0420 	stmia.w	r8, {r5, sl}
  4050a0:	ddf1      	ble.n	405086 <_vfprintf_r+0xc2a>
  4050a2:	aa23      	add	r2, sp, #140	; 0x8c
  4050a4:	4621      	mov	r1, r4
  4050a6:	4658      	mov	r0, fp
  4050a8:	f002 ff82 	bl	407fb0 <__sprint_r>
  4050ac:	2800      	cmp	r0, #0
  4050ae:	f040 8324 	bne.w	4056fa <_vfprintf_r+0x129e>
  4050b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4050b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050b6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4050ba:	e7e6      	b.n	40508a <_vfprintf_r+0xc2e>
  4050bc:	2d00      	cmp	r5, #0
  4050be:	bf08      	it	eq
  4050c0:	2c0a      	cmpeq	r4, #10
  4050c2:	d37c      	bcc.n	4051be <_vfprintf_r+0xd62>
  4050c4:	af30      	add	r7, sp, #192	; 0xc0
  4050c6:	4620      	mov	r0, r4
  4050c8:	4629      	mov	r1, r5
  4050ca:	220a      	movs	r2, #10
  4050cc:	2300      	movs	r3, #0
  4050ce:	f003 feaf 	bl	408e30 <__aeabi_uldivmod>
  4050d2:	3230      	adds	r2, #48	; 0x30
  4050d4:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4050d8:	4620      	mov	r0, r4
  4050da:	4629      	mov	r1, r5
  4050dc:	2300      	movs	r3, #0
  4050de:	220a      	movs	r2, #10
  4050e0:	f003 fea6 	bl	408e30 <__aeabi_uldivmod>
  4050e4:	4604      	mov	r4, r0
  4050e6:	460d      	mov	r5, r1
  4050e8:	ea54 0305 	orrs.w	r3, r4, r5
  4050ec:	d1eb      	bne.n	4050c6 <_vfprintf_r+0xc6a>
  4050ee:	ab30      	add	r3, sp, #192	; 0xc0
  4050f0:	1bdb      	subs	r3, r3, r7
  4050f2:	930d      	str	r3, [sp, #52]	; 0x34
  4050f4:	f7ff badc 	b.w	4046b0 <_vfprintf_r+0x254>
  4050f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050fa:	930d      	str	r3, [sp, #52]	; 0x34
  4050fc:	af30      	add	r7, sp, #192	; 0xc0
  4050fe:	f7ff bad7 	b.w	4046b0 <_vfprintf_r+0x254>
  405102:	aa23      	add	r2, sp, #140	; 0x8c
  405104:	990a      	ldr	r1, [sp, #40]	; 0x28
  405106:	9808      	ldr	r0, [sp, #32]
  405108:	f002 ff52 	bl	407fb0 <__sprint_r>
  40510c:	2800      	cmp	r0, #0
  40510e:	f47f af2f 	bne.w	404f70 <_vfprintf_r+0xb14>
  405112:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405116:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405118:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40511c:	f7ff bb28 	b.w	404770 <_vfprintf_r+0x314>
  405120:	1e5f      	subs	r7, r3, #1
  405122:	2f00      	cmp	r7, #0
  405124:	f77f af05 	ble.w	404f32 <_vfprintf_r+0xad6>
  405128:	2f10      	cmp	r7, #16
  40512a:	4d92      	ldr	r5, [pc, #584]	; (405374 <_vfprintf_r+0xf18>)
  40512c:	f340 810a 	ble.w	405344 <_vfprintf_r+0xee8>
  405130:	f04f 0a10 	mov.w	sl, #16
  405134:	f8dd b020 	ldr.w	fp, [sp, #32]
  405138:	e005      	b.n	405146 <_vfprintf_r+0xcea>
  40513a:	f108 0808 	add.w	r8, r8, #8
  40513e:	3f10      	subs	r7, #16
  405140:	2f10      	cmp	r7, #16
  405142:	f340 80ff 	ble.w	405344 <_vfprintf_r+0xee8>
  405146:	3601      	adds	r6, #1
  405148:	3410      	adds	r4, #16
  40514a:	2e07      	cmp	r6, #7
  40514c:	9425      	str	r4, [sp, #148]	; 0x94
  40514e:	9624      	str	r6, [sp, #144]	; 0x90
  405150:	e888 0420 	stmia.w	r8, {r5, sl}
  405154:	ddf1      	ble.n	40513a <_vfprintf_r+0xcde>
  405156:	aa23      	add	r2, sp, #140	; 0x8c
  405158:	990a      	ldr	r1, [sp, #40]	; 0x28
  40515a:	4658      	mov	r0, fp
  40515c:	f002 ff28 	bl	407fb0 <__sprint_r>
  405160:	2800      	cmp	r0, #0
  405162:	f47f af05 	bne.w	404f70 <_vfprintf_r+0xb14>
  405166:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405168:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40516a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40516e:	e7e6      	b.n	40513e <_vfprintf_r+0xce2>
  405170:	990e      	ldr	r1, [sp, #56]	; 0x38
  405172:	460a      	mov	r2, r1
  405174:	3204      	adds	r2, #4
  405176:	680c      	ldr	r4, [r1, #0]
  405178:	920e      	str	r2, [sp, #56]	; 0x38
  40517a:	2500      	movs	r5, #0
  40517c:	f7ff ba7a 	b.w	404674 <_vfprintf_r+0x218>
  405180:	681c      	ldr	r4, [r3, #0]
  405182:	3304      	adds	r3, #4
  405184:	930e      	str	r3, [sp, #56]	; 0x38
  405186:	2500      	movs	r5, #0
  405188:	e426      	b.n	4049d8 <_vfprintf_r+0x57c>
  40518a:	3301      	adds	r3, #1
  40518c:	4434      	add	r4, r6
  40518e:	2b07      	cmp	r3, #7
  405190:	9425      	str	r4, [sp, #148]	; 0x94
  405192:	9324      	str	r3, [sp, #144]	; 0x90
  405194:	e888 0060 	stmia.w	r8, {r5, r6}
  405198:	f77f ab63 	ble.w	404862 <_vfprintf_r+0x406>
  40519c:	e6d6      	b.n	404f4c <_vfprintf_r+0xaf0>
  40519e:	3204      	adds	r2, #4
  4051a0:	681c      	ldr	r4, [r3, #0]
  4051a2:	920e      	str	r2, [sp, #56]	; 0x38
  4051a4:	2301      	movs	r3, #1
  4051a6:	2500      	movs	r5, #0
  4051a8:	f7ff ba64 	b.w	404674 <_vfprintf_r+0x218>
  4051ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4051ae:	6814      	ldr	r4, [r2, #0]
  4051b0:	4613      	mov	r3, r2
  4051b2:	3304      	adds	r3, #4
  4051b4:	17e5      	asrs	r5, r4, #31
  4051b6:	930e      	str	r3, [sp, #56]	; 0x38
  4051b8:	4622      	mov	r2, r4
  4051ba:	462b      	mov	r3, r5
  4051bc:	e460      	b.n	404a80 <_vfprintf_r+0x624>
  4051be:	f8dd b018 	ldr.w	fp, [sp, #24]
  4051c2:	f8cd b018 	str.w	fp, [sp, #24]
  4051c6:	af40      	add	r7, sp, #256	; 0x100
  4051c8:	3430      	adds	r4, #48	; 0x30
  4051ca:	2301      	movs	r3, #1
  4051cc:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4051d0:	930d      	str	r3, [sp, #52]	; 0x34
  4051d2:	f7ff ba6d 	b.w	4046b0 <_vfprintf_r+0x254>
  4051d6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4051da:	f002 f895 	bl	407308 <__retarget_lock_release_recursive>
  4051de:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4051e2:	e5af      	b.n	404d44 <_vfprintf_r+0x8e8>
  4051e4:	4614      	mov	r4, r2
  4051e6:	3301      	adds	r3, #1
  4051e8:	4434      	add	r4, r6
  4051ea:	2b07      	cmp	r3, #7
  4051ec:	9425      	str	r4, [sp, #148]	; 0x94
  4051ee:	9324      	str	r3, [sp, #144]	; 0x90
  4051f0:	e888 0060 	stmia.w	r8, {r5, r6}
  4051f4:	f340 816d 	ble.w	4054d2 <_vfprintf_r+0x1076>
  4051f8:	aa23      	add	r2, sp, #140	; 0x8c
  4051fa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4051fc:	9808      	ldr	r0, [sp, #32]
  4051fe:	f002 fed7 	bl	407fb0 <__sprint_r>
  405202:	2800      	cmp	r0, #0
  405204:	f47f aeb4 	bne.w	404f70 <_vfprintf_r+0xb14>
  405208:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40520a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40520e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405210:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405212:	4293      	cmp	r3, r2
  405214:	f280 8158 	bge.w	4054c8 <_vfprintf_r+0x106c>
  405218:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40521a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40521c:	9915      	ldr	r1, [sp, #84]	; 0x54
  40521e:	f8c8 1000 	str.w	r1, [r8]
  405222:	3201      	adds	r2, #1
  405224:	4404      	add	r4, r0
  405226:	2a07      	cmp	r2, #7
  405228:	9425      	str	r4, [sp, #148]	; 0x94
  40522a:	f8c8 0004 	str.w	r0, [r8, #4]
  40522e:	9224      	str	r2, [sp, #144]	; 0x90
  405230:	f300 8152 	bgt.w	4054d8 <_vfprintf_r+0x107c>
  405234:	f108 0808 	add.w	r8, r8, #8
  405238:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40523a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40523c:	1ad3      	subs	r3, r2, r3
  40523e:	1a56      	subs	r6, r2, r1
  405240:	429e      	cmp	r6, r3
  405242:	bfa8      	it	ge
  405244:	461e      	movge	r6, r3
  405246:	2e00      	cmp	r6, #0
  405248:	dd0e      	ble.n	405268 <_vfprintf_r+0xe0c>
  40524a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40524c:	f8c8 6004 	str.w	r6, [r8, #4]
  405250:	3201      	adds	r2, #1
  405252:	440f      	add	r7, r1
  405254:	4434      	add	r4, r6
  405256:	2a07      	cmp	r2, #7
  405258:	f8c8 7000 	str.w	r7, [r8]
  40525c:	9425      	str	r4, [sp, #148]	; 0x94
  40525e:	9224      	str	r2, [sp, #144]	; 0x90
  405260:	f300 823c 	bgt.w	4056dc <_vfprintf_r+0x1280>
  405264:	f108 0808 	add.w	r8, r8, #8
  405268:	2e00      	cmp	r6, #0
  40526a:	bfac      	ite	ge
  40526c:	1b9e      	subge	r6, r3, r6
  40526e:	461e      	movlt	r6, r3
  405270:	2e00      	cmp	r6, #0
  405272:	f77f aaf8 	ble.w	404866 <_vfprintf_r+0x40a>
  405276:	2e10      	cmp	r6, #16
  405278:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40527a:	4d3e      	ldr	r5, [pc, #248]	; (405374 <_vfprintf_r+0xf18>)
  40527c:	dd85      	ble.n	40518a <_vfprintf_r+0xd2e>
  40527e:	2710      	movs	r7, #16
  405280:	f8dd a020 	ldr.w	sl, [sp, #32]
  405284:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405288:	e005      	b.n	405296 <_vfprintf_r+0xe3a>
  40528a:	f108 0808 	add.w	r8, r8, #8
  40528e:	3e10      	subs	r6, #16
  405290:	2e10      	cmp	r6, #16
  405292:	f77f af7a 	ble.w	40518a <_vfprintf_r+0xd2e>
  405296:	3301      	adds	r3, #1
  405298:	3410      	adds	r4, #16
  40529a:	2b07      	cmp	r3, #7
  40529c:	9425      	str	r4, [sp, #148]	; 0x94
  40529e:	9324      	str	r3, [sp, #144]	; 0x90
  4052a0:	e888 00a0 	stmia.w	r8, {r5, r7}
  4052a4:	ddf1      	ble.n	40528a <_vfprintf_r+0xe2e>
  4052a6:	aa23      	add	r2, sp, #140	; 0x8c
  4052a8:	4659      	mov	r1, fp
  4052aa:	4650      	mov	r0, sl
  4052ac:	f002 fe80 	bl	407fb0 <__sprint_r>
  4052b0:	2800      	cmp	r0, #0
  4052b2:	f040 8176 	bne.w	4055a2 <_vfprintf_r+0x1146>
  4052b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4052b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4052ba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4052be:	e7e6      	b.n	40528e <_vfprintf_r+0xe32>
  4052c0:	9b06      	ldr	r3, [sp, #24]
  4052c2:	07d8      	lsls	r0, r3, #31
  4052c4:	f53f adff 	bmi.w	404ec6 <_vfprintf_r+0xa6a>
  4052c8:	3601      	adds	r6, #1
  4052ca:	3401      	adds	r4, #1
  4052cc:	2301      	movs	r3, #1
  4052ce:	2e07      	cmp	r6, #7
  4052d0:	9425      	str	r4, [sp, #148]	; 0x94
  4052d2:	9624      	str	r6, [sp, #144]	; 0x90
  4052d4:	f8c8 7000 	str.w	r7, [r8]
  4052d8:	f8c8 3004 	str.w	r3, [r8, #4]
  4052dc:	f77f ae27 	ble.w	404f2e <_vfprintf_r+0xad2>
  4052e0:	aa23      	add	r2, sp, #140	; 0x8c
  4052e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4052e4:	9808      	ldr	r0, [sp, #32]
  4052e6:	f002 fe63 	bl	407fb0 <__sprint_r>
  4052ea:	2800      	cmp	r0, #0
  4052ec:	f47f ae40 	bne.w	404f70 <_vfprintf_r+0xb14>
  4052f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4052f2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4052f4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4052f8:	e61b      	b.n	404f32 <_vfprintf_r+0xad6>
  4052fa:	aa23      	add	r2, sp, #140	; 0x8c
  4052fc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4052fe:	9808      	ldr	r0, [sp, #32]
  405300:	f002 fe56 	bl	407fb0 <__sprint_r>
  405304:	2800      	cmp	r0, #0
  405306:	f47f ae33 	bne.w	404f70 <_vfprintf_r+0xb14>
  40530a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40530c:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40530e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405312:	e5e6      	b.n	404ee2 <_vfprintf_r+0xa86>
  405314:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405316:	3507      	adds	r5, #7
  405318:	f025 0507 	bic.w	r5, r5, #7
  40531c:	e9d5 2300 	ldrd	r2, r3, [r5]
  405320:	f105 0108 	add.w	r1, r5, #8
  405324:	910e      	str	r1, [sp, #56]	; 0x38
  405326:	4614      	mov	r4, r2
  405328:	461d      	mov	r5, r3
  40532a:	f7ff bba9 	b.w	404a80 <_vfprintf_r+0x624>
  40532e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405330:	3507      	adds	r5, #7
  405332:	f025 0307 	bic.w	r3, r5, #7
  405336:	f103 0208 	add.w	r2, r3, #8
  40533a:	920e      	str	r2, [sp, #56]	; 0x38
  40533c:	e9d3 4500 	ldrd	r4, r5, [r3]
  405340:	f7ff bb4a 	b.w	4049d8 <_vfprintf_r+0x57c>
  405344:	3601      	adds	r6, #1
  405346:	443c      	add	r4, r7
  405348:	2e07      	cmp	r6, #7
  40534a:	9425      	str	r4, [sp, #148]	; 0x94
  40534c:	9624      	str	r6, [sp, #144]	; 0x90
  40534e:	e888 00a0 	stmia.w	r8, {r5, r7}
  405352:	f77f adec 	ble.w	404f2e <_vfprintf_r+0xad2>
  405356:	e7c3      	b.n	4052e0 <_vfprintf_r+0xe84>
  405358:	aa23      	add	r2, sp, #140	; 0x8c
  40535a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40535c:	9808      	ldr	r0, [sp, #32]
  40535e:	f002 fe27 	bl	407fb0 <__sprint_r>
  405362:	2800      	cmp	r0, #0
  405364:	f47f ae04 	bne.w	404f70 <_vfprintf_r+0xb14>
  405368:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40536a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40536c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405370:	e5c6      	b.n	404f00 <_vfprintf_r+0xaa4>
  405372:	bf00      	nop
  405374:	004092c4 	.word	0x004092c4
  405378:	af30      	add	r7, sp, #192	; 0xc0
  40537a:	f7ff b999 	b.w	4046b0 <_vfprintf_r+0x254>
  40537e:	aa23      	add	r2, sp, #140	; 0x8c
  405380:	990a      	ldr	r1, [sp, #40]	; 0x28
  405382:	9808      	ldr	r0, [sp, #32]
  405384:	f002 fe14 	bl	407fb0 <__sprint_r>
  405388:	2800      	cmp	r0, #0
  40538a:	f47f adf1 	bne.w	404f70 <_vfprintf_r+0xb14>
  40538e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405390:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405394:	f7ff ba11 	b.w	4047ba <_vfprintf_r+0x35e>
  405398:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40539c:	4264      	negs	r4, r4
  40539e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4053a2:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4053a6:	2301      	movs	r3, #1
  4053a8:	f7ff b968 	b.w	40467c <_vfprintf_r+0x220>
  4053ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  4053ae:	4622      	mov	r2, r4
  4053b0:	4620      	mov	r0, r4
  4053b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4053b4:	4623      	mov	r3, r4
  4053b6:	4621      	mov	r1, r4
  4053b8:	f003 fcfc 	bl	408db4 <__aeabi_dcmpun>
  4053bc:	2800      	cmp	r0, #0
  4053be:	f040 828c 	bne.w	4058da <_vfprintf_r+0x147e>
  4053c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4053c4:	3301      	adds	r3, #1
  4053c6:	f026 0320 	bic.w	r3, r6, #32
  4053ca:	930d      	str	r3, [sp, #52]	; 0x34
  4053cc:	f000 8091 	beq.w	4054f2 <_vfprintf_r+0x1096>
  4053d0:	2b47      	cmp	r3, #71	; 0x47
  4053d2:	d104      	bne.n	4053de <_vfprintf_r+0xf82>
  4053d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4053d6:	2b00      	cmp	r3, #0
  4053d8:	bf08      	it	eq
  4053da:	2301      	moveq	r3, #1
  4053dc:	9309      	str	r3, [sp, #36]	; 0x24
  4053de:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4053e2:	9306      	str	r3, [sp, #24]
  4053e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4053e6:	f1b3 0a00 	subs.w	sl, r3, #0
  4053ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4053ec:	9307      	str	r3, [sp, #28]
  4053ee:	bfbb      	ittet	lt
  4053f0:	4653      	movlt	r3, sl
  4053f2:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  4053f6:	2300      	movge	r3, #0
  4053f8:	232d      	movlt	r3, #45	; 0x2d
  4053fa:	2e66      	cmp	r6, #102	; 0x66
  4053fc:	930f      	str	r3, [sp, #60]	; 0x3c
  4053fe:	f000 817f 	beq.w	405700 <_vfprintf_r+0x12a4>
  405402:	2e46      	cmp	r6, #70	; 0x46
  405404:	f000 81d4 	beq.w	4057b0 <_vfprintf_r+0x1354>
  405408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40540a:	9a07      	ldr	r2, [sp, #28]
  40540c:	2b45      	cmp	r3, #69	; 0x45
  40540e:	bf0c      	ite	eq
  405410:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  405412:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  405414:	a821      	add	r0, sp, #132	; 0x84
  405416:	a91e      	add	r1, sp, #120	; 0x78
  405418:	bf08      	it	eq
  40541a:	1c5d      	addeq	r5, r3, #1
  40541c:	9004      	str	r0, [sp, #16]
  40541e:	9103      	str	r1, [sp, #12]
  405420:	a81d      	add	r0, sp, #116	; 0x74
  405422:	2102      	movs	r1, #2
  405424:	9002      	str	r0, [sp, #8]
  405426:	4653      	mov	r3, sl
  405428:	9501      	str	r5, [sp, #4]
  40542a:	9100      	str	r1, [sp, #0]
  40542c:	9808      	ldr	r0, [sp, #32]
  40542e:	f000 fc0b 	bl	405c48 <_dtoa_r>
  405432:	2e67      	cmp	r6, #103	; 0x67
  405434:	4607      	mov	r7, r0
  405436:	f040 81af 	bne.w	405798 <_vfprintf_r+0x133c>
  40543a:	f01b 0f01 	tst.w	fp, #1
  40543e:	f000 8213 	beq.w	405868 <_vfprintf_r+0x140c>
  405442:	197c      	adds	r4, r7, r5
  405444:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405446:	9807      	ldr	r0, [sp, #28]
  405448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40544a:	4651      	mov	r1, sl
  40544c:	f003 fc80 	bl	408d50 <__aeabi_dcmpeq>
  405450:	2800      	cmp	r0, #0
  405452:	f040 8132 	bne.w	4056ba <_vfprintf_r+0x125e>
  405456:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405458:	42a3      	cmp	r3, r4
  40545a:	d206      	bcs.n	40546a <_vfprintf_r+0x100e>
  40545c:	2130      	movs	r1, #48	; 0x30
  40545e:	1c5a      	adds	r2, r3, #1
  405460:	9221      	str	r2, [sp, #132]	; 0x84
  405462:	7019      	strb	r1, [r3, #0]
  405464:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405466:	429c      	cmp	r4, r3
  405468:	d8f9      	bhi.n	40545e <_vfprintf_r+0x1002>
  40546a:	1bdb      	subs	r3, r3, r7
  40546c:	9311      	str	r3, [sp, #68]	; 0x44
  40546e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405470:	2b47      	cmp	r3, #71	; 0x47
  405472:	f000 80b9 	beq.w	4055e8 <_vfprintf_r+0x118c>
  405476:	2e65      	cmp	r6, #101	; 0x65
  405478:	f340 8276 	ble.w	405968 <_vfprintf_r+0x150c>
  40547c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40547e:	9310      	str	r3, [sp, #64]	; 0x40
  405480:	2e66      	cmp	r6, #102	; 0x66
  405482:	f000 8162 	beq.w	40574a <_vfprintf_r+0x12ee>
  405486:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405488:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40548a:	4619      	mov	r1, r3
  40548c:	4291      	cmp	r1, r2
  40548e:	f300 814f 	bgt.w	405730 <_vfprintf_r+0x12d4>
  405492:	f01b 0f01 	tst.w	fp, #1
  405496:	f040 8209 	bne.w	4058ac <_vfprintf_r+0x1450>
  40549a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40549e:	9307      	str	r3, [sp, #28]
  4054a0:	920d      	str	r2, [sp, #52]	; 0x34
  4054a2:	2667      	movs	r6, #103	; 0x67
  4054a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4054a6:	2b00      	cmp	r3, #0
  4054a8:	f040 8096 	bne.w	4055d8 <_vfprintf_r+0x117c>
  4054ac:	9309      	str	r3, [sp, #36]	; 0x24
  4054ae:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4054b2:	f7ff b905 	b.w	4046c0 <_vfprintf_r+0x264>
  4054b6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  4054ba:	f001 ff25 	bl	407308 <__retarget_lock_release_recursive>
  4054be:	f04f 33ff 	mov.w	r3, #4294967295
  4054c2:	930b      	str	r3, [sp, #44]	; 0x2c
  4054c4:	f7ff ba30 	b.w	404928 <_vfprintf_r+0x4cc>
  4054c8:	9a06      	ldr	r2, [sp, #24]
  4054ca:	07d5      	lsls	r5, r2, #31
  4054cc:	f57f aeb4 	bpl.w	405238 <_vfprintf_r+0xddc>
  4054d0:	e6a2      	b.n	405218 <_vfprintf_r+0xdbc>
  4054d2:	f108 0808 	add.w	r8, r8, #8
  4054d6:	e69a      	b.n	40520e <_vfprintf_r+0xdb2>
  4054d8:	aa23      	add	r2, sp, #140	; 0x8c
  4054da:	990a      	ldr	r1, [sp, #40]	; 0x28
  4054dc:	9808      	ldr	r0, [sp, #32]
  4054de:	f002 fd67 	bl	407fb0 <__sprint_r>
  4054e2:	2800      	cmp	r0, #0
  4054e4:	f47f ad44 	bne.w	404f70 <_vfprintf_r+0xb14>
  4054e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4054ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4054ec:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4054f0:	e6a2      	b.n	405238 <_vfprintf_r+0xddc>
  4054f2:	2306      	movs	r3, #6
  4054f4:	9309      	str	r3, [sp, #36]	; 0x24
  4054f6:	e772      	b.n	4053de <_vfprintf_r+0xf82>
  4054f8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4054fc:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405500:	f7ff bbc7 	b.w	404c92 <_vfprintf_r+0x836>
  405504:	aa23      	add	r2, sp, #140	; 0x8c
  405506:	990a      	ldr	r1, [sp, #40]	; 0x28
  405508:	9808      	ldr	r0, [sp, #32]
  40550a:	f002 fd51 	bl	407fb0 <__sprint_r>
  40550e:	2800      	cmp	r0, #0
  405510:	f47f ad2e 	bne.w	404f70 <_vfprintf_r+0xb14>
  405514:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405518:	e437      	b.n	404d8a <_vfprintf_r+0x92e>
  40551a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40551c:	4ab4      	ldr	r2, [pc, #720]	; (4057f0 <_vfprintf_r+0x1394>)
  40551e:	f8c8 2000 	str.w	r2, [r8]
  405522:	3301      	adds	r3, #1
  405524:	3401      	adds	r4, #1
  405526:	2201      	movs	r2, #1
  405528:	2b07      	cmp	r3, #7
  40552a:	9425      	str	r4, [sp, #148]	; 0x94
  40552c:	9324      	str	r3, [sp, #144]	; 0x90
  40552e:	f8c8 2004 	str.w	r2, [r8, #4]
  405532:	f300 8124 	bgt.w	40577e <_vfprintf_r+0x1322>
  405536:	f108 0808 	add.w	r8, r8, #8
  40553a:	b929      	cbnz	r1, 405548 <_vfprintf_r+0x10ec>
  40553c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40553e:	b91b      	cbnz	r3, 405548 <_vfprintf_r+0x10ec>
  405540:	9b06      	ldr	r3, [sp, #24]
  405542:	07de      	lsls	r6, r3, #31
  405544:	f57f a98f 	bpl.w	404866 <_vfprintf_r+0x40a>
  405548:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40554a:	9814      	ldr	r0, [sp, #80]	; 0x50
  40554c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40554e:	f8c8 2000 	str.w	r2, [r8]
  405552:	3301      	adds	r3, #1
  405554:	4602      	mov	r2, r0
  405556:	4422      	add	r2, r4
  405558:	2b07      	cmp	r3, #7
  40555a:	9225      	str	r2, [sp, #148]	; 0x94
  40555c:	f8c8 0004 	str.w	r0, [r8, #4]
  405560:	9324      	str	r3, [sp, #144]	; 0x90
  405562:	f300 8169 	bgt.w	405838 <_vfprintf_r+0x13dc>
  405566:	f108 0808 	add.w	r8, r8, #8
  40556a:	2900      	cmp	r1, #0
  40556c:	f2c0 8136 	blt.w	4057dc <_vfprintf_r+0x1380>
  405570:	9911      	ldr	r1, [sp, #68]	; 0x44
  405572:	f8c8 7000 	str.w	r7, [r8]
  405576:	3301      	adds	r3, #1
  405578:	188c      	adds	r4, r1, r2
  40557a:	2b07      	cmp	r3, #7
  40557c:	9425      	str	r4, [sp, #148]	; 0x94
  40557e:	9324      	str	r3, [sp, #144]	; 0x90
  405580:	f8c8 1004 	str.w	r1, [r8, #4]
  405584:	f77f a96d 	ble.w	404862 <_vfprintf_r+0x406>
  405588:	e4e0      	b.n	404f4c <_vfprintf_r+0xaf0>
  40558a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40558c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40558e:	6813      	ldr	r3, [r2, #0]
  405590:	17cd      	asrs	r5, r1, #31
  405592:	4608      	mov	r0, r1
  405594:	3204      	adds	r2, #4
  405596:	4629      	mov	r1, r5
  405598:	920e      	str	r2, [sp, #56]	; 0x38
  40559a:	e9c3 0100 	strd	r0, r1, [r3]
  40559e:	f7fe bfa9 	b.w	4044f4 <_vfprintf_r+0x98>
  4055a2:	46da      	mov	sl, fp
  4055a4:	f7ff bbc4 	b.w	404d30 <_vfprintf_r+0x8d4>
  4055a8:	aa23      	add	r2, sp, #140	; 0x8c
  4055aa:	990a      	ldr	r1, [sp, #40]	; 0x28
  4055ac:	9808      	ldr	r0, [sp, #32]
  4055ae:	f002 fcff 	bl	407fb0 <__sprint_r>
  4055b2:	2800      	cmp	r0, #0
  4055b4:	f47f acdc 	bne.w	404f70 <_vfprintf_r+0xb14>
  4055b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4055ba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4055be:	f7ff bbfd 	b.w	404dbc <_vfprintf_r+0x960>
  4055c2:	4638      	mov	r0, r7
  4055c4:	9409      	str	r4, [sp, #36]	; 0x24
  4055c6:	f7fe fedb 	bl	404380 <strlen>
  4055ca:	950e      	str	r5, [sp, #56]	; 0x38
  4055cc:	900d      	str	r0, [sp, #52]	; 0x34
  4055ce:	f8cd b018 	str.w	fp, [sp, #24]
  4055d2:	4603      	mov	r3, r0
  4055d4:	f7ff ba36 	b.w	404a44 <_vfprintf_r+0x5e8>
  4055d8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4055dc:	2300      	movs	r3, #0
  4055de:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  4055e2:	9309      	str	r3, [sp, #36]	; 0x24
  4055e4:	f7ff b86f 	b.w	4046c6 <_vfprintf_r+0x26a>
  4055e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4055ea:	9310      	str	r3, [sp, #64]	; 0x40
  4055ec:	461a      	mov	r2, r3
  4055ee:	3303      	adds	r3, #3
  4055f0:	db04      	blt.n	4055fc <_vfprintf_r+0x11a0>
  4055f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4055f4:	4619      	mov	r1, r3
  4055f6:	4291      	cmp	r1, r2
  4055f8:	f6bf af45 	bge.w	405486 <_vfprintf_r+0x102a>
  4055fc:	3e02      	subs	r6, #2
  4055fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405600:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  405604:	3b01      	subs	r3, #1
  405606:	2b00      	cmp	r3, #0
  405608:	931d      	str	r3, [sp, #116]	; 0x74
  40560a:	bfbd      	ittte	lt
  40560c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  40560e:	f1c3 0301 	rsblt	r3, r3, #1
  405612:	222d      	movlt	r2, #45	; 0x2d
  405614:	222b      	movge	r2, #43	; 0x2b
  405616:	2b09      	cmp	r3, #9
  405618:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40561c:	f340 813e 	ble.w	40589c <_vfprintf_r+0x1440>
  405620:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  405624:	4620      	mov	r0, r4
  405626:	4d73      	ldr	r5, [pc, #460]	; (4057f4 <_vfprintf_r+0x1398>)
  405628:	e000      	b.n	40562c <_vfprintf_r+0x11d0>
  40562a:	4610      	mov	r0, r2
  40562c:	fb85 1203 	smull	r1, r2, r5, r3
  405630:	17d9      	asrs	r1, r3, #31
  405632:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405636:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40563a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40563e:	3230      	adds	r2, #48	; 0x30
  405640:	2909      	cmp	r1, #9
  405642:	f800 2c01 	strb.w	r2, [r0, #-1]
  405646:	460b      	mov	r3, r1
  405648:	f100 32ff 	add.w	r2, r0, #4294967295
  40564c:	dced      	bgt.n	40562a <_vfprintf_r+0x11ce>
  40564e:	3330      	adds	r3, #48	; 0x30
  405650:	3802      	subs	r0, #2
  405652:	b2d9      	uxtb	r1, r3
  405654:	4284      	cmp	r4, r0
  405656:	f802 1c01 	strb.w	r1, [r2, #-1]
  40565a:	f240 8190 	bls.w	40597e <_vfprintf_r+0x1522>
  40565e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  405662:	4613      	mov	r3, r2
  405664:	e001      	b.n	40566a <_vfprintf_r+0x120e>
  405666:	f813 1b01 	ldrb.w	r1, [r3], #1
  40566a:	f800 1b01 	strb.w	r1, [r0], #1
  40566e:	42a3      	cmp	r3, r4
  405670:	d1f9      	bne.n	405666 <_vfprintf_r+0x120a>
  405672:	3301      	adds	r3, #1
  405674:	1a9b      	subs	r3, r3, r2
  405676:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40567a:	4413      	add	r3, r2
  40567c:	aa1f      	add	r2, sp, #124	; 0x7c
  40567e:	1a9b      	subs	r3, r3, r2
  405680:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405682:	9319      	str	r3, [sp, #100]	; 0x64
  405684:	2a01      	cmp	r2, #1
  405686:	4413      	add	r3, r2
  405688:	930d      	str	r3, [sp, #52]	; 0x34
  40568a:	f340 8145 	ble.w	405918 <_vfprintf_r+0x14bc>
  40568e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405690:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405692:	4413      	add	r3, r2
  405694:	930d      	str	r3, [sp, #52]	; 0x34
  405696:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40569a:	9307      	str	r3, [sp, #28]
  40569c:	2300      	movs	r3, #0
  40569e:	9310      	str	r3, [sp, #64]	; 0x40
  4056a0:	e700      	b.n	4054a4 <_vfprintf_r+0x1048>
  4056a2:	aa23      	add	r2, sp, #140	; 0x8c
  4056a4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4056a6:	9808      	ldr	r0, [sp, #32]
  4056a8:	f002 fc82 	bl	407fb0 <__sprint_r>
  4056ac:	2800      	cmp	r0, #0
  4056ae:	f47f ac5f 	bne.w	404f70 <_vfprintf_r+0xb14>
  4056b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4056b4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4056b8:	e4d1      	b.n	40505e <_vfprintf_r+0xc02>
  4056ba:	4623      	mov	r3, r4
  4056bc:	e6d5      	b.n	40546a <_vfprintf_r+0x100e>
  4056be:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4056c0:	9710      	str	r7, [sp, #64]	; 0x40
  4056c2:	2b06      	cmp	r3, #6
  4056c4:	bf28      	it	cs
  4056c6:	2306      	movcs	r3, #6
  4056c8:	9709      	str	r7, [sp, #36]	; 0x24
  4056ca:	46ba      	mov	sl, r7
  4056cc:	9307      	str	r3, [sp, #28]
  4056ce:	950e      	str	r5, [sp, #56]	; 0x38
  4056d0:	f8cd b018 	str.w	fp, [sp, #24]
  4056d4:	930d      	str	r3, [sp, #52]	; 0x34
  4056d6:	4f48      	ldr	r7, [pc, #288]	; (4057f8 <_vfprintf_r+0x139c>)
  4056d8:	f7fe bff2 	b.w	4046c0 <_vfprintf_r+0x264>
  4056dc:	aa23      	add	r2, sp, #140	; 0x8c
  4056de:	990a      	ldr	r1, [sp, #40]	; 0x28
  4056e0:	9808      	ldr	r0, [sp, #32]
  4056e2:	f002 fc65 	bl	407fb0 <__sprint_r>
  4056e6:	2800      	cmp	r0, #0
  4056e8:	f47f ac42 	bne.w	404f70 <_vfprintf_r+0xb14>
  4056ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4056ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056f0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4056f2:	1ad3      	subs	r3, r2, r3
  4056f4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4056f8:	e5b6      	b.n	405268 <_vfprintf_r+0xe0c>
  4056fa:	46a2      	mov	sl, r4
  4056fc:	f7ff bb18 	b.w	404d30 <_vfprintf_r+0x8d4>
  405700:	a821      	add	r0, sp, #132	; 0x84
  405702:	a91e      	add	r1, sp, #120	; 0x78
  405704:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405706:	9004      	str	r0, [sp, #16]
  405708:	9103      	str	r1, [sp, #12]
  40570a:	a81d      	add	r0, sp, #116	; 0x74
  40570c:	2103      	movs	r1, #3
  40570e:	9002      	str	r0, [sp, #8]
  405710:	9a07      	ldr	r2, [sp, #28]
  405712:	9501      	str	r5, [sp, #4]
  405714:	4653      	mov	r3, sl
  405716:	9100      	str	r1, [sp, #0]
  405718:	9808      	ldr	r0, [sp, #32]
  40571a:	f000 fa95 	bl	405c48 <_dtoa_r>
  40571e:	4607      	mov	r7, r0
  405720:	1944      	adds	r4, r0, r5
  405722:	783b      	ldrb	r3, [r7, #0]
  405724:	2b30      	cmp	r3, #48	; 0x30
  405726:	f000 80ca 	beq.w	4058be <_vfprintf_r+0x1462>
  40572a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40572c:	442c      	add	r4, r5
  40572e:	e689      	b.n	405444 <_vfprintf_r+0xfe8>
  405730:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405732:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405734:	4413      	add	r3, r2
  405736:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405738:	930d      	str	r3, [sp, #52]	; 0x34
  40573a:	2a00      	cmp	r2, #0
  40573c:	f340 80e4 	ble.w	405908 <_vfprintf_r+0x14ac>
  405740:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405744:	9307      	str	r3, [sp, #28]
  405746:	2667      	movs	r6, #103	; 0x67
  405748:	e6ac      	b.n	4054a4 <_vfprintf_r+0x1048>
  40574a:	2b00      	cmp	r3, #0
  40574c:	f340 80fb 	ble.w	405946 <_vfprintf_r+0x14ea>
  405750:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405752:	2a00      	cmp	r2, #0
  405754:	f040 80ce 	bne.w	4058f4 <_vfprintf_r+0x1498>
  405758:	f01b 0f01 	tst.w	fp, #1
  40575c:	f040 80ca 	bne.w	4058f4 <_vfprintf_r+0x1498>
  405760:	9307      	str	r3, [sp, #28]
  405762:	930d      	str	r3, [sp, #52]	; 0x34
  405764:	e69e      	b.n	4054a4 <_vfprintf_r+0x1048>
  405766:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405768:	9307      	str	r3, [sp, #28]
  40576a:	930d      	str	r3, [sp, #52]	; 0x34
  40576c:	9009      	str	r0, [sp, #36]	; 0x24
  40576e:	950e      	str	r5, [sp, #56]	; 0x38
  405770:	f8cd b018 	str.w	fp, [sp, #24]
  405774:	9010      	str	r0, [sp, #64]	; 0x40
  405776:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40577a:	f7fe bfa1 	b.w	4046c0 <_vfprintf_r+0x264>
  40577e:	aa23      	add	r2, sp, #140	; 0x8c
  405780:	990a      	ldr	r1, [sp, #40]	; 0x28
  405782:	9808      	ldr	r0, [sp, #32]
  405784:	f002 fc14 	bl	407fb0 <__sprint_r>
  405788:	2800      	cmp	r0, #0
  40578a:	f47f abf1 	bne.w	404f70 <_vfprintf_r+0xb14>
  40578e:	991d      	ldr	r1, [sp, #116]	; 0x74
  405790:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405792:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405796:	e6d0      	b.n	40553a <_vfprintf_r+0x10de>
  405798:	2e47      	cmp	r6, #71	; 0x47
  40579a:	f47f ae52 	bne.w	405442 <_vfprintf_r+0xfe6>
  40579e:	f01b 0f01 	tst.w	fp, #1
  4057a2:	f000 80da 	beq.w	40595a <_vfprintf_r+0x14fe>
  4057a6:	2e46      	cmp	r6, #70	; 0x46
  4057a8:	eb07 0405 	add.w	r4, r7, r5
  4057ac:	d0b9      	beq.n	405722 <_vfprintf_r+0x12c6>
  4057ae:	e649      	b.n	405444 <_vfprintf_r+0xfe8>
  4057b0:	a821      	add	r0, sp, #132	; 0x84
  4057b2:	a91e      	add	r1, sp, #120	; 0x78
  4057b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4057b6:	9004      	str	r0, [sp, #16]
  4057b8:	9103      	str	r1, [sp, #12]
  4057ba:	a81d      	add	r0, sp, #116	; 0x74
  4057bc:	2103      	movs	r1, #3
  4057be:	9002      	str	r0, [sp, #8]
  4057c0:	9a07      	ldr	r2, [sp, #28]
  4057c2:	9401      	str	r4, [sp, #4]
  4057c4:	4653      	mov	r3, sl
  4057c6:	9100      	str	r1, [sp, #0]
  4057c8:	9808      	ldr	r0, [sp, #32]
  4057ca:	f000 fa3d 	bl	405c48 <_dtoa_r>
  4057ce:	4625      	mov	r5, r4
  4057d0:	4607      	mov	r7, r0
  4057d2:	e7e8      	b.n	4057a6 <_vfprintf_r+0x134a>
  4057d4:	2300      	movs	r3, #0
  4057d6:	9309      	str	r3, [sp, #36]	; 0x24
  4057d8:	f7fe bec1 	b.w	40455e <_vfprintf_r+0x102>
  4057dc:	424e      	negs	r6, r1
  4057de:	3110      	adds	r1, #16
  4057e0:	4d06      	ldr	r5, [pc, #24]	; (4057fc <_vfprintf_r+0x13a0>)
  4057e2:	da43      	bge.n	40586c <_vfprintf_r+0x1410>
  4057e4:	2410      	movs	r4, #16
  4057e6:	f8dd a020 	ldr.w	sl, [sp, #32]
  4057ea:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4057ee:	e00c      	b.n	40580a <_vfprintf_r+0x13ae>
  4057f0:	004092b0 	.word	0x004092b0
  4057f4:	66666667 	.word	0x66666667
  4057f8:	004092a8 	.word	0x004092a8
  4057fc:	004092c4 	.word	0x004092c4
  405800:	f108 0808 	add.w	r8, r8, #8
  405804:	3e10      	subs	r6, #16
  405806:	2e10      	cmp	r6, #16
  405808:	dd30      	ble.n	40586c <_vfprintf_r+0x1410>
  40580a:	3301      	adds	r3, #1
  40580c:	3210      	adds	r2, #16
  40580e:	2b07      	cmp	r3, #7
  405810:	9225      	str	r2, [sp, #148]	; 0x94
  405812:	9324      	str	r3, [sp, #144]	; 0x90
  405814:	f8c8 5000 	str.w	r5, [r8]
  405818:	f8c8 4004 	str.w	r4, [r8, #4]
  40581c:	ddf0      	ble.n	405800 <_vfprintf_r+0x13a4>
  40581e:	aa23      	add	r2, sp, #140	; 0x8c
  405820:	4659      	mov	r1, fp
  405822:	4650      	mov	r0, sl
  405824:	f002 fbc4 	bl	407fb0 <__sprint_r>
  405828:	2800      	cmp	r0, #0
  40582a:	f47f aeba 	bne.w	4055a2 <_vfprintf_r+0x1146>
  40582e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405830:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405832:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405836:	e7e5      	b.n	405804 <_vfprintf_r+0x13a8>
  405838:	aa23      	add	r2, sp, #140	; 0x8c
  40583a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40583c:	9808      	ldr	r0, [sp, #32]
  40583e:	f002 fbb7 	bl	407fb0 <__sprint_r>
  405842:	2800      	cmp	r0, #0
  405844:	f47f ab94 	bne.w	404f70 <_vfprintf_r+0xb14>
  405848:	991d      	ldr	r1, [sp, #116]	; 0x74
  40584a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40584c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40584e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405852:	e68a      	b.n	40556a <_vfprintf_r+0x110e>
  405854:	9808      	ldr	r0, [sp, #32]
  405856:	aa23      	add	r2, sp, #140	; 0x8c
  405858:	4651      	mov	r1, sl
  40585a:	f002 fba9 	bl	407fb0 <__sprint_r>
  40585e:	2800      	cmp	r0, #0
  405860:	f43f aa64 	beq.w	404d2c <_vfprintf_r+0x8d0>
  405864:	f7ff ba64 	b.w	404d30 <_vfprintf_r+0x8d4>
  405868:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40586a:	e5fe      	b.n	40546a <_vfprintf_r+0x100e>
  40586c:	3301      	adds	r3, #1
  40586e:	4432      	add	r2, r6
  405870:	2b07      	cmp	r3, #7
  405872:	e888 0060 	stmia.w	r8, {r5, r6}
  405876:	9225      	str	r2, [sp, #148]	; 0x94
  405878:	9324      	str	r3, [sp, #144]	; 0x90
  40587a:	f108 0808 	add.w	r8, r8, #8
  40587e:	f77f ae77 	ble.w	405570 <_vfprintf_r+0x1114>
  405882:	aa23      	add	r2, sp, #140	; 0x8c
  405884:	990a      	ldr	r1, [sp, #40]	; 0x28
  405886:	9808      	ldr	r0, [sp, #32]
  405888:	f002 fb92 	bl	407fb0 <__sprint_r>
  40588c:	2800      	cmp	r0, #0
  40588e:	f47f ab6f 	bne.w	404f70 <_vfprintf_r+0xb14>
  405892:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405894:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405896:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40589a:	e669      	b.n	405570 <_vfprintf_r+0x1114>
  40589c:	3330      	adds	r3, #48	; 0x30
  40589e:	2230      	movs	r2, #48	; 0x30
  4058a0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4058a4:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4058a8:	ab20      	add	r3, sp, #128	; 0x80
  4058aa:	e6e7      	b.n	40567c <_vfprintf_r+0x1220>
  4058ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4058ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4058b0:	4413      	add	r3, r2
  4058b2:	930d      	str	r3, [sp, #52]	; 0x34
  4058b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4058b8:	9307      	str	r3, [sp, #28]
  4058ba:	2667      	movs	r6, #103	; 0x67
  4058bc:	e5f2      	b.n	4054a4 <_vfprintf_r+0x1048>
  4058be:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4058c0:	9807      	ldr	r0, [sp, #28]
  4058c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4058c4:	4651      	mov	r1, sl
  4058c6:	f003 fa43 	bl	408d50 <__aeabi_dcmpeq>
  4058ca:	2800      	cmp	r0, #0
  4058cc:	f47f af2d 	bne.w	40572a <_vfprintf_r+0x12ce>
  4058d0:	f1c5 0501 	rsb	r5, r5, #1
  4058d4:	951d      	str	r5, [sp, #116]	; 0x74
  4058d6:	442c      	add	r4, r5
  4058d8:	e5b4      	b.n	405444 <_vfprintf_r+0xfe8>
  4058da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4058dc:	4f33      	ldr	r7, [pc, #204]	; (4059ac <_vfprintf_r+0x1550>)
  4058de:	2b00      	cmp	r3, #0
  4058e0:	bfb6      	itet	lt
  4058e2:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  4058e6:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  4058ea:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  4058ee:	4b30      	ldr	r3, [pc, #192]	; (4059b0 <_vfprintf_r+0x1554>)
  4058f0:	f7ff b9d1 	b.w	404c96 <_vfprintf_r+0x83a>
  4058f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4058f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4058f8:	4413      	add	r3, r2
  4058fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4058fc:	441a      	add	r2, r3
  4058fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405902:	920d      	str	r2, [sp, #52]	; 0x34
  405904:	9307      	str	r3, [sp, #28]
  405906:	e5cd      	b.n	4054a4 <_vfprintf_r+0x1048>
  405908:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40590a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40590c:	f1c3 0301 	rsb	r3, r3, #1
  405910:	441a      	add	r2, r3
  405912:	4613      	mov	r3, r2
  405914:	920d      	str	r2, [sp, #52]	; 0x34
  405916:	e713      	b.n	405740 <_vfprintf_r+0x12e4>
  405918:	f01b 0301 	ands.w	r3, fp, #1
  40591c:	9310      	str	r3, [sp, #64]	; 0x40
  40591e:	f47f aeb6 	bne.w	40568e <_vfprintf_r+0x1232>
  405922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405924:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405928:	9307      	str	r3, [sp, #28]
  40592a:	e5bb      	b.n	4054a4 <_vfprintf_r+0x1048>
  40592c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40592e:	f899 6001 	ldrb.w	r6, [r9, #1]
  405932:	6823      	ldr	r3, [r4, #0]
  405934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  405938:	9309      	str	r3, [sp, #36]	; 0x24
  40593a:	4623      	mov	r3, r4
  40593c:	3304      	adds	r3, #4
  40593e:	4681      	mov	r9, r0
  405940:	930e      	str	r3, [sp, #56]	; 0x38
  405942:	f7fe be0a 	b.w	40455a <_vfprintf_r+0xfe>
  405946:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405948:	b913      	cbnz	r3, 405950 <_vfprintf_r+0x14f4>
  40594a:	f01b 0f01 	tst.w	fp, #1
  40594e:	d002      	beq.n	405956 <_vfprintf_r+0x14fa>
  405950:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405952:	3301      	adds	r3, #1
  405954:	e7d1      	b.n	4058fa <_vfprintf_r+0x149e>
  405956:	2301      	movs	r3, #1
  405958:	e702      	b.n	405760 <_vfprintf_r+0x1304>
  40595a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40595c:	1bdb      	subs	r3, r3, r7
  40595e:	9311      	str	r3, [sp, #68]	; 0x44
  405960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405962:	2b47      	cmp	r3, #71	; 0x47
  405964:	f43f ae40 	beq.w	4055e8 <_vfprintf_r+0x118c>
  405968:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40596a:	9310      	str	r3, [sp, #64]	; 0x40
  40596c:	e647      	b.n	4055fe <_vfprintf_r+0x11a2>
  40596e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405972:	f7ff b81d 	b.w	4049b0 <_vfprintf_r+0x554>
  405976:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40597a:	f7ff b918 	b.w	404bae <_vfprintf_r+0x752>
  40597e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405982:	e67b      	b.n	40567c <_vfprintf_r+0x1220>
  405984:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405988:	f7ff b866 	b.w	404a58 <_vfprintf_r+0x5fc>
  40598c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405990:	f7ff b9ac 	b.w	404cec <_vfprintf_r+0x890>
  405994:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405998:	f7ff b934 	b.w	404c04 <_vfprintf_r+0x7a8>
  40599c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4059a0:	f7ff b8b0 	b.w	404b04 <_vfprintf_r+0x6a8>
  4059a4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4059a8:	f7ff b945 	b.w	404c36 <_vfprintf_r+0x7da>
  4059ac:	0040927c 	.word	0x0040927c
  4059b0:	00409278 	.word	0x00409278

004059b4 <__sbprintf>:
  4059b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059b8:	460c      	mov	r4, r1
  4059ba:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4059be:	8989      	ldrh	r1, [r1, #12]
  4059c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4059c2:	89e5      	ldrh	r5, [r4, #14]
  4059c4:	9619      	str	r6, [sp, #100]	; 0x64
  4059c6:	f021 0102 	bic.w	r1, r1, #2
  4059ca:	4606      	mov	r6, r0
  4059cc:	69e0      	ldr	r0, [r4, #28]
  4059ce:	f8ad 100c 	strh.w	r1, [sp, #12]
  4059d2:	4617      	mov	r7, r2
  4059d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4059d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4059da:	f8ad 500e 	strh.w	r5, [sp, #14]
  4059de:	4698      	mov	r8, r3
  4059e0:	ad1a      	add	r5, sp, #104	; 0x68
  4059e2:	2300      	movs	r3, #0
  4059e4:	9007      	str	r0, [sp, #28]
  4059e6:	a816      	add	r0, sp, #88	; 0x58
  4059e8:	9209      	str	r2, [sp, #36]	; 0x24
  4059ea:	9306      	str	r3, [sp, #24]
  4059ec:	9500      	str	r5, [sp, #0]
  4059ee:	9504      	str	r5, [sp, #16]
  4059f0:	9102      	str	r1, [sp, #8]
  4059f2:	9105      	str	r1, [sp, #20]
  4059f4:	f001 fc82 	bl	4072fc <__retarget_lock_init_recursive>
  4059f8:	4643      	mov	r3, r8
  4059fa:	463a      	mov	r2, r7
  4059fc:	4669      	mov	r1, sp
  4059fe:	4630      	mov	r0, r6
  405a00:	f7fe fd2c 	bl	40445c <_vfprintf_r>
  405a04:	1e05      	subs	r5, r0, #0
  405a06:	db07      	blt.n	405a18 <__sbprintf+0x64>
  405a08:	4630      	mov	r0, r6
  405a0a:	4669      	mov	r1, sp
  405a0c:	f001 f8e6 	bl	406bdc <_fflush_r>
  405a10:	2800      	cmp	r0, #0
  405a12:	bf18      	it	ne
  405a14:	f04f 35ff 	movne.w	r5, #4294967295
  405a18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405a1c:	065b      	lsls	r3, r3, #25
  405a1e:	d503      	bpl.n	405a28 <__sbprintf+0x74>
  405a20:	89a3      	ldrh	r3, [r4, #12]
  405a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a26:	81a3      	strh	r3, [r4, #12]
  405a28:	9816      	ldr	r0, [sp, #88]	; 0x58
  405a2a:	f001 fc69 	bl	407300 <__retarget_lock_close_recursive>
  405a2e:	4628      	mov	r0, r5
  405a30:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405a38 <__swsetup_r>:
  405a38:	b538      	push	{r3, r4, r5, lr}
  405a3a:	4b30      	ldr	r3, [pc, #192]	; (405afc <__swsetup_r+0xc4>)
  405a3c:	681b      	ldr	r3, [r3, #0]
  405a3e:	4605      	mov	r5, r0
  405a40:	460c      	mov	r4, r1
  405a42:	b113      	cbz	r3, 405a4a <__swsetup_r+0x12>
  405a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405a46:	2a00      	cmp	r2, #0
  405a48:	d038      	beq.n	405abc <__swsetup_r+0x84>
  405a4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405a4e:	b293      	uxth	r3, r2
  405a50:	0718      	lsls	r0, r3, #28
  405a52:	d50c      	bpl.n	405a6e <__swsetup_r+0x36>
  405a54:	6920      	ldr	r0, [r4, #16]
  405a56:	b1a8      	cbz	r0, 405a84 <__swsetup_r+0x4c>
  405a58:	f013 0201 	ands.w	r2, r3, #1
  405a5c:	d01e      	beq.n	405a9c <__swsetup_r+0x64>
  405a5e:	6963      	ldr	r3, [r4, #20]
  405a60:	2200      	movs	r2, #0
  405a62:	425b      	negs	r3, r3
  405a64:	61a3      	str	r3, [r4, #24]
  405a66:	60a2      	str	r2, [r4, #8]
  405a68:	b1f0      	cbz	r0, 405aa8 <__swsetup_r+0x70>
  405a6a:	2000      	movs	r0, #0
  405a6c:	bd38      	pop	{r3, r4, r5, pc}
  405a6e:	06d9      	lsls	r1, r3, #27
  405a70:	d53c      	bpl.n	405aec <__swsetup_r+0xb4>
  405a72:	0758      	lsls	r0, r3, #29
  405a74:	d426      	bmi.n	405ac4 <__swsetup_r+0x8c>
  405a76:	6920      	ldr	r0, [r4, #16]
  405a78:	f042 0308 	orr.w	r3, r2, #8
  405a7c:	81a3      	strh	r3, [r4, #12]
  405a7e:	b29b      	uxth	r3, r3
  405a80:	2800      	cmp	r0, #0
  405a82:	d1e9      	bne.n	405a58 <__swsetup_r+0x20>
  405a84:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405a88:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405a8c:	d0e4      	beq.n	405a58 <__swsetup_r+0x20>
  405a8e:	4628      	mov	r0, r5
  405a90:	4621      	mov	r1, r4
  405a92:	f001 fc69 	bl	407368 <__smakebuf_r>
  405a96:	89a3      	ldrh	r3, [r4, #12]
  405a98:	6920      	ldr	r0, [r4, #16]
  405a9a:	e7dd      	b.n	405a58 <__swsetup_r+0x20>
  405a9c:	0799      	lsls	r1, r3, #30
  405a9e:	bf58      	it	pl
  405aa0:	6962      	ldrpl	r2, [r4, #20]
  405aa2:	60a2      	str	r2, [r4, #8]
  405aa4:	2800      	cmp	r0, #0
  405aa6:	d1e0      	bne.n	405a6a <__swsetup_r+0x32>
  405aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405aac:	061a      	lsls	r2, r3, #24
  405aae:	d5dd      	bpl.n	405a6c <__swsetup_r+0x34>
  405ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ab4:	81a3      	strh	r3, [r4, #12]
  405ab6:	f04f 30ff 	mov.w	r0, #4294967295
  405aba:	bd38      	pop	{r3, r4, r5, pc}
  405abc:	4618      	mov	r0, r3
  405abe:	f001 f8e5 	bl	406c8c <__sinit>
  405ac2:	e7c2      	b.n	405a4a <__swsetup_r+0x12>
  405ac4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405ac6:	b151      	cbz	r1, 405ade <__swsetup_r+0xa6>
  405ac8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405acc:	4299      	cmp	r1, r3
  405ace:	d004      	beq.n	405ada <__swsetup_r+0xa2>
  405ad0:	4628      	mov	r0, r5
  405ad2:	f001 f97d 	bl	406dd0 <_free_r>
  405ad6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405ada:	2300      	movs	r3, #0
  405adc:	6323      	str	r3, [r4, #48]	; 0x30
  405ade:	2300      	movs	r3, #0
  405ae0:	6920      	ldr	r0, [r4, #16]
  405ae2:	6063      	str	r3, [r4, #4]
  405ae4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405ae8:	6020      	str	r0, [r4, #0]
  405aea:	e7c5      	b.n	405a78 <__swsetup_r+0x40>
  405aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405af0:	2309      	movs	r3, #9
  405af2:	602b      	str	r3, [r5, #0]
  405af4:	f04f 30ff 	mov.w	r0, #4294967295
  405af8:	81a2      	strh	r2, [r4, #12]
  405afa:	bd38      	pop	{r3, r4, r5, pc}
  405afc:	2040000c 	.word	0x2040000c

00405b00 <register_fini>:
  405b00:	4b02      	ldr	r3, [pc, #8]	; (405b0c <register_fini+0xc>)
  405b02:	b113      	cbz	r3, 405b0a <register_fini+0xa>
  405b04:	4802      	ldr	r0, [pc, #8]	; (405b10 <register_fini+0x10>)
  405b06:	f000 b805 	b.w	405b14 <atexit>
  405b0a:	4770      	bx	lr
  405b0c:	00000000 	.word	0x00000000
  405b10:	00406cfd 	.word	0x00406cfd

00405b14 <atexit>:
  405b14:	2300      	movs	r3, #0
  405b16:	4601      	mov	r1, r0
  405b18:	461a      	mov	r2, r3
  405b1a:	4618      	mov	r0, r3
  405b1c:	f002 ba68 	b.w	407ff0 <__register_exitproc>

00405b20 <quorem>:
  405b20:	6902      	ldr	r2, [r0, #16]
  405b22:	690b      	ldr	r3, [r1, #16]
  405b24:	4293      	cmp	r3, r2
  405b26:	f300 808d 	bgt.w	405c44 <quorem+0x124>
  405b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b2e:	f103 38ff 	add.w	r8, r3, #4294967295
  405b32:	f101 0714 	add.w	r7, r1, #20
  405b36:	f100 0b14 	add.w	fp, r0, #20
  405b3a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405b3e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405b42:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405b46:	b083      	sub	sp, #12
  405b48:	3201      	adds	r2, #1
  405b4a:	fbb3 f9f2 	udiv	r9, r3, r2
  405b4e:	eb0b 0304 	add.w	r3, fp, r4
  405b52:	9400      	str	r4, [sp, #0]
  405b54:	eb07 0a04 	add.w	sl, r7, r4
  405b58:	9301      	str	r3, [sp, #4]
  405b5a:	f1b9 0f00 	cmp.w	r9, #0
  405b5e:	d039      	beq.n	405bd4 <quorem+0xb4>
  405b60:	2500      	movs	r5, #0
  405b62:	462e      	mov	r6, r5
  405b64:	46bc      	mov	ip, r7
  405b66:	46de      	mov	lr, fp
  405b68:	f85c 4b04 	ldr.w	r4, [ip], #4
  405b6c:	f8de 3000 	ldr.w	r3, [lr]
  405b70:	b2a2      	uxth	r2, r4
  405b72:	fb09 5502 	mla	r5, r9, r2, r5
  405b76:	0c22      	lsrs	r2, r4, #16
  405b78:	0c2c      	lsrs	r4, r5, #16
  405b7a:	fb09 4202 	mla	r2, r9, r2, r4
  405b7e:	b2ad      	uxth	r5, r5
  405b80:	1b75      	subs	r5, r6, r5
  405b82:	b296      	uxth	r6, r2
  405b84:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405b88:	fa15 f383 	uxtah	r3, r5, r3
  405b8c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405b90:	b29b      	uxth	r3, r3
  405b92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405b96:	45e2      	cmp	sl, ip
  405b98:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405b9c:	f84e 3b04 	str.w	r3, [lr], #4
  405ba0:	ea4f 4626 	mov.w	r6, r6, asr #16
  405ba4:	d2e0      	bcs.n	405b68 <quorem+0x48>
  405ba6:	9b00      	ldr	r3, [sp, #0]
  405ba8:	f85b 3003 	ldr.w	r3, [fp, r3]
  405bac:	b993      	cbnz	r3, 405bd4 <quorem+0xb4>
  405bae:	9c01      	ldr	r4, [sp, #4]
  405bb0:	1f23      	subs	r3, r4, #4
  405bb2:	459b      	cmp	fp, r3
  405bb4:	d20c      	bcs.n	405bd0 <quorem+0xb0>
  405bb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405bba:	b94b      	cbnz	r3, 405bd0 <quorem+0xb0>
  405bbc:	f1a4 0308 	sub.w	r3, r4, #8
  405bc0:	e002      	b.n	405bc8 <quorem+0xa8>
  405bc2:	681a      	ldr	r2, [r3, #0]
  405bc4:	3b04      	subs	r3, #4
  405bc6:	b91a      	cbnz	r2, 405bd0 <quorem+0xb0>
  405bc8:	459b      	cmp	fp, r3
  405bca:	f108 38ff 	add.w	r8, r8, #4294967295
  405bce:	d3f8      	bcc.n	405bc2 <quorem+0xa2>
  405bd0:	f8c0 8010 	str.w	r8, [r0, #16]
  405bd4:	4604      	mov	r4, r0
  405bd6:	f001 fec5 	bl	407964 <__mcmp>
  405bda:	2800      	cmp	r0, #0
  405bdc:	db2e      	blt.n	405c3c <quorem+0x11c>
  405bde:	f109 0901 	add.w	r9, r9, #1
  405be2:	465d      	mov	r5, fp
  405be4:	2300      	movs	r3, #0
  405be6:	f857 1b04 	ldr.w	r1, [r7], #4
  405bea:	6828      	ldr	r0, [r5, #0]
  405bec:	b28a      	uxth	r2, r1
  405bee:	1a9a      	subs	r2, r3, r2
  405bf0:	0c0b      	lsrs	r3, r1, #16
  405bf2:	fa12 f280 	uxtah	r2, r2, r0
  405bf6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405bfa:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405bfe:	b292      	uxth	r2, r2
  405c00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405c04:	45ba      	cmp	sl, r7
  405c06:	f845 2b04 	str.w	r2, [r5], #4
  405c0a:	ea4f 4323 	mov.w	r3, r3, asr #16
  405c0e:	d2ea      	bcs.n	405be6 <quorem+0xc6>
  405c10:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405c14:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405c18:	b982      	cbnz	r2, 405c3c <quorem+0x11c>
  405c1a:	1f1a      	subs	r2, r3, #4
  405c1c:	4593      	cmp	fp, r2
  405c1e:	d20b      	bcs.n	405c38 <quorem+0x118>
  405c20:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405c24:	b942      	cbnz	r2, 405c38 <quorem+0x118>
  405c26:	3b08      	subs	r3, #8
  405c28:	e002      	b.n	405c30 <quorem+0x110>
  405c2a:	681a      	ldr	r2, [r3, #0]
  405c2c:	3b04      	subs	r3, #4
  405c2e:	b91a      	cbnz	r2, 405c38 <quorem+0x118>
  405c30:	459b      	cmp	fp, r3
  405c32:	f108 38ff 	add.w	r8, r8, #4294967295
  405c36:	d3f8      	bcc.n	405c2a <quorem+0x10a>
  405c38:	f8c4 8010 	str.w	r8, [r4, #16]
  405c3c:	4648      	mov	r0, r9
  405c3e:	b003      	add	sp, #12
  405c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c44:	2000      	movs	r0, #0
  405c46:	4770      	bx	lr

00405c48 <_dtoa_r>:
  405c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405c4e:	b09b      	sub	sp, #108	; 0x6c
  405c50:	4604      	mov	r4, r0
  405c52:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405c54:	4692      	mov	sl, r2
  405c56:	469b      	mov	fp, r3
  405c58:	b141      	cbz	r1, 405c6c <_dtoa_r+0x24>
  405c5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405c5c:	604a      	str	r2, [r1, #4]
  405c5e:	2301      	movs	r3, #1
  405c60:	4093      	lsls	r3, r2
  405c62:	608b      	str	r3, [r1, #8]
  405c64:	f001 fca6 	bl	4075b4 <_Bfree>
  405c68:	2300      	movs	r3, #0
  405c6a:	6423      	str	r3, [r4, #64]	; 0x40
  405c6c:	f1bb 0f00 	cmp.w	fp, #0
  405c70:	465d      	mov	r5, fp
  405c72:	db35      	blt.n	405ce0 <_dtoa_r+0x98>
  405c74:	2300      	movs	r3, #0
  405c76:	6033      	str	r3, [r6, #0]
  405c78:	4b9d      	ldr	r3, [pc, #628]	; (405ef0 <_dtoa_r+0x2a8>)
  405c7a:	43ab      	bics	r3, r5
  405c7c:	d015      	beq.n	405caa <_dtoa_r+0x62>
  405c7e:	4650      	mov	r0, sl
  405c80:	4659      	mov	r1, fp
  405c82:	2200      	movs	r2, #0
  405c84:	2300      	movs	r3, #0
  405c86:	f003 f863 	bl	408d50 <__aeabi_dcmpeq>
  405c8a:	4680      	mov	r8, r0
  405c8c:	2800      	cmp	r0, #0
  405c8e:	d02d      	beq.n	405cec <_dtoa_r+0xa4>
  405c90:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405c92:	2301      	movs	r3, #1
  405c94:	6013      	str	r3, [r2, #0]
  405c96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405c98:	2b00      	cmp	r3, #0
  405c9a:	f000 80bd 	beq.w	405e18 <_dtoa_r+0x1d0>
  405c9e:	4895      	ldr	r0, [pc, #596]	; (405ef4 <_dtoa_r+0x2ac>)
  405ca0:	6018      	str	r0, [r3, #0]
  405ca2:	3801      	subs	r0, #1
  405ca4:	b01b      	add	sp, #108	; 0x6c
  405ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405caa:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405cac:	f242 730f 	movw	r3, #9999	; 0x270f
  405cb0:	6013      	str	r3, [r2, #0]
  405cb2:	f1ba 0f00 	cmp.w	sl, #0
  405cb6:	d10d      	bne.n	405cd4 <_dtoa_r+0x8c>
  405cb8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405cbc:	b955      	cbnz	r5, 405cd4 <_dtoa_r+0x8c>
  405cbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405cc0:	488d      	ldr	r0, [pc, #564]	; (405ef8 <_dtoa_r+0x2b0>)
  405cc2:	2b00      	cmp	r3, #0
  405cc4:	d0ee      	beq.n	405ca4 <_dtoa_r+0x5c>
  405cc6:	f100 0308 	add.w	r3, r0, #8
  405cca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405ccc:	6013      	str	r3, [r2, #0]
  405cce:	b01b      	add	sp, #108	; 0x6c
  405cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405cd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405cd6:	4889      	ldr	r0, [pc, #548]	; (405efc <_dtoa_r+0x2b4>)
  405cd8:	2b00      	cmp	r3, #0
  405cda:	d0e3      	beq.n	405ca4 <_dtoa_r+0x5c>
  405cdc:	1cc3      	adds	r3, r0, #3
  405cde:	e7f4      	b.n	405cca <_dtoa_r+0x82>
  405ce0:	2301      	movs	r3, #1
  405ce2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405ce6:	6033      	str	r3, [r6, #0]
  405ce8:	46ab      	mov	fp, r5
  405cea:	e7c5      	b.n	405c78 <_dtoa_r+0x30>
  405cec:	aa18      	add	r2, sp, #96	; 0x60
  405cee:	ab19      	add	r3, sp, #100	; 0x64
  405cf0:	9201      	str	r2, [sp, #4]
  405cf2:	9300      	str	r3, [sp, #0]
  405cf4:	4652      	mov	r2, sl
  405cf6:	465b      	mov	r3, fp
  405cf8:	4620      	mov	r0, r4
  405cfa:	f001 fed3 	bl	407aa4 <__d2b>
  405cfe:	0d2b      	lsrs	r3, r5, #20
  405d00:	4681      	mov	r9, r0
  405d02:	d071      	beq.n	405de8 <_dtoa_r+0x1a0>
  405d04:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405d08:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405d0c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405d0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405d12:	4650      	mov	r0, sl
  405d14:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405d18:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405d1c:	2200      	movs	r2, #0
  405d1e:	4b78      	ldr	r3, [pc, #480]	; (405f00 <_dtoa_r+0x2b8>)
  405d20:	f002 fbfa 	bl	408518 <__aeabi_dsub>
  405d24:	a36c      	add	r3, pc, #432	; (adr r3, 405ed8 <_dtoa_r+0x290>)
  405d26:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d2a:	f002 fda9 	bl	408880 <__aeabi_dmul>
  405d2e:	a36c      	add	r3, pc, #432	; (adr r3, 405ee0 <_dtoa_r+0x298>)
  405d30:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d34:	f002 fbf2 	bl	40851c <__adddf3>
  405d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405d3c:	4630      	mov	r0, r6
  405d3e:	f002 fd39 	bl	4087b4 <__aeabi_i2d>
  405d42:	a369      	add	r3, pc, #420	; (adr r3, 405ee8 <_dtoa_r+0x2a0>)
  405d44:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d48:	f002 fd9a 	bl	408880 <__aeabi_dmul>
  405d4c:	4602      	mov	r2, r0
  405d4e:	460b      	mov	r3, r1
  405d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405d54:	f002 fbe2 	bl	40851c <__adddf3>
  405d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405d5c:	f003 f840 	bl	408de0 <__aeabi_d2iz>
  405d60:	2200      	movs	r2, #0
  405d62:	9002      	str	r0, [sp, #8]
  405d64:	2300      	movs	r3, #0
  405d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405d6a:	f002 fffb 	bl	408d64 <__aeabi_dcmplt>
  405d6e:	2800      	cmp	r0, #0
  405d70:	f040 8173 	bne.w	40605a <_dtoa_r+0x412>
  405d74:	9d02      	ldr	r5, [sp, #8]
  405d76:	2d16      	cmp	r5, #22
  405d78:	f200 815d 	bhi.w	406036 <_dtoa_r+0x3ee>
  405d7c:	4b61      	ldr	r3, [pc, #388]	; (405f04 <_dtoa_r+0x2bc>)
  405d7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405d82:	e9d3 0100 	ldrd	r0, r1, [r3]
  405d86:	4652      	mov	r2, sl
  405d88:	465b      	mov	r3, fp
  405d8a:	f003 f809 	bl	408da0 <__aeabi_dcmpgt>
  405d8e:	2800      	cmp	r0, #0
  405d90:	f000 81c5 	beq.w	40611e <_dtoa_r+0x4d6>
  405d94:	1e6b      	subs	r3, r5, #1
  405d96:	9302      	str	r3, [sp, #8]
  405d98:	2300      	movs	r3, #0
  405d9a:	930e      	str	r3, [sp, #56]	; 0x38
  405d9c:	1bbf      	subs	r7, r7, r6
  405d9e:	1e7b      	subs	r3, r7, #1
  405da0:	9306      	str	r3, [sp, #24]
  405da2:	f100 8154 	bmi.w	40604e <_dtoa_r+0x406>
  405da6:	2300      	movs	r3, #0
  405da8:	9308      	str	r3, [sp, #32]
  405daa:	9b02      	ldr	r3, [sp, #8]
  405dac:	2b00      	cmp	r3, #0
  405dae:	f2c0 8145 	blt.w	40603c <_dtoa_r+0x3f4>
  405db2:	9a06      	ldr	r2, [sp, #24]
  405db4:	930d      	str	r3, [sp, #52]	; 0x34
  405db6:	4611      	mov	r1, r2
  405db8:	4419      	add	r1, r3
  405dba:	2300      	movs	r3, #0
  405dbc:	9106      	str	r1, [sp, #24]
  405dbe:	930c      	str	r3, [sp, #48]	; 0x30
  405dc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405dc2:	2b09      	cmp	r3, #9
  405dc4:	d82a      	bhi.n	405e1c <_dtoa_r+0x1d4>
  405dc6:	2b05      	cmp	r3, #5
  405dc8:	f340 865b 	ble.w	406a82 <_dtoa_r+0xe3a>
  405dcc:	3b04      	subs	r3, #4
  405dce:	9324      	str	r3, [sp, #144]	; 0x90
  405dd0:	2500      	movs	r5, #0
  405dd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405dd4:	3b02      	subs	r3, #2
  405dd6:	2b03      	cmp	r3, #3
  405dd8:	f200 8642 	bhi.w	406a60 <_dtoa_r+0xe18>
  405ddc:	e8df f013 	tbh	[pc, r3, lsl #1]
  405de0:	02c903d4 	.word	0x02c903d4
  405de4:	046103df 	.word	0x046103df
  405de8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405dea:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405dec:	443e      	add	r6, r7
  405dee:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405df2:	2b20      	cmp	r3, #32
  405df4:	f340 818e 	ble.w	406114 <_dtoa_r+0x4cc>
  405df8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405dfc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405e00:	409d      	lsls	r5, r3
  405e02:	fa2a f000 	lsr.w	r0, sl, r0
  405e06:	4328      	orrs	r0, r5
  405e08:	f002 fcc4 	bl	408794 <__aeabi_ui2d>
  405e0c:	2301      	movs	r3, #1
  405e0e:	3e01      	subs	r6, #1
  405e10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405e14:	9314      	str	r3, [sp, #80]	; 0x50
  405e16:	e781      	b.n	405d1c <_dtoa_r+0xd4>
  405e18:	483b      	ldr	r0, [pc, #236]	; (405f08 <_dtoa_r+0x2c0>)
  405e1a:	e743      	b.n	405ca4 <_dtoa_r+0x5c>
  405e1c:	2100      	movs	r1, #0
  405e1e:	6461      	str	r1, [r4, #68]	; 0x44
  405e20:	4620      	mov	r0, r4
  405e22:	9125      	str	r1, [sp, #148]	; 0x94
  405e24:	f001 fba0 	bl	407568 <_Balloc>
  405e28:	f04f 33ff 	mov.w	r3, #4294967295
  405e2c:	930a      	str	r3, [sp, #40]	; 0x28
  405e2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405e30:	930f      	str	r3, [sp, #60]	; 0x3c
  405e32:	2301      	movs	r3, #1
  405e34:	9004      	str	r0, [sp, #16]
  405e36:	6420      	str	r0, [r4, #64]	; 0x40
  405e38:	9224      	str	r2, [sp, #144]	; 0x90
  405e3a:	930b      	str	r3, [sp, #44]	; 0x2c
  405e3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405e3e:	2b00      	cmp	r3, #0
  405e40:	f2c0 80d9 	blt.w	405ff6 <_dtoa_r+0x3ae>
  405e44:	9a02      	ldr	r2, [sp, #8]
  405e46:	2a0e      	cmp	r2, #14
  405e48:	f300 80d5 	bgt.w	405ff6 <_dtoa_r+0x3ae>
  405e4c:	4b2d      	ldr	r3, [pc, #180]	; (405f04 <_dtoa_r+0x2bc>)
  405e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405e52:	e9d3 2300 	ldrd	r2, r3, [r3]
  405e56:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405e5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405e5c:	2b00      	cmp	r3, #0
  405e5e:	f2c0 83ba 	blt.w	4065d6 <_dtoa_r+0x98e>
  405e62:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405e66:	4650      	mov	r0, sl
  405e68:	462a      	mov	r2, r5
  405e6a:	4633      	mov	r3, r6
  405e6c:	4659      	mov	r1, fp
  405e6e:	f002 fe31 	bl	408ad4 <__aeabi_ddiv>
  405e72:	f002 ffb5 	bl	408de0 <__aeabi_d2iz>
  405e76:	4680      	mov	r8, r0
  405e78:	f002 fc9c 	bl	4087b4 <__aeabi_i2d>
  405e7c:	462a      	mov	r2, r5
  405e7e:	4633      	mov	r3, r6
  405e80:	f002 fcfe 	bl	408880 <__aeabi_dmul>
  405e84:	460b      	mov	r3, r1
  405e86:	4602      	mov	r2, r0
  405e88:	4659      	mov	r1, fp
  405e8a:	4650      	mov	r0, sl
  405e8c:	f002 fb44 	bl	408518 <__aeabi_dsub>
  405e90:	9d04      	ldr	r5, [sp, #16]
  405e92:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405e96:	702b      	strb	r3, [r5, #0]
  405e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e9a:	2b01      	cmp	r3, #1
  405e9c:	4606      	mov	r6, r0
  405e9e:	460f      	mov	r7, r1
  405ea0:	f105 0501 	add.w	r5, r5, #1
  405ea4:	d068      	beq.n	405f78 <_dtoa_r+0x330>
  405ea6:	2200      	movs	r2, #0
  405ea8:	4b18      	ldr	r3, [pc, #96]	; (405f0c <_dtoa_r+0x2c4>)
  405eaa:	f002 fce9 	bl	408880 <__aeabi_dmul>
  405eae:	2200      	movs	r2, #0
  405eb0:	2300      	movs	r3, #0
  405eb2:	4606      	mov	r6, r0
  405eb4:	460f      	mov	r7, r1
  405eb6:	f002 ff4b 	bl	408d50 <__aeabi_dcmpeq>
  405eba:	2800      	cmp	r0, #0
  405ebc:	f040 8088 	bne.w	405fd0 <_dtoa_r+0x388>
  405ec0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405ec4:	f04f 0a00 	mov.w	sl, #0
  405ec8:	f8df b040 	ldr.w	fp, [pc, #64]	; 405f0c <_dtoa_r+0x2c4>
  405ecc:	940c      	str	r4, [sp, #48]	; 0x30
  405ece:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405ed2:	e028      	b.n	405f26 <_dtoa_r+0x2de>
  405ed4:	f3af 8000 	nop.w
  405ed8:	636f4361 	.word	0x636f4361
  405edc:	3fd287a7 	.word	0x3fd287a7
  405ee0:	8b60c8b3 	.word	0x8b60c8b3
  405ee4:	3fc68a28 	.word	0x3fc68a28
  405ee8:	509f79fb 	.word	0x509f79fb
  405eec:	3fd34413 	.word	0x3fd34413
  405ef0:	7ff00000 	.word	0x7ff00000
  405ef4:	004092b1 	.word	0x004092b1
  405ef8:	004092d4 	.word	0x004092d4
  405efc:	004092e0 	.word	0x004092e0
  405f00:	3ff80000 	.word	0x3ff80000
  405f04:	00409310 	.word	0x00409310
  405f08:	004092b0 	.word	0x004092b0
  405f0c:	40240000 	.word	0x40240000
  405f10:	f002 fcb6 	bl	408880 <__aeabi_dmul>
  405f14:	2200      	movs	r2, #0
  405f16:	2300      	movs	r3, #0
  405f18:	4606      	mov	r6, r0
  405f1a:	460f      	mov	r7, r1
  405f1c:	f002 ff18 	bl	408d50 <__aeabi_dcmpeq>
  405f20:	2800      	cmp	r0, #0
  405f22:	f040 83c1 	bne.w	4066a8 <_dtoa_r+0xa60>
  405f26:	4642      	mov	r2, r8
  405f28:	464b      	mov	r3, r9
  405f2a:	4630      	mov	r0, r6
  405f2c:	4639      	mov	r1, r7
  405f2e:	f002 fdd1 	bl	408ad4 <__aeabi_ddiv>
  405f32:	f002 ff55 	bl	408de0 <__aeabi_d2iz>
  405f36:	4604      	mov	r4, r0
  405f38:	f002 fc3c 	bl	4087b4 <__aeabi_i2d>
  405f3c:	4642      	mov	r2, r8
  405f3e:	464b      	mov	r3, r9
  405f40:	f002 fc9e 	bl	408880 <__aeabi_dmul>
  405f44:	4602      	mov	r2, r0
  405f46:	460b      	mov	r3, r1
  405f48:	4630      	mov	r0, r6
  405f4a:	4639      	mov	r1, r7
  405f4c:	f002 fae4 	bl	408518 <__aeabi_dsub>
  405f50:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405f54:	9e04      	ldr	r6, [sp, #16]
  405f56:	f805 eb01 	strb.w	lr, [r5], #1
  405f5a:	eba5 0e06 	sub.w	lr, r5, r6
  405f5e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405f60:	45b6      	cmp	lr, r6
  405f62:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405f66:	4652      	mov	r2, sl
  405f68:	465b      	mov	r3, fp
  405f6a:	d1d1      	bne.n	405f10 <_dtoa_r+0x2c8>
  405f6c:	46a0      	mov	r8, r4
  405f6e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405f72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405f74:	4606      	mov	r6, r0
  405f76:	460f      	mov	r7, r1
  405f78:	4632      	mov	r2, r6
  405f7a:	463b      	mov	r3, r7
  405f7c:	4630      	mov	r0, r6
  405f7e:	4639      	mov	r1, r7
  405f80:	f002 facc 	bl	40851c <__adddf3>
  405f84:	4606      	mov	r6, r0
  405f86:	460f      	mov	r7, r1
  405f88:	4602      	mov	r2, r0
  405f8a:	460b      	mov	r3, r1
  405f8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405f90:	f002 fee8 	bl	408d64 <__aeabi_dcmplt>
  405f94:	b948      	cbnz	r0, 405faa <_dtoa_r+0x362>
  405f96:	4632      	mov	r2, r6
  405f98:	463b      	mov	r3, r7
  405f9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405f9e:	f002 fed7 	bl	408d50 <__aeabi_dcmpeq>
  405fa2:	b1a8      	cbz	r0, 405fd0 <_dtoa_r+0x388>
  405fa4:	f018 0f01 	tst.w	r8, #1
  405fa8:	d012      	beq.n	405fd0 <_dtoa_r+0x388>
  405faa:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405fae:	9a04      	ldr	r2, [sp, #16]
  405fb0:	1e6b      	subs	r3, r5, #1
  405fb2:	e004      	b.n	405fbe <_dtoa_r+0x376>
  405fb4:	429a      	cmp	r2, r3
  405fb6:	f000 8401 	beq.w	4067bc <_dtoa_r+0xb74>
  405fba:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405fbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405fc2:	f103 0501 	add.w	r5, r3, #1
  405fc6:	d0f5      	beq.n	405fb4 <_dtoa_r+0x36c>
  405fc8:	f108 0801 	add.w	r8, r8, #1
  405fcc:	f883 8000 	strb.w	r8, [r3]
  405fd0:	4649      	mov	r1, r9
  405fd2:	4620      	mov	r0, r4
  405fd4:	f001 faee 	bl	4075b4 <_Bfree>
  405fd8:	2200      	movs	r2, #0
  405fda:	9b02      	ldr	r3, [sp, #8]
  405fdc:	702a      	strb	r2, [r5, #0]
  405fde:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405fe0:	3301      	adds	r3, #1
  405fe2:	6013      	str	r3, [r2, #0]
  405fe4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405fe6:	2b00      	cmp	r3, #0
  405fe8:	f000 839e 	beq.w	406728 <_dtoa_r+0xae0>
  405fec:	9804      	ldr	r0, [sp, #16]
  405fee:	601d      	str	r5, [r3, #0]
  405ff0:	b01b      	add	sp, #108	; 0x6c
  405ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405ff8:	2a00      	cmp	r2, #0
  405ffa:	d03e      	beq.n	40607a <_dtoa_r+0x432>
  405ffc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405ffe:	2a01      	cmp	r2, #1
  406000:	f340 8311 	ble.w	406626 <_dtoa_r+0x9de>
  406004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406008:	1e5f      	subs	r7, r3, #1
  40600a:	42ba      	cmp	r2, r7
  40600c:	f2c0 838f 	blt.w	40672e <_dtoa_r+0xae6>
  406010:	1bd7      	subs	r7, r2, r7
  406012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406014:	2b00      	cmp	r3, #0
  406016:	f2c0 848b 	blt.w	406930 <_dtoa_r+0xce8>
  40601a:	9d08      	ldr	r5, [sp, #32]
  40601c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40601e:	9a08      	ldr	r2, [sp, #32]
  406020:	441a      	add	r2, r3
  406022:	9208      	str	r2, [sp, #32]
  406024:	9a06      	ldr	r2, [sp, #24]
  406026:	2101      	movs	r1, #1
  406028:	441a      	add	r2, r3
  40602a:	4620      	mov	r0, r4
  40602c:	9206      	str	r2, [sp, #24]
  40602e:	f001 fb5b 	bl	4076e8 <__i2b>
  406032:	4606      	mov	r6, r0
  406034:	e024      	b.n	406080 <_dtoa_r+0x438>
  406036:	2301      	movs	r3, #1
  406038:	930e      	str	r3, [sp, #56]	; 0x38
  40603a:	e6af      	b.n	405d9c <_dtoa_r+0x154>
  40603c:	9a08      	ldr	r2, [sp, #32]
  40603e:	9b02      	ldr	r3, [sp, #8]
  406040:	1ad2      	subs	r2, r2, r3
  406042:	425b      	negs	r3, r3
  406044:	930c      	str	r3, [sp, #48]	; 0x30
  406046:	2300      	movs	r3, #0
  406048:	9208      	str	r2, [sp, #32]
  40604a:	930d      	str	r3, [sp, #52]	; 0x34
  40604c:	e6b8      	b.n	405dc0 <_dtoa_r+0x178>
  40604e:	f1c7 0301 	rsb	r3, r7, #1
  406052:	9308      	str	r3, [sp, #32]
  406054:	2300      	movs	r3, #0
  406056:	9306      	str	r3, [sp, #24]
  406058:	e6a7      	b.n	405daa <_dtoa_r+0x162>
  40605a:	9d02      	ldr	r5, [sp, #8]
  40605c:	4628      	mov	r0, r5
  40605e:	f002 fba9 	bl	4087b4 <__aeabi_i2d>
  406062:	4602      	mov	r2, r0
  406064:	460b      	mov	r3, r1
  406066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40606a:	f002 fe71 	bl	408d50 <__aeabi_dcmpeq>
  40606e:	2800      	cmp	r0, #0
  406070:	f47f ae80 	bne.w	405d74 <_dtoa_r+0x12c>
  406074:	1e6b      	subs	r3, r5, #1
  406076:	9302      	str	r3, [sp, #8]
  406078:	e67c      	b.n	405d74 <_dtoa_r+0x12c>
  40607a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40607c:	9d08      	ldr	r5, [sp, #32]
  40607e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406080:	2d00      	cmp	r5, #0
  406082:	dd0c      	ble.n	40609e <_dtoa_r+0x456>
  406084:	9906      	ldr	r1, [sp, #24]
  406086:	2900      	cmp	r1, #0
  406088:	460b      	mov	r3, r1
  40608a:	dd08      	ble.n	40609e <_dtoa_r+0x456>
  40608c:	42a9      	cmp	r1, r5
  40608e:	9a08      	ldr	r2, [sp, #32]
  406090:	bfa8      	it	ge
  406092:	462b      	movge	r3, r5
  406094:	1ad2      	subs	r2, r2, r3
  406096:	1aed      	subs	r5, r5, r3
  406098:	1acb      	subs	r3, r1, r3
  40609a:	9208      	str	r2, [sp, #32]
  40609c:	9306      	str	r3, [sp, #24]
  40609e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4060a0:	b1d3      	cbz	r3, 4060d8 <_dtoa_r+0x490>
  4060a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4060a4:	2b00      	cmp	r3, #0
  4060a6:	f000 82b7 	beq.w	406618 <_dtoa_r+0x9d0>
  4060aa:	2f00      	cmp	r7, #0
  4060ac:	dd10      	ble.n	4060d0 <_dtoa_r+0x488>
  4060ae:	4631      	mov	r1, r6
  4060b0:	463a      	mov	r2, r7
  4060b2:	4620      	mov	r0, r4
  4060b4:	f001 fbb4 	bl	407820 <__pow5mult>
  4060b8:	464a      	mov	r2, r9
  4060ba:	4601      	mov	r1, r0
  4060bc:	4606      	mov	r6, r0
  4060be:	4620      	mov	r0, r4
  4060c0:	f001 fb1c 	bl	4076fc <__multiply>
  4060c4:	4649      	mov	r1, r9
  4060c6:	4680      	mov	r8, r0
  4060c8:	4620      	mov	r0, r4
  4060ca:	f001 fa73 	bl	4075b4 <_Bfree>
  4060ce:	46c1      	mov	r9, r8
  4060d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4060d2:	1bda      	subs	r2, r3, r7
  4060d4:	f040 82a1 	bne.w	40661a <_dtoa_r+0x9d2>
  4060d8:	2101      	movs	r1, #1
  4060da:	4620      	mov	r0, r4
  4060dc:	f001 fb04 	bl	4076e8 <__i2b>
  4060e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4060e2:	2b00      	cmp	r3, #0
  4060e4:	4680      	mov	r8, r0
  4060e6:	dd1c      	ble.n	406122 <_dtoa_r+0x4da>
  4060e8:	4601      	mov	r1, r0
  4060ea:	461a      	mov	r2, r3
  4060ec:	4620      	mov	r0, r4
  4060ee:	f001 fb97 	bl	407820 <__pow5mult>
  4060f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4060f4:	2b01      	cmp	r3, #1
  4060f6:	4680      	mov	r8, r0
  4060f8:	f340 8254 	ble.w	4065a4 <_dtoa_r+0x95c>
  4060fc:	2300      	movs	r3, #0
  4060fe:	930c      	str	r3, [sp, #48]	; 0x30
  406100:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406104:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406108:	6918      	ldr	r0, [r3, #16]
  40610a:	f001 fa9d 	bl	407648 <__hi0bits>
  40610e:	f1c0 0020 	rsb	r0, r0, #32
  406112:	e010      	b.n	406136 <_dtoa_r+0x4ee>
  406114:	f1c3 0520 	rsb	r5, r3, #32
  406118:	fa0a f005 	lsl.w	r0, sl, r5
  40611c:	e674      	b.n	405e08 <_dtoa_r+0x1c0>
  40611e:	900e      	str	r0, [sp, #56]	; 0x38
  406120:	e63c      	b.n	405d9c <_dtoa_r+0x154>
  406122:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406124:	2b01      	cmp	r3, #1
  406126:	f340 8287 	ble.w	406638 <_dtoa_r+0x9f0>
  40612a:	2300      	movs	r3, #0
  40612c:	930c      	str	r3, [sp, #48]	; 0x30
  40612e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406130:	2001      	movs	r0, #1
  406132:	2b00      	cmp	r3, #0
  406134:	d1e4      	bne.n	406100 <_dtoa_r+0x4b8>
  406136:	9a06      	ldr	r2, [sp, #24]
  406138:	4410      	add	r0, r2
  40613a:	f010 001f 	ands.w	r0, r0, #31
  40613e:	f000 80a1 	beq.w	406284 <_dtoa_r+0x63c>
  406142:	f1c0 0320 	rsb	r3, r0, #32
  406146:	2b04      	cmp	r3, #4
  406148:	f340 849e 	ble.w	406a88 <_dtoa_r+0xe40>
  40614c:	9b08      	ldr	r3, [sp, #32]
  40614e:	f1c0 001c 	rsb	r0, r0, #28
  406152:	4403      	add	r3, r0
  406154:	9308      	str	r3, [sp, #32]
  406156:	4613      	mov	r3, r2
  406158:	4403      	add	r3, r0
  40615a:	4405      	add	r5, r0
  40615c:	9306      	str	r3, [sp, #24]
  40615e:	9b08      	ldr	r3, [sp, #32]
  406160:	2b00      	cmp	r3, #0
  406162:	dd05      	ble.n	406170 <_dtoa_r+0x528>
  406164:	4649      	mov	r1, r9
  406166:	461a      	mov	r2, r3
  406168:	4620      	mov	r0, r4
  40616a:	f001 fba9 	bl	4078c0 <__lshift>
  40616e:	4681      	mov	r9, r0
  406170:	9b06      	ldr	r3, [sp, #24]
  406172:	2b00      	cmp	r3, #0
  406174:	dd05      	ble.n	406182 <_dtoa_r+0x53a>
  406176:	4641      	mov	r1, r8
  406178:	461a      	mov	r2, r3
  40617a:	4620      	mov	r0, r4
  40617c:	f001 fba0 	bl	4078c0 <__lshift>
  406180:	4680      	mov	r8, r0
  406182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406184:	2b00      	cmp	r3, #0
  406186:	f040 8086 	bne.w	406296 <_dtoa_r+0x64e>
  40618a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40618c:	2b00      	cmp	r3, #0
  40618e:	f340 8266 	ble.w	40665e <_dtoa_r+0xa16>
  406192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406194:	2b00      	cmp	r3, #0
  406196:	f000 8098 	beq.w	4062ca <_dtoa_r+0x682>
  40619a:	2d00      	cmp	r5, #0
  40619c:	dd05      	ble.n	4061aa <_dtoa_r+0x562>
  40619e:	4631      	mov	r1, r6
  4061a0:	462a      	mov	r2, r5
  4061a2:	4620      	mov	r0, r4
  4061a4:	f001 fb8c 	bl	4078c0 <__lshift>
  4061a8:	4606      	mov	r6, r0
  4061aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4061ac:	2b00      	cmp	r3, #0
  4061ae:	f040 8337 	bne.w	406820 <_dtoa_r+0xbd8>
  4061b2:	9606      	str	r6, [sp, #24]
  4061b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061b6:	9a04      	ldr	r2, [sp, #16]
  4061b8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4061bc:	3b01      	subs	r3, #1
  4061be:	18d3      	adds	r3, r2, r3
  4061c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4061c2:	f00a 0301 	and.w	r3, sl, #1
  4061c6:	930c      	str	r3, [sp, #48]	; 0x30
  4061c8:	4617      	mov	r7, r2
  4061ca:	46c2      	mov	sl, r8
  4061cc:	4651      	mov	r1, sl
  4061ce:	4648      	mov	r0, r9
  4061d0:	f7ff fca6 	bl	405b20 <quorem>
  4061d4:	4631      	mov	r1, r6
  4061d6:	4605      	mov	r5, r0
  4061d8:	4648      	mov	r0, r9
  4061da:	f001 fbc3 	bl	407964 <__mcmp>
  4061de:	465a      	mov	r2, fp
  4061e0:	900a      	str	r0, [sp, #40]	; 0x28
  4061e2:	4651      	mov	r1, sl
  4061e4:	4620      	mov	r0, r4
  4061e6:	f001 fbd9 	bl	40799c <__mdiff>
  4061ea:	68c2      	ldr	r2, [r0, #12]
  4061ec:	4680      	mov	r8, r0
  4061ee:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4061f2:	2a00      	cmp	r2, #0
  4061f4:	f040 822b 	bne.w	40664e <_dtoa_r+0xa06>
  4061f8:	4601      	mov	r1, r0
  4061fa:	4648      	mov	r0, r9
  4061fc:	9308      	str	r3, [sp, #32]
  4061fe:	f001 fbb1 	bl	407964 <__mcmp>
  406202:	4641      	mov	r1, r8
  406204:	9006      	str	r0, [sp, #24]
  406206:	4620      	mov	r0, r4
  406208:	f001 f9d4 	bl	4075b4 <_Bfree>
  40620c:	9a06      	ldr	r2, [sp, #24]
  40620e:	9b08      	ldr	r3, [sp, #32]
  406210:	b932      	cbnz	r2, 406220 <_dtoa_r+0x5d8>
  406212:	9924      	ldr	r1, [sp, #144]	; 0x90
  406214:	b921      	cbnz	r1, 406220 <_dtoa_r+0x5d8>
  406216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406218:	2a00      	cmp	r2, #0
  40621a:	f000 83ef 	beq.w	4069fc <_dtoa_r+0xdb4>
  40621e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406220:	990a      	ldr	r1, [sp, #40]	; 0x28
  406222:	2900      	cmp	r1, #0
  406224:	f2c0 829f 	blt.w	406766 <_dtoa_r+0xb1e>
  406228:	d105      	bne.n	406236 <_dtoa_r+0x5ee>
  40622a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40622c:	b919      	cbnz	r1, 406236 <_dtoa_r+0x5ee>
  40622e:	990c      	ldr	r1, [sp, #48]	; 0x30
  406230:	2900      	cmp	r1, #0
  406232:	f000 8298 	beq.w	406766 <_dtoa_r+0xb1e>
  406236:	2a00      	cmp	r2, #0
  406238:	f300 8306 	bgt.w	406848 <_dtoa_r+0xc00>
  40623c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40623e:	703b      	strb	r3, [r7, #0]
  406240:	f107 0801 	add.w	r8, r7, #1
  406244:	4297      	cmp	r7, r2
  406246:	4645      	mov	r5, r8
  406248:	f000 830c 	beq.w	406864 <_dtoa_r+0xc1c>
  40624c:	4649      	mov	r1, r9
  40624e:	2300      	movs	r3, #0
  406250:	220a      	movs	r2, #10
  406252:	4620      	mov	r0, r4
  406254:	f001 f9b8 	bl	4075c8 <__multadd>
  406258:	455e      	cmp	r6, fp
  40625a:	4681      	mov	r9, r0
  40625c:	4631      	mov	r1, r6
  40625e:	f04f 0300 	mov.w	r3, #0
  406262:	f04f 020a 	mov.w	r2, #10
  406266:	4620      	mov	r0, r4
  406268:	f000 81eb 	beq.w	406642 <_dtoa_r+0x9fa>
  40626c:	f001 f9ac 	bl	4075c8 <__multadd>
  406270:	4659      	mov	r1, fp
  406272:	4606      	mov	r6, r0
  406274:	2300      	movs	r3, #0
  406276:	220a      	movs	r2, #10
  406278:	4620      	mov	r0, r4
  40627a:	f001 f9a5 	bl	4075c8 <__multadd>
  40627e:	4647      	mov	r7, r8
  406280:	4683      	mov	fp, r0
  406282:	e7a3      	b.n	4061cc <_dtoa_r+0x584>
  406284:	201c      	movs	r0, #28
  406286:	9b08      	ldr	r3, [sp, #32]
  406288:	4403      	add	r3, r0
  40628a:	9308      	str	r3, [sp, #32]
  40628c:	9b06      	ldr	r3, [sp, #24]
  40628e:	4403      	add	r3, r0
  406290:	4405      	add	r5, r0
  406292:	9306      	str	r3, [sp, #24]
  406294:	e763      	b.n	40615e <_dtoa_r+0x516>
  406296:	4641      	mov	r1, r8
  406298:	4648      	mov	r0, r9
  40629a:	f001 fb63 	bl	407964 <__mcmp>
  40629e:	2800      	cmp	r0, #0
  4062a0:	f6bf af73 	bge.w	40618a <_dtoa_r+0x542>
  4062a4:	9f02      	ldr	r7, [sp, #8]
  4062a6:	4649      	mov	r1, r9
  4062a8:	2300      	movs	r3, #0
  4062aa:	220a      	movs	r2, #10
  4062ac:	4620      	mov	r0, r4
  4062ae:	3f01      	subs	r7, #1
  4062b0:	9702      	str	r7, [sp, #8]
  4062b2:	f001 f989 	bl	4075c8 <__multadd>
  4062b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4062b8:	4681      	mov	r9, r0
  4062ba:	2b00      	cmp	r3, #0
  4062bc:	f040 83b6 	bne.w	406a2c <_dtoa_r+0xde4>
  4062c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4062c2:	2b00      	cmp	r3, #0
  4062c4:	f340 83bf 	ble.w	406a46 <_dtoa_r+0xdfe>
  4062c8:	930a      	str	r3, [sp, #40]	; 0x28
  4062ca:	f8dd b010 	ldr.w	fp, [sp, #16]
  4062ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4062d0:	465d      	mov	r5, fp
  4062d2:	e002      	b.n	4062da <_dtoa_r+0x692>
  4062d4:	f001 f978 	bl	4075c8 <__multadd>
  4062d8:	4681      	mov	r9, r0
  4062da:	4641      	mov	r1, r8
  4062dc:	4648      	mov	r0, r9
  4062de:	f7ff fc1f 	bl	405b20 <quorem>
  4062e2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4062e6:	f805 ab01 	strb.w	sl, [r5], #1
  4062ea:	eba5 030b 	sub.w	r3, r5, fp
  4062ee:	42bb      	cmp	r3, r7
  4062f0:	f04f 020a 	mov.w	r2, #10
  4062f4:	f04f 0300 	mov.w	r3, #0
  4062f8:	4649      	mov	r1, r9
  4062fa:	4620      	mov	r0, r4
  4062fc:	dbea      	blt.n	4062d4 <_dtoa_r+0x68c>
  4062fe:	9b04      	ldr	r3, [sp, #16]
  406300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406302:	2a01      	cmp	r2, #1
  406304:	bfac      	ite	ge
  406306:	189b      	addge	r3, r3, r2
  406308:	3301      	addlt	r3, #1
  40630a:	461d      	mov	r5, r3
  40630c:	f04f 0b00 	mov.w	fp, #0
  406310:	4649      	mov	r1, r9
  406312:	2201      	movs	r2, #1
  406314:	4620      	mov	r0, r4
  406316:	f001 fad3 	bl	4078c0 <__lshift>
  40631a:	4641      	mov	r1, r8
  40631c:	4681      	mov	r9, r0
  40631e:	f001 fb21 	bl	407964 <__mcmp>
  406322:	2800      	cmp	r0, #0
  406324:	f340 823d 	ble.w	4067a2 <_dtoa_r+0xb5a>
  406328:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40632c:	9904      	ldr	r1, [sp, #16]
  40632e:	1e6b      	subs	r3, r5, #1
  406330:	e004      	b.n	40633c <_dtoa_r+0x6f4>
  406332:	428b      	cmp	r3, r1
  406334:	f000 81ae 	beq.w	406694 <_dtoa_r+0xa4c>
  406338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40633c:	2a39      	cmp	r2, #57	; 0x39
  40633e:	f103 0501 	add.w	r5, r3, #1
  406342:	d0f6      	beq.n	406332 <_dtoa_r+0x6ea>
  406344:	3201      	adds	r2, #1
  406346:	701a      	strb	r2, [r3, #0]
  406348:	4641      	mov	r1, r8
  40634a:	4620      	mov	r0, r4
  40634c:	f001 f932 	bl	4075b4 <_Bfree>
  406350:	2e00      	cmp	r6, #0
  406352:	f43f ae3d 	beq.w	405fd0 <_dtoa_r+0x388>
  406356:	f1bb 0f00 	cmp.w	fp, #0
  40635a:	d005      	beq.n	406368 <_dtoa_r+0x720>
  40635c:	45b3      	cmp	fp, r6
  40635e:	d003      	beq.n	406368 <_dtoa_r+0x720>
  406360:	4659      	mov	r1, fp
  406362:	4620      	mov	r0, r4
  406364:	f001 f926 	bl	4075b4 <_Bfree>
  406368:	4631      	mov	r1, r6
  40636a:	4620      	mov	r0, r4
  40636c:	f001 f922 	bl	4075b4 <_Bfree>
  406370:	e62e      	b.n	405fd0 <_dtoa_r+0x388>
  406372:	2300      	movs	r3, #0
  406374:	930b      	str	r3, [sp, #44]	; 0x2c
  406376:	9b02      	ldr	r3, [sp, #8]
  406378:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40637a:	4413      	add	r3, r2
  40637c:	930f      	str	r3, [sp, #60]	; 0x3c
  40637e:	3301      	adds	r3, #1
  406380:	2b01      	cmp	r3, #1
  406382:	461f      	mov	r7, r3
  406384:	461e      	mov	r6, r3
  406386:	930a      	str	r3, [sp, #40]	; 0x28
  406388:	bfb8      	it	lt
  40638a:	2701      	movlt	r7, #1
  40638c:	2100      	movs	r1, #0
  40638e:	2f17      	cmp	r7, #23
  406390:	6461      	str	r1, [r4, #68]	; 0x44
  406392:	d90a      	bls.n	4063aa <_dtoa_r+0x762>
  406394:	2201      	movs	r2, #1
  406396:	2304      	movs	r3, #4
  406398:	005b      	lsls	r3, r3, #1
  40639a:	f103 0014 	add.w	r0, r3, #20
  40639e:	4287      	cmp	r7, r0
  4063a0:	4611      	mov	r1, r2
  4063a2:	f102 0201 	add.w	r2, r2, #1
  4063a6:	d2f7      	bcs.n	406398 <_dtoa_r+0x750>
  4063a8:	6461      	str	r1, [r4, #68]	; 0x44
  4063aa:	4620      	mov	r0, r4
  4063ac:	f001 f8dc 	bl	407568 <_Balloc>
  4063b0:	2e0e      	cmp	r6, #14
  4063b2:	9004      	str	r0, [sp, #16]
  4063b4:	6420      	str	r0, [r4, #64]	; 0x40
  4063b6:	f63f ad41 	bhi.w	405e3c <_dtoa_r+0x1f4>
  4063ba:	2d00      	cmp	r5, #0
  4063bc:	f43f ad3e 	beq.w	405e3c <_dtoa_r+0x1f4>
  4063c0:	9902      	ldr	r1, [sp, #8]
  4063c2:	2900      	cmp	r1, #0
  4063c4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4063c8:	f340 8202 	ble.w	4067d0 <_dtoa_r+0xb88>
  4063cc:	4bb8      	ldr	r3, [pc, #736]	; (4066b0 <_dtoa_r+0xa68>)
  4063ce:	f001 020f 	and.w	r2, r1, #15
  4063d2:	110d      	asrs	r5, r1, #4
  4063d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4063d8:	06e9      	lsls	r1, r5, #27
  4063da:	e9d3 6700 	ldrd	r6, r7, [r3]
  4063de:	f140 81ae 	bpl.w	40673e <_dtoa_r+0xaf6>
  4063e2:	4bb4      	ldr	r3, [pc, #720]	; (4066b4 <_dtoa_r+0xa6c>)
  4063e4:	4650      	mov	r0, sl
  4063e6:	4659      	mov	r1, fp
  4063e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4063ec:	f002 fb72 	bl	408ad4 <__aeabi_ddiv>
  4063f0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4063f4:	f005 050f 	and.w	r5, r5, #15
  4063f8:	f04f 0a03 	mov.w	sl, #3
  4063fc:	b18d      	cbz	r5, 406422 <_dtoa_r+0x7da>
  4063fe:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4066b4 <_dtoa_r+0xa6c>
  406402:	07ea      	lsls	r2, r5, #31
  406404:	d509      	bpl.n	40641a <_dtoa_r+0x7d2>
  406406:	4630      	mov	r0, r6
  406408:	4639      	mov	r1, r7
  40640a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40640e:	f002 fa37 	bl	408880 <__aeabi_dmul>
  406412:	f10a 0a01 	add.w	sl, sl, #1
  406416:	4606      	mov	r6, r0
  406418:	460f      	mov	r7, r1
  40641a:	106d      	asrs	r5, r5, #1
  40641c:	f108 0808 	add.w	r8, r8, #8
  406420:	d1ef      	bne.n	406402 <_dtoa_r+0x7ba>
  406422:	463b      	mov	r3, r7
  406424:	4632      	mov	r2, r6
  406426:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40642a:	f002 fb53 	bl	408ad4 <__aeabi_ddiv>
  40642e:	4607      	mov	r7, r0
  406430:	4688      	mov	r8, r1
  406432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406434:	b143      	cbz	r3, 406448 <_dtoa_r+0x800>
  406436:	2200      	movs	r2, #0
  406438:	4b9f      	ldr	r3, [pc, #636]	; (4066b8 <_dtoa_r+0xa70>)
  40643a:	4638      	mov	r0, r7
  40643c:	4641      	mov	r1, r8
  40643e:	f002 fc91 	bl	408d64 <__aeabi_dcmplt>
  406442:	2800      	cmp	r0, #0
  406444:	f040 8286 	bne.w	406954 <_dtoa_r+0xd0c>
  406448:	4650      	mov	r0, sl
  40644a:	f002 f9b3 	bl	4087b4 <__aeabi_i2d>
  40644e:	463a      	mov	r2, r7
  406450:	4643      	mov	r3, r8
  406452:	f002 fa15 	bl	408880 <__aeabi_dmul>
  406456:	4b99      	ldr	r3, [pc, #612]	; (4066bc <_dtoa_r+0xa74>)
  406458:	2200      	movs	r2, #0
  40645a:	f002 f85f 	bl	40851c <__adddf3>
  40645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406460:	4605      	mov	r5, r0
  406462:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406466:	2b00      	cmp	r3, #0
  406468:	f000 813e 	beq.w	4066e8 <_dtoa_r+0xaa0>
  40646c:	9b02      	ldr	r3, [sp, #8]
  40646e:	9315      	str	r3, [sp, #84]	; 0x54
  406470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406472:	9312      	str	r3, [sp, #72]	; 0x48
  406474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406476:	2b00      	cmp	r3, #0
  406478:	f000 81fa 	beq.w	406870 <_dtoa_r+0xc28>
  40647c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40647e:	4b8c      	ldr	r3, [pc, #560]	; (4066b0 <_dtoa_r+0xa68>)
  406480:	498f      	ldr	r1, [pc, #572]	; (4066c0 <_dtoa_r+0xa78>)
  406482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406486:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40648a:	2000      	movs	r0, #0
  40648c:	f002 fb22 	bl	408ad4 <__aeabi_ddiv>
  406490:	462a      	mov	r2, r5
  406492:	4633      	mov	r3, r6
  406494:	f002 f840 	bl	408518 <__aeabi_dsub>
  406498:	4682      	mov	sl, r0
  40649a:	468b      	mov	fp, r1
  40649c:	4638      	mov	r0, r7
  40649e:	4641      	mov	r1, r8
  4064a0:	f002 fc9e 	bl	408de0 <__aeabi_d2iz>
  4064a4:	4605      	mov	r5, r0
  4064a6:	f002 f985 	bl	4087b4 <__aeabi_i2d>
  4064aa:	4602      	mov	r2, r0
  4064ac:	460b      	mov	r3, r1
  4064ae:	4638      	mov	r0, r7
  4064b0:	4641      	mov	r1, r8
  4064b2:	f002 f831 	bl	408518 <__aeabi_dsub>
  4064b6:	3530      	adds	r5, #48	; 0x30
  4064b8:	fa5f f885 	uxtb.w	r8, r5
  4064bc:	9d04      	ldr	r5, [sp, #16]
  4064be:	4606      	mov	r6, r0
  4064c0:	460f      	mov	r7, r1
  4064c2:	f885 8000 	strb.w	r8, [r5]
  4064c6:	4602      	mov	r2, r0
  4064c8:	460b      	mov	r3, r1
  4064ca:	4650      	mov	r0, sl
  4064cc:	4659      	mov	r1, fp
  4064ce:	3501      	adds	r5, #1
  4064d0:	f002 fc66 	bl	408da0 <__aeabi_dcmpgt>
  4064d4:	2800      	cmp	r0, #0
  4064d6:	d154      	bne.n	406582 <_dtoa_r+0x93a>
  4064d8:	4632      	mov	r2, r6
  4064da:	463b      	mov	r3, r7
  4064dc:	2000      	movs	r0, #0
  4064de:	4976      	ldr	r1, [pc, #472]	; (4066b8 <_dtoa_r+0xa70>)
  4064e0:	f002 f81a 	bl	408518 <__aeabi_dsub>
  4064e4:	4602      	mov	r2, r0
  4064e6:	460b      	mov	r3, r1
  4064e8:	4650      	mov	r0, sl
  4064ea:	4659      	mov	r1, fp
  4064ec:	f002 fc58 	bl	408da0 <__aeabi_dcmpgt>
  4064f0:	2800      	cmp	r0, #0
  4064f2:	f040 8270 	bne.w	4069d6 <_dtoa_r+0xd8e>
  4064f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4064f8:	2a01      	cmp	r2, #1
  4064fa:	f000 8111 	beq.w	406720 <_dtoa_r+0xad8>
  4064fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406500:	9a04      	ldr	r2, [sp, #16]
  406502:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406506:	4413      	add	r3, r2
  406508:	4699      	mov	r9, r3
  40650a:	e00d      	b.n	406528 <_dtoa_r+0x8e0>
  40650c:	2000      	movs	r0, #0
  40650e:	496a      	ldr	r1, [pc, #424]	; (4066b8 <_dtoa_r+0xa70>)
  406510:	f002 f802 	bl	408518 <__aeabi_dsub>
  406514:	4652      	mov	r2, sl
  406516:	465b      	mov	r3, fp
  406518:	f002 fc24 	bl	408d64 <__aeabi_dcmplt>
  40651c:	2800      	cmp	r0, #0
  40651e:	f040 8258 	bne.w	4069d2 <_dtoa_r+0xd8a>
  406522:	454d      	cmp	r5, r9
  406524:	f000 80fa 	beq.w	40671c <_dtoa_r+0xad4>
  406528:	4650      	mov	r0, sl
  40652a:	4659      	mov	r1, fp
  40652c:	2200      	movs	r2, #0
  40652e:	4b65      	ldr	r3, [pc, #404]	; (4066c4 <_dtoa_r+0xa7c>)
  406530:	f002 f9a6 	bl	408880 <__aeabi_dmul>
  406534:	2200      	movs	r2, #0
  406536:	4b63      	ldr	r3, [pc, #396]	; (4066c4 <_dtoa_r+0xa7c>)
  406538:	4682      	mov	sl, r0
  40653a:	468b      	mov	fp, r1
  40653c:	4630      	mov	r0, r6
  40653e:	4639      	mov	r1, r7
  406540:	f002 f99e 	bl	408880 <__aeabi_dmul>
  406544:	460f      	mov	r7, r1
  406546:	4606      	mov	r6, r0
  406548:	f002 fc4a 	bl	408de0 <__aeabi_d2iz>
  40654c:	4680      	mov	r8, r0
  40654e:	f002 f931 	bl	4087b4 <__aeabi_i2d>
  406552:	4602      	mov	r2, r0
  406554:	460b      	mov	r3, r1
  406556:	4630      	mov	r0, r6
  406558:	4639      	mov	r1, r7
  40655a:	f001 ffdd 	bl	408518 <__aeabi_dsub>
  40655e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406562:	fa5f f888 	uxtb.w	r8, r8
  406566:	4652      	mov	r2, sl
  406568:	465b      	mov	r3, fp
  40656a:	f805 8b01 	strb.w	r8, [r5], #1
  40656e:	4606      	mov	r6, r0
  406570:	460f      	mov	r7, r1
  406572:	f002 fbf7 	bl	408d64 <__aeabi_dcmplt>
  406576:	4632      	mov	r2, r6
  406578:	463b      	mov	r3, r7
  40657a:	2800      	cmp	r0, #0
  40657c:	d0c6      	beq.n	40650c <_dtoa_r+0x8c4>
  40657e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406582:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406584:	9302      	str	r3, [sp, #8]
  406586:	e523      	b.n	405fd0 <_dtoa_r+0x388>
  406588:	2300      	movs	r3, #0
  40658a:	930b      	str	r3, [sp, #44]	; 0x2c
  40658c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40658e:	2b00      	cmp	r3, #0
  406590:	f340 80dc 	ble.w	40674c <_dtoa_r+0xb04>
  406594:	461f      	mov	r7, r3
  406596:	461e      	mov	r6, r3
  406598:	930f      	str	r3, [sp, #60]	; 0x3c
  40659a:	930a      	str	r3, [sp, #40]	; 0x28
  40659c:	e6f6      	b.n	40638c <_dtoa_r+0x744>
  40659e:	2301      	movs	r3, #1
  4065a0:	930b      	str	r3, [sp, #44]	; 0x2c
  4065a2:	e7f3      	b.n	40658c <_dtoa_r+0x944>
  4065a4:	f1ba 0f00 	cmp.w	sl, #0
  4065a8:	f47f ada8 	bne.w	4060fc <_dtoa_r+0x4b4>
  4065ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4065b0:	2b00      	cmp	r3, #0
  4065b2:	f47f adba 	bne.w	40612a <_dtoa_r+0x4e2>
  4065b6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4065ba:	0d3f      	lsrs	r7, r7, #20
  4065bc:	053f      	lsls	r7, r7, #20
  4065be:	2f00      	cmp	r7, #0
  4065c0:	f000 820d 	beq.w	4069de <_dtoa_r+0xd96>
  4065c4:	9b08      	ldr	r3, [sp, #32]
  4065c6:	3301      	adds	r3, #1
  4065c8:	9308      	str	r3, [sp, #32]
  4065ca:	9b06      	ldr	r3, [sp, #24]
  4065cc:	3301      	adds	r3, #1
  4065ce:	9306      	str	r3, [sp, #24]
  4065d0:	2301      	movs	r3, #1
  4065d2:	930c      	str	r3, [sp, #48]	; 0x30
  4065d4:	e5ab      	b.n	40612e <_dtoa_r+0x4e6>
  4065d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4065d8:	2b00      	cmp	r3, #0
  4065da:	f73f ac42 	bgt.w	405e62 <_dtoa_r+0x21a>
  4065de:	f040 8221 	bne.w	406a24 <_dtoa_r+0xddc>
  4065e2:	2200      	movs	r2, #0
  4065e4:	4b38      	ldr	r3, [pc, #224]	; (4066c8 <_dtoa_r+0xa80>)
  4065e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4065ea:	f002 f949 	bl	408880 <__aeabi_dmul>
  4065ee:	4652      	mov	r2, sl
  4065f0:	465b      	mov	r3, fp
  4065f2:	f002 fbcb 	bl	408d8c <__aeabi_dcmpge>
  4065f6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4065fa:	4646      	mov	r6, r8
  4065fc:	2800      	cmp	r0, #0
  4065fe:	d041      	beq.n	406684 <_dtoa_r+0xa3c>
  406600:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406602:	9d04      	ldr	r5, [sp, #16]
  406604:	43db      	mvns	r3, r3
  406606:	9302      	str	r3, [sp, #8]
  406608:	4641      	mov	r1, r8
  40660a:	4620      	mov	r0, r4
  40660c:	f000 ffd2 	bl	4075b4 <_Bfree>
  406610:	2e00      	cmp	r6, #0
  406612:	f43f acdd 	beq.w	405fd0 <_dtoa_r+0x388>
  406616:	e6a7      	b.n	406368 <_dtoa_r+0x720>
  406618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40661a:	4649      	mov	r1, r9
  40661c:	4620      	mov	r0, r4
  40661e:	f001 f8ff 	bl	407820 <__pow5mult>
  406622:	4681      	mov	r9, r0
  406624:	e558      	b.n	4060d8 <_dtoa_r+0x490>
  406626:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406628:	2a00      	cmp	r2, #0
  40662a:	f000 8187 	beq.w	40693c <_dtoa_r+0xcf4>
  40662e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406632:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406634:	9d08      	ldr	r5, [sp, #32]
  406636:	e4f2      	b.n	40601e <_dtoa_r+0x3d6>
  406638:	f1ba 0f00 	cmp.w	sl, #0
  40663c:	f47f ad75 	bne.w	40612a <_dtoa_r+0x4e2>
  406640:	e7b4      	b.n	4065ac <_dtoa_r+0x964>
  406642:	f000 ffc1 	bl	4075c8 <__multadd>
  406646:	4647      	mov	r7, r8
  406648:	4606      	mov	r6, r0
  40664a:	4683      	mov	fp, r0
  40664c:	e5be      	b.n	4061cc <_dtoa_r+0x584>
  40664e:	4601      	mov	r1, r0
  406650:	4620      	mov	r0, r4
  406652:	9306      	str	r3, [sp, #24]
  406654:	f000 ffae 	bl	4075b4 <_Bfree>
  406658:	2201      	movs	r2, #1
  40665a:	9b06      	ldr	r3, [sp, #24]
  40665c:	e5e0      	b.n	406220 <_dtoa_r+0x5d8>
  40665e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406660:	2b02      	cmp	r3, #2
  406662:	f77f ad96 	ble.w	406192 <_dtoa_r+0x54a>
  406666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406668:	2b00      	cmp	r3, #0
  40666a:	d1c9      	bne.n	406600 <_dtoa_r+0x9b8>
  40666c:	4641      	mov	r1, r8
  40666e:	2205      	movs	r2, #5
  406670:	4620      	mov	r0, r4
  406672:	f000 ffa9 	bl	4075c8 <__multadd>
  406676:	4601      	mov	r1, r0
  406678:	4680      	mov	r8, r0
  40667a:	4648      	mov	r0, r9
  40667c:	f001 f972 	bl	407964 <__mcmp>
  406680:	2800      	cmp	r0, #0
  406682:	ddbd      	ble.n	406600 <_dtoa_r+0x9b8>
  406684:	9a02      	ldr	r2, [sp, #8]
  406686:	9904      	ldr	r1, [sp, #16]
  406688:	2331      	movs	r3, #49	; 0x31
  40668a:	3201      	adds	r2, #1
  40668c:	9202      	str	r2, [sp, #8]
  40668e:	700b      	strb	r3, [r1, #0]
  406690:	1c4d      	adds	r5, r1, #1
  406692:	e7b9      	b.n	406608 <_dtoa_r+0x9c0>
  406694:	9a02      	ldr	r2, [sp, #8]
  406696:	3201      	adds	r2, #1
  406698:	9202      	str	r2, [sp, #8]
  40669a:	9a04      	ldr	r2, [sp, #16]
  40669c:	2331      	movs	r3, #49	; 0x31
  40669e:	7013      	strb	r3, [r2, #0]
  4066a0:	e652      	b.n	406348 <_dtoa_r+0x700>
  4066a2:	2301      	movs	r3, #1
  4066a4:	930b      	str	r3, [sp, #44]	; 0x2c
  4066a6:	e666      	b.n	406376 <_dtoa_r+0x72e>
  4066a8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4066ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4066ae:	e48f      	b.n	405fd0 <_dtoa_r+0x388>
  4066b0:	00409310 	.word	0x00409310
  4066b4:	004092e8 	.word	0x004092e8
  4066b8:	3ff00000 	.word	0x3ff00000
  4066bc:	401c0000 	.word	0x401c0000
  4066c0:	3fe00000 	.word	0x3fe00000
  4066c4:	40240000 	.word	0x40240000
  4066c8:	40140000 	.word	0x40140000
  4066cc:	4650      	mov	r0, sl
  4066ce:	f002 f871 	bl	4087b4 <__aeabi_i2d>
  4066d2:	463a      	mov	r2, r7
  4066d4:	4643      	mov	r3, r8
  4066d6:	f002 f8d3 	bl	408880 <__aeabi_dmul>
  4066da:	2200      	movs	r2, #0
  4066dc:	4bc1      	ldr	r3, [pc, #772]	; (4069e4 <_dtoa_r+0xd9c>)
  4066de:	f001 ff1d 	bl	40851c <__adddf3>
  4066e2:	4605      	mov	r5, r0
  4066e4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4066e8:	4641      	mov	r1, r8
  4066ea:	2200      	movs	r2, #0
  4066ec:	4bbe      	ldr	r3, [pc, #760]	; (4069e8 <_dtoa_r+0xda0>)
  4066ee:	4638      	mov	r0, r7
  4066f0:	f001 ff12 	bl	408518 <__aeabi_dsub>
  4066f4:	462a      	mov	r2, r5
  4066f6:	4633      	mov	r3, r6
  4066f8:	4682      	mov	sl, r0
  4066fa:	468b      	mov	fp, r1
  4066fc:	f002 fb50 	bl	408da0 <__aeabi_dcmpgt>
  406700:	4680      	mov	r8, r0
  406702:	2800      	cmp	r0, #0
  406704:	f040 8110 	bne.w	406928 <_dtoa_r+0xce0>
  406708:	462a      	mov	r2, r5
  40670a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40670e:	4650      	mov	r0, sl
  406710:	4659      	mov	r1, fp
  406712:	f002 fb27 	bl	408d64 <__aeabi_dcmplt>
  406716:	b118      	cbz	r0, 406720 <_dtoa_r+0xad8>
  406718:	4646      	mov	r6, r8
  40671a:	e771      	b.n	406600 <_dtoa_r+0x9b8>
  40671c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406720:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  406724:	f7ff bb8a 	b.w	405e3c <_dtoa_r+0x1f4>
  406728:	9804      	ldr	r0, [sp, #16]
  40672a:	f7ff babb 	b.w	405ca4 <_dtoa_r+0x5c>
  40672e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406732:	970c      	str	r7, [sp, #48]	; 0x30
  406734:	1afb      	subs	r3, r7, r3
  406736:	441a      	add	r2, r3
  406738:	920d      	str	r2, [sp, #52]	; 0x34
  40673a:	2700      	movs	r7, #0
  40673c:	e469      	b.n	406012 <_dtoa_r+0x3ca>
  40673e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  406742:	f04f 0a02 	mov.w	sl, #2
  406746:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40674a:	e657      	b.n	4063fc <_dtoa_r+0x7b4>
  40674c:	2100      	movs	r1, #0
  40674e:	2301      	movs	r3, #1
  406750:	6461      	str	r1, [r4, #68]	; 0x44
  406752:	4620      	mov	r0, r4
  406754:	9325      	str	r3, [sp, #148]	; 0x94
  406756:	f000 ff07 	bl	407568 <_Balloc>
  40675a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40675c:	9004      	str	r0, [sp, #16]
  40675e:	6420      	str	r0, [r4, #64]	; 0x40
  406760:	930a      	str	r3, [sp, #40]	; 0x28
  406762:	930f      	str	r3, [sp, #60]	; 0x3c
  406764:	e629      	b.n	4063ba <_dtoa_r+0x772>
  406766:	2a00      	cmp	r2, #0
  406768:	46d0      	mov	r8, sl
  40676a:	f8cd b018 	str.w	fp, [sp, #24]
  40676e:	469a      	mov	sl, r3
  406770:	dd11      	ble.n	406796 <_dtoa_r+0xb4e>
  406772:	4649      	mov	r1, r9
  406774:	2201      	movs	r2, #1
  406776:	4620      	mov	r0, r4
  406778:	f001 f8a2 	bl	4078c0 <__lshift>
  40677c:	4641      	mov	r1, r8
  40677e:	4681      	mov	r9, r0
  406780:	f001 f8f0 	bl	407964 <__mcmp>
  406784:	2800      	cmp	r0, #0
  406786:	f340 8146 	ble.w	406a16 <_dtoa_r+0xdce>
  40678a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40678e:	f000 8106 	beq.w	40699e <_dtoa_r+0xd56>
  406792:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406796:	46b3      	mov	fp, r6
  406798:	f887 a000 	strb.w	sl, [r7]
  40679c:	1c7d      	adds	r5, r7, #1
  40679e:	9e06      	ldr	r6, [sp, #24]
  4067a0:	e5d2      	b.n	406348 <_dtoa_r+0x700>
  4067a2:	d104      	bne.n	4067ae <_dtoa_r+0xb66>
  4067a4:	f01a 0f01 	tst.w	sl, #1
  4067a8:	d001      	beq.n	4067ae <_dtoa_r+0xb66>
  4067aa:	e5bd      	b.n	406328 <_dtoa_r+0x6e0>
  4067ac:	4615      	mov	r5, r2
  4067ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4067b2:	2b30      	cmp	r3, #48	; 0x30
  4067b4:	f105 32ff 	add.w	r2, r5, #4294967295
  4067b8:	d0f8      	beq.n	4067ac <_dtoa_r+0xb64>
  4067ba:	e5c5      	b.n	406348 <_dtoa_r+0x700>
  4067bc:	9904      	ldr	r1, [sp, #16]
  4067be:	2230      	movs	r2, #48	; 0x30
  4067c0:	700a      	strb	r2, [r1, #0]
  4067c2:	9a02      	ldr	r2, [sp, #8]
  4067c4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4067c8:	3201      	adds	r2, #1
  4067ca:	9202      	str	r2, [sp, #8]
  4067cc:	f7ff bbfc 	b.w	405fc8 <_dtoa_r+0x380>
  4067d0:	f000 80bb 	beq.w	40694a <_dtoa_r+0xd02>
  4067d4:	9b02      	ldr	r3, [sp, #8]
  4067d6:	425d      	negs	r5, r3
  4067d8:	4b84      	ldr	r3, [pc, #528]	; (4069ec <_dtoa_r+0xda4>)
  4067da:	f005 020f 	and.w	r2, r5, #15
  4067de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4067e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4067ea:	f002 f849 	bl	408880 <__aeabi_dmul>
  4067ee:	112d      	asrs	r5, r5, #4
  4067f0:	4607      	mov	r7, r0
  4067f2:	4688      	mov	r8, r1
  4067f4:	f000 812c 	beq.w	406a50 <_dtoa_r+0xe08>
  4067f8:	4e7d      	ldr	r6, [pc, #500]	; (4069f0 <_dtoa_r+0xda8>)
  4067fa:	f04f 0a02 	mov.w	sl, #2
  4067fe:	07eb      	lsls	r3, r5, #31
  406800:	d509      	bpl.n	406816 <_dtoa_r+0xbce>
  406802:	4638      	mov	r0, r7
  406804:	4641      	mov	r1, r8
  406806:	e9d6 2300 	ldrd	r2, r3, [r6]
  40680a:	f002 f839 	bl	408880 <__aeabi_dmul>
  40680e:	f10a 0a01 	add.w	sl, sl, #1
  406812:	4607      	mov	r7, r0
  406814:	4688      	mov	r8, r1
  406816:	106d      	asrs	r5, r5, #1
  406818:	f106 0608 	add.w	r6, r6, #8
  40681c:	d1ef      	bne.n	4067fe <_dtoa_r+0xbb6>
  40681e:	e608      	b.n	406432 <_dtoa_r+0x7ea>
  406820:	6871      	ldr	r1, [r6, #4]
  406822:	4620      	mov	r0, r4
  406824:	f000 fea0 	bl	407568 <_Balloc>
  406828:	6933      	ldr	r3, [r6, #16]
  40682a:	3302      	adds	r3, #2
  40682c:	009a      	lsls	r2, r3, #2
  40682e:	4605      	mov	r5, r0
  406830:	f106 010c 	add.w	r1, r6, #12
  406834:	300c      	adds	r0, #12
  406836:	f7fd fb5d 	bl	403ef4 <memcpy>
  40683a:	4629      	mov	r1, r5
  40683c:	2201      	movs	r2, #1
  40683e:	4620      	mov	r0, r4
  406840:	f001 f83e 	bl	4078c0 <__lshift>
  406844:	9006      	str	r0, [sp, #24]
  406846:	e4b5      	b.n	4061b4 <_dtoa_r+0x56c>
  406848:	2b39      	cmp	r3, #57	; 0x39
  40684a:	f8cd b018 	str.w	fp, [sp, #24]
  40684e:	46d0      	mov	r8, sl
  406850:	f000 80a5 	beq.w	40699e <_dtoa_r+0xd56>
  406854:	f103 0a01 	add.w	sl, r3, #1
  406858:	46b3      	mov	fp, r6
  40685a:	f887 a000 	strb.w	sl, [r7]
  40685e:	1c7d      	adds	r5, r7, #1
  406860:	9e06      	ldr	r6, [sp, #24]
  406862:	e571      	b.n	406348 <_dtoa_r+0x700>
  406864:	465a      	mov	r2, fp
  406866:	46d0      	mov	r8, sl
  406868:	46b3      	mov	fp, r6
  40686a:	469a      	mov	sl, r3
  40686c:	4616      	mov	r6, r2
  40686e:	e54f      	b.n	406310 <_dtoa_r+0x6c8>
  406870:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406872:	495e      	ldr	r1, [pc, #376]	; (4069ec <_dtoa_r+0xda4>)
  406874:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406878:	462a      	mov	r2, r5
  40687a:	4633      	mov	r3, r6
  40687c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406880:	f001 fffe 	bl	408880 <__aeabi_dmul>
  406884:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406888:	4638      	mov	r0, r7
  40688a:	4641      	mov	r1, r8
  40688c:	f002 faa8 	bl	408de0 <__aeabi_d2iz>
  406890:	4605      	mov	r5, r0
  406892:	f001 ff8f 	bl	4087b4 <__aeabi_i2d>
  406896:	460b      	mov	r3, r1
  406898:	4602      	mov	r2, r0
  40689a:	4641      	mov	r1, r8
  40689c:	4638      	mov	r0, r7
  40689e:	f001 fe3b 	bl	408518 <__aeabi_dsub>
  4068a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4068a4:	460f      	mov	r7, r1
  4068a6:	9904      	ldr	r1, [sp, #16]
  4068a8:	3530      	adds	r5, #48	; 0x30
  4068aa:	2b01      	cmp	r3, #1
  4068ac:	700d      	strb	r5, [r1, #0]
  4068ae:	4606      	mov	r6, r0
  4068b0:	f101 0501 	add.w	r5, r1, #1
  4068b4:	d026      	beq.n	406904 <_dtoa_r+0xcbc>
  4068b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4068b8:	9a04      	ldr	r2, [sp, #16]
  4068ba:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4069f8 <_dtoa_r+0xdb0>
  4068be:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4068c2:	4413      	add	r3, r2
  4068c4:	f04f 0a00 	mov.w	sl, #0
  4068c8:	4699      	mov	r9, r3
  4068ca:	4652      	mov	r2, sl
  4068cc:	465b      	mov	r3, fp
  4068ce:	4630      	mov	r0, r6
  4068d0:	4639      	mov	r1, r7
  4068d2:	f001 ffd5 	bl	408880 <__aeabi_dmul>
  4068d6:	460f      	mov	r7, r1
  4068d8:	4606      	mov	r6, r0
  4068da:	f002 fa81 	bl	408de0 <__aeabi_d2iz>
  4068de:	4680      	mov	r8, r0
  4068e0:	f001 ff68 	bl	4087b4 <__aeabi_i2d>
  4068e4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4068e8:	4602      	mov	r2, r0
  4068ea:	460b      	mov	r3, r1
  4068ec:	4630      	mov	r0, r6
  4068ee:	4639      	mov	r1, r7
  4068f0:	f001 fe12 	bl	408518 <__aeabi_dsub>
  4068f4:	f805 8b01 	strb.w	r8, [r5], #1
  4068f8:	454d      	cmp	r5, r9
  4068fa:	4606      	mov	r6, r0
  4068fc:	460f      	mov	r7, r1
  4068fe:	d1e4      	bne.n	4068ca <_dtoa_r+0xc82>
  406900:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406904:	4b3b      	ldr	r3, [pc, #236]	; (4069f4 <_dtoa_r+0xdac>)
  406906:	2200      	movs	r2, #0
  406908:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40690c:	f001 fe06 	bl	40851c <__adddf3>
  406910:	4632      	mov	r2, r6
  406912:	463b      	mov	r3, r7
  406914:	f002 fa26 	bl	408d64 <__aeabi_dcmplt>
  406918:	2800      	cmp	r0, #0
  40691a:	d046      	beq.n	4069aa <_dtoa_r+0xd62>
  40691c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40691e:	9302      	str	r3, [sp, #8]
  406920:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406924:	f7ff bb43 	b.w	405fae <_dtoa_r+0x366>
  406928:	f04f 0800 	mov.w	r8, #0
  40692c:	4646      	mov	r6, r8
  40692e:	e6a9      	b.n	406684 <_dtoa_r+0xa3c>
  406930:	9b08      	ldr	r3, [sp, #32]
  406932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406934:	1a9d      	subs	r5, r3, r2
  406936:	2300      	movs	r3, #0
  406938:	f7ff bb71 	b.w	40601e <_dtoa_r+0x3d6>
  40693c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40693e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406940:	9d08      	ldr	r5, [sp, #32]
  406942:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406946:	f7ff bb6a 	b.w	40601e <_dtoa_r+0x3d6>
  40694a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40694e:	f04f 0a02 	mov.w	sl, #2
  406952:	e56e      	b.n	406432 <_dtoa_r+0x7ea>
  406954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406956:	2b00      	cmp	r3, #0
  406958:	f43f aeb8 	beq.w	4066cc <_dtoa_r+0xa84>
  40695c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40695e:	2b00      	cmp	r3, #0
  406960:	f77f aede 	ble.w	406720 <_dtoa_r+0xad8>
  406964:	2200      	movs	r2, #0
  406966:	4b24      	ldr	r3, [pc, #144]	; (4069f8 <_dtoa_r+0xdb0>)
  406968:	4638      	mov	r0, r7
  40696a:	4641      	mov	r1, r8
  40696c:	f001 ff88 	bl	408880 <__aeabi_dmul>
  406970:	4607      	mov	r7, r0
  406972:	4688      	mov	r8, r1
  406974:	f10a 0001 	add.w	r0, sl, #1
  406978:	f001 ff1c 	bl	4087b4 <__aeabi_i2d>
  40697c:	463a      	mov	r2, r7
  40697e:	4643      	mov	r3, r8
  406980:	f001 ff7e 	bl	408880 <__aeabi_dmul>
  406984:	2200      	movs	r2, #0
  406986:	4b17      	ldr	r3, [pc, #92]	; (4069e4 <_dtoa_r+0xd9c>)
  406988:	f001 fdc8 	bl	40851c <__adddf3>
  40698c:	9a02      	ldr	r2, [sp, #8]
  40698e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406990:	9312      	str	r3, [sp, #72]	; 0x48
  406992:	3a01      	subs	r2, #1
  406994:	4605      	mov	r5, r0
  406996:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40699a:	9215      	str	r2, [sp, #84]	; 0x54
  40699c:	e56a      	b.n	406474 <_dtoa_r+0x82c>
  40699e:	2239      	movs	r2, #57	; 0x39
  4069a0:	46b3      	mov	fp, r6
  4069a2:	703a      	strb	r2, [r7, #0]
  4069a4:	9e06      	ldr	r6, [sp, #24]
  4069a6:	1c7d      	adds	r5, r7, #1
  4069a8:	e4c0      	b.n	40632c <_dtoa_r+0x6e4>
  4069aa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4069ae:	2000      	movs	r0, #0
  4069b0:	4910      	ldr	r1, [pc, #64]	; (4069f4 <_dtoa_r+0xdac>)
  4069b2:	f001 fdb1 	bl	408518 <__aeabi_dsub>
  4069b6:	4632      	mov	r2, r6
  4069b8:	463b      	mov	r3, r7
  4069ba:	f002 f9f1 	bl	408da0 <__aeabi_dcmpgt>
  4069be:	b908      	cbnz	r0, 4069c4 <_dtoa_r+0xd7c>
  4069c0:	e6ae      	b.n	406720 <_dtoa_r+0xad8>
  4069c2:	4615      	mov	r5, r2
  4069c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4069c8:	2b30      	cmp	r3, #48	; 0x30
  4069ca:	f105 32ff 	add.w	r2, r5, #4294967295
  4069ce:	d0f8      	beq.n	4069c2 <_dtoa_r+0xd7a>
  4069d0:	e5d7      	b.n	406582 <_dtoa_r+0x93a>
  4069d2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4069d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4069d8:	9302      	str	r3, [sp, #8]
  4069da:	f7ff bae8 	b.w	405fae <_dtoa_r+0x366>
  4069de:	970c      	str	r7, [sp, #48]	; 0x30
  4069e0:	f7ff bba5 	b.w	40612e <_dtoa_r+0x4e6>
  4069e4:	401c0000 	.word	0x401c0000
  4069e8:	40140000 	.word	0x40140000
  4069ec:	00409310 	.word	0x00409310
  4069f0:	004092e8 	.word	0x004092e8
  4069f4:	3fe00000 	.word	0x3fe00000
  4069f8:	40240000 	.word	0x40240000
  4069fc:	2b39      	cmp	r3, #57	; 0x39
  4069fe:	f8cd b018 	str.w	fp, [sp, #24]
  406a02:	46d0      	mov	r8, sl
  406a04:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406a08:	469a      	mov	sl, r3
  406a0a:	d0c8      	beq.n	40699e <_dtoa_r+0xd56>
  406a0c:	f1bb 0f00 	cmp.w	fp, #0
  406a10:	f73f aebf 	bgt.w	406792 <_dtoa_r+0xb4a>
  406a14:	e6bf      	b.n	406796 <_dtoa_r+0xb4e>
  406a16:	f47f aebe 	bne.w	406796 <_dtoa_r+0xb4e>
  406a1a:	f01a 0f01 	tst.w	sl, #1
  406a1e:	f43f aeba 	beq.w	406796 <_dtoa_r+0xb4e>
  406a22:	e6b2      	b.n	40678a <_dtoa_r+0xb42>
  406a24:	f04f 0800 	mov.w	r8, #0
  406a28:	4646      	mov	r6, r8
  406a2a:	e5e9      	b.n	406600 <_dtoa_r+0x9b8>
  406a2c:	4631      	mov	r1, r6
  406a2e:	2300      	movs	r3, #0
  406a30:	220a      	movs	r2, #10
  406a32:	4620      	mov	r0, r4
  406a34:	f000 fdc8 	bl	4075c8 <__multadd>
  406a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406a3a:	2b00      	cmp	r3, #0
  406a3c:	4606      	mov	r6, r0
  406a3e:	dd0a      	ble.n	406a56 <_dtoa_r+0xe0e>
  406a40:	930a      	str	r3, [sp, #40]	; 0x28
  406a42:	f7ff bbaa 	b.w	40619a <_dtoa_r+0x552>
  406a46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a48:	2b02      	cmp	r3, #2
  406a4a:	dc23      	bgt.n	406a94 <_dtoa_r+0xe4c>
  406a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406a4e:	e43b      	b.n	4062c8 <_dtoa_r+0x680>
  406a50:	f04f 0a02 	mov.w	sl, #2
  406a54:	e4ed      	b.n	406432 <_dtoa_r+0x7ea>
  406a56:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a58:	2b02      	cmp	r3, #2
  406a5a:	dc1b      	bgt.n	406a94 <_dtoa_r+0xe4c>
  406a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406a5e:	e7ef      	b.n	406a40 <_dtoa_r+0xdf8>
  406a60:	2500      	movs	r5, #0
  406a62:	6465      	str	r5, [r4, #68]	; 0x44
  406a64:	4629      	mov	r1, r5
  406a66:	4620      	mov	r0, r4
  406a68:	f000 fd7e 	bl	407568 <_Balloc>
  406a6c:	f04f 33ff 	mov.w	r3, #4294967295
  406a70:	930a      	str	r3, [sp, #40]	; 0x28
  406a72:	930f      	str	r3, [sp, #60]	; 0x3c
  406a74:	2301      	movs	r3, #1
  406a76:	9004      	str	r0, [sp, #16]
  406a78:	9525      	str	r5, [sp, #148]	; 0x94
  406a7a:	6420      	str	r0, [r4, #64]	; 0x40
  406a7c:	930b      	str	r3, [sp, #44]	; 0x2c
  406a7e:	f7ff b9dd 	b.w	405e3c <_dtoa_r+0x1f4>
  406a82:	2501      	movs	r5, #1
  406a84:	f7ff b9a5 	b.w	405dd2 <_dtoa_r+0x18a>
  406a88:	f43f ab69 	beq.w	40615e <_dtoa_r+0x516>
  406a8c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406a90:	f7ff bbf9 	b.w	406286 <_dtoa_r+0x63e>
  406a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406a96:	930a      	str	r3, [sp, #40]	; 0x28
  406a98:	e5e5      	b.n	406666 <_dtoa_r+0xa1e>
  406a9a:	bf00      	nop

00406a9c <__sflush_r>:
  406a9c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406aa0:	b29a      	uxth	r2, r3
  406aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406aa6:	460d      	mov	r5, r1
  406aa8:	0711      	lsls	r1, r2, #28
  406aaa:	4680      	mov	r8, r0
  406aac:	d43a      	bmi.n	406b24 <__sflush_r+0x88>
  406aae:	686a      	ldr	r2, [r5, #4]
  406ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406ab4:	2a00      	cmp	r2, #0
  406ab6:	81ab      	strh	r3, [r5, #12]
  406ab8:	dd6f      	ble.n	406b9a <__sflush_r+0xfe>
  406aba:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406abc:	2c00      	cmp	r4, #0
  406abe:	d049      	beq.n	406b54 <__sflush_r+0xb8>
  406ac0:	2200      	movs	r2, #0
  406ac2:	b29b      	uxth	r3, r3
  406ac4:	f8d8 6000 	ldr.w	r6, [r8]
  406ac8:	f8c8 2000 	str.w	r2, [r8]
  406acc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406ad0:	d067      	beq.n	406ba2 <__sflush_r+0x106>
  406ad2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406ad4:	075f      	lsls	r7, r3, #29
  406ad6:	d505      	bpl.n	406ae4 <__sflush_r+0x48>
  406ad8:	6869      	ldr	r1, [r5, #4]
  406ada:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406adc:	1a52      	subs	r2, r2, r1
  406ade:	b10b      	cbz	r3, 406ae4 <__sflush_r+0x48>
  406ae0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406ae2:	1ad2      	subs	r2, r2, r3
  406ae4:	2300      	movs	r3, #0
  406ae6:	69e9      	ldr	r1, [r5, #28]
  406ae8:	4640      	mov	r0, r8
  406aea:	47a0      	blx	r4
  406aec:	1c44      	adds	r4, r0, #1
  406aee:	d03c      	beq.n	406b6a <__sflush_r+0xce>
  406af0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406af4:	692a      	ldr	r2, [r5, #16]
  406af6:	602a      	str	r2, [r5, #0]
  406af8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406afc:	2200      	movs	r2, #0
  406afe:	81ab      	strh	r3, [r5, #12]
  406b00:	04db      	lsls	r3, r3, #19
  406b02:	606a      	str	r2, [r5, #4]
  406b04:	d447      	bmi.n	406b96 <__sflush_r+0xfa>
  406b06:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406b08:	f8c8 6000 	str.w	r6, [r8]
  406b0c:	b311      	cbz	r1, 406b54 <__sflush_r+0xb8>
  406b0e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406b12:	4299      	cmp	r1, r3
  406b14:	d002      	beq.n	406b1c <__sflush_r+0x80>
  406b16:	4640      	mov	r0, r8
  406b18:	f000 f95a 	bl	406dd0 <_free_r>
  406b1c:	2000      	movs	r0, #0
  406b1e:	6328      	str	r0, [r5, #48]	; 0x30
  406b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b24:	692e      	ldr	r6, [r5, #16]
  406b26:	b1ae      	cbz	r6, 406b54 <__sflush_r+0xb8>
  406b28:	682c      	ldr	r4, [r5, #0]
  406b2a:	602e      	str	r6, [r5, #0]
  406b2c:	0791      	lsls	r1, r2, #30
  406b2e:	bf0c      	ite	eq
  406b30:	696b      	ldreq	r3, [r5, #20]
  406b32:	2300      	movne	r3, #0
  406b34:	1ba4      	subs	r4, r4, r6
  406b36:	60ab      	str	r3, [r5, #8]
  406b38:	e00a      	b.n	406b50 <__sflush_r+0xb4>
  406b3a:	4623      	mov	r3, r4
  406b3c:	4632      	mov	r2, r6
  406b3e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406b40:	69e9      	ldr	r1, [r5, #28]
  406b42:	4640      	mov	r0, r8
  406b44:	47b8      	blx	r7
  406b46:	2800      	cmp	r0, #0
  406b48:	eba4 0400 	sub.w	r4, r4, r0
  406b4c:	4406      	add	r6, r0
  406b4e:	dd04      	ble.n	406b5a <__sflush_r+0xbe>
  406b50:	2c00      	cmp	r4, #0
  406b52:	dcf2      	bgt.n	406b3a <__sflush_r+0x9e>
  406b54:	2000      	movs	r0, #0
  406b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b5a:	89ab      	ldrh	r3, [r5, #12]
  406b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406b60:	81ab      	strh	r3, [r5, #12]
  406b62:	f04f 30ff 	mov.w	r0, #4294967295
  406b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b6a:	f8d8 4000 	ldr.w	r4, [r8]
  406b6e:	2c1d      	cmp	r4, #29
  406b70:	d8f3      	bhi.n	406b5a <__sflush_r+0xbe>
  406b72:	4b19      	ldr	r3, [pc, #100]	; (406bd8 <__sflush_r+0x13c>)
  406b74:	40e3      	lsrs	r3, r4
  406b76:	43db      	mvns	r3, r3
  406b78:	f013 0301 	ands.w	r3, r3, #1
  406b7c:	d1ed      	bne.n	406b5a <__sflush_r+0xbe>
  406b7e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406b82:	606b      	str	r3, [r5, #4]
  406b84:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406b88:	6929      	ldr	r1, [r5, #16]
  406b8a:	81ab      	strh	r3, [r5, #12]
  406b8c:	04da      	lsls	r2, r3, #19
  406b8e:	6029      	str	r1, [r5, #0]
  406b90:	d5b9      	bpl.n	406b06 <__sflush_r+0x6a>
  406b92:	2c00      	cmp	r4, #0
  406b94:	d1b7      	bne.n	406b06 <__sflush_r+0x6a>
  406b96:	6528      	str	r0, [r5, #80]	; 0x50
  406b98:	e7b5      	b.n	406b06 <__sflush_r+0x6a>
  406b9a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406b9c:	2a00      	cmp	r2, #0
  406b9e:	dc8c      	bgt.n	406aba <__sflush_r+0x1e>
  406ba0:	e7d8      	b.n	406b54 <__sflush_r+0xb8>
  406ba2:	2301      	movs	r3, #1
  406ba4:	69e9      	ldr	r1, [r5, #28]
  406ba6:	4640      	mov	r0, r8
  406ba8:	47a0      	blx	r4
  406baa:	1c43      	adds	r3, r0, #1
  406bac:	4602      	mov	r2, r0
  406bae:	d002      	beq.n	406bb6 <__sflush_r+0x11a>
  406bb0:	89ab      	ldrh	r3, [r5, #12]
  406bb2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406bb4:	e78e      	b.n	406ad4 <__sflush_r+0x38>
  406bb6:	f8d8 3000 	ldr.w	r3, [r8]
  406bba:	2b00      	cmp	r3, #0
  406bbc:	d0f8      	beq.n	406bb0 <__sflush_r+0x114>
  406bbe:	2b1d      	cmp	r3, #29
  406bc0:	d001      	beq.n	406bc6 <__sflush_r+0x12a>
  406bc2:	2b16      	cmp	r3, #22
  406bc4:	d102      	bne.n	406bcc <__sflush_r+0x130>
  406bc6:	f8c8 6000 	str.w	r6, [r8]
  406bca:	e7c3      	b.n	406b54 <__sflush_r+0xb8>
  406bcc:	89ab      	ldrh	r3, [r5, #12]
  406bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406bd2:	81ab      	strh	r3, [r5, #12]
  406bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406bd8:	20400001 	.word	0x20400001

00406bdc <_fflush_r>:
  406bdc:	b538      	push	{r3, r4, r5, lr}
  406bde:	460d      	mov	r5, r1
  406be0:	4604      	mov	r4, r0
  406be2:	b108      	cbz	r0, 406be8 <_fflush_r+0xc>
  406be4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406be6:	b1bb      	cbz	r3, 406c18 <_fflush_r+0x3c>
  406be8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406bec:	b188      	cbz	r0, 406c12 <_fflush_r+0x36>
  406bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406bf0:	07db      	lsls	r3, r3, #31
  406bf2:	d401      	bmi.n	406bf8 <_fflush_r+0x1c>
  406bf4:	0581      	lsls	r1, r0, #22
  406bf6:	d517      	bpl.n	406c28 <_fflush_r+0x4c>
  406bf8:	4620      	mov	r0, r4
  406bfa:	4629      	mov	r1, r5
  406bfc:	f7ff ff4e 	bl	406a9c <__sflush_r>
  406c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406c02:	07da      	lsls	r2, r3, #31
  406c04:	4604      	mov	r4, r0
  406c06:	d402      	bmi.n	406c0e <_fflush_r+0x32>
  406c08:	89ab      	ldrh	r3, [r5, #12]
  406c0a:	059b      	lsls	r3, r3, #22
  406c0c:	d507      	bpl.n	406c1e <_fflush_r+0x42>
  406c0e:	4620      	mov	r0, r4
  406c10:	bd38      	pop	{r3, r4, r5, pc}
  406c12:	4604      	mov	r4, r0
  406c14:	4620      	mov	r0, r4
  406c16:	bd38      	pop	{r3, r4, r5, pc}
  406c18:	f000 f838 	bl	406c8c <__sinit>
  406c1c:	e7e4      	b.n	406be8 <_fflush_r+0xc>
  406c1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406c20:	f000 fb72 	bl	407308 <__retarget_lock_release_recursive>
  406c24:	4620      	mov	r0, r4
  406c26:	bd38      	pop	{r3, r4, r5, pc}
  406c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406c2a:	f000 fb6b 	bl	407304 <__retarget_lock_acquire_recursive>
  406c2e:	e7e3      	b.n	406bf8 <_fflush_r+0x1c>

00406c30 <_cleanup_r>:
  406c30:	4901      	ldr	r1, [pc, #4]	; (406c38 <_cleanup_r+0x8>)
  406c32:	f000 bb2b 	b.w	40728c <_fwalk_reent>
  406c36:	bf00      	nop
  406c38:	00408139 	.word	0x00408139

00406c3c <std.isra.0>:
  406c3c:	b510      	push	{r4, lr}
  406c3e:	2300      	movs	r3, #0
  406c40:	4604      	mov	r4, r0
  406c42:	8181      	strh	r1, [r0, #12]
  406c44:	81c2      	strh	r2, [r0, #14]
  406c46:	6003      	str	r3, [r0, #0]
  406c48:	6043      	str	r3, [r0, #4]
  406c4a:	6083      	str	r3, [r0, #8]
  406c4c:	6643      	str	r3, [r0, #100]	; 0x64
  406c4e:	6103      	str	r3, [r0, #16]
  406c50:	6143      	str	r3, [r0, #20]
  406c52:	6183      	str	r3, [r0, #24]
  406c54:	4619      	mov	r1, r3
  406c56:	2208      	movs	r2, #8
  406c58:	305c      	adds	r0, #92	; 0x5c
  406c5a:	f7fd f9e5 	bl	404028 <memset>
  406c5e:	4807      	ldr	r0, [pc, #28]	; (406c7c <std.isra.0+0x40>)
  406c60:	4907      	ldr	r1, [pc, #28]	; (406c80 <std.isra.0+0x44>)
  406c62:	4a08      	ldr	r2, [pc, #32]	; (406c84 <std.isra.0+0x48>)
  406c64:	4b08      	ldr	r3, [pc, #32]	; (406c88 <std.isra.0+0x4c>)
  406c66:	6220      	str	r0, [r4, #32]
  406c68:	61e4      	str	r4, [r4, #28]
  406c6a:	6261      	str	r1, [r4, #36]	; 0x24
  406c6c:	62a2      	str	r2, [r4, #40]	; 0x28
  406c6e:	62e3      	str	r3, [r4, #44]	; 0x2c
  406c70:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406c78:	f000 bb40 	b.w	4072fc <__retarget_lock_init_recursive>
  406c7c:	00407ea9 	.word	0x00407ea9
  406c80:	00407ecd 	.word	0x00407ecd
  406c84:	00407f09 	.word	0x00407f09
  406c88:	00407f29 	.word	0x00407f29

00406c8c <__sinit>:
  406c8c:	b510      	push	{r4, lr}
  406c8e:	4604      	mov	r4, r0
  406c90:	4812      	ldr	r0, [pc, #72]	; (406cdc <__sinit+0x50>)
  406c92:	f000 fb37 	bl	407304 <__retarget_lock_acquire_recursive>
  406c96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406c98:	b9d2      	cbnz	r2, 406cd0 <__sinit+0x44>
  406c9a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  406c9e:	4810      	ldr	r0, [pc, #64]	; (406ce0 <__sinit+0x54>)
  406ca0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406ca4:	2103      	movs	r1, #3
  406ca6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406caa:	63e0      	str	r0, [r4, #60]	; 0x3c
  406cac:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406cb0:	6860      	ldr	r0, [r4, #4]
  406cb2:	2104      	movs	r1, #4
  406cb4:	f7ff ffc2 	bl	406c3c <std.isra.0>
  406cb8:	2201      	movs	r2, #1
  406cba:	2109      	movs	r1, #9
  406cbc:	68a0      	ldr	r0, [r4, #8]
  406cbe:	f7ff ffbd 	bl	406c3c <std.isra.0>
  406cc2:	2202      	movs	r2, #2
  406cc4:	2112      	movs	r1, #18
  406cc6:	68e0      	ldr	r0, [r4, #12]
  406cc8:	f7ff ffb8 	bl	406c3c <std.isra.0>
  406ccc:	2301      	movs	r3, #1
  406cce:	63a3      	str	r3, [r4, #56]	; 0x38
  406cd0:	4802      	ldr	r0, [pc, #8]	; (406cdc <__sinit+0x50>)
  406cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406cd6:	f000 bb17 	b.w	407308 <__retarget_lock_release_recursive>
  406cda:	bf00      	nop
  406cdc:	20400cb0 	.word	0x20400cb0
  406ce0:	00406c31 	.word	0x00406c31

00406ce4 <__sfp_lock_acquire>:
  406ce4:	4801      	ldr	r0, [pc, #4]	; (406cec <__sfp_lock_acquire+0x8>)
  406ce6:	f000 bb0d 	b.w	407304 <__retarget_lock_acquire_recursive>
  406cea:	bf00      	nop
  406cec:	20400cc4 	.word	0x20400cc4

00406cf0 <__sfp_lock_release>:
  406cf0:	4801      	ldr	r0, [pc, #4]	; (406cf8 <__sfp_lock_release+0x8>)
  406cf2:	f000 bb09 	b.w	407308 <__retarget_lock_release_recursive>
  406cf6:	bf00      	nop
  406cf8:	20400cc4 	.word	0x20400cc4

00406cfc <__libc_fini_array>:
  406cfc:	b538      	push	{r3, r4, r5, lr}
  406cfe:	4c0a      	ldr	r4, [pc, #40]	; (406d28 <__libc_fini_array+0x2c>)
  406d00:	4d0a      	ldr	r5, [pc, #40]	; (406d2c <__libc_fini_array+0x30>)
  406d02:	1b64      	subs	r4, r4, r5
  406d04:	10a4      	asrs	r4, r4, #2
  406d06:	d00a      	beq.n	406d1e <__libc_fini_array+0x22>
  406d08:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406d0c:	3b01      	subs	r3, #1
  406d0e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406d12:	3c01      	subs	r4, #1
  406d14:	f855 3904 	ldr.w	r3, [r5], #-4
  406d18:	4798      	blx	r3
  406d1a:	2c00      	cmp	r4, #0
  406d1c:	d1f9      	bne.n	406d12 <__libc_fini_array+0x16>
  406d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406d22:	f002 bbf3 	b.w	40950c <_fini>
  406d26:	bf00      	nop
  406d28:	0040951c 	.word	0x0040951c
  406d2c:	00409518 	.word	0x00409518

00406d30 <_malloc_trim_r>:
  406d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d32:	4f24      	ldr	r7, [pc, #144]	; (406dc4 <_malloc_trim_r+0x94>)
  406d34:	460c      	mov	r4, r1
  406d36:	4606      	mov	r6, r0
  406d38:	f7fd f9c4 	bl	4040c4 <__malloc_lock>
  406d3c:	68bb      	ldr	r3, [r7, #8]
  406d3e:	685d      	ldr	r5, [r3, #4]
  406d40:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406d44:	310f      	adds	r1, #15
  406d46:	f025 0503 	bic.w	r5, r5, #3
  406d4a:	4429      	add	r1, r5
  406d4c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406d50:	f021 010f 	bic.w	r1, r1, #15
  406d54:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406d58:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406d5c:	db07      	blt.n	406d6e <_malloc_trim_r+0x3e>
  406d5e:	2100      	movs	r1, #0
  406d60:	4630      	mov	r0, r6
  406d62:	f7fd fa25 	bl	4041b0 <_sbrk_r>
  406d66:	68bb      	ldr	r3, [r7, #8]
  406d68:	442b      	add	r3, r5
  406d6a:	4298      	cmp	r0, r3
  406d6c:	d004      	beq.n	406d78 <_malloc_trim_r+0x48>
  406d6e:	4630      	mov	r0, r6
  406d70:	f7fd f9ae 	bl	4040d0 <__malloc_unlock>
  406d74:	2000      	movs	r0, #0
  406d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406d78:	4261      	negs	r1, r4
  406d7a:	4630      	mov	r0, r6
  406d7c:	f7fd fa18 	bl	4041b0 <_sbrk_r>
  406d80:	3001      	adds	r0, #1
  406d82:	d00d      	beq.n	406da0 <_malloc_trim_r+0x70>
  406d84:	4b10      	ldr	r3, [pc, #64]	; (406dc8 <_malloc_trim_r+0x98>)
  406d86:	68ba      	ldr	r2, [r7, #8]
  406d88:	6819      	ldr	r1, [r3, #0]
  406d8a:	1b2d      	subs	r5, r5, r4
  406d8c:	f045 0501 	orr.w	r5, r5, #1
  406d90:	4630      	mov	r0, r6
  406d92:	1b09      	subs	r1, r1, r4
  406d94:	6055      	str	r5, [r2, #4]
  406d96:	6019      	str	r1, [r3, #0]
  406d98:	f7fd f99a 	bl	4040d0 <__malloc_unlock>
  406d9c:	2001      	movs	r0, #1
  406d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406da0:	2100      	movs	r1, #0
  406da2:	4630      	mov	r0, r6
  406da4:	f7fd fa04 	bl	4041b0 <_sbrk_r>
  406da8:	68ba      	ldr	r2, [r7, #8]
  406daa:	1a83      	subs	r3, r0, r2
  406dac:	2b0f      	cmp	r3, #15
  406dae:	ddde      	ble.n	406d6e <_malloc_trim_r+0x3e>
  406db0:	4c06      	ldr	r4, [pc, #24]	; (406dcc <_malloc_trim_r+0x9c>)
  406db2:	4905      	ldr	r1, [pc, #20]	; (406dc8 <_malloc_trim_r+0x98>)
  406db4:	6824      	ldr	r4, [r4, #0]
  406db6:	f043 0301 	orr.w	r3, r3, #1
  406dba:	1b00      	subs	r0, r0, r4
  406dbc:	6053      	str	r3, [r2, #4]
  406dbe:	6008      	str	r0, [r1, #0]
  406dc0:	e7d5      	b.n	406d6e <_malloc_trim_r+0x3e>
  406dc2:	bf00      	nop
  406dc4:	20400438 	.word	0x20400438
  406dc8:	20400b90 	.word	0x20400b90
  406dcc:	20400840 	.word	0x20400840

00406dd0 <_free_r>:
  406dd0:	2900      	cmp	r1, #0
  406dd2:	d044      	beq.n	406e5e <_free_r+0x8e>
  406dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406dd8:	460d      	mov	r5, r1
  406dda:	4680      	mov	r8, r0
  406ddc:	f7fd f972 	bl	4040c4 <__malloc_lock>
  406de0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406de4:	4969      	ldr	r1, [pc, #420]	; (406f8c <_free_r+0x1bc>)
  406de6:	f027 0301 	bic.w	r3, r7, #1
  406dea:	f1a5 0408 	sub.w	r4, r5, #8
  406dee:	18e2      	adds	r2, r4, r3
  406df0:	688e      	ldr	r6, [r1, #8]
  406df2:	6850      	ldr	r0, [r2, #4]
  406df4:	42b2      	cmp	r2, r6
  406df6:	f020 0003 	bic.w	r0, r0, #3
  406dfa:	d05e      	beq.n	406eba <_free_r+0xea>
  406dfc:	07fe      	lsls	r6, r7, #31
  406dfe:	6050      	str	r0, [r2, #4]
  406e00:	d40b      	bmi.n	406e1a <_free_r+0x4a>
  406e02:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406e06:	1be4      	subs	r4, r4, r7
  406e08:	f101 0e08 	add.w	lr, r1, #8
  406e0c:	68a5      	ldr	r5, [r4, #8]
  406e0e:	4575      	cmp	r5, lr
  406e10:	443b      	add	r3, r7
  406e12:	d06d      	beq.n	406ef0 <_free_r+0x120>
  406e14:	68e7      	ldr	r7, [r4, #12]
  406e16:	60ef      	str	r7, [r5, #12]
  406e18:	60bd      	str	r5, [r7, #8]
  406e1a:	1815      	adds	r5, r2, r0
  406e1c:	686d      	ldr	r5, [r5, #4]
  406e1e:	07ed      	lsls	r5, r5, #31
  406e20:	d53e      	bpl.n	406ea0 <_free_r+0xd0>
  406e22:	f043 0201 	orr.w	r2, r3, #1
  406e26:	6062      	str	r2, [r4, #4]
  406e28:	50e3      	str	r3, [r4, r3]
  406e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406e2e:	d217      	bcs.n	406e60 <_free_r+0x90>
  406e30:	08db      	lsrs	r3, r3, #3
  406e32:	1c58      	adds	r0, r3, #1
  406e34:	109a      	asrs	r2, r3, #2
  406e36:	684d      	ldr	r5, [r1, #4]
  406e38:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406e3c:	60a7      	str	r7, [r4, #8]
  406e3e:	2301      	movs	r3, #1
  406e40:	4093      	lsls	r3, r2
  406e42:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406e46:	432b      	orrs	r3, r5
  406e48:	3a08      	subs	r2, #8
  406e4a:	60e2      	str	r2, [r4, #12]
  406e4c:	604b      	str	r3, [r1, #4]
  406e4e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406e52:	60fc      	str	r4, [r7, #12]
  406e54:	4640      	mov	r0, r8
  406e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406e5a:	f7fd b939 	b.w	4040d0 <__malloc_unlock>
  406e5e:	4770      	bx	lr
  406e60:	0a5a      	lsrs	r2, r3, #9
  406e62:	2a04      	cmp	r2, #4
  406e64:	d852      	bhi.n	406f0c <_free_r+0x13c>
  406e66:	099a      	lsrs	r2, r3, #6
  406e68:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406e6c:	00ff      	lsls	r7, r7, #3
  406e6e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406e72:	19c8      	adds	r0, r1, r7
  406e74:	59ca      	ldr	r2, [r1, r7]
  406e76:	3808      	subs	r0, #8
  406e78:	4290      	cmp	r0, r2
  406e7a:	d04f      	beq.n	406f1c <_free_r+0x14c>
  406e7c:	6851      	ldr	r1, [r2, #4]
  406e7e:	f021 0103 	bic.w	r1, r1, #3
  406e82:	428b      	cmp	r3, r1
  406e84:	d232      	bcs.n	406eec <_free_r+0x11c>
  406e86:	6892      	ldr	r2, [r2, #8]
  406e88:	4290      	cmp	r0, r2
  406e8a:	d1f7      	bne.n	406e7c <_free_r+0xac>
  406e8c:	68c3      	ldr	r3, [r0, #12]
  406e8e:	60a0      	str	r0, [r4, #8]
  406e90:	60e3      	str	r3, [r4, #12]
  406e92:	609c      	str	r4, [r3, #8]
  406e94:	60c4      	str	r4, [r0, #12]
  406e96:	4640      	mov	r0, r8
  406e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406e9c:	f7fd b918 	b.w	4040d0 <__malloc_unlock>
  406ea0:	6895      	ldr	r5, [r2, #8]
  406ea2:	4f3b      	ldr	r7, [pc, #236]	; (406f90 <_free_r+0x1c0>)
  406ea4:	42bd      	cmp	r5, r7
  406ea6:	4403      	add	r3, r0
  406ea8:	d040      	beq.n	406f2c <_free_r+0x15c>
  406eaa:	68d0      	ldr	r0, [r2, #12]
  406eac:	60e8      	str	r0, [r5, #12]
  406eae:	f043 0201 	orr.w	r2, r3, #1
  406eb2:	6085      	str	r5, [r0, #8]
  406eb4:	6062      	str	r2, [r4, #4]
  406eb6:	50e3      	str	r3, [r4, r3]
  406eb8:	e7b7      	b.n	406e2a <_free_r+0x5a>
  406eba:	07ff      	lsls	r7, r7, #31
  406ebc:	4403      	add	r3, r0
  406ebe:	d407      	bmi.n	406ed0 <_free_r+0x100>
  406ec0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406ec4:	1aa4      	subs	r4, r4, r2
  406ec6:	4413      	add	r3, r2
  406ec8:	68a0      	ldr	r0, [r4, #8]
  406eca:	68e2      	ldr	r2, [r4, #12]
  406ecc:	60c2      	str	r2, [r0, #12]
  406ece:	6090      	str	r0, [r2, #8]
  406ed0:	4a30      	ldr	r2, [pc, #192]	; (406f94 <_free_r+0x1c4>)
  406ed2:	6812      	ldr	r2, [r2, #0]
  406ed4:	f043 0001 	orr.w	r0, r3, #1
  406ed8:	4293      	cmp	r3, r2
  406eda:	6060      	str	r0, [r4, #4]
  406edc:	608c      	str	r4, [r1, #8]
  406ede:	d3b9      	bcc.n	406e54 <_free_r+0x84>
  406ee0:	4b2d      	ldr	r3, [pc, #180]	; (406f98 <_free_r+0x1c8>)
  406ee2:	4640      	mov	r0, r8
  406ee4:	6819      	ldr	r1, [r3, #0]
  406ee6:	f7ff ff23 	bl	406d30 <_malloc_trim_r>
  406eea:	e7b3      	b.n	406e54 <_free_r+0x84>
  406eec:	4610      	mov	r0, r2
  406eee:	e7cd      	b.n	406e8c <_free_r+0xbc>
  406ef0:	1811      	adds	r1, r2, r0
  406ef2:	6849      	ldr	r1, [r1, #4]
  406ef4:	07c9      	lsls	r1, r1, #31
  406ef6:	d444      	bmi.n	406f82 <_free_r+0x1b2>
  406ef8:	6891      	ldr	r1, [r2, #8]
  406efa:	68d2      	ldr	r2, [r2, #12]
  406efc:	60ca      	str	r2, [r1, #12]
  406efe:	4403      	add	r3, r0
  406f00:	f043 0001 	orr.w	r0, r3, #1
  406f04:	6091      	str	r1, [r2, #8]
  406f06:	6060      	str	r0, [r4, #4]
  406f08:	50e3      	str	r3, [r4, r3]
  406f0a:	e7a3      	b.n	406e54 <_free_r+0x84>
  406f0c:	2a14      	cmp	r2, #20
  406f0e:	d816      	bhi.n	406f3e <_free_r+0x16e>
  406f10:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406f14:	00ff      	lsls	r7, r7, #3
  406f16:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406f1a:	e7aa      	b.n	406e72 <_free_r+0xa2>
  406f1c:	10aa      	asrs	r2, r5, #2
  406f1e:	2301      	movs	r3, #1
  406f20:	684d      	ldr	r5, [r1, #4]
  406f22:	4093      	lsls	r3, r2
  406f24:	432b      	orrs	r3, r5
  406f26:	604b      	str	r3, [r1, #4]
  406f28:	4603      	mov	r3, r0
  406f2a:	e7b0      	b.n	406e8e <_free_r+0xbe>
  406f2c:	f043 0201 	orr.w	r2, r3, #1
  406f30:	614c      	str	r4, [r1, #20]
  406f32:	610c      	str	r4, [r1, #16]
  406f34:	60e5      	str	r5, [r4, #12]
  406f36:	60a5      	str	r5, [r4, #8]
  406f38:	6062      	str	r2, [r4, #4]
  406f3a:	50e3      	str	r3, [r4, r3]
  406f3c:	e78a      	b.n	406e54 <_free_r+0x84>
  406f3e:	2a54      	cmp	r2, #84	; 0x54
  406f40:	d806      	bhi.n	406f50 <_free_r+0x180>
  406f42:	0b1a      	lsrs	r2, r3, #12
  406f44:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406f48:	00ff      	lsls	r7, r7, #3
  406f4a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406f4e:	e790      	b.n	406e72 <_free_r+0xa2>
  406f50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406f54:	d806      	bhi.n	406f64 <_free_r+0x194>
  406f56:	0bda      	lsrs	r2, r3, #15
  406f58:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406f5c:	00ff      	lsls	r7, r7, #3
  406f5e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406f62:	e786      	b.n	406e72 <_free_r+0xa2>
  406f64:	f240 5054 	movw	r0, #1364	; 0x554
  406f68:	4282      	cmp	r2, r0
  406f6a:	d806      	bhi.n	406f7a <_free_r+0x1aa>
  406f6c:	0c9a      	lsrs	r2, r3, #18
  406f6e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406f72:	00ff      	lsls	r7, r7, #3
  406f74:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406f78:	e77b      	b.n	406e72 <_free_r+0xa2>
  406f7a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406f7e:	257e      	movs	r5, #126	; 0x7e
  406f80:	e777      	b.n	406e72 <_free_r+0xa2>
  406f82:	f043 0101 	orr.w	r1, r3, #1
  406f86:	6061      	str	r1, [r4, #4]
  406f88:	6013      	str	r3, [r2, #0]
  406f8a:	e763      	b.n	406e54 <_free_r+0x84>
  406f8c:	20400438 	.word	0x20400438
  406f90:	20400440 	.word	0x20400440
  406f94:	20400844 	.word	0x20400844
  406f98:	20400bc0 	.word	0x20400bc0

00406f9c <__sfvwrite_r>:
  406f9c:	6893      	ldr	r3, [r2, #8]
  406f9e:	2b00      	cmp	r3, #0
  406fa0:	d073      	beq.n	40708a <__sfvwrite_r+0xee>
  406fa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406fa6:	898b      	ldrh	r3, [r1, #12]
  406fa8:	b083      	sub	sp, #12
  406faa:	460c      	mov	r4, r1
  406fac:	0719      	lsls	r1, r3, #28
  406fae:	9000      	str	r0, [sp, #0]
  406fb0:	4616      	mov	r6, r2
  406fb2:	d526      	bpl.n	407002 <__sfvwrite_r+0x66>
  406fb4:	6922      	ldr	r2, [r4, #16]
  406fb6:	b322      	cbz	r2, 407002 <__sfvwrite_r+0x66>
  406fb8:	f013 0002 	ands.w	r0, r3, #2
  406fbc:	6835      	ldr	r5, [r6, #0]
  406fbe:	d02c      	beq.n	40701a <__sfvwrite_r+0x7e>
  406fc0:	f04f 0900 	mov.w	r9, #0
  406fc4:	4fb0      	ldr	r7, [pc, #704]	; (407288 <__sfvwrite_r+0x2ec>)
  406fc6:	46c8      	mov	r8, r9
  406fc8:	46b2      	mov	sl, r6
  406fca:	45b8      	cmp	r8, r7
  406fcc:	4643      	mov	r3, r8
  406fce:	464a      	mov	r2, r9
  406fd0:	bf28      	it	cs
  406fd2:	463b      	movcs	r3, r7
  406fd4:	9800      	ldr	r0, [sp, #0]
  406fd6:	f1b8 0f00 	cmp.w	r8, #0
  406fda:	d050      	beq.n	40707e <__sfvwrite_r+0xe2>
  406fdc:	69e1      	ldr	r1, [r4, #28]
  406fde:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406fe0:	47b0      	blx	r6
  406fe2:	2800      	cmp	r0, #0
  406fe4:	dd58      	ble.n	407098 <__sfvwrite_r+0xfc>
  406fe6:	f8da 3008 	ldr.w	r3, [sl, #8]
  406fea:	1a1b      	subs	r3, r3, r0
  406fec:	4481      	add	r9, r0
  406fee:	eba8 0800 	sub.w	r8, r8, r0
  406ff2:	f8ca 3008 	str.w	r3, [sl, #8]
  406ff6:	2b00      	cmp	r3, #0
  406ff8:	d1e7      	bne.n	406fca <__sfvwrite_r+0x2e>
  406ffa:	2000      	movs	r0, #0
  406ffc:	b003      	add	sp, #12
  406ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407002:	4621      	mov	r1, r4
  407004:	9800      	ldr	r0, [sp, #0]
  407006:	f7fe fd17 	bl	405a38 <__swsetup_r>
  40700a:	2800      	cmp	r0, #0
  40700c:	f040 8133 	bne.w	407276 <__sfvwrite_r+0x2da>
  407010:	89a3      	ldrh	r3, [r4, #12]
  407012:	6835      	ldr	r5, [r6, #0]
  407014:	f013 0002 	ands.w	r0, r3, #2
  407018:	d1d2      	bne.n	406fc0 <__sfvwrite_r+0x24>
  40701a:	f013 0901 	ands.w	r9, r3, #1
  40701e:	d145      	bne.n	4070ac <__sfvwrite_r+0x110>
  407020:	464f      	mov	r7, r9
  407022:	9601      	str	r6, [sp, #4]
  407024:	b337      	cbz	r7, 407074 <__sfvwrite_r+0xd8>
  407026:	059a      	lsls	r2, r3, #22
  407028:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40702c:	f140 8083 	bpl.w	407136 <__sfvwrite_r+0x19a>
  407030:	4547      	cmp	r7, r8
  407032:	46c3      	mov	fp, r8
  407034:	f0c0 80ab 	bcc.w	40718e <__sfvwrite_r+0x1f2>
  407038:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40703c:	f040 80ac 	bne.w	407198 <__sfvwrite_r+0x1fc>
  407040:	6820      	ldr	r0, [r4, #0]
  407042:	46ba      	mov	sl, r7
  407044:	465a      	mov	r2, fp
  407046:	4649      	mov	r1, r9
  407048:	f000 fa2a 	bl	4074a0 <memmove>
  40704c:	68a2      	ldr	r2, [r4, #8]
  40704e:	6823      	ldr	r3, [r4, #0]
  407050:	eba2 0208 	sub.w	r2, r2, r8
  407054:	445b      	add	r3, fp
  407056:	60a2      	str	r2, [r4, #8]
  407058:	6023      	str	r3, [r4, #0]
  40705a:	9a01      	ldr	r2, [sp, #4]
  40705c:	6893      	ldr	r3, [r2, #8]
  40705e:	eba3 030a 	sub.w	r3, r3, sl
  407062:	44d1      	add	r9, sl
  407064:	eba7 070a 	sub.w	r7, r7, sl
  407068:	6093      	str	r3, [r2, #8]
  40706a:	2b00      	cmp	r3, #0
  40706c:	d0c5      	beq.n	406ffa <__sfvwrite_r+0x5e>
  40706e:	89a3      	ldrh	r3, [r4, #12]
  407070:	2f00      	cmp	r7, #0
  407072:	d1d8      	bne.n	407026 <__sfvwrite_r+0x8a>
  407074:	f8d5 9000 	ldr.w	r9, [r5]
  407078:	686f      	ldr	r7, [r5, #4]
  40707a:	3508      	adds	r5, #8
  40707c:	e7d2      	b.n	407024 <__sfvwrite_r+0x88>
  40707e:	f8d5 9000 	ldr.w	r9, [r5]
  407082:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407086:	3508      	adds	r5, #8
  407088:	e79f      	b.n	406fca <__sfvwrite_r+0x2e>
  40708a:	2000      	movs	r0, #0
  40708c:	4770      	bx	lr
  40708e:	4621      	mov	r1, r4
  407090:	9800      	ldr	r0, [sp, #0]
  407092:	f7ff fda3 	bl	406bdc <_fflush_r>
  407096:	b370      	cbz	r0, 4070f6 <__sfvwrite_r+0x15a>
  407098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40709c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4070a0:	f04f 30ff 	mov.w	r0, #4294967295
  4070a4:	81a3      	strh	r3, [r4, #12]
  4070a6:	b003      	add	sp, #12
  4070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4070ac:	4681      	mov	r9, r0
  4070ae:	4633      	mov	r3, r6
  4070b0:	464e      	mov	r6, r9
  4070b2:	46a8      	mov	r8, r5
  4070b4:	469a      	mov	sl, r3
  4070b6:	464d      	mov	r5, r9
  4070b8:	b34e      	cbz	r6, 40710e <__sfvwrite_r+0x172>
  4070ba:	b380      	cbz	r0, 40711e <__sfvwrite_r+0x182>
  4070bc:	6820      	ldr	r0, [r4, #0]
  4070be:	6923      	ldr	r3, [r4, #16]
  4070c0:	6962      	ldr	r2, [r4, #20]
  4070c2:	45b1      	cmp	r9, r6
  4070c4:	46cb      	mov	fp, r9
  4070c6:	bf28      	it	cs
  4070c8:	46b3      	movcs	fp, r6
  4070ca:	4298      	cmp	r0, r3
  4070cc:	465f      	mov	r7, fp
  4070ce:	d904      	bls.n	4070da <__sfvwrite_r+0x13e>
  4070d0:	68a3      	ldr	r3, [r4, #8]
  4070d2:	4413      	add	r3, r2
  4070d4:	459b      	cmp	fp, r3
  4070d6:	f300 80a6 	bgt.w	407226 <__sfvwrite_r+0x28a>
  4070da:	4593      	cmp	fp, r2
  4070dc:	db4b      	blt.n	407176 <__sfvwrite_r+0x1da>
  4070de:	4613      	mov	r3, r2
  4070e0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4070e2:	69e1      	ldr	r1, [r4, #28]
  4070e4:	9800      	ldr	r0, [sp, #0]
  4070e6:	462a      	mov	r2, r5
  4070e8:	47b8      	blx	r7
  4070ea:	1e07      	subs	r7, r0, #0
  4070ec:	ddd4      	ble.n	407098 <__sfvwrite_r+0xfc>
  4070ee:	ebb9 0907 	subs.w	r9, r9, r7
  4070f2:	d0cc      	beq.n	40708e <__sfvwrite_r+0xf2>
  4070f4:	2001      	movs	r0, #1
  4070f6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4070fa:	1bdb      	subs	r3, r3, r7
  4070fc:	443d      	add	r5, r7
  4070fe:	1bf6      	subs	r6, r6, r7
  407100:	f8ca 3008 	str.w	r3, [sl, #8]
  407104:	2b00      	cmp	r3, #0
  407106:	f43f af78 	beq.w	406ffa <__sfvwrite_r+0x5e>
  40710a:	2e00      	cmp	r6, #0
  40710c:	d1d5      	bne.n	4070ba <__sfvwrite_r+0x11e>
  40710e:	f108 0308 	add.w	r3, r8, #8
  407112:	e913 0060 	ldmdb	r3, {r5, r6}
  407116:	4698      	mov	r8, r3
  407118:	3308      	adds	r3, #8
  40711a:	2e00      	cmp	r6, #0
  40711c:	d0f9      	beq.n	407112 <__sfvwrite_r+0x176>
  40711e:	4632      	mov	r2, r6
  407120:	210a      	movs	r1, #10
  407122:	4628      	mov	r0, r5
  407124:	f000 f96c 	bl	407400 <memchr>
  407128:	2800      	cmp	r0, #0
  40712a:	f000 80a1 	beq.w	407270 <__sfvwrite_r+0x2d4>
  40712e:	3001      	adds	r0, #1
  407130:	eba0 0905 	sub.w	r9, r0, r5
  407134:	e7c2      	b.n	4070bc <__sfvwrite_r+0x120>
  407136:	6820      	ldr	r0, [r4, #0]
  407138:	6923      	ldr	r3, [r4, #16]
  40713a:	4298      	cmp	r0, r3
  40713c:	d802      	bhi.n	407144 <__sfvwrite_r+0x1a8>
  40713e:	6963      	ldr	r3, [r4, #20]
  407140:	429f      	cmp	r7, r3
  407142:	d25d      	bcs.n	407200 <__sfvwrite_r+0x264>
  407144:	45b8      	cmp	r8, r7
  407146:	bf28      	it	cs
  407148:	46b8      	movcs	r8, r7
  40714a:	4642      	mov	r2, r8
  40714c:	4649      	mov	r1, r9
  40714e:	f000 f9a7 	bl	4074a0 <memmove>
  407152:	68a3      	ldr	r3, [r4, #8]
  407154:	6822      	ldr	r2, [r4, #0]
  407156:	eba3 0308 	sub.w	r3, r3, r8
  40715a:	4442      	add	r2, r8
  40715c:	60a3      	str	r3, [r4, #8]
  40715e:	6022      	str	r2, [r4, #0]
  407160:	b10b      	cbz	r3, 407166 <__sfvwrite_r+0x1ca>
  407162:	46c2      	mov	sl, r8
  407164:	e779      	b.n	40705a <__sfvwrite_r+0xbe>
  407166:	4621      	mov	r1, r4
  407168:	9800      	ldr	r0, [sp, #0]
  40716a:	f7ff fd37 	bl	406bdc <_fflush_r>
  40716e:	2800      	cmp	r0, #0
  407170:	d192      	bne.n	407098 <__sfvwrite_r+0xfc>
  407172:	46c2      	mov	sl, r8
  407174:	e771      	b.n	40705a <__sfvwrite_r+0xbe>
  407176:	465a      	mov	r2, fp
  407178:	4629      	mov	r1, r5
  40717a:	f000 f991 	bl	4074a0 <memmove>
  40717e:	68a2      	ldr	r2, [r4, #8]
  407180:	6823      	ldr	r3, [r4, #0]
  407182:	eba2 020b 	sub.w	r2, r2, fp
  407186:	445b      	add	r3, fp
  407188:	60a2      	str	r2, [r4, #8]
  40718a:	6023      	str	r3, [r4, #0]
  40718c:	e7af      	b.n	4070ee <__sfvwrite_r+0x152>
  40718e:	6820      	ldr	r0, [r4, #0]
  407190:	46b8      	mov	r8, r7
  407192:	46ba      	mov	sl, r7
  407194:	46bb      	mov	fp, r7
  407196:	e755      	b.n	407044 <__sfvwrite_r+0xa8>
  407198:	6962      	ldr	r2, [r4, #20]
  40719a:	6820      	ldr	r0, [r4, #0]
  40719c:	6921      	ldr	r1, [r4, #16]
  40719e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4071a2:	eba0 0a01 	sub.w	sl, r0, r1
  4071a6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4071aa:	f10a 0001 	add.w	r0, sl, #1
  4071ae:	ea4f 0868 	mov.w	r8, r8, asr #1
  4071b2:	4438      	add	r0, r7
  4071b4:	4540      	cmp	r0, r8
  4071b6:	4642      	mov	r2, r8
  4071b8:	bf84      	itt	hi
  4071ba:	4680      	movhi	r8, r0
  4071bc:	4642      	movhi	r2, r8
  4071be:	055b      	lsls	r3, r3, #21
  4071c0:	d544      	bpl.n	40724c <__sfvwrite_r+0x2b0>
  4071c2:	4611      	mov	r1, r2
  4071c4:	9800      	ldr	r0, [sp, #0]
  4071c6:	f7fc fbe5 	bl	403994 <_malloc_r>
  4071ca:	4683      	mov	fp, r0
  4071cc:	2800      	cmp	r0, #0
  4071ce:	d055      	beq.n	40727c <__sfvwrite_r+0x2e0>
  4071d0:	4652      	mov	r2, sl
  4071d2:	6921      	ldr	r1, [r4, #16]
  4071d4:	f7fc fe8e 	bl	403ef4 <memcpy>
  4071d8:	89a3      	ldrh	r3, [r4, #12]
  4071da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4071de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4071e2:	81a3      	strh	r3, [r4, #12]
  4071e4:	eb0b 000a 	add.w	r0, fp, sl
  4071e8:	eba8 030a 	sub.w	r3, r8, sl
  4071ec:	f8c4 b010 	str.w	fp, [r4, #16]
  4071f0:	f8c4 8014 	str.w	r8, [r4, #20]
  4071f4:	6020      	str	r0, [r4, #0]
  4071f6:	60a3      	str	r3, [r4, #8]
  4071f8:	46b8      	mov	r8, r7
  4071fa:	46ba      	mov	sl, r7
  4071fc:	46bb      	mov	fp, r7
  4071fe:	e721      	b.n	407044 <__sfvwrite_r+0xa8>
  407200:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407204:	42b9      	cmp	r1, r7
  407206:	bf28      	it	cs
  407208:	4639      	movcs	r1, r7
  40720a:	464a      	mov	r2, r9
  40720c:	fb91 f1f3 	sdiv	r1, r1, r3
  407210:	9800      	ldr	r0, [sp, #0]
  407212:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407214:	fb03 f301 	mul.w	r3, r3, r1
  407218:	69e1      	ldr	r1, [r4, #28]
  40721a:	47b0      	blx	r6
  40721c:	f1b0 0a00 	subs.w	sl, r0, #0
  407220:	f73f af1b 	bgt.w	40705a <__sfvwrite_r+0xbe>
  407224:	e738      	b.n	407098 <__sfvwrite_r+0xfc>
  407226:	461a      	mov	r2, r3
  407228:	4629      	mov	r1, r5
  40722a:	9301      	str	r3, [sp, #4]
  40722c:	f000 f938 	bl	4074a0 <memmove>
  407230:	6822      	ldr	r2, [r4, #0]
  407232:	9b01      	ldr	r3, [sp, #4]
  407234:	9800      	ldr	r0, [sp, #0]
  407236:	441a      	add	r2, r3
  407238:	6022      	str	r2, [r4, #0]
  40723a:	4621      	mov	r1, r4
  40723c:	f7ff fcce 	bl	406bdc <_fflush_r>
  407240:	9b01      	ldr	r3, [sp, #4]
  407242:	2800      	cmp	r0, #0
  407244:	f47f af28 	bne.w	407098 <__sfvwrite_r+0xfc>
  407248:	461f      	mov	r7, r3
  40724a:	e750      	b.n	4070ee <__sfvwrite_r+0x152>
  40724c:	9800      	ldr	r0, [sp, #0]
  40724e:	f000 fc85 	bl	407b5c <_realloc_r>
  407252:	4683      	mov	fp, r0
  407254:	2800      	cmp	r0, #0
  407256:	d1c5      	bne.n	4071e4 <__sfvwrite_r+0x248>
  407258:	9d00      	ldr	r5, [sp, #0]
  40725a:	6921      	ldr	r1, [r4, #16]
  40725c:	4628      	mov	r0, r5
  40725e:	f7ff fdb7 	bl	406dd0 <_free_r>
  407262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407266:	220c      	movs	r2, #12
  407268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40726c:	602a      	str	r2, [r5, #0]
  40726e:	e715      	b.n	40709c <__sfvwrite_r+0x100>
  407270:	f106 0901 	add.w	r9, r6, #1
  407274:	e722      	b.n	4070bc <__sfvwrite_r+0x120>
  407276:	f04f 30ff 	mov.w	r0, #4294967295
  40727a:	e6bf      	b.n	406ffc <__sfvwrite_r+0x60>
  40727c:	9a00      	ldr	r2, [sp, #0]
  40727e:	230c      	movs	r3, #12
  407280:	6013      	str	r3, [r2, #0]
  407282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407286:	e709      	b.n	40709c <__sfvwrite_r+0x100>
  407288:	7ffffc00 	.word	0x7ffffc00

0040728c <_fwalk_reent>:
  40728c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407290:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407294:	d01f      	beq.n	4072d6 <_fwalk_reent+0x4a>
  407296:	4688      	mov	r8, r1
  407298:	4606      	mov	r6, r0
  40729a:	f04f 0900 	mov.w	r9, #0
  40729e:	687d      	ldr	r5, [r7, #4]
  4072a0:	68bc      	ldr	r4, [r7, #8]
  4072a2:	3d01      	subs	r5, #1
  4072a4:	d411      	bmi.n	4072ca <_fwalk_reent+0x3e>
  4072a6:	89a3      	ldrh	r3, [r4, #12]
  4072a8:	2b01      	cmp	r3, #1
  4072aa:	f105 35ff 	add.w	r5, r5, #4294967295
  4072ae:	d908      	bls.n	4072c2 <_fwalk_reent+0x36>
  4072b0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4072b4:	3301      	adds	r3, #1
  4072b6:	4621      	mov	r1, r4
  4072b8:	4630      	mov	r0, r6
  4072ba:	d002      	beq.n	4072c2 <_fwalk_reent+0x36>
  4072bc:	47c0      	blx	r8
  4072be:	ea49 0900 	orr.w	r9, r9, r0
  4072c2:	1c6b      	adds	r3, r5, #1
  4072c4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4072c8:	d1ed      	bne.n	4072a6 <_fwalk_reent+0x1a>
  4072ca:	683f      	ldr	r7, [r7, #0]
  4072cc:	2f00      	cmp	r7, #0
  4072ce:	d1e6      	bne.n	40729e <_fwalk_reent+0x12>
  4072d0:	4648      	mov	r0, r9
  4072d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4072d6:	46b9      	mov	r9, r7
  4072d8:	4648      	mov	r0, r9
  4072da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4072de:	bf00      	nop

004072e0 <_localeconv_r>:
  4072e0:	4a04      	ldr	r2, [pc, #16]	; (4072f4 <_localeconv_r+0x14>)
  4072e2:	4b05      	ldr	r3, [pc, #20]	; (4072f8 <_localeconv_r+0x18>)
  4072e4:	6812      	ldr	r2, [r2, #0]
  4072e6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4072e8:	2800      	cmp	r0, #0
  4072ea:	bf08      	it	eq
  4072ec:	4618      	moveq	r0, r3
  4072ee:	30f0      	adds	r0, #240	; 0xf0
  4072f0:	4770      	bx	lr
  4072f2:	bf00      	nop
  4072f4:	2040000c 	.word	0x2040000c
  4072f8:	2040084c 	.word	0x2040084c

004072fc <__retarget_lock_init_recursive>:
  4072fc:	4770      	bx	lr
  4072fe:	bf00      	nop

00407300 <__retarget_lock_close_recursive>:
  407300:	4770      	bx	lr
  407302:	bf00      	nop

00407304 <__retarget_lock_acquire_recursive>:
  407304:	4770      	bx	lr
  407306:	bf00      	nop

00407308 <__retarget_lock_release_recursive>:
  407308:	4770      	bx	lr
  40730a:	bf00      	nop

0040730c <__swhatbuf_r>:
  40730c:	b570      	push	{r4, r5, r6, lr}
  40730e:	460c      	mov	r4, r1
  407310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407314:	2900      	cmp	r1, #0
  407316:	b090      	sub	sp, #64	; 0x40
  407318:	4615      	mov	r5, r2
  40731a:	461e      	mov	r6, r3
  40731c:	db14      	blt.n	407348 <__swhatbuf_r+0x3c>
  40731e:	aa01      	add	r2, sp, #4
  407320:	f000 fff0 	bl	408304 <_fstat_r>
  407324:	2800      	cmp	r0, #0
  407326:	db0f      	blt.n	407348 <__swhatbuf_r+0x3c>
  407328:	9a02      	ldr	r2, [sp, #8]
  40732a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40732e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407332:	fab2 f282 	clz	r2, r2
  407336:	0952      	lsrs	r2, r2, #5
  407338:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40733c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407340:	6032      	str	r2, [r6, #0]
  407342:	602b      	str	r3, [r5, #0]
  407344:	b010      	add	sp, #64	; 0x40
  407346:	bd70      	pop	{r4, r5, r6, pc}
  407348:	89a2      	ldrh	r2, [r4, #12]
  40734a:	2300      	movs	r3, #0
  40734c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407350:	6033      	str	r3, [r6, #0]
  407352:	d004      	beq.n	40735e <__swhatbuf_r+0x52>
  407354:	2240      	movs	r2, #64	; 0x40
  407356:	4618      	mov	r0, r3
  407358:	602a      	str	r2, [r5, #0]
  40735a:	b010      	add	sp, #64	; 0x40
  40735c:	bd70      	pop	{r4, r5, r6, pc}
  40735e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407362:	602b      	str	r3, [r5, #0]
  407364:	b010      	add	sp, #64	; 0x40
  407366:	bd70      	pop	{r4, r5, r6, pc}

00407368 <__smakebuf_r>:
  407368:	898a      	ldrh	r2, [r1, #12]
  40736a:	0792      	lsls	r2, r2, #30
  40736c:	460b      	mov	r3, r1
  40736e:	d506      	bpl.n	40737e <__smakebuf_r+0x16>
  407370:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407374:	2101      	movs	r1, #1
  407376:	601a      	str	r2, [r3, #0]
  407378:	611a      	str	r2, [r3, #16]
  40737a:	6159      	str	r1, [r3, #20]
  40737c:	4770      	bx	lr
  40737e:	b5f0      	push	{r4, r5, r6, r7, lr}
  407380:	b083      	sub	sp, #12
  407382:	ab01      	add	r3, sp, #4
  407384:	466a      	mov	r2, sp
  407386:	460c      	mov	r4, r1
  407388:	4606      	mov	r6, r0
  40738a:	f7ff ffbf 	bl	40730c <__swhatbuf_r>
  40738e:	9900      	ldr	r1, [sp, #0]
  407390:	4605      	mov	r5, r0
  407392:	4630      	mov	r0, r6
  407394:	f7fc fafe 	bl	403994 <_malloc_r>
  407398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40739c:	b1d8      	cbz	r0, 4073d6 <__smakebuf_r+0x6e>
  40739e:	9a01      	ldr	r2, [sp, #4]
  4073a0:	4f15      	ldr	r7, [pc, #84]	; (4073f8 <__smakebuf_r+0x90>)
  4073a2:	9900      	ldr	r1, [sp, #0]
  4073a4:	63f7      	str	r7, [r6, #60]	; 0x3c
  4073a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4073aa:	81a3      	strh	r3, [r4, #12]
  4073ac:	6020      	str	r0, [r4, #0]
  4073ae:	6120      	str	r0, [r4, #16]
  4073b0:	6161      	str	r1, [r4, #20]
  4073b2:	b91a      	cbnz	r2, 4073bc <__smakebuf_r+0x54>
  4073b4:	432b      	orrs	r3, r5
  4073b6:	81a3      	strh	r3, [r4, #12]
  4073b8:	b003      	add	sp, #12
  4073ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4073bc:	4630      	mov	r0, r6
  4073be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4073c2:	f000 ffb3 	bl	40832c <_isatty_r>
  4073c6:	b1a0      	cbz	r0, 4073f2 <__smakebuf_r+0x8a>
  4073c8:	89a3      	ldrh	r3, [r4, #12]
  4073ca:	f023 0303 	bic.w	r3, r3, #3
  4073ce:	f043 0301 	orr.w	r3, r3, #1
  4073d2:	b21b      	sxth	r3, r3
  4073d4:	e7ee      	b.n	4073b4 <__smakebuf_r+0x4c>
  4073d6:	059a      	lsls	r2, r3, #22
  4073d8:	d4ee      	bmi.n	4073b8 <__smakebuf_r+0x50>
  4073da:	f023 0303 	bic.w	r3, r3, #3
  4073de:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4073e2:	f043 0302 	orr.w	r3, r3, #2
  4073e6:	2101      	movs	r1, #1
  4073e8:	81a3      	strh	r3, [r4, #12]
  4073ea:	6022      	str	r2, [r4, #0]
  4073ec:	6122      	str	r2, [r4, #16]
  4073ee:	6161      	str	r1, [r4, #20]
  4073f0:	e7e2      	b.n	4073b8 <__smakebuf_r+0x50>
  4073f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4073f6:	e7dd      	b.n	4073b4 <__smakebuf_r+0x4c>
  4073f8:	00406c31 	.word	0x00406c31
  4073fc:	00000000 	.word	0x00000000

00407400 <memchr>:
  407400:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407404:	2a10      	cmp	r2, #16
  407406:	db2b      	blt.n	407460 <memchr+0x60>
  407408:	f010 0f07 	tst.w	r0, #7
  40740c:	d008      	beq.n	407420 <memchr+0x20>
  40740e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407412:	3a01      	subs	r2, #1
  407414:	428b      	cmp	r3, r1
  407416:	d02d      	beq.n	407474 <memchr+0x74>
  407418:	f010 0f07 	tst.w	r0, #7
  40741c:	b342      	cbz	r2, 407470 <memchr+0x70>
  40741e:	d1f6      	bne.n	40740e <memchr+0xe>
  407420:	b4f0      	push	{r4, r5, r6, r7}
  407422:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407426:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40742a:	f022 0407 	bic.w	r4, r2, #7
  40742e:	f07f 0700 	mvns.w	r7, #0
  407432:	2300      	movs	r3, #0
  407434:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407438:	3c08      	subs	r4, #8
  40743a:	ea85 0501 	eor.w	r5, r5, r1
  40743e:	ea86 0601 	eor.w	r6, r6, r1
  407442:	fa85 f547 	uadd8	r5, r5, r7
  407446:	faa3 f587 	sel	r5, r3, r7
  40744a:	fa86 f647 	uadd8	r6, r6, r7
  40744e:	faa5 f687 	sel	r6, r5, r7
  407452:	b98e      	cbnz	r6, 407478 <memchr+0x78>
  407454:	d1ee      	bne.n	407434 <memchr+0x34>
  407456:	bcf0      	pop	{r4, r5, r6, r7}
  407458:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40745c:	f002 0207 	and.w	r2, r2, #7
  407460:	b132      	cbz	r2, 407470 <memchr+0x70>
  407462:	f810 3b01 	ldrb.w	r3, [r0], #1
  407466:	3a01      	subs	r2, #1
  407468:	ea83 0301 	eor.w	r3, r3, r1
  40746c:	b113      	cbz	r3, 407474 <memchr+0x74>
  40746e:	d1f8      	bne.n	407462 <memchr+0x62>
  407470:	2000      	movs	r0, #0
  407472:	4770      	bx	lr
  407474:	3801      	subs	r0, #1
  407476:	4770      	bx	lr
  407478:	2d00      	cmp	r5, #0
  40747a:	bf06      	itte	eq
  40747c:	4635      	moveq	r5, r6
  40747e:	3803      	subeq	r0, #3
  407480:	3807      	subne	r0, #7
  407482:	f015 0f01 	tst.w	r5, #1
  407486:	d107      	bne.n	407498 <memchr+0x98>
  407488:	3001      	adds	r0, #1
  40748a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40748e:	bf02      	ittt	eq
  407490:	3001      	addeq	r0, #1
  407492:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407496:	3001      	addeq	r0, #1
  407498:	bcf0      	pop	{r4, r5, r6, r7}
  40749a:	3801      	subs	r0, #1
  40749c:	4770      	bx	lr
  40749e:	bf00      	nop

004074a0 <memmove>:
  4074a0:	4288      	cmp	r0, r1
  4074a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4074a4:	d90d      	bls.n	4074c2 <memmove+0x22>
  4074a6:	188b      	adds	r3, r1, r2
  4074a8:	4298      	cmp	r0, r3
  4074aa:	d20a      	bcs.n	4074c2 <memmove+0x22>
  4074ac:	1884      	adds	r4, r0, r2
  4074ae:	2a00      	cmp	r2, #0
  4074b0:	d051      	beq.n	407556 <memmove+0xb6>
  4074b2:	4622      	mov	r2, r4
  4074b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4074b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4074bc:	4299      	cmp	r1, r3
  4074be:	d1f9      	bne.n	4074b4 <memmove+0x14>
  4074c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4074c2:	2a0f      	cmp	r2, #15
  4074c4:	d948      	bls.n	407558 <memmove+0xb8>
  4074c6:	ea41 0300 	orr.w	r3, r1, r0
  4074ca:	079b      	lsls	r3, r3, #30
  4074cc:	d146      	bne.n	40755c <memmove+0xbc>
  4074ce:	f100 0410 	add.w	r4, r0, #16
  4074d2:	f101 0310 	add.w	r3, r1, #16
  4074d6:	4615      	mov	r5, r2
  4074d8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4074dc:	f844 6c10 	str.w	r6, [r4, #-16]
  4074e0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4074e4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4074e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4074ec:	f844 6c08 	str.w	r6, [r4, #-8]
  4074f0:	3d10      	subs	r5, #16
  4074f2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4074f6:	f844 6c04 	str.w	r6, [r4, #-4]
  4074fa:	2d0f      	cmp	r5, #15
  4074fc:	f103 0310 	add.w	r3, r3, #16
  407500:	f104 0410 	add.w	r4, r4, #16
  407504:	d8e8      	bhi.n	4074d8 <memmove+0x38>
  407506:	f1a2 0310 	sub.w	r3, r2, #16
  40750a:	f023 030f 	bic.w	r3, r3, #15
  40750e:	f002 0e0f 	and.w	lr, r2, #15
  407512:	3310      	adds	r3, #16
  407514:	f1be 0f03 	cmp.w	lr, #3
  407518:	4419      	add	r1, r3
  40751a:	4403      	add	r3, r0
  40751c:	d921      	bls.n	407562 <memmove+0xc2>
  40751e:	1f1e      	subs	r6, r3, #4
  407520:	460d      	mov	r5, r1
  407522:	4674      	mov	r4, lr
  407524:	3c04      	subs	r4, #4
  407526:	f855 7b04 	ldr.w	r7, [r5], #4
  40752a:	f846 7f04 	str.w	r7, [r6, #4]!
  40752e:	2c03      	cmp	r4, #3
  407530:	d8f8      	bhi.n	407524 <memmove+0x84>
  407532:	f1ae 0404 	sub.w	r4, lr, #4
  407536:	f024 0403 	bic.w	r4, r4, #3
  40753a:	3404      	adds	r4, #4
  40753c:	4421      	add	r1, r4
  40753e:	4423      	add	r3, r4
  407540:	f002 0203 	and.w	r2, r2, #3
  407544:	b162      	cbz	r2, 407560 <memmove+0xc0>
  407546:	3b01      	subs	r3, #1
  407548:	440a      	add	r2, r1
  40754a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40754e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407552:	428a      	cmp	r2, r1
  407554:	d1f9      	bne.n	40754a <memmove+0xaa>
  407556:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407558:	4603      	mov	r3, r0
  40755a:	e7f3      	b.n	407544 <memmove+0xa4>
  40755c:	4603      	mov	r3, r0
  40755e:	e7f2      	b.n	407546 <memmove+0xa6>
  407560:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407562:	4672      	mov	r2, lr
  407564:	e7ee      	b.n	407544 <memmove+0xa4>
  407566:	bf00      	nop

00407568 <_Balloc>:
  407568:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40756a:	b570      	push	{r4, r5, r6, lr}
  40756c:	4605      	mov	r5, r0
  40756e:	460c      	mov	r4, r1
  407570:	b14b      	cbz	r3, 407586 <_Balloc+0x1e>
  407572:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407576:	b180      	cbz	r0, 40759a <_Balloc+0x32>
  407578:	6802      	ldr	r2, [r0, #0]
  40757a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40757e:	2300      	movs	r3, #0
  407580:	6103      	str	r3, [r0, #16]
  407582:	60c3      	str	r3, [r0, #12]
  407584:	bd70      	pop	{r4, r5, r6, pc}
  407586:	2221      	movs	r2, #33	; 0x21
  407588:	2104      	movs	r1, #4
  40758a:	f000 fd93 	bl	4080b4 <_calloc_r>
  40758e:	64e8      	str	r0, [r5, #76]	; 0x4c
  407590:	4603      	mov	r3, r0
  407592:	2800      	cmp	r0, #0
  407594:	d1ed      	bne.n	407572 <_Balloc+0xa>
  407596:	2000      	movs	r0, #0
  407598:	bd70      	pop	{r4, r5, r6, pc}
  40759a:	2101      	movs	r1, #1
  40759c:	fa01 f604 	lsl.w	r6, r1, r4
  4075a0:	1d72      	adds	r2, r6, #5
  4075a2:	4628      	mov	r0, r5
  4075a4:	0092      	lsls	r2, r2, #2
  4075a6:	f000 fd85 	bl	4080b4 <_calloc_r>
  4075aa:	2800      	cmp	r0, #0
  4075ac:	d0f3      	beq.n	407596 <_Balloc+0x2e>
  4075ae:	6044      	str	r4, [r0, #4]
  4075b0:	6086      	str	r6, [r0, #8]
  4075b2:	e7e4      	b.n	40757e <_Balloc+0x16>

004075b4 <_Bfree>:
  4075b4:	b131      	cbz	r1, 4075c4 <_Bfree+0x10>
  4075b6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4075b8:	684a      	ldr	r2, [r1, #4]
  4075ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4075be:	6008      	str	r0, [r1, #0]
  4075c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4075c4:	4770      	bx	lr
  4075c6:	bf00      	nop

004075c8 <__multadd>:
  4075c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4075ca:	690c      	ldr	r4, [r1, #16]
  4075cc:	b083      	sub	sp, #12
  4075ce:	460d      	mov	r5, r1
  4075d0:	4606      	mov	r6, r0
  4075d2:	f101 0e14 	add.w	lr, r1, #20
  4075d6:	2700      	movs	r7, #0
  4075d8:	f8de 0000 	ldr.w	r0, [lr]
  4075dc:	b281      	uxth	r1, r0
  4075de:	fb02 3301 	mla	r3, r2, r1, r3
  4075e2:	0c01      	lsrs	r1, r0, #16
  4075e4:	0c18      	lsrs	r0, r3, #16
  4075e6:	fb02 0101 	mla	r1, r2, r1, r0
  4075ea:	b29b      	uxth	r3, r3
  4075ec:	3701      	adds	r7, #1
  4075ee:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4075f2:	42bc      	cmp	r4, r7
  4075f4:	f84e 3b04 	str.w	r3, [lr], #4
  4075f8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4075fc:	dcec      	bgt.n	4075d8 <__multadd+0x10>
  4075fe:	b13b      	cbz	r3, 407610 <__multadd+0x48>
  407600:	68aa      	ldr	r2, [r5, #8]
  407602:	4294      	cmp	r4, r2
  407604:	da07      	bge.n	407616 <__multadd+0x4e>
  407606:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40760a:	3401      	adds	r4, #1
  40760c:	6153      	str	r3, [r2, #20]
  40760e:	612c      	str	r4, [r5, #16]
  407610:	4628      	mov	r0, r5
  407612:	b003      	add	sp, #12
  407614:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407616:	6869      	ldr	r1, [r5, #4]
  407618:	9301      	str	r3, [sp, #4]
  40761a:	3101      	adds	r1, #1
  40761c:	4630      	mov	r0, r6
  40761e:	f7ff ffa3 	bl	407568 <_Balloc>
  407622:	692a      	ldr	r2, [r5, #16]
  407624:	3202      	adds	r2, #2
  407626:	f105 010c 	add.w	r1, r5, #12
  40762a:	4607      	mov	r7, r0
  40762c:	0092      	lsls	r2, r2, #2
  40762e:	300c      	adds	r0, #12
  407630:	f7fc fc60 	bl	403ef4 <memcpy>
  407634:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407636:	6869      	ldr	r1, [r5, #4]
  407638:	9b01      	ldr	r3, [sp, #4]
  40763a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40763e:	6028      	str	r0, [r5, #0]
  407640:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407644:	463d      	mov	r5, r7
  407646:	e7de      	b.n	407606 <__multadd+0x3e>

00407648 <__hi0bits>:
  407648:	0c02      	lsrs	r2, r0, #16
  40764a:	0412      	lsls	r2, r2, #16
  40764c:	4603      	mov	r3, r0
  40764e:	b9b2      	cbnz	r2, 40767e <__hi0bits+0x36>
  407650:	0403      	lsls	r3, r0, #16
  407652:	2010      	movs	r0, #16
  407654:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407658:	bf04      	itt	eq
  40765a:	021b      	lsleq	r3, r3, #8
  40765c:	3008      	addeq	r0, #8
  40765e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407662:	bf04      	itt	eq
  407664:	011b      	lsleq	r3, r3, #4
  407666:	3004      	addeq	r0, #4
  407668:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40766c:	bf04      	itt	eq
  40766e:	009b      	lsleq	r3, r3, #2
  407670:	3002      	addeq	r0, #2
  407672:	2b00      	cmp	r3, #0
  407674:	db02      	blt.n	40767c <__hi0bits+0x34>
  407676:	005b      	lsls	r3, r3, #1
  407678:	d403      	bmi.n	407682 <__hi0bits+0x3a>
  40767a:	2020      	movs	r0, #32
  40767c:	4770      	bx	lr
  40767e:	2000      	movs	r0, #0
  407680:	e7e8      	b.n	407654 <__hi0bits+0xc>
  407682:	3001      	adds	r0, #1
  407684:	4770      	bx	lr
  407686:	bf00      	nop

00407688 <__lo0bits>:
  407688:	6803      	ldr	r3, [r0, #0]
  40768a:	f013 0207 	ands.w	r2, r3, #7
  40768e:	4601      	mov	r1, r0
  407690:	d007      	beq.n	4076a2 <__lo0bits+0x1a>
  407692:	07da      	lsls	r2, r3, #31
  407694:	d421      	bmi.n	4076da <__lo0bits+0x52>
  407696:	0798      	lsls	r0, r3, #30
  407698:	d421      	bmi.n	4076de <__lo0bits+0x56>
  40769a:	089b      	lsrs	r3, r3, #2
  40769c:	600b      	str	r3, [r1, #0]
  40769e:	2002      	movs	r0, #2
  4076a0:	4770      	bx	lr
  4076a2:	b298      	uxth	r0, r3
  4076a4:	b198      	cbz	r0, 4076ce <__lo0bits+0x46>
  4076a6:	4610      	mov	r0, r2
  4076a8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4076ac:	bf04      	itt	eq
  4076ae:	0a1b      	lsreq	r3, r3, #8
  4076b0:	3008      	addeq	r0, #8
  4076b2:	071a      	lsls	r2, r3, #28
  4076b4:	bf04      	itt	eq
  4076b6:	091b      	lsreq	r3, r3, #4
  4076b8:	3004      	addeq	r0, #4
  4076ba:	079a      	lsls	r2, r3, #30
  4076bc:	bf04      	itt	eq
  4076be:	089b      	lsreq	r3, r3, #2
  4076c0:	3002      	addeq	r0, #2
  4076c2:	07da      	lsls	r2, r3, #31
  4076c4:	d407      	bmi.n	4076d6 <__lo0bits+0x4e>
  4076c6:	085b      	lsrs	r3, r3, #1
  4076c8:	d104      	bne.n	4076d4 <__lo0bits+0x4c>
  4076ca:	2020      	movs	r0, #32
  4076cc:	4770      	bx	lr
  4076ce:	0c1b      	lsrs	r3, r3, #16
  4076d0:	2010      	movs	r0, #16
  4076d2:	e7e9      	b.n	4076a8 <__lo0bits+0x20>
  4076d4:	3001      	adds	r0, #1
  4076d6:	600b      	str	r3, [r1, #0]
  4076d8:	4770      	bx	lr
  4076da:	2000      	movs	r0, #0
  4076dc:	4770      	bx	lr
  4076de:	085b      	lsrs	r3, r3, #1
  4076e0:	600b      	str	r3, [r1, #0]
  4076e2:	2001      	movs	r0, #1
  4076e4:	4770      	bx	lr
  4076e6:	bf00      	nop

004076e8 <__i2b>:
  4076e8:	b510      	push	{r4, lr}
  4076ea:	460c      	mov	r4, r1
  4076ec:	2101      	movs	r1, #1
  4076ee:	f7ff ff3b 	bl	407568 <_Balloc>
  4076f2:	2201      	movs	r2, #1
  4076f4:	6144      	str	r4, [r0, #20]
  4076f6:	6102      	str	r2, [r0, #16]
  4076f8:	bd10      	pop	{r4, pc}
  4076fa:	bf00      	nop

004076fc <__multiply>:
  4076fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407700:	690c      	ldr	r4, [r1, #16]
  407702:	6915      	ldr	r5, [r2, #16]
  407704:	42ac      	cmp	r4, r5
  407706:	b083      	sub	sp, #12
  407708:	468b      	mov	fp, r1
  40770a:	4616      	mov	r6, r2
  40770c:	da04      	bge.n	407718 <__multiply+0x1c>
  40770e:	4622      	mov	r2, r4
  407710:	46b3      	mov	fp, r6
  407712:	462c      	mov	r4, r5
  407714:	460e      	mov	r6, r1
  407716:	4615      	mov	r5, r2
  407718:	f8db 3008 	ldr.w	r3, [fp, #8]
  40771c:	f8db 1004 	ldr.w	r1, [fp, #4]
  407720:	eb04 0805 	add.w	r8, r4, r5
  407724:	4598      	cmp	r8, r3
  407726:	bfc8      	it	gt
  407728:	3101      	addgt	r1, #1
  40772a:	f7ff ff1d 	bl	407568 <_Balloc>
  40772e:	f100 0914 	add.w	r9, r0, #20
  407732:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  407736:	45d1      	cmp	r9, sl
  407738:	9000      	str	r0, [sp, #0]
  40773a:	d205      	bcs.n	407748 <__multiply+0x4c>
  40773c:	464b      	mov	r3, r9
  40773e:	2100      	movs	r1, #0
  407740:	f843 1b04 	str.w	r1, [r3], #4
  407744:	459a      	cmp	sl, r3
  407746:	d8fb      	bhi.n	407740 <__multiply+0x44>
  407748:	f106 0c14 	add.w	ip, r6, #20
  40774c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407750:	f10b 0b14 	add.w	fp, fp, #20
  407754:	459c      	cmp	ip, r3
  407756:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40775a:	d24c      	bcs.n	4077f6 <__multiply+0xfa>
  40775c:	f8cd a004 	str.w	sl, [sp, #4]
  407760:	469a      	mov	sl, r3
  407762:	f8dc 5000 	ldr.w	r5, [ip]
  407766:	b2af      	uxth	r7, r5
  407768:	b1ef      	cbz	r7, 4077a6 <__multiply+0xaa>
  40776a:	2100      	movs	r1, #0
  40776c:	464d      	mov	r5, r9
  40776e:	465e      	mov	r6, fp
  407770:	460c      	mov	r4, r1
  407772:	f856 2b04 	ldr.w	r2, [r6], #4
  407776:	6828      	ldr	r0, [r5, #0]
  407778:	b293      	uxth	r3, r2
  40777a:	b281      	uxth	r1, r0
  40777c:	fb07 1303 	mla	r3, r7, r3, r1
  407780:	0c12      	lsrs	r2, r2, #16
  407782:	0c01      	lsrs	r1, r0, #16
  407784:	4423      	add	r3, r4
  407786:	fb07 1102 	mla	r1, r7, r2, r1
  40778a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40778e:	b29b      	uxth	r3, r3
  407790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407794:	45b6      	cmp	lr, r6
  407796:	f845 3b04 	str.w	r3, [r5], #4
  40779a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40779e:	d8e8      	bhi.n	407772 <__multiply+0x76>
  4077a0:	602c      	str	r4, [r5, #0]
  4077a2:	f8dc 5000 	ldr.w	r5, [ip]
  4077a6:	0c2d      	lsrs	r5, r5, #16
  4077a8:	d01d      	beq.n	4077e6 <__multiply+0xea>
  4077aa:	f8d9 3000 	ldr.w	r3, [r9]
  4077ae:	4648      	mov	r0, r9
  4077b0:	461c      	mov	r4, r3
  4077b2:	4659      	mov	r1, fp
  4077b4:	2200      	movs	r2, #0
  4077b6:	880e      	ldrh	r6, [r1, #0]
  4077b8:	0c24      	lsrs	r4, r4, #16
  4077ba:	fb05 4406 	mla	r4, r5, r6, r4
  4077be:	4422      	add	r2, r4
  4077c0:	b29b      	uxth	r3, r3
  4077c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4077c6:	f840 3b04 	str.w	r3, [r0], #4
  4077ca:	f851 3b04 	ldr.w	r3, [r1], #4
  4077ce:	6804      	ldr	r4, [r0, #0]
  4077d0:	0c1b      	lsrs	r3, r3, #16
  4077d2:	b2a6      	uxth	r6, r4
  4077d4:	fb05 6303 	mla	r3, r5, r3, r6
  4077d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4077dc:	458e      	cmp	lr, r1
  4077de:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4077e2:	d8e8      	bhi.n	4077b6 <__multiply+0xba>
  4077e4:	6003      	str	r3, [r0, #0]
  4077e6:	f10c 0c04 	add.w	ip, ip, #4
  4077ea:	45e2      	cmp	sl, ip
  4077ec:	f109 0904 	add.w	r9, r9, #4
  4077f0:	d8b7      	bhi.n	407762 <__multiply+0x66>
  4077f2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4077f6:	f1b8 0f00 	cmp.w	r8, #0
  4077fa:	dd0b      	ble.n	407814 <__multiply+0x118>
  4077fc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  407800:	f1aa 0a04 	sub.w	sl, sl, #4
  407804:	b11b      	cbz	r3, 40780e <__multiply+0x112>
  407806:	e005      	b.n	407814 <__multiply+0x118>
  407808:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40780c:	b913      	cbnz	r3, 407814 <__multiply+0x118>
  40780e:	f1b8 0801 	subs.w	r8, r8, #1
  407812:	d1f9      	bne.n	407808 <__multiply+0x10c>
  407814:	9800      	ldr	r0, [sp, #0]
  407816:	f8c0 8010 	str.w	r8, [r0, #16]
  40781a:	b003      	add	sp, #12
  40781c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407820 <__pow5mult>:
  407820:	f012 0303 	ands.w	r3, r2, #3
  407824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407828:	4614      	mov	r4, r2
  40782a:	4607      	mov	r7, r0
  40782c:	d12e      	bne.n	40788c <__pow5mult+0x6c>
  40782e:	460d      	mov	r5, r1
  407830:	10a4      	asrs	r4, r4, #2
  407832:	d01c      	beq.n	40786e <__pow5mult+0x4e>
  407834:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  407836:	b396      	cbz	r6, 40789e <__pow5mult+0x7e>
  407838:	07e3      	lsls	r3, r4, #31
  40783a:	f04f 0800 	mov.w	r8, #0
  40783e:	d406      	bmi.n	40784e <__pow5mult+0x2e>
  407840:	1064      	asrs	r4, r4, #1
  407842:	d014      	beq.n	40786e <__pow5mult+0x4e>
  407844:	6830      	ldr	r0, [r6, #0]
  407846:	b1a8      	cbz	r0, 407874 <__pow5mult+0x54>
  407848:	4606      	mov	r6, r0
  40784a:	07e3      	lsls	r3, r4, #31
  40784c:	d5f8      	bpl.n	407840 <__pow5mult+0x20>
  40784e:	4632      	mov	r2, r6
  407850:	4629      	mov	r1, r5
  407852:	4638      	mov	r0, r7
  407854:	f7ff ff52 	bl	4076fc <__multiply>
  407858:	b1b5      	cbz	r5, 407888 <__pow5mult+0x68>
  40785a:	686a      	ldr	r2, [r5, #4]
  40785c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40785e:	1064      	asrs	r4, r4, #1
  407860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407864:	6029      	str	r1, [r5, #0]
  407866:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40786a:	4605      	mov	r5, r0
  40786c:	d1ea      	bne.n	407844 <__pow5mult+0x24>
  40786e:	4628      	mov	r0, r5
  407870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407874:	4632      	mov	r2, r6
  407876:	4631      	mov	r1, r6
  407878:	4638      	mov	r0, r7
  40787a:	f7ff ff3f 	bl	4076fc <__multiply>
  40787e:	6030      	str	r0, [r6, #0]
  407880:	f8c0 8000 	str.w	r8, [r0]
  407884:	4606      	mov	r6, r0
  407886:	e7e0      	b.n	40784a <__pow5mult+0x2a>
  407888:	4605      	mov	r5, r0
  40788a:	e7d9      	b.n	407840 <__pow5mult+0x20>
  40788c:	1e5a      	subs	r2, r3, #1
  40788e:	4d0b      	ldr	r5, [pc, #44]	; (4078bc <__pow5mult+0x9c>)
  407890:	2300      	movs	r3, #0
  407892:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407896:	f7ff fe97 	bl	4075c8 <__multadd>
  40789a:	4605      	mov	r5, r0
  40789c:	e7c8      	b.n	407830 <__pow5mult+0x10>
  40789e:	2101      	movs	r1, #1
  4078a0:	4638      	mov	r0, r7
  4078a2:	f7ff fe61 	bl	407568 <_Balloc>
  4078a6:	f240 2171 	movw	r1, #625	; 0x271
  4078aa:	2201      	movs	r2, #1
  4078ac:	2300      	movs	r3, #0
  4078ae:	6141      	str	r1, [r0, #20]
  4078b0:	6102      	str	r2, [r0, #16]
  4078b2:	4606      	mov	r6, r0
  4078b4:	64b8      	str	r0, [r7, #72]	; 0x48
  4078b6:	6003      	str	r3, [r0, #0]
  4078b8:	e7be      	b.n	407838 <__pow5mult+0x18>
  4078ba:	bf00      	nop
  4078bc:	004093d8 	.word	0x004093d8

004078c0 <__lshift>:
  4078c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4078c4:	4691      	mov	r9, r2
  4078c6:	690a      	ldr	r2, [r1, #16]
  4078c8:	688b      	ldr	r3, [r1, #8]
  4078ca:	ea4f 1469 	mov.w	r4, r9, asr #5
  4078ce:	eb04 0802 	add.w	r8, r4, r2
  4078d2:	f108 0501 	add.w	r5, r8, #1
  4078d6:	429d      	cmp	r5, r3
  4078d8:	460e      	mov	r6, r1
  4078da:	4607      	mov	r7, r0
  4078dc:	6849      	ldr	r1, [r1, #4]
  4078de:	dd04      	ble.n	4078ea <__lshift+0x2a>
  4078e0:	005b      	lsls	r3, r3, #1
  4078e2:	429d      	cmp	r5, r3
  4078e4:	f101 0101 	add.w	r1, r1, #1
  4078e8:	dcfa      	bgt.n	4078e0 <__lshift+0x20>
  4078ea:	4638      	mov	r0, r7
  4078ec:	f7ff fe3c 	bl	407568 <_Balloc>
  4078f0:	2c00      	cmp	r4, #0
  4078f2:	f100 0314 	add.w	r3, r0, #20
  4078f6:	dd06      	ble.n	407906 <__lshift+0x46>
  4078f8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4078fc:	2100      	movs	r1, #0
  4078fe:	f843 1b04 	str.w	r1, [r3], #4
  407902:	429a      	cmp	r2, r3
  407904:	d1fb      	bne.n	4078fe <__lshift+0x3e>
  407906:	6934      	ldr	r4, [r6, #16]
  407908:	f106 0114 	add.w	r1, r6, #20
  40790c:	f019 091f 	ands.w	r9, r9, #31
  407910:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407914:	d01d      	beq.n	407952 <__lshift+0x92>
  407916:	f1c9 0c20 	rsb	ip, r9, #32
  40791a:	2200      	movs	r2, #0
  40791c:	680c      	ldr	r4, [r1, #0]
  40791e:	fa04 f409 	lsl.w	r4, r4, r9
  407922:	4314      	orrs	r4, r2
  407924:	f843 4b04 	str.w	r4, [r3], #4
  407928:	f851 2b04 	ldr.w	r2, [r1], #4
  40792c:	458e      	cmp	lr, r1
  40792e:	fa22 f20c 	lsr.w	r2, r2, ip
  407932:	d8f3      	bhi.n	40791c <__lshift+0x5c>
  407934:	601a      	str	r2, [r3, #0]
  407936:	b10a      	cbz	r2, 40793c <__lshift+0x7c>
  407938:	f108 0502 	add.w	r5, r8, #2
  40793c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40793e:	6872      	ldr	r2, [r6, #4]
  407940:	3d01      	subs	r5, #1
  407942:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407946:	6105      	str	r5, [r0, #16]
  407948:	6031      	str	r1, [r6, #0]
  40794a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407952:	3b04      	subs	r3, #4
  407954:	f851 2b04 	ldr.w	r2, [r1], #4
  407958:	f843 2f04 	str.w	r2, [r3, #4]!
  40795c:	458e      	cmp	lr, r1
  40795e:	d8f9      	bhi.n	407954 <__lshift+0x94>
  407960:	e7ec      	b.n	40793c <__lshift+0x7c>
  407962:	bf00      	nop

00407964 <__mcmp>:
  407964:	b430      	push	{r4, r5}
  407966:	690b      	ldr	r3, [r1, #16]
  407968:	4605      	mov	r5, r0
  40796a:	6900      	ldr	r0, [r0, #16]
  40796c:	1ac0      	subs	r0, r0, r3
  40796e:	d10f      	bne.n	407990 <__mcmp+0x2c>
  407970:	009b      	lsls	r3, r3, #2
  407972:	3514      	adds	r5, #20
  407974:	3114      	adds	r1, #20
  407976:	4419      	add	r1, r3
  407978:	442b      	add	r3, r5
  40797a:	e001      	b.n	407980 <__mcmp+0x1c>
  40797c:	429d      	cmp	r5, r3
  40797e:	d207      	bcs.n	407990 <__mcmp+0x2c>
  407980:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407984:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407988:	4294      	cmp	r4, r2
  40798a:	d0f7      	beq.n	40797c <__mcmp+0x18>
  40798c:	d302      	bcc.n	407994 <__mcmp+0x30>
  40798e:	2001      	movs	r0, #1
  407990:	bc30      	pop	{r4, r5}
  407992:	4770      	bx	lr
  407994:	f04f 30ff 	mov.w	r0, #4294967295
  407998:	e7fa      	b.n	407990 <__mcmp+0x2c>
  40799a:	bf00      	nop

0040799c <__mdiff>:
  40799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4079a0:	690f      	ldr	r7, [r1, #16]
  4079a2:	460e      	mov	r6, r1
  4079a4:	6911      	ldr	r1, [r2, #16]
  4079a6:	1a7f      	subs	r7, r7, r1
  4079a8:	2f00      	cmp	r7, #0
  4079aa:	4690      	mov	r8, r2
  4079ac:	d117      	bne.n	4079de <__mdiff+0x42>
  4079ae:	0089      	lsls	r1, r1, #2
  4079b0:	f106 0514 	add.w	r5, r6, #20
  4079b4:	f102 0e14 	add.w	lr, r2, #20
  4079b8:	186b      	adds	r3, r5, r1
  4079ba:	4471      	add	r1, lr
  4079bc:	e001      	b.n	4079c2 <__mdiff+0x26>
  4079be:	429d      	cmp	r5, r3
  4079c0:	d25c      	bcs.n	407a7c <__mdiff+0xe0>
  4079c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4079c6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4079ca:	42a2      	cmp	r2, r4
  4079cc:	d0f7      	beq.n	4079be <__mdiff+0x22>
  4079ce:	d25e      	bcs.n	407a8e <__mdiff+0xf2>
  4079d0:	4633      	mov	r3, r6
  4079d2:	462c      	mov	r4, r5
  4079d4:	4646      	mov	r6, r8
  4079d6:	4675      	mov	r5, lr
  4079d8:	4698      	mov	r8, r3
  4079da:	2701      	movs	r7, #1
  4079dc:	e005      	b.n	4079ea <__mdiff+0x4e>
  4079de:	db58      	blt.n	407a92 <__mdiff+0xf6>
  4079e0:	f106 0514 	add.w	r5, r6, #20
  4079e4:	f108 0414 	add.w	r4, r8, #20
  4079e8:	2700      	movs	r7, #0
  4079ea:	6871      	ldr	r1, [r6, #4]
  4079ec:	f7ff fdbc 	bl	407568 <_Balloc>
  4079f0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4079f4:	6936      	ldr	r6, [r6, #16]
  4079f6:	60c7      	str	r7, [r0, #12]
  4079f8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4079fc:	46a6      	mov	lr, r4
  4079fe:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407a02:	f100 0414 	add.w	r4, r0, #20
  407a06:	2300      	movs	r3, #0
  407a08:	f85e 1b04 	ldr.w	r1, [lr], #4
  407a0c:	f855 8b04 	ldr.w	r8, [r5], #4
  407a10:	b28a      	uxth	r2, r1
  407a12:	fa13 f388 	uxtah	r3, r3, r8
  407a16:	0c09      	lsrs	r1, r1, #16
  407a18:	1a9a      	subs	r2, r3, r2
  407a1a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407a1e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407a22:	b292      	uxth	r2, r2
  407a24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407a28:	45f4      	cmp	ip, lr
  407a2a:	f844 2b04 	str.w	r2, [r4], #4
  407a2e:	ea4f 4323 	mov.w	r3, r3, asr #16
  407a32:	d8e9      	bhi.n	407a08 <__mdiff+0x6c>
  407a34:	42af      	cmp	r7, r5
  407a36:	d917      	bls.n	407a68 <__mdiff+0xcc>
  407a38:	46a4      	mov	ip, r4
  407a3a:	46ae      	mov	lr, r5
  407a3c:	f85e 2b04 	ldr.w	r2, [lr], #4
  407a40:	fa13 f382 	uxtah	r3, r3, r2
  407a44:	1419      	asrs	r1, r3, #16
  407a46:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  407a4a:	b29b      	uxth	r3, r3
  407a4c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407a50:	4577      	cmp	r7, lr
  407a52:	f84c 2b04 	str.w	r2, [ip], #4
  407a56:	ea4f 4321 	mov.w	r3, r1, asr #16
  407a5a:	d8ef      	bhi.n	407a3c <__mdiff+0xa0>
  407a5c:	43ed      	mvns	r5, r5
  407a5e:	442f      	add	r7, r5
  407a60:	f027 0703 	bic.w	r7, r7, #3
  407a64:	3704      	adds	r7, #4
  407a66:	443c      	add	r4, r7
  407a68:	3c04      	subs	r4, #4
  407a6a:	b922      	cbnz	r2, 407a76 <__mdiff+0xda>
  407a6c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407a70:	3e01      	subs	r6, #1
  407a72:	2b00      	cmp	r3, #0
  407a74:	d0fa      	beq.n	407a6c <__mdiff+0xd0>
  407a76:	6106      	str	r6, [r0, #16]
  407a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407a7c:	2100      	movs	r1, #0
  407a7e:	f7ff fd73 	bl	407568 <_Balloc>
  407a82:	2201      	movs	r2, #1
  407a84:	2300      	movs	r3, #0
  407a86:	6102      	str	r2, [r0, #16]
  407a88:	6143      	str	r3, [r0, #20]
  407a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407a8e:	4674      	mov	r4, lr
  407a90:	e7ab      	b.n	4079ea <__mdiff+0x4e>
  407a92:	4633      	mov	r3, r6
  407a94:	f106 0414 	add.w	r4, r6, #20
  407a98:	f102 0514 	add.w	r5, r2, #20
  407a9c:	4616      	mov	r6, r2
  407a9e:	2701      	movs	r7, #1
  407aa0:	4698      	mov	r8, r3
  407aa2:	e7a2      	b.n	4079ea <__mdiff+0x4e>

00407aa4 <__d2b>:
  407aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407aa8:	b082      	sub	sp, #8
  407aaa:	2101      	movs	r1, #1
  407aac:	461c      	mov	r4, r3
  407aae:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407ab2:	4615      	mov	r5, r2
  407ab4:	9e08      	ldr	r6, [sp, #32]
  407ab6:	f7ff fd57 	bl	407568 <_Balloc>
  407aba:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407abe:	4680      	mov	r8, r0
  407ac0:	b10f      	cbz	r7, 407ac6 <__d2b+0x22>
  407ac2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407ac6:	9401      	str	r4, [sp, #4]
  407ac8:	b31d      	cbz	r5, 407b12 <__d2b+0x6e>
  407aca:	a802      	add	r0, sp, #8
  407acc:	f840 5d08 	str.w	r5, [r0, #-8]!
  407ad0:	f7ff fdda 	bl	407688 <__lo0bits>
  407ad4:	2800      	cmp	r0, #0
  407ad6:	d134      	bne.n	407b42 <__d2b+0x9e>
  407ad8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407adc:	f8c8 2014 	str.w	r2, [r8, #20]
  407ae0:	2b00      	cmp	r3, #0
  407ae2:	bf0c      	ite	eq
  407ae4:	2101      	moveq	r1, #1
  407ae6:	2102      	movne	r1, #2
  407ae8:	f8c8 3018 	str.w	r3, [r8, #24]
  407aec:	f8c8 1010 	str.w	r1, [r8, #16]
  407af0:	b9df      	cbnz	r7, 407b2a <__d2b+0x86>
  407af2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407af6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407afa:	6030      	str	r0, [r6, #0]
  407afc:	6918      	ldr	r0, [r3, #16]
  407afe:	f7ff fda3 	bl	407648 <__hi0bits>
  407b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407b04:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407b08:	6018      	str	r0, [r3, #0]
  407b0a:	4640      	mov	r0, r8
  407b0c:	b002      	add	sp, #8
  407b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b12:	a801      	add	r0, sp, #4
  407b14:	f7ff fdb8 	bl	407688 <__lo0bits>
  407b18:	9b01      	ldr	r3, [sp, #4]
  407b1a:	f8c8 3014 	str.w	r3, [r8, #20]
  407b1e:	2101      	movs	r1, #1
  407b20:	3020      	adds	r0, #32
  407b22:	f8c8 1010 	str.w	r1, [r8, #16]
  407b26:	2f00      	cmp	r7, #0
  407b28:	d0e3      	beq.n	407af2 <__d2b+0x4e>
  407b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407b2c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407b30:	4407      	add	r7, r0
  407b32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407b36:	6037      	str	r7, [r6, #0]
  407b38:	6018      	str	r0, [r3, #0]
  407b3a:	4640      	mov	r0, r8
  407b3c:	b002      	add	sp, #8
  407b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b42:	e89d 000a 	ldmia.w	sp, {r1, r3}
  407b46:	f1c0 0220 	rsb	r2, r0, #32
  407b4a:	fa03 f202 	lsl.w	r2, r3, r2
  407b4e:	430a      	orrs	r2, r1
  407b50:	40c3      	lsrs	r3, r0
  407b52:	9301      	str	r3, [sp, #4]
  407b54:	f8c8 2014 	str.w	r2, [r8, #20]
  407b58:	e7c2      	b.n	407ae0 <__d2b+0x3c>
  407b5a:	bf00      	nop

00407b5c <_realloc_r>:
  407b5c:	2900      	cmp	r1, #0
  407b5e:	f000 8095 	beq.w	407c8c <_realloc_r+0x130>
  407b62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b66:	460d      	mov	r5, r1
  407b68:	4616      	mov	r6, r2
  407b6a:	b083      	sub	sp, #12
  407b6c:	4680      	mov	r8, r0
  407b6e:	f106 070b 	add.w	r7, r6, #11
  407b72:	f7fc faa7 	bl	4040c4 <__malloc_lock>
  407b76:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407b7a:	2f16      	cmp	r7, #22
  407b7c:	f02e 0403 	bic.w	r4, lr, #3
  407b80:	f1a5 0908 	sub.w	r9, r5, #8
  407b84:	d83c      	bhi.n	407c00 <_realloc_r+0xa4>
  407b86:	2210      	movs	r2, #16
  407b88:	4617      	mov	r7, r2
  407b8a:	42be      	cmp	r6, r7
  407b8c:	d83d      	bhi.n	407c0a <_realloc_r+0xae>
  407b8e:	4294      	cmp	r4, r2
  407b90:	da43      	bge.n	407c1a <_realloc_r+0xbe>
  407b92:	4bc4      	ldr	r3, [pc, #784]	; (407ea4 <_realloc_r+0x348>)
  407b94:	6899      	ldr	r1, [r3, #8]
  407b96:	eb09 0004 	add.w	r0, r9, r4
  407b9a:	4288      	cmp	r0, r1
  407b9c:	f000 80b4 	beq.w	407d08 <_realloc_r+0x1ac>
  407ba0:	6843      	ldr	r3, [r0, #4]
  407ba2:	f023 0101 	bic.w	r1, r3, #1
  407ba6:	4401      	add	r1, r0
  407ba8:	6849      	ldr	r1, [r1, #4]
  407baa:	07c9      	lsls	r1, r1, #31
  407bac:	d54c      	bpl.n	407c48 <_realloc_r+0xec>
  407bae:	f01e 0f01 	tst.w	lr, #1
  407bb2:	f000 809b 	beq.w	407cec <_realloc_r+0x190>
  407bb6:	4631      	mov	r1, r6
  407bb8:	4640      	mov	r0, r8
  407bba:	f7fb feeb 	bl	403994 <_malloc_r>
  407bbe:	4606      	mov	r6, r0
  407bc0:	2800      	cmp	r0, #0
  407bc2:	d03a      	beq.n	407c3a <_realloc_r+0xde>
  407bc4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407bc8:	f023 0301 	bic.w	r3, r3, #1
  407bcc:	444b      	add	r3, r9
  407bce:	f1a0 0208 	sub.w	r2, r0, #8
  407bd2:	429a      	cmp	r2, r3
  407bd4:	f000 8121 	beq.w	407e1a <_realloc_r+0x2be>
  407bd8:	1f22      	subs	r2, r4, #4
  407bda:	2a24      	cmp	r2, #36	; 0x24
  407bdc:	f200 8107 	bhi.w	407dee <_realloc_r+0x292>
  407be0:	2a13      	cmp	r2, #19
  407be2:	f200 80db 	bhi.w	407d9c <_realloc_r+0x240>
  407be6:	4603      	mov	r3, r0
  407be8:	462a      	mov	r2, r5
  407bea:	6811      	ldr	r1, [r2, #0]
  407bec:	6019      	str	r1, [r3, #0]
  407bee:	6851      	ldr	r1, [r2, #4]
  407bf0:	6059      	str	r1, [r3, #4]
  407bf2:	6892      	ldr	r2, [r2, #8]
  407bf4:	609a      	str	r2, [r3, #8]
  407bf6:	4629      	mov	r1, r5
  407bf8:	4640      	mov	r0, r8
  407bfa:	f7ff f8e9 	bl	406dd0 <_free_r>
  407bfe:	e01c      	b.n	407c3a <_realloc_r+0xde>
  407c00:	f027 0707 	bic.w	r7, r7, #7
  407c04:	2f00      	cmp	r7, #0
  407c06:	463a      	mov	r2, r7
  407c08:	dabf      	bge.n	407b8a <_realloc_r+0x2e>
  407c0a:	2600      	movs	r6, #0
  407c0c:	230c      	movs	r3, #12
  407c0e:	4630      	mov	r0, r6
  407c10:	f8c8 3000 	str.w	r3, [r8]
  407c14:	b003      	add	sp, #12
  407c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c1a:	462e      	mov	r6, r5
  407c1c:	1be3      	subs	r3, r4, r7
  407c1e:	2b0f      	cmp	r3, #15
  407c20:	d81e      	bhi.n	407c60 <_realloc_r+0x104>
  407c22:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407c26:	f003 0301 	and.w	r3, r3, #1
  407c2a:	4323      	orrs	r3, r4
  407c2c:	444c      	add	r4, r9
  407c2e:	f8c9 3004 	str.w	r3, [r9, #4]
  407c32:	6863      	ldr	r3, [r4, #4]
  407c34:	f043 0301 	orr.w	r3, r3, #1
  407c38:	6063      	str	r3, [r4, #4]
  407c3a:	4640      	mov	r0, r8
  407c3c:	f7fc fa48 	bl	4040d0 <__malloc_unlock>
  407c40:	4630      	mov	r0, r6
  407c42:	b003      	add	sp, #12
  407c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c48:	f023 0303 	bic.w	r3, r3, #3
  407c4c:	18e1      	adds	r1, r4, r3
  407c4e:	4291      	cmp	r1, r2
  407c50:	db1f      	blt.n	407c92 <_realloc_r+0x136>
  407c52:	68c3      	ldr	r3, [r0, #12]
  407c54:	6882      	ldr	r2, [r0, #8]
  407c56:	462e      	mov	r6, r5
  407c58:	60d3      	str	r3, [r2, #12]
  407c5a:	460c      	mov	r4, r1
  407c5c:	609a      	str	r2, [r3, #8]
  407c5e:	e7dd      	b.n	407c1c <_realloc_r+0xc0>
  407c60:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407c64:	eb09 0107 	add.w	r1, r9, r7
  407c68:	f002 0201 	and.w	r2, r2, #1
  407c6c:	444c      	add	r4, r9
  407c6e:	f043 0301 	orr.w	r3, r3, #1
  407c72:	4317      	orrs	r7, r2
  407c74:	f8c9 7004 	str.w	r7, [r9, #4]
  407c78:	604b      	str	r3, [r1, #4]
  407c7a:	6863      	ldr	r3, [r4, #4]
  407c7c:	f043 0301 	orr.w	r3, r3, #1
  407c80:	3108      	adds	r1, #8
  407c82:	6063      	str	r3, [r4, #4]
  407c84:	4640      	mov	r0, r8
  407c86:	f7ff f8a3 	bl	406dd0 <_free_r>
  407c8a:	e7d6      	b.n	407c3a <_realloc_r+0xde>
  407c8c:	4611      	mov	r1, r2
  407c8e:	f7fb be81 	b.w	403994 <_malloc_r>
  407c92:	f01e 0f01 	tst.w	lr, #1
  407c96:	d18e      	bne.n	407bb6 <_realloc_r+0x5a>
  407c98:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407c9c:	eba9 0a01 	sub.w	sl, r9, r1
  407ca0:	f8da 1004 	ldr.w	r1, [sl, #4]
  407ca4:	f021 0103 	bic.w	r1, r1, #3
  407ca8:	440b      	add	r3, r1
  407caa:	4423      	add	r3, r4
  407cac:	4293      	cmp	r3, r2
  407cae:	db25      	blt.n	407cfc <_realloc_r+0x1a0>
  407cb0:	68c2      	ldr	r2, [r0, #12]
  407cb2:	6881      	ldr	r1, [r0, #8]
  407cb4:	4656      	mov	r6, sl
  407cb6:	60ca      	str	r2, [r1, #12]
  407cb8:	6091      	str	r1, [r2, #8]
  407cba:	f8da 100c 	ldr.w	r1, [sl, #12]
  407cbe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407cc2:	1f22      	subs	r2, r4, #4
  407cc4:	2a24      	cmp	r2, #36	; 0x24
  407cc6:	60c1      	str	r1, [r0, #12]
  407cc8:	6088      	str	r0, [r1, #8]
  407cca:	f200 8094 	bhi.w	407df6 <_realloc_r+0x29a>
  407cce:	2a13      	cmp	r2, #19
  407cd0:	d96f      	bls.n	407db2 <_realloc_r+0x256>
  407cd2:	6829      	ldr	r1, [r5, #0]
  407cd4:	f8ca 1008 	str.w	r1, [sl, #8]
  407cd8:	6869      	ldr	r1, [r5, #4]
  407cda:	f8ca 100c 	str.w	r1, [sl, #12]
  407cde:	2a1b      	cmp	r2, #27
  407ce0:	f200 80a2 	bhi.w	407e28 <_realloc_r+0x2cc>
  407ce4:	3508      	adds	r5, #8
  407ce6:	f10a 0210 	add.w	r2, sl, #16
  407cea:	e063      	b.n	407db4 <_realloc_r+0x258>
  407cec:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407cf0:	eba9 0a03 	sub.w	sl, r9, r3
  407cf4:	f8da 1004 	ldr.w	r1, [sl, #4]
  407cf8:	f021 0103 	bic.w	r1, r1, #3
  407cfc:	1863      	adds	r3, r4, r1
  407cfe:	4293      	cmp	r3, r2
  407d00:	f6ff af59 	blt.w	407bb6 <_realloc_r+0x5a>
  407d04:	4656      	mov	r6, sl
  407d06:	e7d8      	b.n	407cba <_realloc_r+0x15e>
  407d08:	6841      	ldr	r1, [r0, #4]
  407d0a:	f021 0b03 	bic.w	fp, r1, #3
  407d0e:	44a3      	add	fp, r4
  407d10:	f107 0010 	add.w	r0, r7, #16
  407d14:	4583      	cmp	fp, r0
  407d16:	da56      	bge.n	407dc6 <_realloc_r+0x26a>
  407d18:	f01e 0f01 	tst.w	lr, #1
  407d1c:	f47f af4b 	bne.w	407bb6 <_realloc_r+0x5a>
  407d20:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407d24:	eba9 0a01 	sub.w	sl, r9, r1
  407d28:	f8da 1004 	ldr.w	r1, [sl, #4]
  407d2c:	f021 0103 	bic.w	r1, r1, #3
  407d30:	448b      	add	fp, r1
  407d32:	4558      	cmp	r0, fp
  407d34:	dce2      	bgt.n	407cfc <_realloc_r+0x1a0>
  407d36:	4656      	mov	r6, sl
  407d38:	f8da 100c 	ldr.w	r1, [sl, #12]
  407d3c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407d40:	1f22      	subs	r2, r4, #4
  407d42:	2a24      	cmp	r2, #36	; 0x24
  407d44:	60c1      	str	r1, [r0, #12]
  407d46:	6088      	str	r0, [r1, #8]
  407d48:	f200 808f 	bhi.w	407e6a <_realloc_r+0x30e>
  407d4c:	2a13      	cmp	r2, #19
  407d4e:	f240 808a 	bls.w	407e66 <_realloc_r+0x30a>
  407d52:	6829      	ldr	r1, [r5, #0]
  407d54:	f8ca 1008 	str.w	r1, [sl, #8]
  407d58:	6869      	ldr	r1, [r5, #4]
  407d5a:	f8ca 100c 	str.w	r1, [sl, #12]
  407d5e:	2a1b      	cmp	r2, #27
  407d60:	f200 808a 	bhi.w	407e78 <_realloc_r+0x31c>
  407d64:	3508      	adds	r5, #8
  407d66:	f10a 0210 	add.w	r2, sl, #16
  407d6a:	6829      	ldr	r1, [r5, #0]
  407d6c:	6011      	str	r1, [r2, #0]
  407d6e:	6869      	ldr	r1, [r5, #4]
  407d70:	6051      	str	r1, [r2, #4]
  407d72:	68a9      	ldr	r1, [r5, #8]
  407d74:	6091      	str	r1, [r2, #8]
  407d76:	eb0a 0107 	add.w	r1, sl, r7
  407d7a:	ebab 0207 	sub.w	r2, fp, r7
  407d7e:	f042 0201 	orr.w	r2, r2, #1
  407d82:	6099      	str	r1, [r3, #8]
  407d84:	604a      	str	r2, [r1, #4]
  407d86:	f8da 3004 	ldr.w	r3, [sl, #4]
  407d8a:	f003 0301 	and.w	r3, r3, #1
  407d8e:	431f      	orrs	r7, r3
  407d90:	4640      	mov	r0, r8
  407d92:	f8ca 7004 	str.w	r7, [sl, #4]
  407d96:	f7fc f99b 	bl	4040d0 <__malloc_unlock>
  407d9a:	e751      	b.n	407c40 <_realloc_r+0xe4>
  407d9c:	682b      	ldr	r3, [r5, #0]
  407d9e:	6003      	str	r3, [r0, #0]
  407da0:	686b      	ldr	r3, [r5, #4]
  407da2:	6043      	str	r3, [r0, #4]
  407da4:	2a1b      	cmp	r2, #27
  407da6:	d82d      	bhi.n	407e04 <_realloc_r+0x2a8>
  407da8:	f100 0308 	add.w	r3, r0, #8
  407dac:	f105 0208 	add.w	r2, r5, #8
  407db0:	e71b      	b.n	407bea <_realloc_r+0x8e>
  407db2:	4632      	mov	r2, r6
  407db4:	6829      	ldr	r1, [r5, #0]
  407db6:	6011      	str	r1, [r2, #0]
  407db8:	6869      	ldr	r1, [r5, #4]
  407dba:	6051      	str	r1, [r2, #4]
  407dbc:	68a9      	ldr	r1, [r5, #8]
  407dbe:	6091      	str	r1, [r2, #8]
  407dc0:	461c      	mov	r4, r3
  407dc2:	46d1      	mov	r9, sl
  407dc4:	e72a      	b.n	407c1c <_realloc_r+0xc0>
  407dc6:	eb09 0107 	add.w	r1, r9, r7
  407dca:	ebab 0b07 	sub.w	fp, fp, r7
  407dce:	f04b 0201 	orr.w	r2, fp, #1
  407dd2:	6099      	str	r1, [r3, #8]
  407dd4:	604a      	str	r2, [r1, #4]
  407dd6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407dda:	f003 0301 	and.w	r3, r3, #1
  407dde:	431f      	orrs	r7, r3
  407de0:	4640      	mov	r0, r8
  407de2:	f845 7c04 	str.w	r7, [r5, #-4]
  407de6:	f7fc f973 	bl	4040d0 <__malloc_unlock>
  407dea:	462e      	mov	r6, r5
  407dec:	e728      	b.n	407c40 <_realloc_r+0xe4>
  407dee:	4629      	mov	r1, r5
  407df0:	f7ff fb56 	bl	4074a0 <memmove>
  407df4:	e6ff      	b.n	407bf6 <_realloc_r+0x9a>
  407df6:	4629      	mov	r1, r5
  407df8:	4630      	mov	r0, r6
  407dfa:	461c      	mov	r4, r3
  407dfc:	46d1      	mov	r9, sl
  407dfe:	f7ff fb4f 	bl	4074a0 <memmove>
  407e02:	e70b      	b.n	407c1c <_realloc_r+0xc0>
  407e04:	68ab      	ldr	r3, [r5, #8]
  407e06:	6083      	str	r3, [r0, #8]
  407e08:	68eb      	ldr	r3, [r5, #12]
  407e0a:	60c3      	str	r3, [r0, #12]
  407e0c:	2a24      	cmp	r2, #36	; 0x24
  407e0e:	d017      	beq.n	407e40 <_realloc_r+0x2e4>
  407e10:	f100 0310 	add.w	r3, r0, #16
  407e14:	f105 0210 	add.w	r2, r5, #16
  407e18:	e6e7      	b.n	407bea <_realloc_r+0x8e>
  407e1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407e1e:	f023 0303 	bic.w	r3, r3, #3
  407e22:	441c      	add	r4, r3
  407e24:	462e      	mov	r6, r5
  407e26:	e6f9      	b.n	407c1c <_realloc_r+0xc0>
  407e28:	68a9      	ldr	r1, [r5, #8]
  407e2a:	f8ca 1010 	str.w	r1, [sl, #16]
  407e2e:	68e9      	ldr	r1, [r5, #12]
  407e30:	f8ca 1014 	str.w	r1, [sl, #20]
  407e34:	2a24      	cmp	r2, #36	; 0x24
  407e36:	d00c      	beq.n	407e52 <_realloc_r+0x2f6>
  407e38:	3510      	adds	r5, #16
  407e3a:	f10a 0218 	add.w	r2, sl, #24
  407e3e:	e7b9      	b.n	407db4 <_realloc_r+0x258>
  407e40:	692b      	ldr	r3, [r5, #16]
  407e42:	6103      	str	r3, [r0, #16]
  407e44:	696b      	ldr	r3, [r5, #20]
  407e46:	6143      	str	r3, [r0, #20]
  407e48:	f105 0218 	add.w	r2, r5, #24
  407e4c:	f100 0318 	add.w	r3, r0, #24
  407e50:	e6cb      	b.n	407bea <_realloc_r+0x8e>
  407e52:	692a      	ldr	r2, [r5, #16]
  407e54:	f8ca 2018 	str.w	r2, [sl, #24]
  407e58:	696a      	ldr	r2, [r5, #20]
  407e5a:	f8ca 201c 	str.w	r2, [sl, #28]
  407e5e:	3518      	adds	r5, #24
  407e60:	f10a 0220 	add.w	r2, sl, #32
  407e64:	e7a6      	b.n	407db4 <_realloc_r+0x258>
  407e66:	4632      	mov	r2, r6
  407e68:	e77f      	b.n	407d6a <_realloc_r+0x20e>
  407e6a:	4629      	mov	r1, r5
  407e6c:	4630      	mov	r0, r6
  407e6e:	9301      	str	r3, [sp, #4]
  407e70:	f7ff fb16 	bl	4074a0 <memmove>
  407e74:	9b01      	ldr	r3, [sp, #4]
  407e76:	e77e      	b.n	407d76 <_realloc_r+0x21a>
  407e78:	68a9      	ldr	r1, [r5, #8]
  407e7a:	f8ca 1010 	str.w	r1, [sl, #16]
  407e7e:	68e9      	ldr	r1, [r5, #12]
  407e80:	f8ca 1014 	str.w	r1, [sl, #20]
  407e84:	2a24      	cmp	r2, #36	; 0x24
  407e86:	d003      	beq.n	407e90 <_realloc_r+0x334>
  407e88:	3510      	adds	r5, #16
  407e8a:	f10a 0218 	add.w	r2, sl, #24
  407e8e:	e76c      	b.n	407d6a <_realloc_r+0x20e>
  407e90:	692a      	ldr	r2, [r5, #16]
  407e92:	f8ca 2018 	str.w	r2, [sl, #24]
  407e96:	696a      	ldr	r2, [r5, #20]
  407e98:	f8ca 201c 	str.w	r2, [sl, #28]
  407e9c:	3518      	adds	r5, #24
  407e9e:	f10a 0220 	add.w	r2, sl, #32
  407ea2:	e762      	b.n	407d6a <_realloc_r+0x20e>
  407ea4:	20400438 	.word	0x20400438

00407ea8 <__sread>:
  407ea8:	b510      	push	{r4, lr}
  407eaa:	460c      	mov	r4, r1
  407eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407eb0:	f000 fa88 	bl	4083c4 <_read_r>
  407eb4:	2800      	cmp	r0, #0
  407eb6:	db03      	blt.n	407ec0 <__sread+0x18>
  407eb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407eba:	4403      	add	r3, r0
  407ebc:	6523      	str	r3, [r4, #80]	; 0x50
  407ebe:	bd10      	pop	{r4, pc}
  407ec0:	89a3      	ldrh	r3, [r4, #12]
  407ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407ec6:	81a3      	strh	r3, [r4, #12]
  407ec8:	bd10      	pop	{r4, pc}
  407eca:	bf00      	nop

00407ecc <__swrite>:
  407ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407ed0:	4616      	mov	r6, r2
  407ed2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407ed6:	461f      	mov	r7, r3
  407ed8:	05d3      	lsls	r3, r2, #23
  407eda:	460c      	mov	r4, r1
  407edc:	4605      	mov	r5, r0
  407ede:	d507      	bpl.n	407ef0 <__swrite+0x24>
  407ee0:	2200      	movs	r2, #0
  407ee2:	2302      	movs	r3, #2
  407ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407ee8:	f000 fa40 	bl	40836c <_lseek_r>
  407eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407ef4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407ef8:	81a2      	strh	r2, [r4, #12]
  407efa:	463b      	mov	r3, r7
  407efc:	4632      	mov	r2, r6
  407efe:	4628      	mov	r0, r5
  407f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407f04:	f000 b85e 	b.w	407fc4 <_write_r>

00407f08 <__sseek>:
  407f08:	b510      	push	{r4, lr}
  407f0a:	460c      	mov	r4, r1
  407f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f10:	f000 fa2c 	bl	40836c <_lseek_r>
  407f14:	89a3      	ldrh	r3, [r4, #12]
  407f16:	1c42      	adds	r2, r0, #1
  407f18:	bf0e      	itee	eq
  407f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407f22:	6520      	strne	r0, [r4, #80]	; 0x50
  407f24:	81a3      	strh	r3, [r4, #12]
  407f26:	bd10      	pop	{r4, pc}

00407f28 <__sclose>:
  407f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f2c:	f000 b8f2 	b.w	408114 <_close_r>

00407f30 <__sprint_r.part.0>:
  407f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f34:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407f36:	049c      	lsls	r4, r3, #18
  407f38:	4693      	mov	fp, r2
  407f3a:	d52f      	bpl.n	407f9c <__sprint_r.part.0+0x6c>
  407f3c:	6893      	ldr	r3, [r2, #8]
  407f3e:	6812      	ldr	r2, [r2, #0]
  407f40:	b353      	cbz	r3, 407f98 <__sprint_r.part.0+0x68>
  407f42:	460e      	mov	r6, r1
  407f44:	4607      	mov	r7, r0
  407f46:	f102 0908 	add.w	r9, r2, #8
  407f4a:	e919 0420 	ldmdb	r9, {r5, sl}
  407f4e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  407f52:	d017      	beq.n	407f84 <__sprint_r.part.0+0x54>
  407f54:	3d04      	subs	r5, #4
  407f56:	2400      	movs	r4, #0
  407f58:	e001      	b.n	407f5e <__sprint_r.part.0+0x2e>
  407f5a:	45a0      	cmp	r8, r4
  407f5c:	d010      	beq.n	407f80 <__sprint_r.part.0+0x50>
  407f5e:	4632      	mov	r2, r6
  407f60:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407f64:	4638      	mov	r0, r7
  407f66:	f000 f999 	bl	40829c <_fputwc_r>
  407f6a:	1c43      	adds	r3, r0, #1
  407f6c:	f104 0401 	add.w	r4, r4, #1
  407f70:	d1f3      	bne.n	407f5a <__sprint_r.part.0+0x2a>
  407f72:	2300      	movs	r3, #0
  407f74:	f8cb 3008 	str.w	r3, [fp, #8]
  407f78:	f8cb 3004 	str.w	r3, [fp, #4]
  407f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f80:	f8db 3008 	ldr.w	r3, [fp, #8]
  407f84:	f02a 0a03 	bic.w	sl, sl, #3
  407f88:	eba3 030a 	sub.w	r3, r3, sl
  407f8c:	f8cb 3008 	str.w	r3, [fp, #8]
  407f90:	f109 0908 	add.w	r9, r9, #8
  407f94:	2b00      	cmp	r3, #0
  407f96:	d1d8      	bne.n	407f4a <__sprint_r.part.0+0x1a>
  407f98:	2000      	movs	r0, #0
  407f9a:	e7ea      	b.n	407f72 <__sprint_r.part.0+0x42>
  407f9c:	f7fe fffe 	bl	406f9c <__sfvwrite_r>
  407fa0:	2300      	movs	r3, #0
  407fa2:	f8cb 3008 	str.w	r3, [fp, #8]
  407fa6:	f8cb 3004 	str.w	r3, [fp, #4]
  407faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fae:	bf00      	nop

00407fb0 <__sprint_r>:
  407fb0:	6893      	ldr	r3, [r2, #8]
  407fb2:	b10b      	cbz	r3, 407fb8 <__sprint_r+0x8>
  407fb4:	f7ff bfbc 	b.w	407f30 <__sprint_r.part.0>
  407fb8:	b410      	push	{r4}
  407fba:	4618      	mov	r0, r3
  407fbc:	6053      	str	r3, [r2, #4]
  407fbe:	bc10      	pop	{r4}
  407fc0:	4770      	bx	lr
  407fc2:	bf00      	nop

00407fc4 <_write_r>:
  407fc4:	b570      	push	{r4, r5, r6, lr}
  407fc6:	460d      	mov	r5, r1
  407fc8:	4c08      	ldr	r4, [pc, #32]	; (407fec <_write_r+0x28>)
  407fca:	4611      	mov	r1, r2
  407fcc:	4606      	mov	r6, r0
  407fce:	461a      	mov	r2, r3
  407fd0:	4628      	mov	r0, r5
  407fd2:	2300      	movs	r3, #0
  407fd4:	6023      	str	r3, [r4, #0]
  407fd6:	f7f8 f9ab 	bl	400330 <_write>
  407fda:	1c43      	adds	r3, r0, #1
  407fdc:	d000      	beq.n	407fe0 <_write_r+0x1c>
  407fde:	bd70      	pop	{r4, r5, r6, pc}
  407fe0:	6823      	ldr	r3, [r4, #0]
  407fe2:	2b00      	cmp	r3, #0
  407fe4:	d0fb      	beq.n	407fde <_write_r+0x1a>
  407fe6:	6033      	str	r3, [r6, #0]
  407fe8:	bd70      	pop	{r4, r5, r6, pc}
  407fea:	bf00      	nop
  407fec:	20400cc8 	.word	0x20400cc8

00407ff0 <__register_exitproc>:
  407ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407ff4:	4d2c      	ldr	r5, [pc, #176]	; (4080a8 <__register_exitproc+0xb8>)
  407ff6:	4606      	mov	r6, r0
  407ff8:	6828      	ldr	r0, [r5, #0]
  407ffa:	4698      	mov	r8, r3
  407ffc:	460f      	mov	r7, r1
  407ffe:	4691      	mov	r9, r2
  408000:	f7ff f980 	bl	407304 <__retarget_lock_acquire_recursive>
  408004:	4b29      	ldr	r3, [pc, #164]	; (4080ac <__register_exitproc+0xbc>)
  408006:	681c      	ldr	r4, [r3, #0]
  408008:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40800c:	2b00      	cmp	r3, #0
  40800e:	d03e      	beq.n	40808e <__register_exitproc+0x9e>
  408010:	685a      	ldr	r2, [r3, #4]
  408012:	2a1f      	cmp	r2, #31
  408014:	dc1c      	bgt.n	408050 <__register_exitproc+0x60>
  408016:	f102 0e01 	add.w	lr, r2, #1
  40801a:	b176      	cbz	r6, 40803a <__register_exitproc+0x4a>
  40801c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408020:	2401      	movs	r4, #1
  408022:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408026:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40802a:	4094      	lsls	r4, r2
  40802c:	4320      	orrs	r0, r4
  40802e:	2e02      	cmp	r6, #2
  408030:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408034:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408038:	d023      	beq.n	408082 <__register_exitproc+0x92>
  40803a:	3202      	adds	r2, #2
  40803c:	f8c3 e004 	str.w	lr, [r3, #4]
  408040:	6828      	ldr	r0, [r5, #0]
  408042:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408046:	f7ff f95f 	bl	407308 <__retarget_lock_release_recursive>
  40804a:	2000      	movs	r0, #0
  40804c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408050:	4b17      	ldr	r3, [pc, #92]	; (4080b0 <__register_exitproc+0xc0>)
  408052:	b30b      	cbz	r3, 408098 <__register_exitproc+0xa8>
  408054:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408058:	f7fb fc8c 	bl	403974 <malloc>
  40805c:	4603      	mov	r3, r0
  40805e:	b1d8      	cbz	r0, 408098 <__register_exitproc+0xa8>
  408060:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408064:	6002      	str	r2, [r0, #0]
  408066:	2100      	movs	r1, #0
  408068:	6041      	str	r1, [r0, #4]
  40806a:	460a      	mov	r2, r1
  40806c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408070:	f04f 0e01 	mov.w	lr, #1
  408074:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408078:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40807c:	2e00      	cmp	r6, #0
  40807e:	d0dc      	beq.n	40803a <__register_exitproc+0x4a>
  408080:	e7cc      	b.n	40801c <__register_exitproc+0x2c>
  408082:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  408086:	430c      	orrs	r4, r1
  408088:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40808c:	e7d5      	b.n	40803a <__register_exitproc+0x4a>
  40808e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408092:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408096:	e7bb      	b.n	408010 <__register_exitproc+0x20>
  408098:	6828      	ldr	r0, [r5, #0]
  40809a:	f7ff f935 	bl	407308 <__retarget_lock_release_recursive>
  40809e:	f04f 30ff 	mov.w	r0, #4294967295
  4080a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4080a6:	bf00      	nop
  4080a8:	20400848 	.word	0x20400848
  4080ac:	00409268 	.word	0x00409268
  4080b0:	00403975 	.word	0x00403975

004080b4 <_calloc_r>:
  4080b4:	b510      	push	{r4, lr}
  4080b6:	fb02 f101 	mul.w	r1, r2, r1
  4080ba:	f7fb fc6b 	bl	403994 <_malloc_r>
  4080be:	4604      	mov	r4, r0
  4080c0:	b1d8      	cbz	r0, 4080fa <_calloc_r+0x46>
  4080c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4080c6:	f022 0203 	bic.w	r2, r2, #3
  4080ca:	3a04      	subs	r2, #4
  4080cc:	2a24      	cmp	r2, #36	; 0x24
  4080ce:	d818      	bhi.n	408102 <_calloc_r+0x4e>
  4080d0:	2a13      	cmp	r2, #19
  4080d2:	d914      	bls.n	4080fe <_calloc_r+0x4a>
  4080d4:	2300      	movs	r3, #0
  4080d6:	2a1b      	cmp	r2, #27
  4080d8:	6003      	str	r3, [r0, #0]
  4080da:	6043      	str	r3, [r0, #4]
  4080dc:	d916      	bls.n	40810c <_calloc_r+0x58>
  4080de:	2a24      	cmp	r2, #36	; 0x24
  4080e0:	6083      	str	r3, [r0, #8]
  4080e2:	60c3      	str	r3, [r0, #12]
  4080e4:	bf11      	iteee	ne
  4080e6:	f100 0210 	addne.w	r2, r0, #16
  4080ea:	6103      	streq	r3, [r0, #16]
  4080ec:	6143      	streq	r3, [r0, #20]
  4080ee:	f100 0218 	addeq.w	r2, r0, #24
  4080f2:	2300      	movs	r3, #0
  4080f4:	6013      	str	r3, [r2, #0]
  4080f6:	6053      	str	r3, [r2, #4]
  4080f8:	6093      	str	r3, [r2, #8]
  4080fa:	4620      	mov	r0, r4
  4080fc:	bd10      	pop	{r4, pc}
  4080fe:	4602      	mov	r2, r0
  408100:	e7f7      	b.n	4080f2 <_calloc_r+0x3e>
  408102:	2100      	movs	r1, #0
  408104:	f7fb ff90 	bl	404028 <memset>
  408108:	4620      	mov	r0, r4
  40810a:	bd10      	pop	{r4, pc}
  40810c:	f100 0208 	add.w	r2, r0, #8
  408110:	e7ef      	b.n	4080f2 <_calloc_r+0x3e>
  408112:	bf00      	nop

00408114 <_close_r>:
  408114:	b538      	push	{r3, r4, r5, lr}
  408116:	4c07      	ldr	r4, [pc, #28]	; (408134 <_close_r+0x20>)
  408118:	2300      	movs	r3, #0
  40811a:	4605      	mov	r5, r0
  40811c:	4608      	mov	r0, r1
  40811e:	6023      	str	r3, [r4, #0]
  408120:	f7f9 f802 	bl	401128 <_close>
  408124:	1c43      	adds	r3, r0, #1
  408126:	d000      	beq.n	40812a <_close_r+0x16>
  408128:	bd38      	pop	{r3, r4, r5, pc}
  40812a:	6823      	ldr	r3, [r4, #0]
  40812c:	2b00      	cmp	r3, #0
  40812e:	d0fb      	beq.n	408128 <_close_r+0x14>
  408130:	602b      	str	r3, [r5, #0]
  408132:	bd38      	pop	{r3, r4, r5, pc}
  408134:	20400cc8 	.word	0x20400cc8

00408138 <_fclose_r>:
  408138:	b570      	push	{r4, r5, r6, lr}
  40813a:	b159      	cbz	r1, 408154 <_fclose_r+0x1c>
  40813c:	4605      	mov	r5, r0
  40813e:	460c      	mov	r4, r1
  408140:	b110      	cbz	r0, 408148 <_fclose_r+0x10>
  408142:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408144:	2b00      	cmp	r3, #0
  408146:	d03c      	beq.n	4081c2 <_fclose_r+0x8a>
  408148:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40814a:	07d8      	lsls	r0, r3, #31
  40814c:	d505      	bpl.n	40815a <_fclose_r+0x22>
  40814e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408152:	b92b      	cbnz	r3, 408160 <_fclose_r+0x28>
  408154:	2600      	movs	r6, #0
  408156:	4630      	mov	r0, r6
  408158:	bd70      	pop	{r4, r5, r6, pc}
  40815a:	89a3      	ldrh	r3, [r4, #12]
  40815c:	0599      	lsls	r1, r3, #22
  40815e:	d53c      	bpl.n	4081da <_fclose_r+0xa2>
  408160:	4621      	mov	r1, r4
  408162:	4628      	mov	r0, r5
  408164:	f7fe fc9a 	bl	406a9c <__sflush_r>
  408168:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40816a:	4606      	mov	r6, r0
  40816c:	b133      	cbz	r3, 40817c <_fclose_r+0x44>
  40816e:	69e1      	ldr	r1, [r4, #28]
  408170:	4628      	mov	r0, r5
  408172:	4798      	blx	r3
  408174:	2800      	cmp	r0, #0
  408176:	bfb8      	it	lt
  408178:	f04f 36ff 	movlt.w	r6, #4294967295
  40817c:	89a3      	ldrh	r3, [r4, #12]
  40817e:	061a      	lsls	r2, r3, #24
  408180:	d422      	bmi.n	4081c8 <_fclose_r+0x90>
  408182:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408184:	b141      	cbz	r1, 408198 <_fclose_r+0x60>
  408186:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40818a:	4299      	cmp	r1, r3
  40818c:	d002      	beq.n	408194 <_fclose_r+0x5c>
  40818e:	4628      	mov	r0, r5
  408190:	f7fe fe1e 	bl	406dd0 <_free_r>
  408194:	2300      	movs	r3, #0
  408196:	6323      	str	r3, [r4, #48]	; 0x30
  408198:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40819a:	b121      	cbz	r1, 4081a6 <_fclose_r+0x6e>
  40819c:	4628      	mov	r0, r5
  40819e:	f7fe fe17 	bl	406dd0 <_free_r>
  4081a2:	2300      	movs	r3, #0
  4081a4:	6463      	str	r3, [r4, #68]	; 0x44
  4081a6:	f7fe fd9d 	bl	406ce4 <__sfp_lock_acquire>
  4081aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4081ac:	2200      	movs	r2, #0
  4081ae:	07db      	lsls	r3, r3, #31
  4081b0:	81a2      	strh	r2, [r4, #12]
  4081b2:	d50e      	bpl.n	4081d2 <_fclose_r+0x9a>
  4081b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4081b6:	f7ff f8a3 	bl	407300 <__retarget_lock_close_recursive>
  4081ba:	f7fe fd99 	bl	406cf0 <__sfp_lock_release>
  4081be:	4630      	mov	r0, r6
  4081c0:	bd70      	pop	{r4, r5, r6, pc}
  4081c2:	f7fe fd63 	bl	406c8c <__sinit>
  4081c6:	e7bf      	b.n	408148 <_fclose_r+0x10>
  4081c8:	6921      	ldr	r1, [r4, #16]
  4081ca:	4628      	mov	r0, r5
  4081cc:	f7fe fe00 	bl	406dd0 <_free_r>
  4081d0:	e7d7      	b.n	408182 <_fclose_r+0x4a>
  4081d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4081d4:	f7ff f898 	bl	407308 <__retarget_lock_release_recursive>
  4081d8:	e7ec      	b.n	4081b4 <_fclose_r+0x7c>
  4081da:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4081dc:	f7ff f892 	bl	407304 <__retarget_lock_acquire_recursive>
  4081e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4081e4:	2b00      	cmp	r3, #0
  4081e6:	d1bb      	bne.n	408160 <_fclose_r+0x28>
  4081e8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4081ea:	f016 0601 	ands.w	r6, r6, #1
  4081ee:	d1b1      	bne.n	408154 <_fclose_r+0x1c>
  4081f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4081f2:	f7ff f889 	bl	407308 <__retarget_lock_release_recursive>
  4081f6:	4630      	mov	r0, r6
  4081f8:	bd70      	pop	{r4, r5, r6, pc}
  4081fa:	bf00      	nop

004081fc <__fputwc>:
  4081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408200:	b082      	sub	sp, #8
  408202:	4680      	mov	r8, r0
  408204:	4689      	mov	r9, r1
  408206:	4614      	mov	r4, r2
  408208:	f000 f8a2 	bl	408350 <__locale_mb_cur_max>
  40820c:	2801      	cmp	r0, #1
  40820e:	d036      	beq.n	40827e <__fputwc+0x82>
  408210:	464a      	mov	r2, r9
  408212:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408216:	a901      	add	r1, sp, #4
  408218:	4640      	mov	r0, r8
  40821a:	f000 f941 	bl	4084a0 <_wcrtomb_r>
  40821e:	1c42      	adds	r2, r0, #1
  408220:	4606      	mov	r6, r0
  408222:	d025      	beq.n	408270 <__fputwc+0x74>
  408224:	b3a8      	cbz	r0, 408292 <__fputwc+0x96>
  408226:	f89d e004 	ldrb.w	lr, [sp, #4]
  40822a:	2500      	movs	r5, #0
  40822c:	f10d 0a04 	add.w	sl, sp, #4
  408230:	e009      	b.n	408246 <__fputwc+0x4a>
  408232:	6823      	ldr	r3, [r4, #0]
  408234:	1c5a      	adds	r2, r3, #1
  408236:	6022      	str	r2, [r4, #0]
  408238:	f883 e000 	strb.w	lr, [r3]
  40823c:	3501      	adds	r5, #1
  40823e:	42b5      	cmp	r5, r6
  408240:	d227      	bcs.n	408292 <__fputwc+0x96>
  408242:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408246:	68a3      	ldr	r3, [r4, #8]
  408248:	3b01      	subs	r3, #1
  40824a:	2b00      	cmp	r3, #0
  40824c:	60a3      	str	r3, [r4, #8]
  40824e:	daf0      	bge.n	408232 <__fputwc+0x36>
  408250:	69a7      	ldr	r7, [r4, #24]
  408252:	42bb      	cmp	r3, r7
  408254:	4671      	mov	r1, lr
  408256:	4622      	mov	r2, r4
  408258:	4640      	mov	r0, r8
  40825a:	db02      	blt.n	408262 <__fputwc+0x66>
  40825c:	f1be 0f0a 	cmp.w	lr, #10
  408260:	d1e7      	bne.n	408232 <__fputwc+0x36>
  408262:	f000 f8c5 	bl	4083f0 <__swbuf_r>
  408266:	1c43      	adds	r3, r0, #1
  408268:	d1e8      	bne.n	40823c <__fputwc+0x40>
  40826a:	b002      	add	sp, #8
  40826c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408270:	89a3      	ldrh	r3, [r4, #12]
  408272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408276:	81a3      	strh	r3, [r4, #12]
  408278:	b002      	add	sp, #8
  40827a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40827e:	f109 33ff 	add.w	r3, r9, #4294967295
  408282:	2bfe      	cmp	r3, #254	; 0xfe
  408284:	d8c4      	bhi.n	408210 <__fputwc+0x14>
  408286:	fa5f fe89 	uxtb.w	lr, r9
  40828a:	4606      	mov	r6, r0
  40828c:	f88d e004 	strb.w	lr, [sp, #4]
  408290:	e7cb      	b.n	40822a <__fputwc+0x2e>
  408292:	4648      	mov	r0, r9
  408294:	b002      	add	sp, #8
  408296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40829a:	bf00      	nop

0040829c <_fputwc_r>:
  40829c:	b530      	push	{r4, r5, lr}
  40829e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4082a0:	f013 0f01 	tst.w	r3, #1
  4082a4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4082a8:	4614      	mov	r4, r2
  4082aa:	b083      	sub	sp, #12
  4082ac:	4605      	mov	r5, r0
  4082ae:	b29a      	uxth	r2, r3
  4082b0:	d101      	bne.n	4082b6 <_fputwc_r+0x1a>
  4082b2:	0590      	lsls	r0, r2, #22
  4082b4:	d51c      	bpl.n	4082f0 <_fputwc_r+0x54>
  4082b6:	0490      	lsls	r0, r2, #18
  4082b8:	d406      	bmi.n	4082c8 <_fputwc_r+0x2c>
  4082ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4082bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4082c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4082c4:	81a3      	strh	r3, [r4, #12]
  4082c6:	6662      	str	r2, [r4, #100]	; 0x64
  4082c8:	4628      	mov	r0, r5
  4082ca:	4622      	mov	r2, r4
  4082cc:	f7ff ff96 	bl	4081fc <__fputwc>
  4082d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4082d2:	07da      	lsls	r2, r3, #31
  4082d4:	4605      	mov	r5, r0
  4082d6:	d402      	bmi.n	4082de <_fputwc_r+0x42>
  4082d8:	89a3      	ldrh	r3, [r4, #12]
  4082da:	059b      	lsls	r3, r3, #22
  4082dc:	d502      	bpl.n	4082e4 <_fputwc_r+0x48>
  4082de:	4628      	mov	r0, r5
  4082e0:	b003      	add	sp, #12
  4082e2:	bd30      	pop	{r4, r5, pc}
  4082e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4082e6:	f7ff f80f 	bl	407308 <__retarget_lock_release_recursive>
  4082ea:	4628      	mov	r0, r5
  4082ec:	b003      	add	sp, #12
  4082ee:	bd30      	pop	{r4, r5, pc}
  4082f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4082f2:	9101      	str	r1, [sp, #4]
  4082f4:	f7ff f806 	bl	407304 <__retarget_lock_acquire_recursive>
  4082f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4082fc:	9901      	ldr	r1, [sp, #4]
  4082fe:	b29a      	uxth	r2, r3
  408300:	e7d9      	b.n	4082b6 <_fputwc_r+0x1a>
  408302:	bf00      	nop

00408304 <_fstat_r>:
  408304:	b538      	push	{r3, r4, r5, lr}
  408306:	460b      	mov	r3, r1
  408308:	4c07      	ldr	r4, [pc, #28]	; (408328 <_fstat_r+0x24>)
  40830a:	4605      	mov	r5, r0
  40830c:	4611      	mov	r1, r2
  40830e:	4618      	mov	r0, r3
  408310:	2300      	movs	r3, #0
  408312:	6023      	str	r3, [r4, #0]
  408314:	f7f8 ff0b 	bl	40112e <_fstat>
  408318:	1c43      	adds	r3, r0, #1
  40831a:	d000      	beq.n	40831e <_fstat_r+0x1a>
  40831c:	bd38      	pop	{r3, r4, r5, pc}
  40831e:	6823      	ldr	r3, [r4, #0]
  408320:	2b00      	cmp	r3, #0
  408322:	d0fb      	beq.n	40831c <_fstat_r+0x18>
  408324:	602b      	str	r3, [r5, #0]
  408326:	bd38      	pop	{r3, r4, r5, pc}
  408328:	20400cc8 	.word	0x20400cc8

0040832c <_isatty_r>:
  40832c:	b538      	push	{r3, r4, r5, lr}
  40832e:	4c07      	ldr	r4, [pc, #28]	; (40834c <_isatty_r+0x20>)
  408330:	2300      	movs	r3, #0
  408332:	4605      	mov	r5, r0
  408334:	4608      	mov	r0, r1
  408336:	6023      	str	r3, [r4, #0]
  408338:	f7f8 fefe 	bl	401138 <_isatty>
  40833c:	1c43      	adds	r3, r0, #1
  40833e:	d000      	beq.n	408342 <_isatty_r+0x16>
  408340:	bd38      	pop	{r3, r4, r5, pc}
  408342:	6823      	ldr	r3, [r4, #0]
  408344:	2b00      	cmp	r3, #0
  408346:	d0fb      	beq.n	408340 <_isatty_r+0x14>
  408348:	602b      	str	r3, [r5, #0]
  40834a:	bd38      	pop	{r3, r4, r5, pc}
  40834c:	20400cc8 	.word	0x20400cc8

00408350 <__locale_mb_cur_max>:
  408350:	4b04      	ldr	r3, [pc, #16]	; (408364 <__locale_mb_cur_max+0x14>)
  408352:	4a05      	ldr	r2, [pc, #20]	; (408368 <__locale_mb_cur_max+0x18>)
  408354:	681b      	ldr	r3, [r3, #0]
  408356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408358:	2b00      	cmp	r3, #0
  40835a:	bf08      	it	eq
  40835c:	4613      	moveq	r3, r2
  40835e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408362:	4770      	bx	lr
  408364:	2040000c 	.word	0x2040000c
  408368:	2040084c 	.word	0x2040084c

0040836c <_lseek_r>:
  40836c:	b570      	push	{r4, r5, r6, lr}
  40836e:	460d      	mov	r5, r1
  408370:	4c08      	ldr	r4, [pc, #32]	; (408394 <_lseek_r+0x28>)
  408372:	4611      	mov	r1, r2
  408374:	4606      	mov	r6, r0
  408376:	461a      	mov	r2, r3
  408378:	4628      	mov	r0, r5
  40837a:	2300      	movs	r3, #0
  40837c:	6023      	str	r3, [r4, #0]
  40837e:	f7f8 fedd 	bl	40113c <_lseek>
  408382:	1c43      	adds	r3, r0, #1
  408384:	d000      	beq.n	408388 <_lseek_r+0x1c>
  408386:	bd70      	pop	{r4, r5, r6, pc}
  408388:	6823      	ldr	r3, [r4, #0]
  40838a:	2b00      	cmp	r3, #0
  40838c:	d0fb      	beq.n	408386 <_lseek_r+0x1a>
  40838e:	6033      	str	r3, [r6, #0]
  408390:	bd70      	pop	{r4, r5, r6, pc}
  408392:	bf00      	nop
  408394:	20400cc8 	.word	0x20400cc8

00408398 <__ascii_mbtowc>:
  408398:	b082      	sub	sp, #8
  40839a:	b149      	cbz	r1, 4083b0 <__ascii_mbtowc+0x18>
  40839c:	b15a      	cbz	r2, 4083b6 <__ascii_mbtowc+0x1e>
  40839e:	b16b      	cbz	r3, 4083bc <__ascii_mbtowc+0x24>
  4083a0:	7813      	ldrb	r3, [r2, #0]
  4083a2:	600b      	str	r3, [r1, #0]
  4083a4:	7812      	ldrb	r2, [r2, #0]
  4083a6:	1c10      	adds	r0, r2, #0
  4083a8:	bf18      	it	ne
  4083aa:	2001      	movne	r0, #1
  4083ac:	b002      	add	sp, #8
  4083ae:	4770      	bx	lr
  4083b0:	a901      	add	r1, sp, #4
  4083b2:	2a00      	cmp	r2, #0
  4083b4:	d1f3      	bne.n	40839e <__ascii_mbtowc+0x6>
  4083b6:	4610      	mov	r0, r2
  4083b8:	b002      	add	sp, #8
  4083ba:	4770      	bx	lr
  4083bc:	f06f 0001 	mvn.w	r0, #1
  4083c0:	e7f4      	b.n	4083ac <__ascii_mbtowc+0x14>
  4083c2:	bf00      	nop

004083c4 <_read_r>:
  4083c4:	b570      	push	{r4, r5, r6, lr}
  4083c6:	460d      	mov	r5, r1
  4083c8:	4c08      	ldr	r4, [pc, #32]	; (4083ec <_read_r+0x28>)
  4083ca:	4611      	mov	r1, r2
  4083cc:	4606      	mov	r6, r0
  4083ce:	461a      	mov	r2, r3
  4083d0:	4628      	mov	r0, r5
  4083d2:	2300      	movs	r3, #0
  4083d4:	6023      	str	r3, [r4, #0]
  4083d6:	f7f7 ff8d 	bl	4002f4 <_read>
  4083da:	1c43      	adds	r3, r0, #1
  4083dc:	d000      	beq.n	4083e0 <_read_r+0x1c>
  4083de:	bd70      	pop	{r4, r5, r6, pc}
  4083e0:	6823      	ldr	r3, [r4, #0]
  4083e2:	2b00      	cmp	r3, #0
  4083e4:	d0fb      	beq.n	4083de <_read_r+0x1a>
  4083e6:	6033      	str	r3, [r6, #0]
  4083e8:	bd70      	pop	{r4, r5, r6, pc}
  4083ea:	bf00      	nop
  4083ec:	20400cc8 	.word	0x20400cc8

004083f0 <__swbuf_r>:
  4083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4083f2:	460d      	mov	r5, r1
  4083f4:	4614      	mov	r4, r2
  4083f6:	4606      	mov	r6, r0
  4083f8:	b110      	cbz	r0, 408400 <__swbuf_r+0x10>
  4083fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4083fc:	2b00      	cmp	r3, #0
  4083fe:	d04b      	beq.n	408498 <__swbuf_r+0xa8>
  408400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408404:	69a3      	ldr	r3, [r4, #24]
  408406:	60a3      	str	r3, [r4, #8]
  408408:	b291      	uxth	r1, r2
  40840a:	0708      	lsls	r0, r1, #28
  40840c:	d539      	bpl.n	408482 <__swbuf_r+0x92>
  40840e:	6923      	ldr	r3, [r4, #16]
  408410:	2b00      	cmp	r3, #0
  408412:	d036      	beq.n	408482 <__swbuf_r+0x92>
  408414:	b2ed      	uxtb	r5, r5
  408416:	0489      	lsls	r1, r1, #18
  408418:	462f      	mov	r7, r5
  40841a:	d515      	bpl.n	408448 <__swbuf_r+0x58>
  40841c:	6822      	ldr	r2, [r4, #0]
  40841e:	6961      	ldr	r1, [r4, #20]
  408420:	1ad3      	subs	r3, r2, r3
  408422:	428b      	cmp	r3, r1
  408424:	da1c      	bge.n	408460 <__swbuf_r+0x70>
  408426:	3301      	adds	r3, #1
  408428:	68a1      	ldr	r1, [r4, #8]
  40842a:	1c50      	adds	r0, r2, #1
  40842c:	3901      	subs	r1, #1
  40842e:	60a1      	str	r1, [r4, #8]
  408430:	6020      	str	r0, [r4, #0]
  408432:	7015      	strb	r5, [r2, #0]
  408434:	6962      	ldr	r2, [r4, #20]
  408436:	429a      	cmp	r2, r3
  408438:	d01a      	beq.n	408470 <__swbuf_r+0x80>
  40843a:	89a3      	ldrh	r3, [r4, #12]
  40843c:	07db      	lsls	r3, r3, #31
  40843e:	d501      	bpl.n	408444 <__swbuf_r+0x54>
  408440:	2d0a      	cmp	r5, #10
  408442:	d015      	beq.n	408470 <__swbuf_r+0x80>
  408444:	4638      	mov	r0, r7
  408446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408448:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40844a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40844e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408452:	81a2      	strh	r2, [r4, #12]
  408454:	6822      	ldr	r2, [r4, #0]
  408456:	6661      	str	r1, [r4, #100]	; 0x64
  408458:	6961      	ldr	r1, [r4, #20]
  40845a:	1ad3      	subs	r3, r2, r3
  40845c:	428b      	cmp	r3, r1
  40845e:	dbe2      	blt.n	408426 <__swbuf_r+0x36>
  408460:	4621      	mov	r1, r4
  408462:	4630      	mov	r0, r6
  408464:	f7fe fbba 	bl	406bdc <_fflush_r>
  408468:	b940      	cbnz	r0, 40847c <__swbuf_r+0x8c>
  40846a:	6822      	ldr	r2, [r4, #0]
  40846c:	2301      	movs	r3, #1
  40846e:	e7db      	b.n	408428 <__swbuf_r+0x38>
  408470:	4621      	mov	r1, r4
  408472:	4630      	mov	r0, r6
  408474:	f7fe fbb2 	bl	406bdc <_fflush_r>
  408478:	2800      	cmp	r0, #0
  40847a:	d0e3      	beq.n	408444 <__swbuf_r+0x54>
  40847c:	f04f 37ff 	mov.w	r7, #4294967295
  408480:	e7e0      	b.n	408444 <__swbuf_r+0x54>
  408482:	4621      	mov	r1, r4
  408484:	4630      	mov	r0, r6
  408486:	f7fd fad7 	bl	405a38 <__swsetup_r>
  40848a:	2800      	cmp	r0, #0
  40848c:	d1f6      	bne.n	40847c <__swbuf_r+0x8c>
  40848e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408492:	6923      	ldr	r3, [r4, #16]
  408494:	b291      	uxth	r1, r2
  408496:	e7bd      	b.n	408414 <__swbuf_r+0x24>
  408498:	f7fe fbf8 	bl	406c8c <__sinit>
  40849c:	e7b0      	b.n	408400 <__swbuf_r+0x10>
  40849e:	bf00      	nop

004084a0 <_wcrtomb_r>:
  4084a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4084a2:	4606      	mov	r6, r0
  4084a4:	b085      	sub	sp, #20
  4084a6:	461f      	mov	r7, r3
  4084a8:	b189      	cbz	r1, 4084ce <_wcrtomb_r+0x2e>
  4084aa:	4c10      	ldr	r4, [pc, #64]	; (4084ec <_wcrtomb_r+0x4c>)
  4084ac:	4d10      	ldr	r5, [pc, #64]	; (4084f0 <_wcrtomb_r+0x50>)
  4084ae:	6824      	ldr	r4, [r4, #0]
  4084b0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4084b2:	2c00      	cmp	r4, #0
  4084b4:	bf08      	it	eq
  4084b6:	462c      	moveq	r4, r5
  4084b8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4084bc:	47a0      	blx	r4
  4084be:	1c43      	adds	r3, r0, #1
  4084c0:	d103      	bne.n	4084ca <_wcrtomb_r+0x2a>
  4084c2:	2200      	movs	r2, #0
  4084c4:	238a      	movs	r3, #138	; 0x8a
  4084c6:	603a      	str	r2, [r7, #0]
  4084c8:	6033      	str	r3, [r6, #0]
  4084ca:	b005      	add	sp, #20
  4084cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4084ce:	460c      	mov	r4, r1
  4084d0:	4906      	ldr	r1, [pc, #24]	; (4084ec <_wcrtomb_r+0x4c>)
  4084d2:	4a07      	ldr	r2, [pc, #28]	; (4084f0 <_wcrtomb_r+0x50>)
  4084d4:	6809      	ldr	r1, [r1, #0]
  4084d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4084d8:	2900      	cmp	r1, #0
  4084da:	bf08      	it	eq
  4084dc:	4611      	moveq	r1, r2
  4084de:	4622      	mov	r2, r4
  4084e0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4084e4:	a901      	add	r1, sp, #4
  4084e6:	47a0      	blx	r4
  4084e8:	e7e9      	b.n	4084be <_wcrtomb_r+0x1e>
  4084ea:	bf00      	nop
  4084ec:	2040000c 	.word	0x2040000c
  4084f0:	2040084c 	.word	0x2040084c

004084f4 <__ascii_wctomb>:
  4084f4:	b121      	cbz	r1, 408500 <__ascii_wctomb+0xc>
  4084f6:	2aff      	cmp	r2, #255	; 0xff
  4084f8:	d804      	bhi.n	408504 <__ascii_wctomb+0x10>
  4084fa:	700a      	strb	r2, [r1, #0]
  4084fc:	2001      	movs	r0, #1
  4084fe:	4770      	bx	lr
  408500:	4608      	mov	r0, r1
  408502:	4770      	bx	lr
  408504:	238a      	movs	r3, #138	; 0x8a
  408506:	6003      	str	r3, [r0, #0]
  408508:	f04f 30ff 	mov.w	r0, #4294967295
  40850c:	4770      	bx	lr
  40850e:	bf00      	nop

00408510 <__aeabi_drsub>:
  408510:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408514:	e002      	b.n	40851c <__adddf3>
  408516:	bf00      	nop

00408518 <__aeabi_dsub>:
  408518:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040851c <__adddf3>:
  40851c:	b530      	push	{r4, r5, lr}
  40851e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  408522:	ea4f 0543 	mov.w	r5, r3, lsl #1
  408526:	ea94 0f05 	teq	r4, r5
  40852a:	bf08      	it	eq
  40852c:	ea90 0f02 	teqeq	r0, r2
  408530:	bf1f      	itttt	ne
  408532:	ea54 0c00 	orrsne.w	ip, r4, r0
  408536:	ea55 0c02 	orrsne.w	ip, r5, r2
  40853a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40853e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408542:	f000 80e2 	beq.w	40870a <__adddf3+0x1ee>
  408546:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40854a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40854e:	bfb8      	it	lt
  408550:	426d      	neglt	r5, r5
  408552:	dd0c      	ble.n	40856e <__adddf3+0x52>
  408554:	442c      	add	r4, r5
  408556:	ea80 0202 	eor.w	r2, r0, r2
  40855a:	ea81 0303 	eor.w	r3, r1, r3
  40855e:	ea82 0000 	eor.w	r0, r2, r0
  408562:	ea83 0101 	eor.w	r1, r3, r1
  408566:	ea80 0202 	eor.w	r2, r0, r2
  40856a:	ea81 0303 	eor.w	r3, r1, r3
  40856e:	2d36      	cmp	r5, #54	; 0x36
  408570:	bf88      	it	hi
  408572:	bd30      	pophi	{r4, r5, pc}
  408574:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408578:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40857c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  408580:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408584:	d002      	beq.n	40858c <__adddf3+0x70>
  408586:	4240      	negs	r0, r0
  408588:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40858c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  408590:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408594:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408598:	d002      	beq.n	4085a0 <__adddf3+0x84>
  40859a:	4252      	negs	r2, r2
  40859c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4085a0:	ea94 0f05 	teq	r4, r5
  4085a4:	f000 80a7 	beq.w	4086f6 <__adddf3+0x1da>
  4085a8:	f1a4 0401 	sub.w	r4, r4, #1
  4085ac:	f1d5 0e20 	rsbs	lr, r5, #32
  4085b0:	db0d      	blt.n	4085ce <__adddf3+0xb2>
  4085b2:	fa02 fc0e 	lsl.w	ip, r2, lr
  4085b6:	fa22 f205 	lsr.w	r2, r2, r5
  4085ba:	1880      	adds	r0, r0, r2
  4085bc:	f141 0100 	adc.w	r1, r1, #0
  4085c0:	fa03 f20e 	lsl.w	r2, r3, lr
  4085c4:	1880      	adds	r0, r0, r2
  4085c6:	fa43 f305 	asr.w	r3, r3, r5
  4085ca:	4159      	adcs	r1, r3
  4085cc:	e00e      	b.n	4085ec <__adddf3+0xd0>
  4085ce:	f1a5 0520 	sub.w	r5, r5, #32
  4085d2:	f10e 0e20 	add.w	lr, lr, #32
  4085d6:	2a01      	cmp	r2, #1
  4085d8:	fa03 fc0e 	lsl.w	ip, r3, lr
  4085dc:	bf28      	it	cs
  4085de:	f04c 0c02 	orrcs.w	ip, ip, #2
  4085e2:	fa43 f305 	asr.w	r3, r3, r5
  4085e6:	18c0      	adds	r0, r0, r3
  4085e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4085ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4085f0:	d507      	bpl.n	408602 <__adddf3+0xe6>
  4085f2:	f04f 0e00 	mov.w	lr, #0
  4085f6:	f1dc 0c00 	rsbs	ip, ip, #0
  4085fa:	eb7e 0000 	sbcs.w	r0, lr, r0
  4085fe:	eb6e 0101 	sbc.w	r1, lr, r1
  408602:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  408606:	d31b      	bcc.n	408640 <__adddf3+0x124>
  408608:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40860c:	d30c      	bcc.n	408628 <__adddf3+0x10c>
  40860e:	0849      	lsrs	r1, r1, #1
  408610:	ea5f 0030 	movs.w	r0, r0, rrx
  408614:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408618:	f104 0401 	add.w	r4, r4, #1
  40861c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  408620:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408624:	f080 809a 	bcs.w	40875c <__adddf3+0x240>
  408628:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40862c:	bf08      	it	eq
  40862e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408632:	f150 0000 	adcs.w	r0, r0, #0
  408636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40863a:	ea41 0105 	orr.w	r1, r1, r5
  40863e:	bd30      	pop	{r4, r5, pc}
  408640:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408644:	4140      	adcs	r0, r0
  408646:	eb41 0101 	adc.w	r1, r1, r1
  40864a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40864e:	f1a4 0401 	sub.w	r4, r4, #1
  408652:	d1e9      	bne.n	408628 <__adddf3+0x10c>
  408654:	f091 0f00 	teq	r1, #0
  408658:	bf04      	itt	eq
  40865a:	4601      	moveq	r1, r0
  40865c:	2000      	moveq	r0, #0
  40865e:	fab1 f381 	clz	r3, r1
  408662:	bf08      	it	eq
  408664:	3320      	addeq	r3, #32
  408666:	f1a3 030b 	sub.w	r3, r3, #11
  40866a:	f1b3 0220 	subs.w	r2, r3, #32
  40866e:	da0c      	bge.n	40868a <__adddf3+0x16e>
  408670:	320c      	adds	r2, #12
  408672:	dd08      	ble.n	408686 <__adddf3+0x16a>
  408674:	f102 0c14 	add.w	ip, r2, #20
  408678:	f1c2 020c 	rsb	r2, r2, #12
  40867c:	fa01 f00c 	lsl.w	r0, r1, ip
  408680:	fa21 f102 	lsr.w	r1, r1, r2
  408684:	e00c      	b.n	4086a0 <__adddf3+0x184>
  408686:	f102 0214 	add.w	r2, r2, #20
  40868a:	bfd8      	it	le
  40868c:	f1c2 0c20 	rsble	ip, r2, #32
  408690:	fa01 f102 	lsl.w	r1, r1, r2
  408694:	fa20 fc0c 	lsr.w	ip, r0, ip
  408698:	bfdc      	itt	le
  40869a:	ea41 010c 	orrle.w	r1, r1, ip
  40869e:	4090      	lslle	r0, r2
  4086a0:	1ae4      	subs	r4, r4, r3
  4086a2:	bfa2      	ittt	ge
  4086a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4086a8:	4329      	orrge	r1, r5
  4086aa:	bd30      	popge	{r4, r5, pc}
  4086ac:	ea6f 0404 	mvn.w	r4, r4
  4086b0:	3c1f      	subs	r4, #31
  4086b2:	da1c      	bge.n	4086ee <__adddf3+0x1d2>
  4086b4:	340c      	adds	r4, #12
  4086b6:	dc0e      	bgt.n	4086d6 <__adddf3+0x1ba>
  4086b8:	f104 0414 	add.w	r4, r4, #20
  4086bc:	f1c4 0220 	rsb	r2, r4, #32
  4086c0:	fa20 f004 	lsr.w	r0, r0, r4
  4086c4:	fa01 f302 	lsl.w	r3, r1, r2
  4086c8:	ea40 0003 	orr.w	r0, r0, r3
  4086cc:	fa21 f304 	lsr.w	r3, r1, r4
  4086d0:	ea45 0103 	orr.w	r1, r5, r3
  4086d4:	bd30      	pop	{r4, r5, pc}
  4086d6:	f1c4 040c 	rsb	r4, r4, #12
  4086da:	f1c4 0220 	rsb	r2, r4, #32
  4086de:	fa20 f002 	lsr.w	r0, r0, r2
  4086e2:	fa01 f304 	lsl.w	r3, r1, r4
  4086e6:	ea40 0003 	orr.w	r0, r0, r3
  4086ea:	4629      	mov	r1, r5
  4086ec:	bd30      	pop	{r4, r5, pc}
  4086ee:	fa21 f004 	lsr.w	r0, r1, r4
  4086f2:	4629      	mov	r1, r5
  4086f4:	bd30      	pop	{r4, r5, pc}
  4086f6:	f094 0f00 	teq	r4, #0
  4086fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4086fe:	bf06      	itte	eq
  408700:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408704:	3401      	addeq	r4, #1
  408706:	3d01      	subne	r5, #1
  408708:	e74e      	b.n	4085a8 <__adddf3+0x8c>
  40870a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40870e:	bf18      	it	ne
  408710:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408714:	d029      	beq.n	40876a <__adddf3+0x24e>
  408716:	ea94 0f05 	teq	r4, r5
  40871a:	bf08      	it	eq
  40871c:	ea90 0f02 	teqeq	r0, r2
  408720:	d005      	beq.n	40872e <__adddf3+0x212>
  408722:	ea54 0c00 	orrs.w	ip, r4, r0
  408726:	bf04      	itt	eq
  408728:	4619      	moveq	r1, r3
  40872a:	4610      	moveq	r0, r2
  40872c:	bd30      	pop	{r4, r5, pc}
  40872e:	ea91 0f03 	teq	r1, r3
  408732:	bf1e      	ittt	ne
  408734:	2100      	movne	r1, #0
  408736:	2000      	movne	r0, #0
  408738:	bd30      	popne	{r4, r5, pc}
  40873a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40873e:	d105      	bne.n	40874c <__adddf3+0x230>
  408740:	0040      	lsls	r0, r0, #1
  408742:	4149      	adcs	r1, r1
  408744:	bf28      	it	cs
  408746:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40874a:	bd30      	pop	{r4, r5, pc}
  40874c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408750:	bf3c      	itt	cc
  408752:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408756:	bd30      	popcc	{r4, r5, pc}
  408758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40875c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408760:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408764:	f04f 0000 	mov.w	r0, #0
  408768:	bd30      	pop	{r4, r5, pc}
  40876a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40876e:	bf1a      	itte	ne
  408770:	4619      	movne	r1, r3
  408772:	4610      	movne	r0, r2
  408774:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408778:	bf1c      	itt	ne
  40877a:	460b      	movne	r3, r1
  40877c:	4602      	movne	r2, r0
  40877e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408782:	bf06      	itte	eq
  408784:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408788:	ea91 0f03 	teqeq	r1, r3
  40878c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  408790:	bd30      	pop	{r4, r5, pc}
  408792:	bf00      	nop

00408794 <__aeabi_ui2d>:
  408794:	f090 0f00 	teq	r0, #0
  408798:	bf04      	itt	eq
  40879a:	2100      	moveq	r1, #0
  40879c:	4770      	bxeq	lr
  40879e:	b530      	push	{r4, r5, lr}
  4087a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4087a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4087a8:	f04f 0500 	mov.w	r5, #0
  4087ac:	f04f 0100 	mov.w	r1, #0
  4087b0:	e750      	b.n	408654 <__adddf3+0x138>
  4087b2:	bf00      	nop

004087b4 <__aeabi_i2d>:
  4087b4:	f090 0f00 	teq	r0, #0
  4087b8:	bf04      	itt	eq
  4087ba:	2100      	moveq	r1, #0
  4087bc:	4770      	bxeq	lr
  4087be:	b530      	push	{r4, r5, lr}
  4087c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4087c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4087c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4087cc:	bf48      	it	mi
  4087ce:	4240      	negmi	r0, r0
  4087d0:	f04f 0100 	mov.w	r1, #0
  4087d4:	e73e      	b.n	408654 <__adddf3+0x138>
  4087d6:	bf00      	nop

004087d8 <__aeabi_f2d>:
  4087d8:	0042      	lsls	r2, r0, #1
  4087da:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4087de:	ea4f 0131 	mov.w	r1, r1, rrx
  4087e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4087e6:	bf1f      	itttt	ne
  4087e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4087ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4087f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4087f4:	4770      	bxne	lr
  4087f6:	f092 0f00 	teq	r2, #0
  4087fa:	bf14      	ite	ne
  4087fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408800:	4770      	bxeq	lr
  408802:	b530      	push	{r4, r5, lr}
  408804:	f44f 7460 	mov.w	r4, #896	; 0x380
  408808:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40880c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408810:	e720      	b.n	408654 <__adddf3+0x138>
  408812:	bf00      	nop

00408814 <__aeabi_ul2d>:
  408814:	ea50 0201 	orrs.w	r2, r0, r1
  408818:	bf08      	it	eq
  40881a:	4770      	bxeq	lr
  40881c:	b530      	push	{r4, r5, lr}
  40881e:	f04f 0500 	mov.w	r5, #0
  408822:	e00a      	b.n	40883a <__aeabi_l2d+0x16>

00408824 <__aeabi_l2d>:
  408824:	ea50 0201 	orrs.w	r2, r0, r1
  408828:	bf08      	it	eq
  40882a:	4770      	bxeq	lr
  40882c:	b530      	push	{r4, r5, lr}
  40882e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408832:	d502      	bpl.n	40883a <__aeabi_l2d+0x16>
  408834:	4240      	negs	r0, r0
  408836:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40883a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40883e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408842:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  408846:	f43f aedc 	beq.w	408602 <__adddf3+0xe6>
  40884a:	f04f 0203 	mov.w	r2, #3
  40884e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408852:	bf18      	it	ne
  408854:	3203      	addne	r2, #3
  408856:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40885a:	bf18      	it	ne
  40885c:	3203      	addne	r2, #3
  40885e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  408862:	f1c2 0320 	rsb	r3, r2, #32
  408866:	fa00 fc03 	lsl.w	ip, r0, r3
  40886a:	fa20 f002 	lsr.w	r0, r0, r2
  40886e:	fa01 fe03 	lsl.w	lr, r1, r3
  408872:	ea40 000e 	orr.w	r0, r0, lr
  408876:	fa21 f102 	lsr.w	r1, r1, r2
  40887a:	4414      	add	r4, r2
  40887c:	e6c1      	b.n	408602 <__adddf3+0xe6>
  40887e:	bf00      	nop

00408880 <__aeabi_dmul>:
  408880:	b570      	push	{r4, r5, r6, lr}
  408882:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40888a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40888e:	bf1d      	ittte	ne
  408890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408894:	ea94 0f0c 	teqne	r4, ip
  408898:	ea95 0f0c 	teqne	r5, ip
  40889c:	f000 f8de 	bleq	408a5c <__aeabi_dmul+0x1dc>
  4088a0:	442c      	add	r4, r5
  4088a2:	ea81 0603 	eor.w	r6, r1, r3
  4088a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4088aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4088ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4088b2:	bf18      	it	ne
  4088b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4088b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4088bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4088c0:	d038      	beq.n	408934 <__aeabi_dmul+0xb4>
  4088c2:	fba0 ce02 	umull	ip, lr, r0, r2
  4088c6:	f04f 0500 	mov.w	r5, #0
  4088ca:	fbe1 e502 	umlal	lr, r5, r1, r2
  4088ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4088d2:	fbe0 e503 	umlal	lr, r5, r0, r3
  4088d6:	f04f 0600 	mov.w	r6, #0
  4088da:	fbe1 5603 	umlal	r5, r6, r1, r3
  4088de:	f09c 0f00 	teq	ip, #0
  4088e2:	bf18      	it	ne
  4088e4:	f04e 0e01 	orrne.w	lr, lr, #1
  4088e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4088ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4088f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4088f4:	d204      	bcs.n	408900 <__aeabi_dmul+0x80>
  4088f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4088fa:	416d      	adcs	r5, r5
  4088fc:	eb46 0606 	adc.w	r6, r6, r6
  408900:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408904:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408908:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40890c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408910:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408914:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408918:	bf88      	it	hi
  40891a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40891e:	d81e      	bhi.n	40895e <__aeabi_dmul+0xde>
  408920:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408924:	bf08      	it	eq
  408926:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40892a:	f150 0000 	adcs.w	r0, r0, #0
  40892e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408932:	bd70      	pop	{r4, r5, r6, pc}
  408934:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408938:	ea46 0101 	orr.w	r1, r6, r1
  40893c:	ea40 0002 	orr.w	r0, r0, r2
  408940:	ea81 0103 	eor.w	r1, r1, r3
  408944:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408948:	bfc2      	ittt	gt
  40894a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40894e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408952:	bd70      	popgt	{r4, r5, r6, pc}
  408954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408958:	f04f 0e00 	mov.w	lr, #0
  40895c:	3c01      	subs	r4, #1
  40895e:	f300 80ab 	bgt.w	408ab8 <__aeabi_dmul+0x238>
  408962:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408966:	bfde      	ittt	le
  408968:	2000      	movle	r0, #0
  40896a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40896e:	bd70      	pople	{r4, r5, r6, pc}
  408970:	f1c4 0400 	rsb	r4, r4, #0
  408974:	3c20      	subs	r4, #32
  408976:	da35      	bge.n	4089e4 <__aeabi_dmul+0x164>
  408978:	340c      	adds	r4, #12
  40897a:	dc1b      	bgt.n	4089b4 <__aeabi_dmul+0x134>
  40897c:	f104 0414 	add.w	r4, r4, #20
  408980:	f1c4 0520 	rsb	r5, r4, #32
  408984:	fa00 f305 	lsl.w	r3, r0, r5
  408988:	fa20 f004 	lsr.w	r0, r0, r4
  40898c:	fa01 f205 	lsl.w	r2, r1, r5
  408990:	ea40 0002 	orr.w	r0, r0, r2
  408994:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408998:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40899c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4089a0:	fa21 f604 	lsr.w	r6, r1, r4
  4089a4:	eb42 0106 	adc.w	r1, r2, r6
  4089a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4089ac:	bf08      	it	eq
  4089ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4089b2:	bd70      	pop	{r4, r5, r6, pc}
  4089b4:	f1c4 040c 	rsb	r4, r4, #12
  4089b8:	f1c4 0520 	rsb	r5, r4, #32
  4089bc:	fa00 f304 	lsl.w	r3, r0, r4
  4089c0:	fa20 f005 	lsr.w	r0, r0, r5
  4089c4:	fa01 f204 	lsl.w	r2, r1, r4
  4089c8:	ea40 0002 	orr.w	r0, r0, r2
  4089cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4089d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4089d4:	f141 0100 	adc.w	r1, r1, #0
  4089d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4089dc:	bf08      	it	eq
  4089de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4089e2:	bd70      	pop	{r4, r5, r6, pc}
  4089e4:	f1c4 0520 	rsb	r5, r4, #32
  4089e8:	fa00 f205 	lsl.w	r2, r0, r5
  4089ec:	ea4e 0e02 	orr.w	lr, lr, r2
  4089f0:	fa20 f304 	lsr.w	r3, r0, r4
  4089f4:	fa01 f205 	lsl.w	r2, r1, r5
  4089f8:	ea43 0302 	orr.w	r3, r3, r2
  4089fc:	fa21 f004 	lsr.w	r0, r1, r4
  408a00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a04:	fa21 f204 	lsr.w	r2, r1, r4
  408a08:	ea20 0002 	bic.w	r0, r0, r2
  408a0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408a10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408a14:	bf08      	it	eq
  408a16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408a1a:	bd70      	pop	{r4, r5, r6, pc}
  408a1c:	f094 0f00 	teq	r4, #0
  408a20:	d10f      	bne.n	408a42 <__aeabi_dmul+0x1c2>
  408a22:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408a26:	0040      	lsls	r0, r0, #1
  408a28:	eb41 0101 	adc.w	r1, r1, r1
  408a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408a30:	bf08      	it	eq
  408a32:	3c01      	subeq	r4, #1
  408a34:	d0f7      	beq.n	408a26 <__aeabi_dmul+0x1a6>
  408a36:	ea41 0106 	orr.w	r1, r1, r6
  408a3a:	f095 0f00 	teq	r5, #0
  408a3e:	bf18      	it	ne
  408a40:	4770      	bxne	lr
  408a42:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408a46:	0052      	lsls	r2, r2, #1
  408a48:	eb43 0303 	adc.w	r3, r3, r3
  408a4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408a50:	bf08      	it	eq
  408a52:	3d01      	subeq	r5, #1
  408a54:	d0f7      	beq.n	408a46 <__aeabi_dmul+0x1c6>
  408a56:	ea43 0306 	orr.w	r3, r3, r6
  408a5a:	4770      	bx	lr
  408a5c:	ea94 0f0c 	teq	r4, ip
  408a60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408a64:	bf18      	it	ne
  408a66:	ea95 0f0c 	teqne	r5, ip
  408a6a:	d00c      	beq.n	408a86 <__aeabi_dmul+0x206>
  408a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408a70:	bf18      	it	ne
  408a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408a76:	d1d1      	bne.n	408a1c <__aeabi_dmul+0x19c>
  408a78:	ea81 0103 	eor.w	r1, r1, r3
  408a7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a80:	f04f 0000 	mov.w	r0, #0
  408a84:	bd70      	pop	{r4, r5, r6, pc}
  408a86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408a8a:	bf06      	itte	eq
  408a8c:	4610      	moveq	r0, r2
  408a8e:	4619      	moveq	r1, r3
  408a90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408a94:	d019      	beq.n	408aca <__aeabi_dmul+0x24a>
  408a96:	ea94 0f0c 	teq	r4, ip
  408a9a:	d102      	bne.n	408aa2 <__aeabi_dmul+0x222>
  408a9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408aa0:	d113      	bne.n	408aca <__aeabi_dmul+0x24a>
  408aa2:	ea95 0f0c 	teq	r5, ip
  408aa6:	d105      	bne.n	408ab4 <__aeabi_dmul+0x234>
  408aa8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408aac:	bf1c      	itt	ne
  408aae:	4610      	movne	r0, r2
  408ab0:	4619      	movne	r1, r3
  408ab2:	d10a      	bne.n	408aca <__aeabi_dmul+0x24a>
  408ab4:	ea81 0103 	eor.w	r1, r1, r3
  408ab8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408abc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408ac0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408ac4:	f04f 0000 	mov.w	r0, #0
  408ac8:	bd70      	pop	{r4, r5, r6, pc}
  408aca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408ace:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408ad2:	bd70      	pop	{r4, r5, r6, pc}

00408ad4 <__aeabi_ddiv>:
  408ad4:	b570      	push	{r4, r5, r6, lr}
  408ad6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408ada:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408ade:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408ae2:	bf1d      	ittte	ne
  408ae4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408ae8:	ea94 0f0c 	teqne	r4, ip
  408aec:	ea95 0f0c 	teqne	r5, ip
  408af0:	f000 f8a7 	bleq	408c42 <__aeabi_ddiv+0x16e>
  408af4:	eba4 0405 	sub.w	r4, r4, r5
  408af8:	ea81 0e03 	eor.w	lr, r1, r3
  408afc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408b00:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408b04:	f000 8088 	beq.w	408c18 <__aeabi_ddiv+0x144>
  408b08:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408b0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408b10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408b14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408b18:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408b1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408b20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408b24:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408b28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408b2c:	429d      	cmp	r5, r3
  408b2e:	bf08      	it	eq
  408b30:	4296      	cmpeq	r6, r2
  408b32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408b36:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408b3a:	d202      	bcs.n	408b42 <__aeabi_ddiv+0x6e>
  408b3c:	085b      	lsrs	r3, r3, #1
  408b3e:	ea4f 0232 	mov.w	r2, r2, rrx
  408b42:	1ab6      	subs	r6, r6, r2
  408b44:	eb65 0503 	sbc.w	r5, r5, r3
  408b48:	085b      	lsrs	r3, r3, #1
  408b4a:	ea4f 0232 	mov.w	r2, r2, rrx
  408b4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408b52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408b56:	ebb6 0e02 	subs.w	lr, r6, r2
  408b5a:	eb75 0e03 	sbcs.w	lr, r5, r3
  408b5e:	bf22      	ittt	cs
  408b60:	1ab6      	subcs	r6, r6, r2
  408b62:	4675      	movcs	r5, lr
  408b64:	ea40 000c 	orrcs.w	r0, r0, ip
  408b68:	085b      	lsrs	r3, r3, #1
  408b6a:	ea4f 0232 	mov.w	r2, r2, rrx
  408b6e:	ebb6 0e02 	subs.w	lr, r6, r2
  408b72:	eb75 0e03 	sbcs.w	lr, r5, r3
  408b76:	bf22      	ittt	cs
  408b78:	1ab6      	subcs	r6, r6, r2
  408b7a:	4675      	movcs	r5, lr
  408b7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408b80:	085b      	lsrs	r3, r3, #1
  408b82:	ea4f 0232 	mov.w	r2, r2, rrx
  408b86:	ebb6 0e02 	subs.w	lr, r6, r2
  408b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
  408b8e:	bf22      	ittt	cs
  408b90:	1ab6      	subcs	r6, r6, r2
  408b92:	4675      	movcs	r5, lr
  408b94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408b98:	085b      	lsrs	r3, r3, #1
  408b9a:	ea4f 0232 	mov.w	r2, r2, rrx
  408b9e:	ebb6 0e02 	subs.w	lr, r6, r2
  408ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
  408ba6:	bf22      	ittt	cs
  408ba8:	1ab6      	subcs	r6, r6, r2
  408baa:	4675      	movcs	r5, lr
  408bac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408bb0:	ea55 0e06 	orrs.w	lr, r5, r6
  408bb4:	d018      	beq.n	408be8 <__aeabi_ddiv+0x114>
  408bb6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408bba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408bbe:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408bc2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408bc6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408bca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408bce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408bd2:	d1c0      	bne.n	408b56 <__aeabi_ddiv+0x82>
  408bd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408bd8:	d10b      	bne.n	408bf2 <__aeabi_ddiv+0x11e>
  408bda:	ea41 0100 	orr.w	r1, r1, r0
  408bde:	f04f 0000 	mov.w	r0, #0
  408be2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408be6:	e7b6      	b.n	408b56 <__aeabi_ddiv+0x82>
  408be8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408bec:	bf04      	itt	eq
  408bee:	4301      	orreq	r1, r0
  408bf0:	2000      	moveq	r0, #0
  408bf2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408bf6:	bf88      	it	hi
  408bf8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408bfc:	f63f aeaf 	bhi.w	40895e <__aeabi_dmul+0xde>
  408c00:	ebb5 0c03 	subs.w	ip, r5, r3
  408c04:	bf04      	itt	eq
  408c06:	ebb6 0c02 	subseq.w	ip, r6, r2
  408c0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408c0e:	f150 0000 	adcs.w	r0, r0, #0
  408c12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408c16:	bd70      	pop	{r4, r5, r6, pc}
  408c18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408c1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408c20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408c24:	bfc2      	ittt	gt
  408c26:	ebd4 050c 	rsbsgt	r5, r4, ip
  408c2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408c2e:	bd70      	popgt	{r4, r5, r6, pc}
  408c30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408c34:	f04f 0e00 	mov.w	lr, #0
  408c38:	3c01      	subs	r4, #1
  408c3a:	e690      	b.n	40895e <__aeabi_dmul+0xde>
  408c3c:	ea45 0e06 	orr.w	lr, r5, r6
  408c40:	e68d      	b.n	40895e <__aeabi_dmul+0xde>
  408c42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408c46:	ea94 0f0c 	teq	r4, ip
  408c4a:	bf08      	it	eq
  408c4c:	ea95 0f0c 	teqeq	r5, ip
  408c50:	f43f af3b 	beq.w	408aca <__aeabi_dmul+0x24a>
  408c54:	ea94 0f0c 	teq	r4, ip
  408c58:	d10a      	bne.n	408c70 <__aeabi_ddiv+0x19c>
  408c5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408c5e:	f47f af34 	bne.w	408aca <__aeabi_dmul+0x24a>
  408c62:	ea95 0f0c 	teq	r5, ip
  408c66:	f47f af25 	bne.w	408ab4 <__aeabi_dmul+0x234>
  408c6a:	4610      	mov	r0, r2
  408c6c:	4619      	mov	r1, r3
  408c6e:	e72c      	b.n	408aca <__aeabi_dmul+0x24a>
  408c70:	ea95 0f0c 	teq	r5, ip
  408c74:	d106      	bne.n	408c84 <__aeabi_ddiv+0x1b0>
  408c76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408c7a:	f43f aefd 	beq.w	408a78 <__aeabi_dmul+0x1f8>
  408c7e:	4610      	mov	r0, r2
  408c80:	4619      	mov	r1, r3
  408c82:	e722      	b.n	408aca <__aeabi_dmul+0x24a>
  408c84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408c88:	bf18      	it	ne
  408c8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408c8e:	f47f aec5 	bne.w	408a1c <__aeabi_dmul+0x19c>
  408c92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408c96:	f47f af0d 	bne.w	408ab4 <__aeabi_dmul+0x234>
  408c9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408c9e:	f47f aeeb 	bne.w	408a78 <__aeabi_dmul+0x1f8>
  408ca2:	e712      	b.n	408aca <__aeabi_dmul+0x24a>

00408ca4 <__gedf2>:
  408ca4:	f04f 3cff 	mov.w	ip, #4294967295
  408ca8:	e006      	b.n	408cb8 <__cmpdf2+0x4>
  408caa:	bf00      	nop

00408cac <__ledf2>:
  408cac:	f04f 0c01 	mov.w	ip, #1
  408cb0:	e002      	b.n	408cb8 <__cmpdf2+0x4>
  408cb2:	bf00      	nop

00408cb4 <__cmpdf2>:
  408cb4:	f04f 0c01 	mov.w	ip, #1
  408cb8:	f84d cd04 	str.w	ip, [sp, #-4]!
  408cbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408cc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408cc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408cc8:	bf18      	it	ne
  408cca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408cce:	d01b      	beq.n	408d08 <__cmpdf2+0x54>
  408cd0:	b001      	add	sp, #4
  408cd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408cd6:	bf0c      	ite	eq
  408cd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408cdc:	ea91 0f03 	teqne	r1, r3
  408ce0:	bf02      	ittt	eq
  408ce2:	ea90 0f02 	teqeq	r0, r2
  408ce6:	2000      	moveq	r0, #0
  408ce8:	4770      	bxeq	lr
  408cea:	f110 0f00 	cmn.w	r0, #0
  408cee:	ea91 0f03 	teq	r1, r3
  408cf2:	bf58      	it	pl
  408cf4:	4299      	cmppl	r1, r3
  408cf6:	bf08      	it	eq
  408cf8:	4290      	cmpeq	r0, r2
  408cfa:	bf2c      	ite	cs
  408cfc:	17d8      	asrcs	r0, r3, #31
  408cfe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408d02:	f040 0001 	orr.w	r0, r0, #1
  408d06:	4770      	bx	lr
  408d08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408d0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d10:	d102      	bne.n	408d18 <__cmpdf2+0x64>
  408d12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408d16:	d107      	bne.n	408d28 <__cmpdf2+0x74>
  408d18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408d1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d20:	d1d6      	bne.n	408cd0 <__cmpdf2+0x1c>
  408d22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408d26:	d0d3      	beq.n	408cd0 <__cmpdf2+0x1c>
  408d28:	f85d 0b04 	ldr.w	r0, [sp], #4
  408d2c:	4770      	bx	lr
  408d2e:	bf00      	nop

00408d30 <__aeabi_cdrcmple>:
  408d30:	4684      	mov	ip, r0
  408d32:	4610      	mov	r0, r2
  408d34:	4662      	mov	r2, ip
  408d36:	468c      	mov	ip, r1
  408d38:	4619      	mov	r1, r3
  408d3a:	4663      	mov	r3, ip
  408d3c:	e000      	b.n	408d40 <__aeabi_cdcmpeq>
  408d3e:	bf00      	nop

00408d40 <__aeabi_cdcmpeq>:
  408d40:	b501      	push	{r0, lr}
  408d42:	f7ff ffb7 	bl	408cb4 <__cmpdf2>
  408d46:	2800      	cmp	r0, #0
  408d48:	bf48      	it	mi
  408d4a:	f110 0f00 	cmnmi.w	r0, #0
  408d4e:	bd01      	pop	{r0, pc}

00408d50 <__aeabi_dcmpeq>:
  408d50:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d54:	f7ff fff4 	bl	408d40 <__aeabi_cdcmpeq>
  408d58:	bf0c      	ite	eq
  408d5a:	2001      	moveq	r0, #1
  408d5c:	2000      	movne	r0, #0
  408d5e:	f85d fb08 	ldr.w	pc, [sp], #8
  408d62:	bf00      	nop

00408d64 <__aeabi_dcmplt>:
  408d64:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d68:	f7ff ffea 	bl	408d40 <__aeabi_cdcmpeq>
  408d6c:	bf34      	ite	cc
  408d6e:	2001      	movcc	r0, #1
  408d70:	2000      	movcs	r0, #0
  408d72:	f85d fb08 	ldr.w	pc, [sp], #8
  408d76:	bf00      	nop

00408d78 <__aeabi_dcmple>:
  408d78:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d7c:	f7ff ffe0 	bl	408d40 <__aeabi_cdcmpeq>
  408d80:	bf94      	ite	ls
  408d82:	2001      	movls	r0, #1
  408d84:	2000      	movhi	r0, #0
  408d86:	f85d fb08 	ldr.w	pc, [sp], #8
  408d8a:	bf00      	nop

00408d8c <__aeabi_dcmpge>:
  408d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d90:	f7ff ffce 	bl	408d30 <__aeabi_cdrcmple>
  408d94:	bf94      	ite	ls
  408d96:	2001      	movls	r0, #1
  408d98:	2000      	movhi	r0, #0
  408d9a:	f85d fb08 	ldr.w	pc, [sp], #8
  408d9e:	bf00      	nop

00408da0 <__aeabi_dcmpgt>:
  408da0:	f84d ed08 	str.w	lr, [sp, #-8]!
  408da4:	f7ff ffc4 	bl	408d30 <__aeabi_cdrcmple>
  408da8:	bf34      	ite	cc
  408daa:	2001      	movcc	r0, #1
  408dac:	2000      	movcs	r0, #0
  408dae:	f85d fb08 	ldr.w	pc, [sp], #8
  408db2:	bf00      	nop

00408db4 <__aeabi_dcmpun>:
  408db4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408db8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408dbc:	d102      	bne.n	408dc4 <__aeabi_dcmpun+0x10>
  408dbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408dc2:	d10a      	bne.n	408dda <__aeabi_dcmpun+0x26>
  408dc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408dc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408dcc:	d102      	bne.n	408dd4 <__aeabi_dcmpun+0x20>
  408dce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408dd2:	d102      	bne.n	408dda <__aeabi_dcmpun+0x26>
  408dd4:	f04f 0000 	mov.w	r0, #0
  408dd8:	4770      	bx	lr
  408dda:	f04f 0001 	mov.w	r0, #1
  408dde:	4770      	bx	lr

00408de0 <__aeabi_d2iz>:
  408de0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408de4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408de8:	d215      	bcs.n	408e16 <__aeabi_d2iz+0x36>
  408dea:	d511      	bpl.n	408e10 <__aeabi_d2iz+0x30>
  408dec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408df0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408df4:	d912      	bls.n	408e1c <__aeabi_d2iz+0x3c>
  408df6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408dfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408dfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408e02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408e06:	fa23 f002 	lsr.w	r0, r3, r2
  408e0a:	bf18      	it	ne
  408e0c:	4240      	negne	r0, r0
  408e0e:	4770      	bx	lr
  408e10:	f04f 0000 	mov.w	r0, #0
  408e14:	4770      	bx	lr
  408e16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408e1a:	d105      	bne.n	408e28 <__aeabi_d2iz+0x48>
  408e1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408e20:	bf08      	it	eq
  408e22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408e26:	4770      	bx	lr
  408e28:	f04f 0000 	mov.w	r0, #0
  408e2c:	4770      	bx	lr
  408e2e:	bf00      	nop

00408e30 <__aeabi_uldivmod>:
  408e30:	b953      	cbnz	r3, 408e48 <__aeabi_uldivmod+0x18>
  408e32:	b94a      	cbnz	r2, 408e48 <__aeabi_uldivmod+0x18>
  408e34:	2900      	cmp	r1, #0
  408e36:	bf08      	it	eq
  408e38:	2800      	cmpeq	r0, #0
  408e3a:	bf1c      	itt	ne
  408e3c:	f04f 31ff 	movne.w	r1, #4294967295
  408e40:	f04f 30ff 	movne.w	r0, #4294967295
  408e44:	f000 b97a 	b.w	40913c <__aeabi_idiv0>
  408e48:	f1ad 0c08 	sub.w	ip, sp, #8
  408e4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408e50:	f000 f806 	bl	408e60 <__udivmoddi4>
  408e54:	f8dd e004 	ldr.w	lr, [sp, #4]
  408e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408e5c:	b004      	add	sp, #16
  408e5e:	4770      	bx	lr

00408e60 <__udivmoddi4>:
  408e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408e64:	468c      	mov	ip, r1
  408e66:	460d      	mov	r5, r1
  408e68:	4604      	mov	r4, r0
  408e6a:	9e08      	ldr	r6, [sp, #32]
  408e6c:	2b00      	cmp	r3, #0
  408e6e:	d151      	bne.n	408f14 <__udivmoddi4+0xb4>
  408e70:	428a      	cmp	r2, r1
  408e72:	4617      	mov	r7, r2
  408e74:	d96d      	bls.n	408f52 <__udivmoddi4+0xf2>
  408e76:	fab2 fe82 	clz	lr, r2
  408e7a:	f1be 0f00 	cmp.w	lr, #0
  408e7e:	d00b      	beq.n	408e98 <__udivmoddi4+0x38>
  408e80:	f1ce 0c20 	rsb	ip, lr, #32
  408e84:	fa01 f50e 	lsl.w	r5, r1, lr
  408e88:	fa20 fc0c 	lsr.w	ip, r0, ip
  408e8c:	fa02 f70e 	lsl.w	r7, r2, lr
  408e90:	ea4c 0c05 	orr.w	ip, ip, r5
  408e94:	fa00 f40e 	lsl.w	r4, r0, lr
  408e98:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408e9c:	0c25      	lsrs	r5, r4, #16
  408e9e:	fbbc f8fa 	udiv	r8, ip, sl
  408ea2:	fa1f f987 	uxth.w	r9, r7
  408ea6:	fb0a cc18 	mls	ip, sl, r8, ip
  408eaa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408eae:	fb08 f309 	mul.w	r3, r8, r9
  408eb2:	42ab      	cmp	r3, r5
  408eb4:	d90a      	bls.n	408ecc <__udivmoddi4+0x6c>
  408eb6:	19ed      	adds	r5, r5, r7
  408eb8:	f108 32ff 	add.w	r2, r8, #4294967295
  408ebc:	f080 8123 	bcs.w	409106 <__udivmoddi4+0x2a6>
  408ec0:	42ab      	cmp	r3, r5
  408ec2:	f240 8120 	bls.w	409106 <__udivmoddi4+0x2a6>
  408ec6:	f1a8 0802 	sub.w	r8, r8, #2
  408eca:	443d      	add	r5, r7
  408ecc:	1aed      	subs	r5, r5, r3
  408ece:	b2a4      	uxth	r4, r4
  408ed0:	fbb5 f0fa 	udiv	r0, r5, sl
  408ed4:	fb0a 5510 	mls	r5, sl, r0, r5
  408ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408edc:	fb00 f909 	mul.w	r9, r0, r9
  408ee0:	45a1      	cmp	r9, r4
  408ee2:	d909      	bls.n	408ef8 <__udivmoddi4+0x98>
  408ee4:	19e4      	adds	r4, r4, r7
  408ee6:	f100 33ff 	add.w	r3, r0, #4294967295
  408eea:	f080 810a 	bcs.w	409102 <__udivmoddi4+0x2a2>
  408eee:	45a1      	cmp	r9, r4
  408ef0:	f240 8107 	bls.w	409102 <__udivmoddi4+0x2a2>
  408ef4:	3802      	subs	r0, #2
  408ef6:	443c      	add	r4, r7
  408ef8:	eba4 0409 	sub.w	r4, r4, r9
  408efc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408f00:	2100      	movs	r1, #0
  408f02:	2e00      	cmp	r6, #0
  408f04:	d061      	beq.n	408fca <__udivmoddi4+0x16a>
  408f06:	fa24 f40e 	lsr.w	r4, r4, lr
  408f0a:	2300      	movs	r3, #0
  408f0c:	6034      	str	r4, [r6, #0]
  408f0e:	6073      	str	r3, [r6, #4]
  408f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f14:	428b      	cmp	r3, r1
  408f16:	d907      	bls.n	408f28 <__udivmoddi4+0xc8>
  408f18:	2e00      	cmp	r6, #0
  408f1a:	d054      	beq.n	408fc6 <__udivmoddi4+0x166>
  408f1c:	2100      	movs	r1, #0
  408f1e:	e886 0021 	stmia.w	r6, {r0, r5}
  408f22:	4608      	mov	r0, r1
  408f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f28:	fab3 f183 	clz	r1, r3
  408f2c:	2900      	cmp	r1, #0
  408f2e:	f040 808e 	bne.w	40904e <__udivmoddi4+0x1ee>
  408f32:	42ab      	cmp	r3, r5
  408f34:	d302      	bcc.n	408f3c <__udivmoddi4+0xdc>
  408f36:	4282      	cmp	r2, r0
  408f38:	f200 80fa 	bhi.w	409130 <__udivmoddi4+0x2d0>
  408f3c:	1a84      	subs	r4, r0, r2
  408f3e:	eb65 0503 	sbc.w	r5, r5, r3
  408f42:	2001      	movs	r0, #1
  408f44:	46ac      	mov	ip, r5
  408f46:	2e00      	cmp	r6, #0
  408f48:	d03f      	beq.n	408fca <__udivmoddi4+0x16a>
  408f4a:	e886 1010 	stmia.w	r6, {r4, ip}
  408f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f52:	b912      	cbnz	r2, 408f5a <__udivmoddi4+0xfa>
  408f54:	2701      	movs	r7, #1
  408f56:	fbb7 f7f2 	udiv	r7, r7, r2
  408f5a:	fab7 fe87 	clz	lr, r7
  408f5e:	f1be 0f00 	cmp.w	lr, #0
  408f62:	d134      	bne.n	408fce <__udivmoddi4+0x16e>
  408f64:	1beb      	subs	r3, r5, r7
  408f66:	0c3a      	lsrs	r2, r7, #16
  408f68:	fa1f fc87 	uxth.w	ip, r7
  408f6c:	2101      	movs	r1, #1
  408f6e:	fbb3 f8f2 	udiv	r8, r3, r2
  408f72:	0c25      	lsrs	r5, r4, #16
  408f74:	fb02 3318 	mls	r3, r2, r8, r3
  408f78:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408f7c:	fb0c f308 	mul.w	r3, ip, r8
  408f80:	42ab      	cmp	r3, r5
  408f82:	d907      	bls.n	408f94 <__udivmoddi4+0x134>
  408f84:	19ed      	adds	r5, r5, r7
  408f86:	f108 30ff 	add.w	r0, r8, #4294967295
  408f8a:	d202      	bcs.n	408f92 <__udivmoddi4+0x132>
  408f8c:	42ab      	cmp	r3, r5
  408f8e:	f200 80d1 	bhi.w	409134 <__udivmoddi4+0x2d4>
  408f92:	4680      	mov	r8, r0
  408f94:	1aed      	subs	r5, r5, r3
  408f96:	b2a3      	uxth	r3, r4
  408f98:	fbb5 f0f2 	udiv	r0, r5, r2
  408f9c:	fb02 5510 	mls	r5, r2, r0, r5
  408fa0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408fa4:	fb0c fc00 	mul.w	ip, ip, r0
  408fa8:	45a4      	cmp	ip, r4
  408faa:	d907      	bls.n	408fbc <__udivmoddi4+0x15c>
  408fac:	19e4      	adds	r4, r4, r7
  408fae:	f100 33ff 	add.w	r3, r0, #4294967295
  408fb2:	d202      	bcs.n	408fba <__udivmoddi4+0x15a>
  408fb4:	45a4      	cmp	ip, r4
  408fb6:	f200 80b8 	bhi.w	40912a <__udivmoddi4+0x2ca>
  408fba:	4618      	mov	r0, r3
  408fbc:	eba4 040c 	sub.w	r4, r4, ip
  408fc0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408fc4:	e79d      	b.n	408f02 <__udivmoddi4+0xa2>
  408fc6:	4631      	mov	r1, r6
  408fc8:	4630      	mov	r0, r6
  408fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408fce:	f1ce 0420 	rsb	r4, lr, #32
  408fd2:	fa05 f30e 	lsl.w	r3, r5, lr
  408fd6:	fa07 f70e 	lsl.w	r7, r7, lr
  408fda:	fa20 f804 	lsr.w	r8, r0, r4
  408fde:	0c3a      	lsrs	r2, r7, #16
  408fe0:	fa25 f404 	lsr.w	r4, r5, r4
  408fe4:	ea48 0803 	orr.w	r8, r8, r3
  408fe8:	fbb4 f1f2 	udiv	r1, r4, r2
  408fec:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408ff0:	fb02 4411 	mls	r4, r2, r1, r4
  408ff4:	fa1f fc87 	uxth.w	ip, r7
  408ff8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408ffc:	fb01 f30c 	mul.w	r3, r1, ip
  409000:	42ab      	cmp	r3, r5
  409002:	fa00 f40e 	lsl.w	r4, r0, lr
  409006:	d909      	bls.n	40901c <__udivmoddi4+0x1bc>
  409008:	19ed      	adds	r5, r5, r7
  40900a:	f101 30ff 	add.w	r0, r1, #4294967295
  40900e:	f080 808a 	bcs.w	409126 <__udivmoddi4+0x2c6>
  409012:	42ab      	cmp	r3, r5
  409014:	f240 8087 	bls.w	409126 <__udivmoddi4+0x2c6>
  409018:	3902      	subs	r1, #2
  40901a:	443d      	add	r5, r7
  40901c:	1aeb      	subs	r3, r5, r3
  40901e:	fa1f f588 	uxth.w	r5, r8
  409022:	fbb3 f0f2 	udiv	r0, r3, r2
  409026:	fb02 3310 	mls	r3, r2, r0, r3
  40902a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40902e:	fb00 f30c 	mul.w	r3, r0, ip
  409032:	42ab      	cmp	r3, r5
  409034:	d907      	bls.n	409046 <__udivmoddi4+0x1e6>
  409036:	19ed      	adds	r5, r5, r7
  409038:	f100 38ff 	add.w	r8, r0, #4294967295
  40903c:	d26f      	bcs.n	40911e <__udivmoddi4+0x2be>
  40903e:	42ab      	cmp	r3, r5
  409040:	d96d      	bls.n	40911e <__udivmoddi4+0x2be>
  409042:	3802      	subs	r0, #2
  409044:	443d      	add	r5, r7
  409046:	1aeb      	subs	r3, r5, r3
  409048:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40904c:	e78f      	b.n	408f6e <__udivmoddi4+0x10e>
  40904e:	f1c1 0720 	rsb	r7, r1, #32
  409052:	fa22 f807 	lsr.w	r8, r2, r7
  409056:	408b      	lsls	r3, r1
  409058:	fa05 f401 	lsl.w	r4, r5, r1
  40905c:	ea48 0303 	orr.w	r3, r8, r3
  409060:	fa20 fe07 	lsr.w	lr, r0, r7
  409064:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409068:	40fd      	lsrs	r5, r7
  40906a:	ea4e 0e04 	orr.w	lr, lr, r4
  40906e:	fbb5 f9fc 	udiv	r9, r5, ip
  409072:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409076:	fb0c 5519 	mls	r5, ip, r9, r5
  40907a:	fa1f f883 	uxth.w	r8, r3
  40907e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  409082:	fb09 f408 	mul.w	r4, r9, r8
  409086:	42ac      	cmp	r4, r5
  409088:	fa02 f201 	lsl.w	r2, r2, r1
  40908c:	fa00 fa01 	lsl.w	sl, r0, r1
  409090:	d908      	bls.n	4090a4 <__udivmoddi4+0x244>
  409092:	18ed      	adds	r5, r5, r3
  409094:	f109 30ff 	add.w	r0, r9, #4294967295
  409098:	d243      	bcs.n	409122 <__udivmoddi4+0x2c2>
  40909a:	42ac      	cmp	r4, r5
  40909c:	d941      	bls.n	409122 <__udivmoddi4+0x2c2>
  40909e:	f1a9 0902 	sub.w	r9, r9, #2
  4090a2:	441d      	add	r5, r3
  4090a4:	1b2d      	subs	r5, r5, r4
  4090a6:	fa1f fe8e 	uxth.w	lr, lr
  4090aa:	fbb5 f0fc 	udiv	r0, r5, ip
  4090ae:	fb0c 5510 	mls	r5, ip, r0, r5
  4090b2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4090b6:	fb00 f808 	mul.w	r8, r0, r8
  4090ba:	45a0      	cmp	r8, r4
  4090bc:	d907      	bls.n	4090ce <__udivmoddi4+0x26e>
  4090be:	18e4      	adds	r4, r4, r3
  4090c0:	f100 35ff 	add.w	r5, r0, #4294967295
  4090c4:	d229      	bcs.n	40911a <__udivmoddi4+0x2ba>
  4090c6:	45a0      	cmp	r8, r4
  4090c8:	d927      	bls.n	40911a <__udivmoddi4+0x2ba>
  4090ca:	3802      	subs	r0, #2
  4090cc:	441c      	add	r4, r3
  4090ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4090d2:	eba4 0408 	sub.w	r4, r4, r8
  4090d6:	fba0 8902 	umull	r8, r9, r0, r2
  4090da:	454c      	cmp	r4, r9
  4090dc:	46c6      	mov	lr, r8
  4090de:	464d      	mov	r5, r9
  4090e0:	d315      	bcc.n	40910e <__udivmoddi4+0x2ae>
  4090e2:	d012      	beq.n	40910a <__udivmoddi4+0x2aa>
  4090e4:	b156      	cbz	r6, 4090fc <__udivmoddi4+0x29c>
  4090e6:	ebba 030e 	subs.w	r3, sl, lr
  4090ea:	eb64 0405 	sbc.w	r4, r4, r5
  4090ee:	fa04 f707 	lsl.w	r7, r4, r7
  4090f2:	40cb      	lsrs	r3, r1
  4090f4:	431f      	orrs	r7, r3
  4090f6:	40cc      	lsrs	r4, r1
  4090f8:	6037      	str	r7, [r6, #0]
  4090fa:	6074      	str	r4, [r6, #4]
  4090fc:	2100      	movs	r1, #0
  4090fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409102:	4618      	mov	r0, r3
  409104:	e6f8      	b.n	408ef8 <__udivmoddi4+0x98>
  409106:	4690      	mov	r8, r2
  409108:	e6e0      	b.n	408ecc <__udivmoddi4+0x6c>
  40910a:	45c2      	cmp	sl, r8
  40910c:	d2ea      	bcs.n	4090e4 <__udivmoddi4+0x284>
  40910e:	ebb8 0e02 	subs.w	lr, r8, r2
  409112:	eb69 0503 	sbc.w	r5, r9, r3
  409116:	3801      	subs	r0, #1
  409118:	e7e4      	b.n	4090e4 <__udivmoddi4+0x284>
  40911a:	4628      	mov	r0, r5
  40911c:	e7d7      	b.n	4090ce <__udivmoddi4+0x26e>
  40911e:	4640      	mov	r0, r8
  409120:	e791      	b.n	409046 <__udivmoddi4+0x1e6>
  409122:	4681      	mov	r9, r0
  409124:	e7be      	b.n	4090a4 <__udivmoddi4+0x244>
  409126:	4601      	mov	r1, r0
  409128:	e778      	b.n	40901c <__udivmoddi4+0x1bc>
  40912a:	3802      	subs	r0, #2
  40912c:	443c      	add	r4, r7
  40912e:	e745      	b.n	408fbc <__udivmoddi4+0x15c>
  409130:	4608      	mov	r0, r1
  409132:	e708      	b.n	408f46 <__udivmoddi4+0xe6>
  409134:	f1a8 0802 	sub.w	r8, r8, #2
  409138:	443d      	add	r5, r7
  40913a:	e72b      	b.n	408f94 <__udivmoddi4+0x134>

0040913c <__aeabi_idiv0>:
  40913c:	4770      	bx	lr
  40913e:	bf00      	nop
  409140:	454c4449 	.word	0x454c4449
  409144:	00000000 	.word	0x00000000
  409148:	51726d54 	.word	0x51726d54
  40914c:	00000000 	.word	0x00000000
  409150:	20726d54 	.word	0x20726d54
  409154:	00637653 	.word	0x00637653
  409158:	00005441 	.word	0x00005441
  40915c:	4e2b5441 	.word	0x4e2b5441
  409160:	47454d41 	.word	0x47454d41
  409164:	72726575 	.word	0x72726575
  409168:	6f726965 	.word	0x6f726965
  40916c:	00000073 	.word	0x00000073
  409170:	502b5441 	.word	0x502b5441
  409174:	32314e49 	.word	0x32314e49
  409178:	00003433 	.word	0x00003433
  40917c:	00544c42 	.word	0x00544c42
  409180:	686c6166 	.word	0x686c6166
  409184:	6d652061 	.word	0x6d652061
  409188:	69726320 	.word	0x69726320
  40918c:	61207261 	.word	0x61207261
  409190:	65757120 	.word	0x65757120
  409194:	78206575 	.word	0x78206575
  409198:	75657551 	.word	0x75657551
  40919c:	31587865 	.word	0x31587865
  4091a0:	00000000 	.word	0x00000000
  4091a4:	686c6166 	.word	0x686c6166
  4091a8:	6d652061 	.word	0x6d652061
  4091ac:	69726320 	.word	0x69726320
  4091b0:	61207261 	.word	0x61207261
  4091b4:	65757120 	.word	0x65757120
  4091b8:	78206575 	.word	0x78206575
  4091bc:	75657551 	.word	0x75657551
  4091c0:	20315965 	.word	0x20315965
  4091c4:	00000000 	.word	0x00000000
  4091c8:	686c6166 	.word	0x686c6166
  4091cc:	6d652061 	.word	0x6d652061
  4091d0:	69726320 	.word	0x69726320
  4091d4:	61207261 	.word	0x61207261
  4091d8:	65757120 	.word	0x65757120
  4091dc:	78206575 	.word	0x78206575
  4091e0:	75657551 	.word	0x75657551
  4091e4:	74754265 	.word	0x74754265
  4091e8:	00000020 	.word	0x00000020
  4091ec:	636f7270 	.word	0x636f7270
  4091f0:	00000000 	.word	0x00000000
  4091f4:	6c696146 	.word	0x6c696146
  4091f8:	74206465 	.word	0x74206465
  4091fc:	7263206f 	.word	0x7263206f
  409200:	65746165 	.word	0x65746165
  409204:	73657420 	.word	0x73657420
  409208:	44412074 	.word	0x44412074
  40920c:	61742043 	.word	0x61742043
  409210:	000d6b73 	.word	0x000d6b73
  409214:	636f7270 	.word	0x636f7270
  409218:	00000032 	.word	0x00000032
  40921c:	0a206425 	.word	0x0a206425
  409220:	00000000 	.word	0x00000000
  409224:	6b736154 	.word	0x6b736154
  409228:	756c4220 	.word	0x756c4220
  40922c:	6f6f7465 	.word	0x6f6f7465
  409230:	73206874 	.word	0x73206874
  409234:	74726174 	.word	0x74726174
  409238:	00206465 	.word	0x00206465
  40923c:	63696e49 	.word	0x63696e49
  409240:	696c6169 	.word	0x696c6169
  409244:	646e617a 	.word	0x646e617a
  409248:	4348206f 	.word	0x4348206f
  40924c:	00203530 	.word	0x00203530
  409250:	63617473 	.word	0x63617473
  409254:	766f206b 	.word	0x766f206b
  409258:	6c667265 	.word	0x6c667265
  40925c:	2520776f 	.word	0x2520776f
  409260:	73252078 	.word	0x73252078
  409264:	00000a0d 	.word	0x00000a0d

00409268 <_global_impure_ptr>:
  409268:	20400010 0000000a 00464e49 00666e69     ..@ ....INF.inf.
  409278:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  409288:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  409298:	37363534 62613938 66656463 00000000     456789abcdef....
  4092a8:	6c756e28 0000296c 00000030              (null)..0...

004092b4 <blanks.7238>:
  4092b4:	20202020 20202020 20202020 20202020                     

004092c4 <zeroes.7239>:
  4092c4:	30303030 30303030 30303030 30303030     0000000000000000
  4092d4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  4092e4:	00000000                                ....

004092e8 <__mprec_bigtens>:
  4092e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4092f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409308:	7f73bf3c 75154fdd                       <.s..O.u

00409310 <__mprec_tens>:
  409310:	00000000 3ff00000 00000000 40240000     .......?......$@
  409320:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409330:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409340:	00000000 412e8480 00000000 416312d0     .......A......cA
  409350:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409360:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409370:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409380:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409390:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4093a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4093b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4093c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4093d0:	79d99db4 44ea7843                       ...yCx.D

004093d8 <p05.6055>:
  4093d8:	00000005 00000019 0000007d 00000043     ........}...C...
  4093e8:	49534f50 00000058 0000002e              POSIX.......

004093f4 <_ctype_>:
  4093f4:	20202000 20202020 28282020 20282828     .         ((((( 
  409404:	20202020 20202020 20202020 20202020                     
  409414:	10108820 10101010 10101010 10101010      ...............
  409424:	04040410 04040404 10040404 10101010     ................
  409434:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409444:	01010101 01010101 01010101 10101010     ................
  409454:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409464:	02020202 02020202 02020202 10101010     ................
  409474:	00000020 00000000 00000000 00000000      ...............
	...

004094f8 <_init>:
  4094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4094fa:	bf00      	nop
  4094fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4094fe:	bc08      	pop	{r3}
  409500:	469e      	mov	lr, r3
  409502:	4770      	bx	lr

00409504 <__init_array_start>:
  409504:	00405b01 	.word	0x00405b01

00409508 <__frame_dummy_init_array_entry>:
  409508:	00400165                                e.@.

0040950c <_fini>:
  40950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40950e:	bf00      	nop
  409510:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409512:	bc08      	pop	{r3}
  409514:	469e      	mov	lr, r3
  409516:	4770      	bx	lr

00409518 <__fini_array_start>:
  409518:	00400141 	.word	0x00400141
